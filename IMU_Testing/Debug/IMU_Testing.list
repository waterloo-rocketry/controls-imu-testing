
IMU_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087b8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08008878  08008878  00009878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c1c  08008c1c  0000a00c  2**0
                  CONTENTS
  4 .ARM          00000008  08008c1c  08008c1c  00009c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c24  08008c24  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c24  08008c24  00009c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c28  08008c28  00009c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08008c2c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000000c  08008c38  0000a00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08008c38  0000a18c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c97e  00000000  00000000  0000a034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b75  00000000  00000000  000169b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  00018528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000089a  00000000  00000000  00019018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014e15  00000000  00000000  000198b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e803  00000000  00000000  0002e6c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f8fd  00000000  00000000  0003ceca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc7c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b68  00000000  00000000  000bc80c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000bf374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008860 	.word	0x08008860

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08008860 	.word	0x08008860

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_cdrcmple>:
 8000230:	4684      	mov	ip, r0
 8000232:	0010      	movs	r0, r2
 8000234:	4662      	mov	r2, ip
 8000236:	468c      	mov	ip, r1
 8000238:	0019      	movs	r1, r3
 800023a:	4663      	mov	r3, ip
 800023c:	e000      	b.n	8000240 <__aeabi_cdcmpeq>
 800023e:	46c0      	nop			@ (mov r8, r8)

08000240 <__aeabi_cdcmpeq>:
 8000240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000242:	f001 f915 	bl	8001470 <__ledf2>
 8000246:	2800      	cmp	r0, #0
 8000248:	d401      	bmi.n	800024e <__aeabi_cdcmpeq+0xe>
 800024a:	2100      	movs	r1, #0
 800024c:	42c8      	cmn	r0, r1
 800024e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000250 <__aeabi_dcmpeq>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f001 f855 	bl	8001300 <__eqdf2>
 8000256:	4240      	negs	r0, r0
 8000258:	3001      	adds	r0, #1
 800025a:	bd10      	pop	{r4, pc}

0800025c <__aeabi_dcmplt>:
 800025c:	b510      	push	{r4, lr}
 800025e:	f001 f907 	bl	8001470 <__ledf2>
 8000262:	2800      	cmp	r0, #0
 8000264:	db01      	blt.n	800026a <__aeabi_dcmplt+0xe>
 8000266:	2000      	movs	r0, #0
 8000268:	bd10      	pop	{r4, pc}
 800026a:	2001      	movs	r0, #1
 800026c:	bd10      	pop	{r4, pc}
 800026e:	46c0      	nop			@ (mov r8, r8)

08000270 <__aeabi_dcmple>:
 8000270:	b510      	push	{r4, lr}
 8000272:	f001 f8fd 	bl	8001470 <__ledf2>
 8000276:	2800      	cmp	r0, #0
 8000278:	dd01      	ble.n	800027e <__aeabi_dcmple+0xe>
 800027a:	2000      	movs	r0, #0
 800027c:	bd10      	pop	{r4, pc}
 800027e:	2001      	movs	r0, #1
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__aeabi_dcmpgt>:
 8000284:	b510      	push	{r4, lr}
 8000286:	f001 f87f 	bl	8001388 <__gedf2>
 800028a:	2800      	cmp	r0, #0
 800028c:	dc01      	bgt.n	8000292 <__aeabi_dcmpgt+0xe>
 800028e:	2000      	movs	r0, #0
 8000290:	bd10      	pop	{r4, pc}
 8000292:	2001      	movs	r0, #1
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			@ (mov r8, r8)

08000298 <__aeabi_dcmpge>:
 8000298:	b510      	push	{r4, lr}
 800029a:	f001 f875 	bl	8001388 <__gedf2>
 800029e:	2800      	cmp	r0, #0
 80002a0:	da01      	bge.n	80002a6 <__aeabi_dcmpge+0xe>
 80002a2:	2000      	movs	r0, #0
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	2001      	movs	r0, #1
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	46c0      	nop			@ (mov r8, r8)

080002ac <__aeabi_ldivmod>:
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d115      	bne.n	80002dc <__aeabi_ldivmod+0x30>
 80002b0:	2a00      	cmp	r2, #0
 80002b2:	d113      	bne.n	80002dc <__aeabi_ldivmod+0x30>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	db06      	blt.n	80002c6 <__aeabi_ldivmod+0x1a>
 80002b8:	dc01      	bgt.n	80002be <__aeabi_ldivmod+0x12>
 80002ba:	2800      	cmp	r0, #0
 80002bc:	d006      	beq.n	80002cc <__aeabi_ldivmod+0x20>
 80002be:	2000      	movs	r0, #0
 80002c0:	43c0      	mvns	r0, r0
 80002c2:	0841      	lsrs	r1, r0, #1
 80002c4:	e002      	b.n	80002cc <__aeabi_ldivmod+0x20>
 80002c6:	2180      	movs	r1, #128	@ 0x80
 80002c8:	0609      	lsls	r1, r1, #24
 80002ca:	2000      	movs	r0, #0
 80002cc:	b407      	push	{r0, r1, r2}
 80002ce:	4802      	ldr	r0, [pc, #8]	@ (80002d8 <__aeabi_ldivmod+0x2c>)
 80002d0:	a101      	add	r1, pc, #4	@ (adr r1, 80002d8 <__aeabi_ldivmod+0x2c>)
 80002d2:	1840      	adds	r0, r0, r1
 80002d4:	9002      	str	r0, [sp, #8]
 80002d6:	bd03      	pop	{r0, r1, pc}
 80002d8:	ffffff55 	.word	0xffffff55
 80002dc:	b403      	push	{r0, r1}
 80002de:	4668      	mov	r0, sp
 80002e0:	b501      	push	{r0, lr}
 80002e2:	9802      	ldr	r0, [sp, #8]
 80002e4:	f000 f970 	bl	80005c8 <__gnu_ldivmod_helper>
 80002e8:	9b01      	ldr	r3, [sp, #4]
 80002ea:	469e      	mov	lr, r3
 80002ec:	b002      	add	sp, #8
 80002ee:	bc0c      	pop	{r2, r3}
 80002f0:	4770      	bx	lr
 80002f2:	46c0      	nop			@ (mov r8, r8)

080002f4 <__aeabi_uldivmod>:
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d111      	bne.n	800031c <__aeabi_uldivmod+0x28>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	d10f      	bne.n	800031c <__aeabi_uldivmod+0x28>
 80002fc:	2900      	cmp	r1, #0
 80002fe:	d100      	bne.n	8000302 <__aeabi_uldivmod+0xe>
 8000300:	2800      	cmp	r0, #0
 8000302:	d002      	beq.n	800030a <__aeabi_uldivmod+0x16>
 8000304:	2100      	movs	r1, #0
 8000306:	43c9      	mvns	r1, r1
 8000308:	0008      	movs	r0, r1
 800030a:	b407      	push	{r0, r1, r2}
 800030c:	4802      	ldr	r0, [pc, #8]	@ (8000318 <__aeabi_uldivmod+0x24>)
 800030e:	a102      	add	r1, pc, #8	@ (adr r1, 8000318 <__aeabi_uldivmod+0x24>)
 8000310:	1840      	adds	r0, r0, r1
 8000312:	9002      	str	r0, [sp, #8]
 8000314:	bd03      	pop	{r0, r1, pc}
 8000316:	46c0      	nop			@ (mov r8, r8)
 8000318:	ffffff15 	.word	0xffffff15
 800031c:	b403      	push	{r0, r1}
 800031e:	4668      	mov	r0, sp
 8000320:	b501      	push	{r0, lr}
 8000322:	9802      	ldr	r0, [sp, #8]
 8000324:	f000 f884 	bl	8000430 <__udivmoddi4>
 8000328:	9b01      	ldr	r3, [sp, #4]
 800032a:	469e      	mov	lr, r3
 800032c:	b002      	add	sp, #8
 800032e:	bc0c      	pop	{r2, r3}
 8000330:	4770      	bx	lr
 8000332:	46c0      	nop			@ (mov r8, r8)

08000334 <__aeabi_lmul>:
 8000334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000336:	46ce      	mov	lr, r9
 8000338:	4699      	mov	r9, r3
 800033a:	0c03      	lsrs	r3, r0, #16
 800033c:	469c      	mov	ip, r3
 800033e:	0413      	lsls	r3, r2, #16
 8000340:	4647      	mov	r7, r8
 8000342:	0c1b      	lsrs	r3, r3, #16
 8000344:	001d      	movs	r5, r3
 8000346:	000e      	movs	r6, r1
 8000348:	4661      	mov	r1, ip
 800034a:	0404      	lsls	r4, r0, #16
 800034c:	0c24      	lsrs	r4, r4, #16
 800034e:	b580      	push	{r7, lr}
 8000350:	0007      	movs	r7, r0
 8000352:	0c10      	lsrs	r0, r2, #16
 8000354:	434b      	muls	r3, r1
 8000356:	4365      	muls	r5, r4
 8000358:	4341      	muls	r1, r0
 800035a:	4360      	muls	r0, r4
 800035c:	0c2c      	lsrs	r4, r5, #16
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	1824      	adds	r4, r4, r0
 8000362:	468c      	mov	ip, r1
 8000364:	42a3      	cmp	r3, r4
 8000366:	d903      	bls.n	8000370 <__aeabi_lmul+0x3c>
 8000368:	2380      	movs	r3, #128	@ 0x80
 800036a:	025b      	lsls	r3, r3, #9
 800036c:	4698      	mov	r8, r3
 800036e:	44c4      	add	ip, r8
 8000370:	4649      	mov	r1, r9
 8000372:	4379      	muls	r1, r7
 8000374:	4356      	muls	r6, r2
 8000376:	0c23      	lsrs	r3, r4, #16
 8000378:	042d      	lsls	r5, r5, #16
 800037a:	0c2d      	lsrs	r5, r5, #16
 800037c:	1989      	adds	r1, r1, r6
 800037e:	4463      	add	r3, ip
 8000380:	0424      	lsls	r4, r4, #16
 8000382:	1960      	adds	r0, r4, r5
 8000384:	18c9      	adds	r1, r1, r3
 8000386:	bcc0      	pop	{r6, r7}
 8000388:	46b9      	mov	r9, r7
 800038a:	46b0      	mov	r8, r6
 800038c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800038e:	46c0      	nop			@ (mov r8, r8)

08000390 <__aeabi_d2lz>:
 8000390:	b570      	push	{r4, r5, r6, lr}
 8000392:	2200      	movs	r2, #0
 8000394:	2300      	movs	r3, #0
 8000396:	0004      	movs	r4, r0
 8000398:	000d      	movs	r5, r1
 800039a:	f7ff ff5f 	bl	800025c <__aeabi_dcmplt>
 800039e:	2800      	cmp	r0, #0
 80003a0:	d108      	bne.n	80003b4 <__aeabi_d2lz+0x24>
 80003a2:	0020      	movs	r0, r4
 80003a4:	0029      	movs	r1, r5
 80003a6:	f000 f80f 	bl	80003c8 <__aeabi_d2ulz>
 80003aa:	0002      	movs	r2, r0
 80003ac:	000b      	movs	r3, r1
 80003ae:	0010      	movs	r0, r2
 80003b0:	0019      	movs	r1, r3
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	2380      	movs	r3, #128	@ 0x80
 80003b6:	061b      	lsls	r3, r3, #24
 80003b8:	18e9      	adds	r1, r5, r3
 80003ba:	0020      	movs	r0, r4
 80003bc:	f000 f804 	bl	80003c8 <__aeabi_d2ulz>
 80003c0:	2300      	movs	r3, #0
 80003c2:	4242      	negs	r2, r0
 80003c4:	418b      	sbcs	r3, r1
 80003c6:	e7f2      	b.n	80003ae <__aeabi_d2lz+0x1e>

080003c8 <__aeabi_d2ulz>:
 80003c8:	b570      	push	{r4, r5, r6, lr}
 80003ca:	2200      	movs	r2, #0
 80003cc:	4b0b      	ldr	r3, [pc, #44]	@ (80003fc <__aeabi_d2ulz+0x34>)
 80003ce:	000d      	movs	r5, r1
 80003d0:	0004      	movs	r4, r0
 80003d2:	f001 f8bf 	bl	8001554 <__aeabi_dmul>
 80003d6:	f002 f8a5 	bl	8002524 <__aeabi_d2uiz>
 80003da:	0006      	movs	r6, r0
 80003dc:	f001 ff88 	bl	80022f0 <__aeabi_ui2d>
 80003e0:	2200      	movs	r2, #0
 80003e2:	4b07      	ldr	r3, [pc, #28]	@ (8000400 <__aeabi_d2ulz+0x38>)
 80003e4:	f001 f8b6 	bl	8001554 <__aeabi_dmul>
 80003e8:	0002      	movs	r2, r0
 80003ea:	000b      	movs	r3, r1
 80003ec:	0020      	movs	r0, r4
 80003ee:	0029      	movs	r1, r5
 80003f0:	f001 fb78 	bl	8001ae4 <__aeabi_dsub>
 80003f4:	f002 f896 	bl	8002524 <__aeabi_d2uiz>
 80003f8:	0031      	movs	r1, r6
 80003fa:	bd70      	pop	{r4, r5, r6, pc}
 80003fc:	3df00000 	.word	0x3df00000
 8000400:	41f00000 	.word	0x41f00000

08000404 <__aeabi_l2d>:
 8000404:	b570      	push	{r4, r5, r6, lr}
 8000406:	0006      	movs	r6, r0
 8000408:	0008      	movs	r0, r1
 800040a:	f001 ff43 	bl	8002294 <__aeabi_i2d>
 800040e:	2200      	movs	r2, #0
 8000410:	4b06      	ldr	r3, [pc, #24]	@ (800042c <__aeabi_l2d+0x28>)
 8000412:	f001 f89f 	bl	8001554 <__aeabi_dmul>
 8000416:	000d      	movs	r5, r1
 8000418:	0004      	movs	r4, r0
 800041a:	0030      	movs	r0, r6
 800041c:	f001 ff68 	bl	80022f0 <__aeabi_ui2d>
 8000420:	002b      	movs	r3, r5
 8000422:	0022      	movs	r2, r4
 8000424:	f000 f8ee 	bl	8000604 <__aeabi_dadd>
 8000428:	bd70      	pop	{r4, r5, r6, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)
 800042c:	41f00000 	.word	0x41f00000

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f002 f85c 	bl	800250c <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f002 f857 	bl	800250c <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__gnu_ldivmod_helper>:
 80005c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ca:	46ce      	mov	lr, r9
 80005cc:	4647      	mov	r7, r8
 80005ce:	b580      	push	{r7, lr}
 80005d0:	4691      	mov	r9, r2
 80005d2:	4698      	mov	r8, r3
 80005d4:	0004      	movs	r4, r0
 80005d6:	000d      	movs	r5, r1
 80005d8:	f001 ffc2 	bl	8002560 <__divdi3>
 80005dc:	0007      	movs	r7, r0
 80005de:	000e      	movs	r6, r1
 80005e0:	0002      	movs	r2, r0
 80005e2:	000b      	movs	r3, r1
 80005e4:	4648      	mov	r0, r9
 80005e6:	4641      	mov	r1, r8
 80005e8:	f7ff fea4 	bl	8000334 <__aeabi_lmul>
 80005ec:	1a24      	subs	r4, r4, r0
 80005ee:	418d      	sbcs	r5, r1
 80005f0:	9b08      	ldr	r3, [sp, #32]
 80005f2:	0038      	movs	r0, r7
 80005f4:	0031      	movs	r1, r6
 80005f6:	601c      	str	r4, [r3, #0]
 80005f8:	605d      	str	r5, [r3, #4]
 80005fa:	bcc0      	pop	{r6, r7}
 80005fc:	46b9      	mov	r9, r7
 80005fe:	46b0      	mov	r8, r6
 8000600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000602:	46c0      	nop			@ (mov r8, r8)

08000604 <__aeabi_dadd>:
 8000604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000606:	4657      	mov	r7, sl
 8000608:	464e      	mov	r6, r9
 800060a:	4645      	mov	r5, r8
 800060c:	46de      	mov	lr, fp
 800060e:	b5e0      	push	{r5, r6, r7, lr}
 8000610:	b083      	sub	sp, #12
 8000612:	9000      	str	r0, [sp, #0]
 8000614:	9101      	str	r1, [sp, #4]
 8000616:	030c      	lsls	r4, r1, #12
 8000618:	004f      	lsls	r7, r1, #1
 800061a:	0fce      	lsrs	r6, r1, #31
 800061c:	0a61      	lsrs	r1, r4, #9
 800061e:	9c00      	ldr	r4, [sp, #0]
 8000620:	031d      	lsls	r5, r3, #12
 8000622:	0f64      	lsrs	r4, r4, #29
 8000624:	430c      	orrs	r4, r1
 8000626:	9900      	ldr	r1, [sp, #0]
 8000628:	9200      	str	r2, [sp, #0]
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	00c8      	lsls	r0, r1, #3
 800062e:	0059      	lsls	r1, r3, #1
 8000630:	0d4b      	lsrs	r3, r1, #21
 8000632:	4699      	mov	r9, r3
 8000634:	9a00      	ldr	r2, [sp, #0]
 8000636:	9b01      	ldr	r3, [sp, #4]
 8000638:	0a6d      	lsrs	r5, r5, #9
 800063a:	0fd9      	lsrs	r1, r3, #31
 800063c:	0f53      	lsrs	r3, r2, #29
 800063e:	432b      	orrs	r3, r5
 8000640:	469a      	mov	sl, r3
 8000642:	9b00      	ldr	r3, [sp, #0]
 8000644:	0d7f      	lsrs	r7, r7, #21
 8000646:	00da      	lsls	r2, r3, #3
 8000648:	4694      	mov	ip, r2
 800064a:	464a      	mov	r2, r9
 800064c:	46b0      	mov	r8, r6
 800064e:	1aba      	subs	r2, r7, r2
 8000650:	428e      	cmp	r6, r1
 8000652:	d100      	bne.n	8000656 <__aeabi_dadd+0x52>
 8000654:	e0b0      	b.n	80007b8 <__aeabi_dadd+0x1b4>
 8000656:	2a00      	cmp	r2, #0
 8000658:	dc00      	bgt.n	800065c <__aeabi_dadd+0x58>
 800065a:	e078      	b.n	800074e <__aeabi_dadd+0x14a>
 800065c:	4649      	mov	r1, r9
 800065e:	2900      	cmp	r1, #0
 8000660:	d100      	bne.n	8000664 <__aeabi_dadd+0x60>
 8000662:	e0e9      	b.n	8000838 <__aeabi_dadd+0x234>
 8000664:	49c9      	ldr	r1, [pc, #804]	@ (800098c <__aeabi_dadd+0x388>)
 8000666:	428f      	cmp	r7, r1
 8000668:	d100      	bne.n	800066c <__aeabi_dadd+0x68>
 800066a:	e195      	b.n	8000998 <__aeabi_dadd+0x394>
 800066c:	2501      	movs	r5, #1
 800066e:	2a38      	cmp	r2, #56	@ 0x38
 8000670:	dc16      	bgt.n	80006a0 <__aeabi_dadd+0x9c>
 8000672:	2180      	movs	r1, #128	@ 0x80
 8000674:	4653      	mov	r3, sl
 8000676:	0409      	lsls	r1, r1, #16
 8000678:	430b      	orrs	r3, r1
 800067a:	469a      	mov	sl, r3
 800067c:	2a1f      	cmp	r2, #31
 800067e:	dd00      	ble.n	8000682 <__aeabi_dadd+0x7e>
 8000680:	e1e7      	b.n	8000a52 <__aeabi_dadd+0x44e>
 8000682:	2120      	movs	r1, #32
 8000684:	4655      	mov	r5, sl
 8000686:	1a8b      	subs	r3, r1, r2
 8000688:	4661      	mov	r1, ip
 800068a:	409d      	lsls	r5, r3
 800068c:	40d1      	lsrs	r1, r2
 800068e:	430d      	orrs	r5, r1
 8000690:	4661      	mov	r1, ip
 8000692:	4099      	lsls	r1, r3
 8000694:	1e4b      	subs	r3, r1, #1
 8000696:	4199      	sbcs	r1, r3
 8000698:	4653      	mov	r3, sl
 800069a:	40d3      	lsrs	r3, r2
 800069c:	430d      	orrs	r5, r1
 800069e:	1ae4      	subs	r4, r4, r3
 80006a0:	1b45      	subs	r5, r0, r5
 80006a2:	42a8      	cmp	r0, r5
 80006a4:	4180      	sbcs	r0, r0
 80006a6:	4240      	negs	r0, r0
 80006a8:	1a24      	subs	r4, r4, r0
 80006aa:	0223      	lsls	r3, r4, #8
 80006ac:	d400      	bmi.n	80006b0 <__aeabi_dadd+0xac>
 80006ae:	e10f      	b.n	80008d0 <__aeabi_dadd+0x2cc>
 80006b0:	0264      	lsls	r4, r4, #9
 80006b2:	0a64      	lsrs	r4, r4, #9
 80006b4:	2c00      	cmp	r4, #0
 80006b6:	d100      	bne.n	80006ba <__aeabi_dadd+0xb6>
 80006b8:	e139      	b.n	800092e <__aeabi_dadd+0x32a>
 80006ba:	0020      	movs	r0, r4
 80006bc:	f001 ff08 	bl	80024d0 <__clzsi2>
 80006c0:	0003      	movs	r3, r0
 80006c2:	3b08      	subs	r3, #8
 80006c4:	2120      	movs	r1, #32
 80006c6:	0028      	movs	r0, r5
 80006c8:	1aca      	subs	r2, r1, r3
 80006ca:	40d0      	lsrs	r0, r2
 80006cc:	409c      	lsls	r4, r3
 80006ce:	0002      	movs	r2, r0
 80006d0:	409d      	lsls	r5, r3
 80006d2:	4322      	orrs	r2, r4
 80006d4:	429f      	cmp	r7, r3
 80006d6:	dd00      	ble.n	80006da <__aeabi_dadd+0xd6>
 80006d8:	e173      	b.n	80009c2 <__aeabi_dadd+0x3be>
 80006da:	1bd8      	subs	r0, r3, r7
 80006dc:	3001      	adds	r0, #1
 80006de:	1a09      	subs	r1, r1, r0
 80006e0:	002c      	movs	r4, r5
 80006e2:	408d      	lsls	r5, r1
 80006e4:	40c4      	lsrs	r4, r0
 80006e6:	1e6b      	subs	r3, r5, #1
 80006e8:	419d      	sbcs	r5, r3
 80006ea:	0013      	movs	r3, r2
 80006ec:	40c2      	lsrs	r2, r0
 80006ee:	408b      	lsls	r3, r1
 80006f0:	4325      	orrs	r5, r4
 80006f2:	2700      	movs	r7, #0
 80006f4:	0014      	movs	r4, r2
 80006f6:	431d      	orrs	r5, r3
 80006f8:	076b      	lsls	r3, r5, #29
 80006fa:	d009      	beq.n	8000710 <__aeabi_dadd+0x10c>
 80006fc:	230f      	movs	r3, #15
 80006fe:	402b      	ands	r3, r5
 8000700:	2b04      	cmp	r3, #4
 8000702:	d005      	beq.n	8000710 <__aeabi_dadd+0x10c>
 8000704:	1d2b      	adds	r3, r5, #4
 8000706:	42ab      	cmp	r3, r5
 8000708:	41ad      	sbcs	r5, r5
 800070a:	426d      	negs	r5, r5
 800070c:	1964      	adds	r4, r4, r5
 800070e:	001d      	movs	r5, r3
 8000710:	0223      	lsls	r3, r4, #8
 8000712:	d400      	bmi.n	8000716 <__aeabi_dadd+0x112>
 8000714:	e12d      	b.n	8000972 <__aeabi_dadd+0x36e>
 8000716:	4a9d      	ldr	r2, [pc, #628]	@ (800098c <__aeabi_dadd+0x388>)
 8000718:	3701      	adds	r7, #1
 800071a:	4297      	cmp	r7, r2
 800071c:	d100      	bne.n	8000720 <__aeabi_dadd+0x11c>
 800071e:	e0d3      	b.n	80008c8 <__aeabi_dadd+0x2c4>
 8000720:	4646      	mov	r6, r8
 8000722:	499b      	ldr	r1, [pc, #620]	@ (8000990 <__aeabi_dadd+0x38c>)
 8000724:	08ed      	lsrs	r5, r5, #3
 8000726:	4021      	ands	r1, r4
 8000728:	074a      	lsls	r2, r1, #29
 800072a:	432a      	orrs	r2, r5
 800072c:	057c      	lsls	r4, r7, #21
 800072e:	024d      	lsls	r5, r1, #9
 8000730:	0b2d      	lsrs	r5, r5, #12
 8000732:	0d64      	lsrs	r4, r4, #21
 8000734:	0524      	lsls	r4, r4, #20
 8000736:	432c      	orrs	r4, r5
 8000738:	07f6      	lsls	r6, r6, #31
 800073a:	4334      	orrs	r4, r6
 800073c:	0010      	movs	r0, r2
 800073e:	0021      	movs	r1, r4
 8000740:	b003      	add	sp, #12
 8000742:	bcf0      	pop	{r4, r5, r6, r7}
 8000744:	46bb      	mov	fp, r7
 8000746:	46b2      	mov	sl, r6
 8000748:	46a9      	mov	r9, r5
 800074a:	46a0      	mov	r8, r4
 800074c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800074e:	2a00      	cmp	r2, #0
 8000750:	d100      	bne.n	8000754 <__aeabi_dadd+0x150>
 8000752:	e084      	b.n	800085e <__aeabi_dadd+0x25a>
 8000754:	464a      	mov	r2, r9
 8000756:	1bd2      	subs	r2, r2, r7
 8000758:	2f00      	cmp	r7, #0
 800075a:	d000      	beq.n	800075e <__aeabi_dadd+0x15a>
 800075c:	e16d      	b.n	8000a3a <__aeabi_dadd+0x436>
 800075e:	0025      	movs	r5, r4
 8000760:	4305      	orrs	r5, r0
 8000762:	d100      	bne.n	8000766 <__aeabi_dadd+0x162>
 8000764:	e127      	b.n	80009b6 <__aeabi_dadd+0x3b2>
 8000766:	1e56      	subs	r6, r2, #1
 8000768:	2a01      	cmp	r2, #1
 800076a:	d100      	bne.n	800076e <__aeabi_dadd+0x16a>
 800076c:	e23b      	b.n	8000be6 <__aeabi_dadd+0x5e2>
 800076e:	4d87      	ldr	r5, [pc, #540]	@ (800098c <__aeabi_dadd+0x388>)
 8000770:	42aa      	cmp	r2, r5
 8000772:	d100      	bne.n	8000776 <__aeabi_dadd+0x172>
 8000774:	e26a      	b.n	8000c4c <__aeabi_dadd+0x648>
 8000776:	2501      	movs	r5, #1
 8000778:	2e38      	cmp	r6, #56	@ 0x38
 800077a:	dc12      	bgt.n	80007a2 <__aeabi_dadd+0x19e>
 800077c:	0032      	movs	r2, r6
 800077e:	2a1f      	cmp	r2, #31
 8000780:	dd00      	ble.n	8000784 <__aeabi_dadd+0x180>
 8000782:	e1f8      	b.n	8000b76 <__aeabi_dadd+0x572>
 8000784:	2620      	movs	r6, #32
 8000786:	0025      	movs	r5, r4
 8000788:	1ab6      	subs	r6, r6, r2
 800078a:	0007      	movs	r7, r0
 800078c:	4653      	mov	r3, sl
 800078e:	40b0      	lsls	r0, r6
 8000790:	40d4      	lsrs	r4, r2
 8000792:	40b5      	lsls	r5, r6
 8000794:	40d7      	lsrs	r7, r2
 8000796:	1e46      	subs	r6, r0, #1
 8000798:	41b0      	sbcs	r0, r6
 800079a:	1b1b      	subs	r3, r3, r4
 800079c:	469a      	mov	sl, r3
 800079e:	433d      	orrs	r5, r7
 80007a0:	4305      	orrs	r5, r0
 80007a2:	4662      	mov	r2, ip
 80007a4:	1b55      	subs	r5, r2, r5
 80007a6:	45ac      	cmp	ip, r5
 80007a8:	4192      	sbcs	r2, r2
 80007aa:	4653      	mov	r3, sl
 80007ac:	4252      	negs	r2, r2
 80007ae:	000e      	movs	r6, r1
 80007b0:	464f      	mov	r7, r9
 80007b2:	4688      	mov	r8, r1
 80007b4:	1a9c      	subs	r4, r3, r2
 80007b6:	e778      	b.n	80006aa <__aeabi_dadd+0xa6>
 80007b8:	2a00      	cmp	r2, #0
 80007ba:	dc00      	bgt.n	80007be <__aeabi_dadd+0x1ba>
 80007bc:	e08e      	b.n	80008dc <__aeabi_dadd+0x2d8>
 80007be:	4649      	mov	r1, r9
 80007c0:	2900      	cmp	r1, #0
 80007c2:	d175      	bne.n	80008b0 <__aeabi_dadd+0x2ac>
 80007c4:	4661      	mov	r1, ip
 80007c6:	4653      	mov	r3, sl
 80007c8:	4319      	orrs	r1, r3
 80007ca:	d100      	bne.n	80007ce <__aeabi_dadd+0x1ca>
 80007cc:	e0f6      	b.n	80009bc <__aeabi_dadd+0x3b8>
 80007ce:	1e51      	subs	r1, r2, #1
 80007d0:	2a01      	cmp	r2, #1
 80007d2:	d100      	bne.n	80007d6 <__aeabi_dadd+0x1d2>
 80007d4:	e191      	b.n	8000afa <__aeabi_dadd+0x4f6>
 80007d6:	4d6d      	ldr	r5, [pc, #436]	@ (800098c <__aeabi_dadd+0x388>)
 80007d8:	42aa      	cmp	r2, r5
 80007da:	d100      	bne.n	80007de <__aeabi_dadd+0x1da>
 80007dc:	e0dc      	b.n	8000998 <__aeabi_dadd+0x394>
 80007de:	2501      	movs	r5, #1
 80007e0:	2938      	cmp	r1, #56	@ 0x38
 80007e2:	dc14      	bgt.n	800080e <__aeabi_dadd+0x20a>
 80007e4:	000a      	movs	r2, r1
 80007e6:	2a1f      	cmp	r2, #31
 80007e8:	dd00      	ble.n	80007ec <__aeabi_dadd+0x1e8>
 80007ea:	e1a2      	b.n	8000b32 <__aeabi_dadd+0x52e>
 80007ec:	2120      	movs	r1, #32
 80007ee:	4653      	mov	r3, sl
 80007f0:	1a89      	subs	r1, r1, r2
 80007f2:	408b      	lsls	r3, r1
 80007f4:	001d      	movs	r5, r3
 80007f6:	4663      	mov	r3, ip
 80007f8:	40d3      	lsrs	r3, r2
 80007fa:	431d      	orrs	r5, r3
 80007fc:	4663      	mov	r3, ip
 80007fe:	408b      	lsls	r3, r1
 8000800:	0019      	movs	r1, r3
 8000802:	1e4b      	subs	r3, r1, #1
 8000804:	4199      	sbcs	r1, r3
 8000806:	4653      	mov	r3, sl
 8000808:	40d3      	lsrs	r3, r2
 800080a:	430d      	orrs	r5, r1
 800080c:	18e4      	adds	r4, r4, r3
 800080e:	182d      	adds	r5, r5, r0
 8000810:	4285      	cmp	r5, r0
 8000812:	4180      	sbcs	r0, r0
 8000814:	4240      	negs	r0, r0
 8000816:	1824      	adds	r4, r4, r0
 8000818:	0223      	lsls	r3, r4, #8
 800081a:	d559      	bpl.n	80008d0 <__aeabi_dadd+0x2cc>
 800081c:	4b5b      	ldr	r3, [pc, #364]	@ (800098c <__aeabi_dadd+0x388>)
 800081e:	3701      	adds	r7, #1
 8000820:	429f      	cmp	r7, r3
 8000822:	d051      	beq.n	80008c8 <__aeabi_dadd+0x2c4>
 8000824:	2101      	movs	r1, #1
 8000826:	4b5a      	ldr	r3, [pc, #360]	@ (8000990 <__aeabi_dadd+0x38c>)
 8000828:	086a      	lsrs	r2, r5, #1
 800082a:	401c      	ands	r4, r3
 800082c:	4029      	ands	r1, r5
 800082e:	430a      	orrs	r2, r1
 8000830:	07e5      	lsls	r5, r4, #31
 8000832:	4315      	orrs	r5, r2
 8000834:	0864      	lsrs	r4, r4, #1
 8000836:	e75f      	b.n	80006f8 <__aeabi_dadd+0xf4>
 8000838:	4661      	mov	r1, ip
 800083a:	4653      	mov	r3, sl
 800083c:	4319      	orrs	r1, r3
 800083e:	d100      	bne.n	8000842 <__aeabi_dadd+0x23e>
 8000840:	e0bc      	b.n	80009bc <__aeabi_dadd+0x3b8>
 8000842:	1e51      	subs	r1, r2, #1
 8000844:	2a01      	cmp	r2, #1
 8000846:	d100      	bne.n	800084a <__aeabi_dadd+0x246>
 8000848:	e164      	b.n	8000b14 <__aeabi_dadd+0x510>
 800084a:	4d50      	ldr	r5, [pc, #320]	@ (800098c <__aeabi_dadd+0x388>)
 800084c:	42aa      	cmp	r2, r5
 800084e:	d100      	bne.n	8000852 <__aeabi_dadd+0x24e>
 8000850:	e16a      	b.n	8000b28 <__aeabi_dadd+0x524>
 8000852:	2501      	movs	r5, #1
 8000854:	2938      	cmp	r1, #56	@ 0x38
 8000856:	dd00      	ble.n	800085a <__aeabi_dadd+0x256>
 8000858:	e722      	b.n	80006a0 <__aeabi_dadd+0x9c>
 800085a:	000a      	movs	r2, r1
 800085c:	e70e      	b.n	800067c <__aeabi_dadd+0x78>
 800085e:	4a4d      	ldr	r2, [pc, #308]	@ (8000994 <__aeabi_dadd+0x390>)
 8000860:	1c7d      	adds	r5, r7, #1
 8000862:	4215      	tst	r5, r2
 8000864:	d000      	beq.n	8000868 <__aeabi_dadd+0x264>
 8000866:	e0d0      	b.n	8000a0a <__aeabi_dadd+0x406>
 8000868:	0025      	movs	r5, r4
 800086a:	4662      	mov	r2, ip
 800086c:	4653      	mov	r3, sl
 800086e:	4305      	orrs	r5, r0
 8000870:	431a      	orrs	r2, r3
 8000872:	2f00      	cmp	r7, #0
 8000874:	d000      	beq.n	8000878 <__aeabi_dadd+0x274>
 8000876:	e137      	b.n	8000ae8 <__aeabi_dadd+0x4e4>
 8000878:	2d00      	cmp	r5, #0
 800087a:	d100      	bne.n	800087e <__aeabi_dadd+0x27a>
 800087c:	e1a8      	b.n	8000bd0 <__aeabi_dadd+0x5cc>
 800087e:	2a00      	cmp	r2, #0
 8000880:	d100      	bne.n	8000884 <__aeabi_dadd+0x280>
 8000882:	e16a      	b.n	8000b5a <__aeabi_dadd+0x556>
 8000884:	4663      	mov	r3, ip
 8000886:	1ac5      	subs	r5, r0, r3
 8000888:	4653      	mov	r3, sl
 800088a:	1ae2      	subs	r2, r4, r3
 800088c:	42a8      	cmp	r0, r5
 800088e:	419b      	sbcs	r3, r3
 8000890:	425b      	negs	r3, r3
 8000892:	1ad3      	subs	r3, r2, r3
 8000894:	021a      	lsls	r2, r3, #8
 8000896:	d400      	bmi.n	800089a <__aeabi_dadd+0x296>
 8000898:	e203      	b.n	8000ca2 <__aeabi_dadd+0x69e>
 800089a:	4663      	mov	r3, ip
 800089c:	1a1d      	subs	r5, r3, r0
 800089e:	45ac      	cmp	ip, r5
 80008a0:	4192      	sbcs	r2, r2
 80008a2:	4653      	mov	r3, sl
 80008a4:	4252      	negs	r2, r2
 80008a6:	1b1c      	subs	r4, r3, r4
 80008a8:	000e      	movs	r6, r1
 80008aa:	4688      	mov	r8, r1
 80008ac:	1aa4      	subs	r4, r4, r2
 80008ae:	e723      	b.n	80006f8 <__aeabi_dadd+0xf4>
 80008b0:	4936      	ldr	r1, [pc, #216]	@ (800098c <__aeabi_dadd+0x388>)
 80008b2:	428f      	cmp	r7, r1
 80008b4:	d070      	beq.n	8000998 <__aeabi_dadd+0x394>
 80008b6:	2501      	movs	r5, #1
 80008b8:	2a38      	cmp	r2, #56	@ 0x38
 80008ba:	dca8      	bgt.n	800080e <__aeabi_dadd+0x20a>
 80008bc:	2180      	movs	r1, #128	@ 0x80
 80008be:	4653      	mov	r3, sl
 80008c0:	0409      	lsls	r1, r1, #16
 80008c2:	430b      	orrs	r3, r1
 80008c4:	469a      	mov	sl, r3
 80008c6:	e78e      	b.n	80007e6 <__aeabi_dadd+0x1e2>
 80008c8:	003c      	movs	r4, r7
 80008ca:	2500      	movs	r5, #0
 80008cc:	2200      	movs	r2, #0
 80008ce:	e731      	b.n	8000734 <__aeabi_dadd+0x130>
 80008d0:	2307      	movs	r3, #7
 80008d2:	402b      	ands	r3, r5
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d000      	beq.n	80008da <__aeabi_dadd+0x2d6>
 80008d8:	e710      	b.n	80006fc <__aeabi_dadd+0xf8>
 80008da:	e093      	b.n	8000a04 <__aeabi_dadd+0x400>
 80008dc:	2a00      	cmp	r2, #0
 80008de:	d074      	beq.n	80009ca <__aeabi_dadd+0x3c6>
 80008e0:	464a      	mov	r2, r9
 80008e2:	1bd2      	subs	r2, r2, r7
 80008e4:	2f00      	cmp	r7, #0
 80008e6:	d100      	bne.n	80008ea <__aeabi_dadd+0x2e6>
 80008e8:	e0c7      	b.n	8000a7a <__aeabi_dadd+0x476>
 80008ea:	4928      	ldr	r1, [pc, #160]	@ (800098c <__aeabi_dadd+0x388>)
 80008ec:	4589      	cmp	r9, r1
 80008ee:	d100      	bne.n	80008f2 <__aeabi_dadd+0x2ee>
 80008f0:	e185      	b.n	8000bfe <__aeabi_dadd+0x5fa>
 80008f2:	2501      	movs	r5, #1
 80008f4:	2a38      	cmp	r2, #56	@ 0x38
 80008f6:	dc12      	bgt.n	800091e <__aeabi_dadd+0x31a>
 80008f8:	2180      	movs	r1, #128	@ 0x80
 80008fa:	0409      	lsls	r1, r1, #16
 80008fc:	430c      	orrs	r4, r1
 80008fe:	2a1f      	cmp	r2, #31
 8000900:	dd00      	ble.n	8000904 <__aeabi_dadd+0x300>
 8000902:	e1ab      	b.n	8000c5c <__aeabi_dadd+0x658>
 8000904:	2120      	movs	r1, #32
 8000906:	0025      	movs	r5, r4
 8000908:	1a89      	subs	r1, r1, r2
 800090a:	0007      	movs	r7, r0
 800090c:	4088      	lsls	r0, r1
 800090e:	408d      	lsls	r5, r1
 8000910:	40d7      	lsrs	r7, r2
 8000912:	1e41      	subs	r1, r0, #1
 8000914:	4188      	sbcs	r0, r1
 8000916:	40d4      	lsrs	r4, r2
 8000918:	433d      	orrs	r5, r7
 800091a:	4305      	orrs	r5, r0
 800091c:	44a2      	add	sl, r4
 800091e:	4465      	add	r5, ip
 8000920:	4565      	cmp	r5, ip
 8000922:	4192      	sbcs	r2, r2
 8000924:	4252      	negs	r2, r2
 8000926:	4452      	add	r2, sl
 8000928:	0014      	movs	r4, r2
 800092a:	464f      	mov	r7, r9
 800092c:	e774      	b.n	8000818 <__aeabi_dadd+0x214>
 800092e:	0028      	movs	r0, r5
 8000930:	f001 fdce 	bl	80024d0 <__clzsi2>
 8000934:	0003      	movs	r3, r0
 8000936:	3318      	adds	r3, #24
 8000938:	2b1f      	cmp	r3, #31
 800093a:	dc00      	bgt.n	800093e <__aeabi_dadd+0x33a>
 800093c:	e6c2      	b.n	80006c4 <__aeabi_dadd+0xc0>
 800093e:	002a      	movs	r2, r5
 8000940:	3808      	subs	r0, #8
 8000942:	4082      	lsls	r2, r0
 8000944:	429f      	cmp	r7, r3
 8000946:	dd00      	ble.n	800094a <__aeabi_dadd+0x346>
 8000948:	e0a9      	b.n	8000a9e <__aeabi_dadd+0x49a>
 800094a:	1bdb      	subs	r3, r3, r7
 800094c:	1c58      	adds	r0, r3, #1
 800094e:	281f      	cmp	r0, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x350>
 8000952:	e1ac      	b.n	8000cae <__aeabi_dadd+0x6aa>
 8000954:	0015      	movs	r5, r2
 8000956:	3b1f      	subs	r3, #31
 8000958:	40dd      	lsrs	r5, r3
 800095a:	2820      	cmp	r0, #32
 800095c:	d005      	beq.n	800096a <__aeabi_dadd+0x366>
 800095e:	2340      	movs	r3, #64	@ 0x40
 8000960:	1a1b      	subs	r3, r3, r0
 8000962:	409a      	lsls	r2, r3
 8000964:	1e53      	subs	r3, r2, #1
 8000966:	419a      	sbcs	r2, r3
 8000968:	4315      	orrs	r5, r2
 800096a:	2307      	movs	r3, #7
 800096c:	2700      	movs	r7, #0
 800096e:	402b      	ands	r3, r5
 8000970:	e7b0      	b.n	80008d4 <__aeabi_dadd+0x2d0>
 8000972:	08ed      	lsrs	r5, r5, #3
 8000974:	4b05      	ldr	r3, [pc, #20]	@ (800098c <__aeabi_dadd+0x388>)
 8000976:	0762      	lsls	r2, r4, #29
 8000978:	432a      	orrs	r2, r5
 800097a:	08e4      	lsrs	r4, r4, #3
 800097c:	429f      	cmp	r7, r3
 800097e:	d00f      	beq.n	80009a0 <__aeabi_dadd+0x39c>
 8000980:	0324      	lsls	r4, r4, #12
 8000982:	0b25      	lsrs	r5, r4, #12
 8000984:	057c      	lsls	r4, r7, #21
 8000986:	0d64      	lsrs	r4, r4, #21
 8000988:	e6d4      	b.n	8000734 <__aeabi_dadd+0x130>
 800098a:	46c0      	nop			@ (mov r8, r8)
 800098c:	000007ff 	.word	0x000007ff
 8000990:	ff7fffff 	.word	0xff7fffff
 8000994:	000007fe 	.word	0x000007fe
 8000998:	08c0      	lsrs	r0, r0, #3
 800099a:	0762      	lsls	r2, r4, #29
 800099c:	4302      	orrs	r2, r0
 800099e:	08e4      	lsrs	r4, r4, #3
 80009a0:	0013      	movs	r3, r2
 80009a2:	4323      	orrs	r3, r4
 80009a4:	d100      	bne.n	80009a8 <__aeabi_dadd+0x3a4>
 80009a6:	e186      	b.n	8000cb6 <__aeabi_dadd+0x6b2>
 80009a8:	2580      	movs	r5, #128	@ 0x80
 80009aa:	032d      	lsls	r5, r5, #12
 80009ac:	4325      	orrs	r5, r4
 80009ae:	032d      	lsls	r5, r5, #12
 80009b0:	4cc3      	ldr	r4, [pc, #780]	@ (8000cc0 <__aeabi_dadd+0x6bc>)
 80009b2:	0b2d      	lsrs	r5, r5, #12
 80009b4:	e6be      	b.n	8000734 <__aeabi_dadd+0x130>
 80009b6:	4660      	mov	r0, ip
 80009b8:	4654      	mov	r4, sl
 80009ba:	000e      	movs	r6, r1
 80009bc:	0017      	movs	r7, r2
 80009be:	08c5      	lsrs	r5, r0, #3
 80009c0:	e7d8      	b.n	8000974 <__aeabi_dadd+0x370>
 80009c2:	4cc0      	ldr	r4, [pc, #768]	@ (8000cc4 <__aeabi_dadd+0x6c0>)
 80009c4:	1aff      	subs	r7, r7, r3
 80009c6:	4014      	ands	r4, r2
 80009c8:	e696      	b.n	80006f8 <__aeabi_dadd+0xf4>
 80009ca:	4abf      	ldr	r2, [pc, #764]	@ (8000cc8 <__aeabi_dadd+0x6c4>)
 80009cc:	1c79      	adds	r1, r7, #1
 80009ce:	4211      	tst	r1, r2
 80009d0:	d16b      	bne.n	8000aaa <__aeabi_dadd+0x4a6>
 80009d2:	0022      	movs	r2, r4
 80009d4:	4302      	orrs	r2, r0
 80009d6:	2f00      	cmp	r7, #0
 80009d8:	d000      	beq.n	80009dc <__aeabi_dadd+0x3d8>
 80009da:	e0db      	b.n	8000b94 <__aeabi_dadd+0x590>
 80009dc:	2a00      	cmp	r2, #0
 80009de:	d100      	bne.n	80009e2 <__aeabi_dadd+0x3de>
 80009e0:	e12d      	b.n	8000c3e <__aeabi_dadd+0x63a>
 80009e2:	4662      	mov	r2, ip
 80009e4:	4653      	mov	r3, sl
 80009e6:	431a      	orrs	r2, r3
 80009e8:	d100      	bne.n	80009ec <__aeabi_dadd+0x3e8>
 80009ea:	e0b6      	b.n	8000b5a <__aeabi_dadd+0x556>
 80009ec:	4663      	mov	r3, ip
 80009ee:	18c5      	adds	r5, r0, r3
 80009f0:	4285      	cmp	r5, r0
 80009f2:	4180      	sbcs	r0, r0
 80009f4:	4454      	add	r4, sl
 80009f6:	4240      	negs	r0, r0
 80009f8:	1824      	adds	r4, r4, r0
 80009fa:	0223      	lsls	r3, r4, #8
 80009fc:	d502      	bpl.n	8000a04 <__aeabi_dadd+0x400>
 80009fe:	000f      	movs	r7, r1
 8000a00:	4bb0      	ldr	r3, [pc, #704]	@ (8000cc4 <__aeabi_dadd+0x6c0>)
 8000a02:	401c      	ands	r4, r3
 8000a04:	003a      	movs	r2, r7
 8000a06:	0028      	movs	r0, r5
 8000a08:	e7d8      	b.n	80009bc <__aeabi_dadd+0x3b8>
 8000a0a:	4662      	mov	r2, ip
 8000a0c:	1a85      	subs	r5, r0, r2
 8000a0e:	42a8      	cmp	r0, r5
 8000a10:	4192      	sbcs	r2, r2
 8000a12:	4653      	mov	r3, sl
 8000a14:	4252      	negs	r2, r2
 8000a16:	4691      	mov	r9, r2
 8000a18:	1ae3      	subs	r3, r4, r3
 8000a1a:	001a      	movs	r2, r3
 8000a1c:	464b      	mov	r3, r9
 8000a1e:	1ad2      	subs	r2, r2, r3
 8000a20:	0013      	movs	r3, r2
 8000a22:	4691      	mov	r9, r2
 8000a24:	021a      	lsls	r2, r3, #8
 8000a26:	d454      	bmi.n	8000ad2 <__aeabi_dadd+0x4ce>
 8000a28:	464a      	mov	r2, r9
 8000a2a:	464c      	mov	r4, r9
 8000a2c:	432a      	orrs	r2, r5
 8000a2e:	d000      	beq.n	8000a32 <__aeabi_dadd+0x42e>
 8000a30:	e640      	b.n	80006b4 <__aeabi_dadd+0xb0>
 8000a32:	2600      	movs	r6, #0
 8000a34:	2400      	movs	r4, #0
 8000a36:	2500      	movs	r5, #0
 8000a38:	e67c      	b.n	8000734 <__aeabi_dadd+0x130>
 8000a3a:	4da1      	ldr	r5, [pc, #644]	@ (8000cc0 <__aeabi_dadd+0x6bc>)
 8000a3c:	45a9      	cmp	r9, r5
 8000a3e:	d100      	bne.n	8000a42 <__aeabi_dadd+0x43e>
 8000a40:	e090      	b.n	8000b64 <__aeabi_dadd+0x560>
 8000a42:	2501      	movs	r5, #1
 8000a44:	2a38      	cmp	r2, #56	@ 0x38
 8000a46:	dd00      	ble.n	8000a4a <__aeabi_dadd+0x446>
 8000a48:	e6ab      	b.n	80007a2 <__aeabi_dadd+0x19e>
 8000a4a:	2580      	movs	r5, #128	@ 0x80
 8000a4c:	042d      	lsls	r5, r5, #16
 8000a4e:	432c      	orrs	r4, r5
 8000a50:	e695      	b.n	800077e <__aeabi_dadd+0x17a>
 8000a52:	0011      	movs	r1, r2
 8000a54:	4655      	mov	r5, sl
 8000a56:	3920      	subs	r1, #32
 8000a58:	40cd      	lsrs	r5, r1
 8000a5a:	46a9      	mov	r9, r5
 8000a5c:	2a20      	cmp	r2, #32
 8000a5e:	d006      	beq.n	8000a6e <__aeabi_dadd+0x46a>
 8000a60:	2140      	movs	r1, #64	@ 0x40
 8000a62:	4653      	mov	r3, sl
 8000a64:	1a8a      	subs	r2, r1, r2
 8000a66:	4093      	lsls	r3, r2
 8000a68:	4662      	mov	r2, ip
 8000a6a:	431a      	orrs	r2, r3
 8000a6c:	4694      	mov	ip, r2
 8000a6e:	4665      	mov	r5, ip
 8000a70:	1e6b      	subs	r3, r5, #1
 8000a72:	419d      	sbcs	r5, r3
 8000a74:	464b      	mov	r3, r9
 8000a76:	431d      	orrs	r5, r3
 8000a78:	e612      	b.n	80006a0 <__aeabi_dadd+0x9c>
 8000a7a:	0021      	movs	r1, r4
 8000a7c:	4301      	orrs	r1, r0
 8000a7e:	d100      	bne.n	8000a82 <__aeabi_dadd+0x47e>
 8000a80:	e0c4      	b.n	8000c0c <__aeabi_dadd+0x608>
 8000a82:	1e51      	subs	r1, r2, #1
 8000a84:	2a01      	cmp	r2, #1
 8000a86:	d100      	bne.n	8000a8a <__aeabi_dadd+0x486>
 8000a88:	e0fb      	b.n	8000c82 <__aeabi_dadd+0x67e>
 8000a8a:	4d8d      	ldr	r5, [pc, #564]	@ (8000cc0 <__aeabi_dadd+0x6bc>)
 8000a8c:	42aa      	cmp	r2, r5
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_dadd+0x48e>
 8000a90:	e0b5      	b.n	8000bfe <__aeabi_dadd+0x5fa>
 8000a92:	2501      	movs	r5, #1
 8000a94:	2938      	cmp	r1, #56	@ 0x38
 8000a96:	dd00      	ble.n	8000a9a <__aeabi_dadd+0x496>
 8000a98:	e741      	b.n	800091e <__aeabi_dadd+0x31a>
 8000a9a:	000a      	movs	r2, r1
 8000a9c:	e72f      	b.n	80008fe <__aeabi_dadd+0x2fa>
 8000a9e:	4c89      	ldr	r4, [pc, #548]	@ (8000cc4 <__aeabi_dadd+0x6c0>)
 8000aa0:	1aff      	subs	r7, r7, r3
 8000aa2:	4014      	ands	r4, r2
 8000aa4:	0762      	lsls	r2, r4, #29
 8000aa6:	08e4      	lsrs	r4, r4, #3
 8000aa8:	e76a      	b.n	8000980 <__aeabi_dadd+0x37c>
 8000aaa:	4a85      	ldr	r2, [pc, #532]	@ (8000cc0 <__aeabi_dadd+0x6bc>)
 8000aac:	4291      	cmp	r1, r2
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_dadd+0x4ae>
 8000ab0:	e0e3      	b.n	8000c7a <__aeabi_dadd+0x676>
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	18c2      	adds	r2, r0, r3
 8000ab6:	4282      	cmp	r2, r0
 8000ab8:	4180      	sbcs	r0, r0
 8000aba:	0023      	movs	r3, r4
 8000abc:	4240      	negs	r0, r0
 8000abe:	4453      	add	r3, sl
 8000ac0:	181b      	adds	r3, r3, r0
 8000ac2:	07dd      	lsls	r5, r3, #31
 8000ac4:	085c      	lsrs	r4, r3, #1
 8000ac6:	2307      	movs	r3, #7
 8000ac8:	0852      	lsrs	r2, r2, #1
 8000aca:	4315      	orrs	r5, r2
 8000acc:	000f      	movs	r7, r1
 8000ace:	402b      	ands	r3, r5
 8000ad0:	e700      	b.n	80008d4 <__aeabi_dadd+0x2d0>
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	1a1d      	subs	r5, r3, r0
 8000ad6:	45ac      	cmp	ip, r5
 8000ad8:	4192      	sbcs	r2, r2
 8000ada:	4653      	mov	r3, sl
 8000adc:	4252      	negs	r2, r2
 8000ade:	1b1c      	subs	r4, r3, r4
 8000ae0:	000e      	movs	r6, r1
 8000ae2:	4688      	mov	r8, r1
 8000ae4:	1aa4      	subs	r4, r4, r2
 8000ae6:	e5e5      	b.n	80006b4 <__aeabi_dadd+0xb0>
 8000ae8:	2d00      	cmp	r5, #0
 8000aea:	d000      	beq.n	8000aee <__aeabi_dadd+0x4ea>
 8000aec:	e091      	b.n	8000c12 <__aeabi_dadd+0x60e>
 8000aee:	2a00      	cmp	r2, #0
 8000af0:	d138      	bne.n	8000b64 <__aeabi_dadd+0x560>
 8000af2:	2480      	movs	r4, #128	@ 0x80
 8000af4:	2600      	movs	r6, #0
 8000af6:	0324      	lsls	r4, r4, #12
 8000af8:	e756      	b.n	80009a8 <__aeabi_dadd+0x3a4>
 8000afa:	4663      	mov	r3, ip
 8000afc:	18c5      	adds	r5, r0, r3
 8000afe:	4285      	cmp	r5, r0
 8000b00:	4180      	sbcs	r0, r0
 8000b02:	4454      	add	r4, sl
 8000b04:	4240      	negs	r0, r0
 8000b06:	1824      	adds	r4, r4, r0
 8000b08:	2701      	movs	r7, #1
 8000b0a:	0223      	lsls	r3, r4, #8
 8000b0c:	d400      	bmi.n	8000b10 <__aeabi_dadd+0x50c>
 8000b0e:	e6df      	b.n	80008d0 <__aeabi_dadd+0x2cc>
 8000b10:	2702      	movs	r7, #2
 8000b12:	e687      	b.n	8000824 <__aeabi_dadd+0x220>
 8000b14:	4663      	mov	r3, ip
 8000b16:	1ac5      	subs	r5, r0, r3
 8000b18:	42a8      	cmp	r0, r5
 8000b1a:	4180      	sbcs	r0, r0
 8000b1c:	4653      	mov	r3, sl
 8000b1e:	4240      	negs	r0, r0
 8000b20:	1ae4      	subs	r4, r4, r3
 8000b22:	2701      	movs	r7, #1
 8000b24:	1a24      	subs	r4, r4, r0
 8000b26:	e5c0      	b.n	80006aa <__aeabi_dadd+0xa6>
 8000b28:	0762      	lsls	r2, r4, #29
 8000b2a:	08c0      	lsrs	r0, r0, #3
 8000b2c:	4302      	orrs	r2, r0
 8000b2e:	08e4      	lsrs	r4, r4, #3
 8000b30:	e736      	b.n	80009a0 <__aeabi_dadd+0x39c>
 8000b32:	0011      	movs	r1, r2
 8000b34:	4653      	mov	r3, sl
 8000b36:	3920      	subs	r1, #32
 8000b38:	40cb      	lsrs	r3, r1
 8000b3a:	4699      	mov	r9, r3
 8000b3c:	2a20      	cmp	r2, #32
 8000b3e:	d006      	beq.n	8000b4e <__aeabi_dadd+0x54a>
 8000b40:	2140      	movs	r1, #64	@ 0x40
 8000b42:	4653      	mov	r3, sl
 8000b44:	1a8a      	subs	r2, r1, r2
 8000b46:	4093      	lsls	r3, r2
 8000b48:	4662      	mov	r2, ip
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	4694      	mov	ip, r2
 8000b4e:	4665      	mov	r5, ip
 8000b50:	1e6b      	subs	r3, r5, #1
 8000b52:	419d      	sbcs	r5, r3
 8000b54:	464b      	mov	r3, r9
 8000b56:	431d      	orrs	r5, r3
 8000b58:	e659      	b.n	800080e <__aeabi_dadd+0x20a>
 8000b5a:	0762      	lsls	r2, r4, #29
 8000b5c:	08c0      	lsrs	r0, r0, #3
 8000b5e:	4302      	orrs	r2, r0
 8000b60:	08e4      	lsrs	r4, r4, #3
 8000b62:	e70d      	b.n	8000980 <__aeabi_dadd+0x37c>
 8000b64:	4653      	mov	r3, sl
 8000b66:	075a      	lsls	r2, r3, #29
 8000b68:	4663      	mov	r3, ip
 8000b6a:	08d8      	lsrs	r0, r3, #3
 8000b6c:	4653      	mov	r3, sl
 8000b6e:	000e      	movs	r6, r1
 8000b70:	4302      	orrs	r2, r0
 8000b72:	08dc      	lsrs	r4, r3, #3
 8000b74:	e714      	b.n	80009a0 <__aeabi_dadd+0x39c>
 8000b76:	0015      	movs	r5, r2
 8000b78:	0026      	movs	r6, r4
 8000b7a:	3d20      	subs	r5, #32
 8000b7c:	40ee      	lsrs	r6, r5
 8000b7e:	2a20      	cmp	r2, #32
 8000b80:	d003      	beq.n	8000b8a <__aeabi_dadd+0x586>
 8000b82:	2540      	movs	r5, #64	@ 0x40
 8000b84:	1aaa      	subs	r2, r5, r2
 8000b86:	4094      	lsls	r4, r2
 8000b88:	4320      	orrs	r0, r4
 8000b8a:	1e42      	subs	r2, r0, #1
 8000b8c:	4190      	sbcs	r0, r2
 8000b8e:	0005      	movs	r5, r0
 8000b90:	4335      	orrs	r5, r6
 8000b92:	e606      	b.n	80007a2 <__aeabi_dadd+0x19e>
 8000b94:	2a00      	cmp	r2, #0
 8000b96:	d07c      	beq.n	8000c92 <__aeabi_dadd+0x68e>
 8000b98:	4662      	mov	r2, ip
 8000b9a:	4653      	mov	r3, sl
 8000b9c:	08c0      	lsrs	r0, r0, #3
 8000b9e:	431a      	orrs	r2, r3
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_dadd+0x5a0>
 8000ba2:	e6fa      	b.n	800099a <__aeabi_dadd+0x396>
 8000ba4:	0762      	lsls	r2, r4, #29
 8000ba6:	4310      	orrs	r0, r2
 8000ba8:	2280      	movs	r2, #128	@ 0x80
 8000baa:	08e4      	lsrs	r4, r4, #3
 8000bac:	0312      	lsls	r2, r2, #12
 8000bae:	4214      	tst	r4, r2
 8000bb0:	d008      	beq.n	8000bc4 <__aeabi_dadd+0x5c0>
 8000bb2:	08d9      	lsrs	r1, r3, #3
 8000bb4:	4211      	tst	r1, r2
 8000bb6:	d105      	bne.n	8000bc4 <__aeabi_dadd+0x5c0>
 8000bb8:	4663      	mov	r3, ip
 8000bba:	08d8      	lsrs	r0, r3, #3
 8000bbc:	4653      	mov	r3, sl
 8000bbe:	000c      	movs	r4, r1
 8000bc0:	075b      	lsls	r3, r3, #29
 8000bc2:	4318      	orrs	r0, r3
 8000bc4:	0f42      	lsrs	r2, r0, #29
 8000bc6:	00c0      	lsls	r0, r0, #3
 8000bc8:	08c0      	lsrs	r0, r0, #3
 8000bca:	0752      	lsls	r2, r2, #29
 8000bcc:	4302      	orrs	r2, r0
 8000bce:	e6e7      	b.n	80009a0 <__aeabi_dadd+0x39c>
 8000bd0:	2a00      	cmp	r2, #0
 8000bd2:	d100      	bne.n	8000bd6 <__aeabi_dadd+0x5d2>
 8000bd4:	e72d      	b.n	8000a32 <__aeabi_dadd+0x42e>
 8000bd6:	4663      	mov	r3, ip
 8000bd8:	08d8      	lsrs	r0, r3, #3
 8000bda:	4653      	mov	r3, sl
 8000bdc:	075a      	lsls	r2, r3, #29
 8000bde:	000e      	movs	r6, r1
 8000be0:	4302      	orrs	r2, r0
 8000be2:	08dc      	lsrs	r4, r3, #3
 8000be4:	e6cc      	b.n	8000980 <__aeabi_dadd+0x37c>
 8000be6:	4663      	mov	r3, ip
 8000be8:	1a1d      	subs	r5, r3, r0
 8000bea:	45ac      	cmp	ip, r5
 8000bec:	4192      	sbcs	r2, r2
 8000bee:	4653      	mov	r3, sl
 8000bf0:	4252      	negs	r2, r2
 8000bf2:	1b1c      	subs	r4, r3, r4
 8000bf4:	000e      	movs	r6, r1
 8000bf6:	4688      	mov	r8, r1
 8000bf8:	1aa4      	subs	r4, r4, r2
 8000bfa:	3701      	adds	r7, #1
 8000bfc:	e555      	b.n	80006aa <__aeabi_dadd+0xa6>
 8000bfe:	4663      	mov	r3, ip
 8000c00:	08d9      	lsrs	r1, r3, #3
 8000c02:	4653      	mov	r3, sl
 8000c04:	075a      	lsls	r2, r3, #29
 8000c06:	430a      	orrs	r2, r1
 8000c08:	08dc      	lsrs	r4, r3, #3
 8000c0a:	e6c9      	b.n	80009a0 <__aeabi_dadd+0x39c>
 8000c0c:	4660      	mov	r0, ip
 8000c0e:	4654      	mov	r4, sl
 8000c10:	e6d4      	b.n	80009bc <__aeabi_dadd+0x3b8>
 8000c12:	08c0      	lsrs	r0, r0, #3
 8000c14:	2a00      	cmp	r2, #0
 8000c16:	d100      	bne.n	8000c1a <__aeabi_dadd+0x616>
 8000c18:	e6bf      	b.n	800099a <__aeabi_dadd+0x396>
 8000c1a:	0762      	lsls	r2, r4, #29
 8000c1c:	4310      	orrs	r0, r2
 8000c1e:	2280      	movs	r2, #128	@ 0x80
 8000c20:	08e4      	lsrs	r4, r4, #3
 8000c22:	0312      	lsls	r2, r2, #12
 8000c24:	4214      	tst	r4, r2
 8000c26:	d0cd      	beq.n	8000bc4 <__aeabi_dadd+0x5c0>
 8000c28:	08dd      	lsrs	r5, r3, #3
 8000c2a:	4215      	tst	r5, r2
 8000c2c:	d1ca      	bne.n	8000bc4 <__aeabi_dadd+0x5c0>
 8000c2e:	4663      	mov	r3, ip
 8000c30:	08d8      	lsrs	r0, r3, #3
 8000c32:	4653      	mov	r3, sl
 8000c34:	075b      	lsls	r3, r3, #29
 8000c36:	000e      	movs	r6, r1
 8000c38:	002c      	movs	r4, r5
 8000c3a:	4318      	orrs	r0, r3
 8000c3c:	e7c2      	b.n	8000bc4 <__aeabi_dadd+0x5c0>
 8000c3e:	4663      	mov	r3, ip
 8000c40:	08d9      	lsrs	r1, r3, #3
 8000c42:	4653      	mov	r3, sl
 8000c44:	075a      	lsls	r2, r3, #29
 8000c46:	430a      	orrs	r2, r1
 8000c48:	08dc      	lsrs	r4, r3, #3
 8000c4a:	e699      	b.n	8000980 <__aeabi_dadd+0x37c>
 8000c4c:	4663      	mov	r3, ip
 8000c4e:	08d8      	lsrs	r0, r3, #3
 8000c50:	4653      	mov	r3, sl
 8000c52:	075a      	lsls	r2, r3, #29
 8000c54:	000e      	movs	r6, r1
 8000c56:	4302      	orrs	r2, r0
 8000c58:	08dc      	lsrs	r4, r3, #3
 8000c5a:	e6a1      	b.n	80009a0 <__aeabi_dadd+0x39c>
 8000c5c:	0011      	movs	r1, r2
 8000c5e:	0027      	movs	r7, r4
 8000c60:	3920      	subs	r1, #32
 8000c62:	40cf      	lsrs	r7, r1
 8000c64:	2a20      	cmp	r2, #32
 8000c66:	d003      	beq.n	8000c70 <__aeabi_dadd+0x66c>
 8000c68:	2140      	movs	r1, #64	@ 0x40
 8000c6a:	1a8a      	subs	r2, r1, r2
 8000c6c:	4094      	lsls	r4, r2
 8000c6e:	4320      	orrs	r0, r4
 8000c70:	1e42      	subs	r2, r0, #1
 8000c72:	4190      	sbcs	r0, r2
 8000c74:	0005      	movs	r5, r0
 8000c76:	433d      	orrs	r5, r7
 8000c78:	e651      	b.n	800091e <__aeabi_dadd+0x31a>
 8000c7a:	000c      	movs	r4, r1
 8000c7c:	2500      	movs	r5, #0
 8000c7e:	2200      	movs	r2, #0
 8000c80:	e558      	b.n	8000734 <__aeabi_dadd+0x130>
 8000c82:	4460      	add	r0, ip
 8000c84:	4560      	cmp	r0, ip
 8000c86:	4192      	sbcs	r2, r2
 8000c88:	4454      	add	r4, sl
 8000c8a:	4252      	negs	r2, r2
 8000c8c:	0005      	movs	r5, r0
 8000c8e:	18a4      	adds	r4, r4, r2
 8000c90:	e73a      	b.n	8000b08 <__aeabi_dadd+0x504>
 8000c92:	4653      	mov	r3, sl
 8000c94:	075a      	lsls	r2, r3, #29
 8000c96:	4663      	mov	r3, ip
 8000c98:	08d9      	lsrs	r1, r3, #3
 8000c9a:	4653      	mov	r3, sl
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	08dc      	lsrs	r4, r3, #3
 8000ca0:	e67e      	b.n	80009a0 <__aeabi_dadd+0x39c>
 8000ca2:	001a      	movs	r2, r3
 8000ca4:	001c      	movs	r4, r3
 8000ca6:	432a      	orrs	r2, r5
 8000ca8:	d000      	beq.n	8000cac <__aeabi_dadd+0x6a8>
 8000caa:	e6ab      	b.n	8000a04 <__aeabi_dadd+0x400>
 8000cac:	e6c1      	b.n	8000a32 <__aeabi_dadd+0x42e>
 8000cae:	2120      	movs	r1, #32
 8000cb0:	2500      	movs	r5, #0
 8000cb2:	1a09      	subs	r1, r1, r0
 8000cb4:	e519      	b.n	80006ea <__aeabi_dadd+0xe6>
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2500      	movs	r5, #0
 8000cba:	4c01      	ldr	r4, [pc, #4]	@ (8000cc0 <__aeabi_dadd+0x6bc>)
 8000cbc:	e53a      	b.n	8000734 <__aeabi_dadd+0x130>
 8000cbe:	46c0      	nop			@ (mov r8, r8)
 8000cc0:	000007ff 	.word	0x000007ff
 8000cc4:	ff7fffff 	.word	0xff7fffff
 8000cc8:	000007fe 	.word	0x000007fe

08000ccc <__aeabi_ddiv>:
 8000ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cce:	46de      	mov	lr, fp
 8000cd0:	4645      	mov	r5, r8
 8000cd2:	4657      	mov	r7, sl
 8000cd4:	464e      	mov	r6, r9
 8000cd6:	b5e0      	push	{r5, r6, r7, lr}
 8000cd8:	b087      	sub	sp, #28
 8000cda:	9200      	str	r2, [sp, #0]
 8000cdc:	9301      	str	r3, [sp, #4]
 8000cde:	030b      	lsls	r3, r1, #12
 8000ce0:	0b1b      	lsrs	r3, r3, #12
 8000ce2:	469b      	mov	fp, r3
 8000ce4:	0fca      	lsrs	r2, r1, #31
 8000ce6:	004b      	lsls	r3, r1, #1
 8000ce8:	0004      	movs	r4, r0
 8000cea:	4680      	mov	r8, r0
 8000cec:	0d5b      	lsrs	r3, r3, #21
 8000cee:	9202      	str	r2, [sp, #8]
 8000cf0:	d100      	bne.n	8000cf4 <__aeabi_ddiv+0x28>
 8000cf2:	e16a      	b.n	8000fca <__aeabi_ddiv+0x2fe>
 8000cf4:	4ad4      	ldr	r2, [pc, #848]	@ (8001048 <__aeabi_ddiv+0x37c>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_ddiv+0x30>
 8000cfa:	e18c      	b.n	8001016 <__aeabi_ddiv+0x34a>
 8000cfc:	4659      	mov	r1, fp
 8000cfe:	0f42      	lsrs	r2, r0, #29
 8000d00:	00c9      	lsls	r1, r1, #3
 8000d02:	430a      	orrs	r2, r1
 8000d04:	2180      	movs	r1, #128	@ 0x80
 8000d06:	0409      	lsls	r1, r1, #16
 8000d08:	4311      	orrs	r1, r2
 8000d0a:	00c2      	lsls	r2, r0, #3
 8000d0c:	4690      	mov	r8, r2
 8000d0e:	4acf      	ldr	r2, [pc, #828]	@ (800104c <__aeabi_ddiv+0x380>)
 8000d10:	4689      	mov	r9, r1
 8000d12:	4692      	mov	sl, r2
 8000d14:	449a      	add	sl, r3
 8000d16:	2300      	movs	r3, #0
 8000d18:	2400      	movs	r4, #0
 8000d1a:	9303      	str	r3, [sp, #12]
 8000d1c:	9e00      	ldr	r6, [sp, #0]
 8000d1e:	9f01      	ldr	r7, [sp, #4]
 8000d20:	033b      	lsls	r3, r7, #12
 8000d22:	0b1b      	lsrs	r3, r3, #12
 8000d24:	469b      	mov	fp, r3
 8000d26:	007b      	lsls	r3, r7, #1
 8000d28:	0030      	movs	r0, r6
 8000d2a:	0d5b      	lsrs	r3, r3, #21
 8000d2c:	0ffd      	lsrs	r5, r7, #31
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_ddiv+0x68>
 8000d32:	e128      	b.n	8000f86 <__aeabi_ddiv+0x2ba>
 8000d34:	4ac4      	ldr	r2, [pc, #784]	@ (8001048 <__aeabi_ddiv+0x37c>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d100      	bne.n	8000d3c <__aeabi_ddiv+0x70>
 8000d3a:	e177      	b.n	800102c <__aeabi_ddiv+0x360>
 8000d3c:	4659      	mov	r1, fp
 8000d3e:	0f72      	lsrs	r2, r6, #29
 8000d40:	00c9      	lsls	r1, r1, #3
 8000d42:	430a      	orrs	r2, r1
 8000d44:	2180      	movs	r1, #128	@ 0x80
 8000d46:	0409      	lsls	r1, r1, #16
 8000d48:	4311      	orrs	r1, r2
 8000d4a:	468b      	mov	fp, r1
 8000d4c:	49bf      	ldr	r1, [pc, #764]	@ (800104c <__aeabi_ddiv+0x380>)
 8000d4e:	00f2      	lsls	r2, r6, #3
 8000d50:	468c      	mov	ip, r1
 8000d52:	4651      	mov	r1, sl
 8000d54:	4463      	add	r3, ip
 8000d56:	1acb      	subs	r3, r1, r3
 8000d58:	469a      	mov	sl, r3
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	9e02      	ldr	r6, [sp, #8]
 8000d5e:	406e      	eors	r6, r5
 8000d60:	2c0f      	cmp	r4, #15
 8000d62:	d827      	bhi.n	8000db4 <__aeabi_ddiv+0xe8>
 8000d64:	49ba      	ldr	r1, [pc, #744]	@ (8001050 <__aeabi_ddiv+0x384>)
 8000d66:	00a4      	lsls	r4, r4, #2
 8000d68:	5909      	ldr	r1, [r1, r4]
 8000d6a:	468f      	mov	pc, r1
 8000d6c:	46cb      	mov	fp, r9
 8000d6e:	4642      	mov	r2, r8
 8000d70:	9e02      	ldr	r6, [sp, #8]
 8000d72:	9b03      	ldr	r3, [sp, #12]
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d016      	beq.n	8000da6 <__aeabi_ddiv+0xda>
 8000d78:	2b03      	cmp	r3, #3
 8000d7a:	d100      	bne.n	8000d7e <__aeabi_ddiv+0xb2>
 8000d7c:	e2a6      	b.n	80012cc <__aeabi_ddiv+0x600>
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d000      	beq.n	8000d84 <__aeabi_ddiv+0xb8>
 8000d82:	e0df      	b.n	8000f44 <__aeabi_ddiv+0x278>
 8000d84:	2200      	movs	r2, #0
 8000d86:	2300      	movs	r3, #0
 8000d88:	2400      	movs	r4, #0
 8000d8a:	4690      	mov	r8, r2
 8000d8c:	051b      	lsls	r3, r3, #20
 8000d8e:	4323      	orrs	r3, r4
 8000d90:	07f6      	lsls	r6, r6, #31
 8000d92:	4333      	orrs	r3, r6
 8000d94:	4640      	mov	r0, r8
 8000d96:	0019      	movs	r1, r3
 8000d98:	b007      	add	sp, #28
 8000d9a:	bcf0      	pop	{r4, r5, r6, r7}
 8000d9c:	46bb      	mov	fp, r7
 8000d9e:	46b2      	mov	sl, r6
 8000da0:	46a9      	mov	r9, r5
 8000da2:	46a0      	mov	r8, r4
 8000da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000da6:	2200      	movs	r2, #0
 8000da8:	2400      	movs	r4, #0
 8000daa:	4690      	mov	r8, r2
 8000dac:	4ba6      	ldr	r3, [pc, #664]	@ (8001048 <__aeabi_ddiv+0x37c>)
 8000dae:	e7ed      	b.n	8000d8c <__aeabi_ddiv+0xc0>
 8000db0:	002e      	movs	r6, r5
 8000db2:	e7df      	b.n	8000d74 <__aeabi_ddiv+0xa8>
 8000db4:	45cb      	cmp	fp, r9
 8000db6:	d200      	bcs.n	8000dba <__aeabi_ddiv+0xee>
 8000db8:	e1d4      	b.n	8001164 <__aeabi_ddiv+0x498>
 8000dba:	d100      	bne.n	8000dbe <__aeabi_ddiv+0xf2>
 8000dbc:	e1cf      	b.n	800115e <__aeabi_ddiv+0x492>
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	425b      	negs	r3, r3
 8000dc2:	469c      	mov	ip, r3
 8000dc4:	4644      	mov	r4, r8
 8000dc6:	4648      	mov	r0, r9
 8000dc8:	2700      	movs	r7, #0
 8000dca:	44e2      	add	sl, ip
 8000dcc:	465b      	mov	r3, fp
 8000dce:	0e15      	lsrs	r5, r2, #24
 8000dd0:	021b      	lsls	r3, r3, #8
 8000dd2:	431d      	orrs	r5, r3
 8000dd4:	0c19      	lsrs	r1, r3, #16
 8000dd6:	042b      	lsls	r3, r5, #16
 8000dd8:	0212      	lsls	r2, r2, #8
 8000dda:	9500      	str	r5, [sp, #0]
 8000ddc:	0c1d      	lsrs	r5, r3, #16
 8000dde:	4691      	mov	r9, r2
 8000de0:	9102      	str	r1, [sp, #8]
 8000de2:	9503      	str	r5, [sp, #12]
 8000de4:	f7ff fa1e 	bl	8000224 <__aeabi_uidivmod>
 8000de8:	0002      	movs	r2, r0
 8000dea:	436a      	muls	r2, r5
 8000dec:	040b      	lsls	r3, r1, #16
 8000dee:	0c21      	lsrs	r1, r4, #16
 8000df0:	4680      	mov	r8, r0
 8000df2:	4319      	orrs	r1, r3
 8000df4:	428a      	cmp	r2, r1
 8000df6:	d909      	bls.n	8000e0c <__aeabi_ddiv+0x140>
 8000df8:	9d00      	ldr	r5, [sp, #0]
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	46ac      	mov	ip, r5
 8000dfe:	425b      	negs	r3, r3
 8000e00:	4461      	add	r1, ip
 8000e02:	469c      	mov	ip, r3
 8000e04:	44e0      	add	r8, ip
 8000e06:	428d      	cmp	r5, r1
 8000e08:	d800      	bhi.n	8000e0c <__aeabi_ddiv+0x140>
 8000e0a:	e1fb      	b.n	8001204 <__aeabi_ddiv+0x538>
 8000e0c:	1a88      	subs	r0, r1, r2
 8000e0e:	9902      	ldr	r1, [sp, #8]
 8000e10:	f7ff fa08 	bl	8000224 <__aeabi_uidivmod>
 8000e14:	9a03      	ldr	r2, [sp, #12]
 8000e16:	0424      	lsls	r4, r4, #16
 8000e18:	4342      	muls	r2, r0
 8000e1a:	0409      	lsls	r1, r1, #16
 8000e1c:	0c24      	lsrs	r4, r4, #16
 8000e1e:	0003      	movs	r3, r0
 8000e20:	430c      	orrs	r4, r1
 8000e22:	42a2      	cmp	r2, r4
 8000e24:	d906      	bls.n	8000e34 <__aeabi_ddiv+0x168>
 8000e26:	9900      	ldr	r1, [sp, #0]
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	468c      	mov	ip, r1
 8000e2c:	4464      	add	r4, ip
 8000e2e:	42a1      	cmp	r1, r4
 8000e30:	d800      	bhi.n	8000e34 <__aeabi_ddiv+0x168>
 8000e32:	e1e1      	b.n	80011f8 <__aeabi_ddiv+0x52c>
 8000e34:	1aa0      	subs	r0, r4, r2
 8000e36:	4642      	mov	r2, r8
 8000e38:	0412      	lsls	r2, r2, #16
 8000e3a:	431a      	orrs	r2, r3
 8000e3c:	4693      	mov	fp, r2
 8000e3e:	464b      	mov	r3, r9
 8000e40:	4659      	mov	r1, fp
 8000e42:	0c1b      	lsrs	r3, r3, #16
 8000e44:	001d      	movs	r5, r3
 8000e46:	9304      	str	r3, [sp, #16]
 8000e48:	040b      	lsls	r3, r1, #16
 8000e4a:	4649      	mov	r1, r9
 8000e4c:	0409      	lsls	r1, r1, #16
 8000e4e:	0c09      	lsrs	r1, r1, #16
 8000e50:	000c      	movs	r4, r1
 8000e52:	0c1b      	lsrs	r3, r3, #16
 8000e54:	435c      	muls	r4, r3
 8000e56:	0c12      	lsrs	r2, r2, #16
 8000e58:	436b      	muls	r3, r5
 8000e5a:	4688      	mov	r8, r1
 8000e5c:	4351      	muls	r1, r2
 8000e5e:	436a      	muls	r2, r5
 8000e60:	0c25      	lsrs	r5, r4, #16
 8000e62:	46ac      	mov	ip, r5
 8000e64:	185b      	adds	r3, r3, r1
 8000e66:	4463      	add	r3, ip
 8000e68:	4299      	cmp	r1, r3
 8000e6a:	d903      	bls.n	8000e74 <__aeabi_ddiv+0x1a8>
 8000e6c:	2180      	movs	r1, #128	@ 0x80
 8000e6e:	0249      	lsls	r1, r1, #9
 8000e70:	468c      	mov	ip, r1
 8000e72:	4462      	add	r2, ip
 8000e74:	0c19      	lsrs	r1, r3, #16
 8000e76:	0424      	lsls	r4, r4, #16
 8000e78:	041b      	lsls	r3, r3, #16
 8000e7a:	0c24      	lsrs	r4, r4, #16
 8000e7c:	188a      	adds	r2, r1, r2
 8000e7e:	191c      	adds	r4, r3, r4
 8000e80:	4290      	cmp	r0, r2
 8000e82:	d302      	bcc.n	8000e8a <__aeabi_ddiv+0x1be>
 8000e84:	d116      	bne.n	8000eb4 <__aeabi_ddiv+0x1e8>
 8000e86:	42a7      	cmp	r7, r4
 8000e88:	d214      	bcs.n	8000eb4 <__aeabi_ddiv+0x1e8>
 8000e8a:	465b      	mov	r3, fp
 8000e8c:	9d00      	ldr	r5, [sp, #0]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	444f      	add	r7, r9
 8000e92:	9305      	str	r3, [sp, #20]
 8000e94:	454f      	cmp	r7, r9
 8000e96:	419b      	sbcs	r3, r3
 8000e98:	46ac      	mov	ip, r5
 8000e9a:	425b      	negs	r3, r3
 8000e9c:	4463      	add	r3, ip
 8000e9e:	18c0      	adds	r0, r0, r3
 8000ea0:	4285      	cmp	r5, r0
 8000ea2:	d300      	bcc.n	8000ea6 <__aeabi_ddiv+0x1da>
 8000ea4:	e1a1      	b.n	80011ea <__aeabi_ddiv+0x51e>
 8000ea6:	4282      	cmp	r2, r0
 8000ea8:	d900      	bls.n	8000eac <__aeabi_ddiv+0x1e0>
 8000eaa:	e1f6      	b.n	800129a <__aeabi_ddiv+0x5ce>
 8000eac:	d100      	bne.n	8000eb0 <__aeabi_ddiv+0x1e4>
 8000eae:	e1f1      	b.n	8001294 <__aeabi_ddiv+0x5c8>
 8000eb0:	9b05      	ldr	r3, [sp, #20]
 8000eb2:	469b      	mov	fp, r3
 8000eb4:	1b3c      	subs	r4, r7, r4
 8000eb6:	42a7      	cmp	r7, r4
 8000eb8:	41bf      	sbcs	r7, r7
 8000eba:	9d00      	ldr	r5, [sp, #0]
 8000ebc:	1a80      	subs	r0, r0, r2
 8000ebe:	427f      	negs	r7, r7
 8000ec0:	1bc0      	subs	r0, r0, r7
 8000ec2:	4285      	cmp	r5, r0
 8000ec4:	d100      	bne.n	8000ec8 <__aeabi_ddiv+0x1fc>
 8000ec6:	e1d0      	b.n	800126a <__aeabi_ddiv+0x59e>
 8000ec8:	9902      	ldr	r1, [sp, #8]
 8000eca:	f7ff f9ab 	bl	8000224 <__aeabi_uidivmod>
 8000ece:	9a03      	ldr	r2, [sp, #12]
 8000ed0:	040b      	lsls	r3, r1, #16
 8000ed2:	4342      	muls	r2, r0
 8000ed4:	0c21      	lsrs	r1, r4, #16
 8000ed6:	0007      	movs	r7, r0
 8000ed8:	4319      	orrs	r1, r3
 8000eda:	428a      	cmp	r2, r1
 8000edc:	d900      	bls.n	8000ee0 <__aeabi_ddiv+0x214>
 8000ede:	e178      	b.n	80011d2 <__aeabi_ddiv+0x506>
 8000ee0:	1a88      	subs	r0, r1, r2
 8000ee2:	9902      	ldr	r1, [sp, #8]
 8000ee4:	f7ff f99e 	bl	8000224 <__aeabi_uidivmod>
 8000ee8:	9a03      	ldr	r2, [sp, #12]
 8000eea:	0424      	lsls	r4, r4, #16
 8000eec:	4342      	muls	r2, r0
 8000eee:	0409      	lsls	r1, r1, #16
 8000ef0:	0c24      	lsrs	r4, r4, #16
 8000ef2:	0003      	movs	r3, r0
 8000ef4:	430c      	orrs	r4, r1
 8000ef6:	42a2      	cmp	r2, r4
 8000ef8:	d900      	bls.n	8000efc <__aeabi_ddiv+0x230>
 8000efa:	e15d      	b.n	80011b8 <__aeabi_ddiv+0x4ec>
 8000efc:	4641      	mov	r1, r8
 8000efe:	1aa4      	subs	r4, r4, r2
 8000f00:	043a      	lsls	r2, r7, #16
 8000f02:	431a      	orrs	r2, r3
 8000f04:	9d04      	ldr	r5, [sp, #16]
 8000f06:	0413      	lsls	r3, r2, #16
 8000f08:	0c1b      	lsrs	r3, r3, #16
 8000f0a:	4359      	muls	r1, r3
 8000f0c:	4647      	mov	r7, r8
 8000f0e:	436b      	muls	r3, r5
 8000f10:	469c      	mov	ip, r3
 8000f12:	0c10      	lsrs	r0, r2, #16
 8000f14:	4347      	muls	r7, r0
 8000f16:	0c0b      	lsrs	r3, r1, #16
 8000f18:	44bc      	add	ip, r7
 8000f1a:	4463      	add	r3, ip
 8000f1c:	4368      	muls	r0, r5
 8000f1e:	429f      	cmp	r7, r3
 8000f20:	d903      	bls.n	8000f2a <__aeabi_ddiv+0x25e>
 8000f22:	2580      	movs	r5, #128	@ 0x80
 8000f24:	026d      	lsls	r5, r5, #9
 8000f26:	46ac      	mov	ip, r5
 8000f28:	4460      	add	r0, ip
 8000f2a:	0c1f      	lsrs	r7, r3, #16
 8000f2c:	0409      	lsls	r1, r1, #16
 8000f2e:	041b      	lsls	r3, r3, #16
 8000f30:	0c09      	lsrs	r1, r1, #16
 8000f32:	183f      	adds	r7, r7, r0
 8000f34:	185b      	adds	r3, r3, r1
 8000f36:	42bc      	cmp	r4, r7
 8000f38:	d200      	bcs.n	8000f3c <__aeabi_ddiv+0x270>
 8000f3a:	e102      	b.n	8001142 <__aeabi_ddiv+0x476>
 8000f3c:	d100      	bne.n	8000f40 <__aeabi_ddiv+0x274>
 8000f3e:	e0fd      	b.n	800113c <__aeabi_ddiv+0x470>
 8000f40:	2301      	movs	r3, #1
 8000f42:	431a      	orrs	r2, r3
 8000f44:	4b43      	ldr	r3, [pc, #268]	@ (8001054 <__aeabi_ddiv+0x388>)
 8000f46:	4453      	add	r3, sl
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	dc00      	bgt.n	8000f4e <__aeabi_ddiv+0x282>
 8000f4c:	e0ae      	b.n	80010ac <__aeabi_ddiv+0x3e0>
 8000f4e:	0751      	lsls	r1, r2, #29
 8000f50:	d000      	beq.n	8000f54 <__aeabi_ddiv+0x288>
 8000f52:	e198      	b.n	8001286 <__aeabi_ddiv+0x5ba>
 8000f54:	4659      	mov	r1, fp
 8000f56:	01c9      	lsls	r1, r1, #7
 8000f58:	d506      	bpl.n	8000f68 <__aeabi_ddiv+0x29c>
 8000f5a:	4659      	mov	r1, fp
 8000f5c:	4b3e      	ldr	r3, [pc, #248]	@ (8001058 <__aeabi_ddiv+0x38c>)
 8000f5e:	4019      	ands	r1, r3
 8000f60:	2380      	movs	r3, #128	@ 0x80
 8000f62:	468b      	mov	fp, r1
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	4453      	add	r3, sl
 8000f68:	493c      	ldr	r1, [pc, #240]	@ (800105c <__aeabi_ddiv+0x390>)
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	dd00      	ble.n	8000f70 <__aeabi_ddiv+0x2a4>
 8000f6e:	e71a      	b.n	8000da6 <__aeabi_ddiv+0xda>
 8000f70:	4659      	mov	r1, fp
 8000f72:	08d2      	lsrs	r2, r2, #3
 8000f74:	0749      	lsls	r1, r1, #29
 8000f76:	4311      	orrs	r1, r2
 8000f78:	465a      	mov	r2, fp
 8000f7a:	055b      	lsls	r3, r3, #21
 8000f7c:	0254      	lsls	r4, r2, #9
 8000f7e:	4688      	mov	r8, r1
 8000f80:	0b24      	lsrs	r4, r4, #12
 8000f82:	0d5b      	lsrs	r3, r3, #21
 8000f84:	e702      	b.n	8000d8c <__aeabi_ddiv+0xc0>
 8000f86:	465a      	mov	r2, fp
 8000f88:	9b00      	ldr	r3, [sp, #0]
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	d100      	bne.n	8000f90 <__aeabi_ddiv+0x2c4>
 8000f8e:	e07e      	b.n	800108e <__aeabi_ddiv+0x3c2>
 8000f90:	465b      	mov	r3, fp
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d100      	bne.n	8000f98 <__aeabi_ddiv+0x2cc>
 8000f96:	e100      	b.n	800119a <__aeabi_ddiv+0x4ce>
 8000f98:	4658      	mov	r0, fp
 8000f9a:	f001 fa99 	bl	80024d0 <__clzsi2>
 8000f9e:	0002      	movs	r2, r0
 8000fa0:	0003      	movs	r3, r0
 8000fa2:	3a0b      	subs	r2, #11
 8000fa4:	271d      	movs	r7, #29
 8000fa6:	9e00      	ldr	r6, [sp, #0]
 8000fa8:	1aba      	subs	r2, r7, r2
 8000faa:	0019      	movs	r1, r3
 8000fac:	4658      	mov	r0, fp
 8000fae:	40d6      	lsrs	r6, r2
 8000fb0:	3908      	subs	r1, #8
 8000fb2:	4088      	lsls	r0, r1
 8000fb4:	0032      	movs	r2, r6
 8000fb6:	4302      	orrs	r2, r0
 8000fb8:	4693      	mov	fp, r2
 8000fba:	9a00      	ldr	r2, [sp, #0]
 8000fbc:	408a      	lsls	r2, r1
 8000fbe:	4928      	ldr	r1, [pc, #160]	@ (8001060 <__aeabi_ddiv+0x394>)
 8000fc0:	4453      	add	r3, sl
 8000fc2:	468a      	mov	sl, r1
 8000fc4:	449a      	add	sl, r3
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e6c8      	b.n	8000d5c <__aeabi_ddiv+0x90>
 8000fca:	465b      	mov	r3, fp
 8000fcc:	4303      	orrs	r3, r0
 8000fce:	4699      	mov	r9, r3
 8000fd0:	d056      	beq.n	8001080 <__aeabi_ddiv+0x3b4>
 8000fd2:	465b      	mov	r3, fp
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d100      	bne.n	8000fda <__aeabi_ddiv+0x30e>
 8000fd8:	e0cd      	b.n	8001176 <__aeabi_ddiv+0x4aa>
 8000fda:	4658      	mov	r0, fp
 8000fdc:	f001 fa78 	bl	80024d0 <__clzsi2>
 8000fe0:	230b      	movs	r3, #11
 8000fe2:	425b      	negs	r3, r3
 8000fe4:	469c      	mov	ip, r3
 8000fe6:	0002      	movs	r2, r0
 8000fe8:	4484      	add	ip, r0
 8000fea:	4666      	mov	r6, ip
 8000fec:	231d      	movs	r3, #29
 8000fee:	1b9b      	subs	r3, r3, r6
 8000ff0:	0026      	movs	r6, r4
 8000ff2:	0011      	movs	r1, r2
 8000ff4:	4658      	mov	r0, fp
 8000ff6:	40de      	lsrs	r6, r3
 8000ff8:	3908      	subs	r1, #8
 8000ffa:	4088      	lsls	r0, r1
 8000ffc:	0033      	movs	r3, r6
 8000ffe:	4303      	orrs	r3, r0
 8001000:	4699      	mov	r9, r3
 8001002:	0023      	movs	r3, r4
 8001004:	408b      	lsls	r3, r1
 8001006:	4698      	mov	r8, r3
 8001008:	4b16      	ldr	r3, [pc, #88]	@ (8001064 <__aeabi_ddiv+0x398>)
 800100a:	2400      	movs	r4, #0
 800100c:	1a9b      	subs	r3, r3, r2
 800100e:	469a      	mov	sl, r3
 8001010:	2300      	movs	r3, #0
 8001012:	9303      	str	r3, [sp, #12]
 8001014:	e682      	b.n	8000d1c <__aeabi_ddiv+0x50>
 8001016:	465a      	mov	r2, fp
 8001018:	4302      	orrs	r2, r0
 800101a:	4691      	mov	r9, r2
 800101c:	d12a      	bne.n	8001074 <__aeabi_ddiv+0x3a8>
 800101e:	2200      	movs	r2, #0
 8001020:	469a      	mov	sl, r3
 8001022:	2302      	movs	r3, #2
 8001024:	4690      	mov	r8, r2
 8001026:	2408      	movs	r4, #8
 8001028:	9303      	str	r3, [sp, #12]
 800102a:	e677      	b.n	8000d1c <__aeabi_ddiv+0x50>
 800102c:	465a      	mov	r2, fp
 800102e:	9b00      	ldr	r3, [sp, #0]
 8001030:	431a      	orrs	r2, r3
 8001032:	4b0d      	ldr	r3, [pc, #52]	@ (8001068 <__aeabi_ddiv+0x39c>)
 8001034:	469c      	mov	ip, r3
 8001036:	44e2      	add	sl, ip
 8001038:	2a00      	cmp	r2, #0
 800103a:	d117      	bne.n	800106c <__aeabi_ddiv+0x3a0>
 800103c:	2302      	movs	r3, #2
 800103e:	431c      	orrs	r4, r3
 8001040:	2300      	movs	r3, #0
 8001042:	469b      	mov	fp, r3
 8001044:	3302      	adds	r3, #2
 8001046:	e689      	b.n	8000d5c <__aeabi_ddiv+0x90>
 8001048:	000007ff 	.word	0x000007ff
 800104c:	fffffc01 	.word	0xfffffc01
 8001050:	080088fc 	.word	0x080088fc
 8001054:	000003ff 	.word	0x000003ff
 8001058:	feffffff 	.word	0xfeffffff
 800105c:	000007fe 	.word	0x000007fe
 8001060:	000003f3 	.word	0x000003f3
 8001064:	fffffc0d 	.word	0xfffffc0d
 8001068:	fffff801 	.word	0xfffff801
 800106c:	2303      	movs	r3, #3
 800106e:	0032      	movs	r2, r6
 8001070:	431c      	orrs	r4, r3
 8001072:	e673      	b.n	8000d5c <__aeabi_ddiv+0x90>
 8001074:	469a      	mov	sl, r3
 8001076:	2303      	movs	r3, #3
 8001078:	46d9      	mov	r9, fp
 800107a:	240c      	movs	r4, #12
 800107c:	9303      	str	r3, [sp, #12]
 800107e:	e64d      	b.n	8000d1c <__aeabi_ddiv+0x50>
 8001080:	2300      	movs	r3, #0
 8001082:	4698      	mov	r8, r3
 8001084:	469a      	mov	sl, r3
 8001086:	3301      	adds	r3, #1
 8001088:	2404      	movs	r4, #4
 800108a:	9303      	str	r3, [sp, #12]
 800108c:	e646      	b.n	8000d1c <__aeabi_ddiv+0x50>
 800108e:	2301      	movs	r3, #1
 8001090:	431c      	orrs	r4, r3
 8001092:	2300      	movs	r3, #0
 8001094:	469b      	mov	fp, r3
 8001096:	3301      	adds	r3, #1
 8001098:	e660      	b.n	8000d5c <__aeabi_ddiv+0x90>
 800109a:	2300      	movs	r3, #0
 800109c:	2480      	movs	r4, #128	@ 0x80
 800109e:	4698      	mov	r8, r3
 80010a0:	2600      	movs	r6, #0
 80010a2:	4b92      	ldr	r3, [pc, #584]	@ (80012ec <__aeabi_ddiv+0x620>)
 80010a4:	0324      	lsls	r4, r4, #12
 80010a6:	e671      	b.n	8000d8c <__aeabi_ddiv+0xc0>
 80010a8:	2201      	movs	r2, #1
 80010aa:	4252      	negs	r2, r2
 80010ac:	2101      	movs	r1, #1
 80010ae:	1ac9      	subs	r1, r1, r3
 80010b0:	2938      	cmp	r1, #56	@ 0x38
 80010b2:	dd00      	ble.n	80010b6 <__aeabi_ddiv+0x3ea>
 80010b4:	e666      	b.n	8000d84 <__aeabi_ddiv+0xb8>
 80010b6:	291f      	cmp	r1, #31
 80010b8:	dc00      	bgt.n	80010bc <__aeabi_ddiv+0x3f0>
 80010ba:	e0ab      	b.n	8001214 <__aeabi_ddiv+0x548>
 80010bc:	201f      	movs	r0, #31
 80010be:	4240      	negs	r0, r0
 80010c0:	1ac3      	subs	r3, r0, r3
 80010c2:	4658      	mov	r0, fp
 80010c4:	40d8      	lsrs	r0, r3
 80010c6:	0003      	movs	r3, r0
 80010c8:	2920      	cmp	r1, #32
 80010ca:	d004      	beq.n	80010d6 <__aeabi_ddiv+0x40a>
 80010cc:	4658      	mov	r0, fp
 80010ce:	4988      	ldr	r1, [pc, #544]	@ (80012f0 <__aeabi_ddiv+0x624>)
 80010d0:	4451      	add	r1, sl
 80010d2:	4088      	lsls	r0, r1
 80010d4:	4302      	orrs	r2, r0
 80010d6:	1e51      	subs	r1, r2, #1
 80010d8:	418a      	sbcs	r2, r1
 80010da:	431a      	orrs	r2, r3
 80010dc:	2307      	movs	r3, #7
 80010de:	0019      	movs	r1, r3
 80010e0:	2400      	movs	r4, #0
 80010e2:	4011      	ands	r1, r2
 80010e4:	4213      	tst	r3, r2
 80010e6:	d00c      	beq.n	8001102 <__aeabi_ddiv+0x436>
 80010e8:	230f      	movs	r3, #15
 80010ea:	4013      	ands	r3, r2
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d100      	bne.n	80010f2 <__aeabi_ddiv+0x426>
 80010f0:	e0f9      	b.n	80012e6 <__aeabi_ddiv+0x61a>
 80010f2:	1d11      	adds	r1, r2, #4
 80010f4:	4291      	cmp	r1, r2
 80010f6:	419b      	sbcs	r3, r3
 80010f8:	000a      	movs	r2, r1
 80010fa:	425b      	negs	r3, r3
 80010fc:	0759      	lsls	r1, r3, #29
 80010fe:	025b      	lsls	r3, r3, #9
 8001100:	0b1c      	lsrs	r4, r3, #12
 8001102:	08d2      	lsrs	r2, r2, #3
 8001104:	430a      	orrs	r2, r1
 8001106:	4690      	mov	r8, r2
 8001108:	2300      	movs	r3, #0
 800110a:	e63f      	b.n	8000d8c <__aeabi_ddiv+0xc0>
 800110c:	2480      	movs	r4, #128	@ 0x80
 800110e:	464b      	mov	r3, r9
 8001110:	0324      	lsls	r4, r4, #12
 8001112:	4223      	tst	r3, r4
 8001114:	d009      	beq.n	800112a <__aeabi_ddiv+0x45e>
 8001116:	465b      	mov	r3, fp
 8001118:	4223      	tst	r3, r4
 800111a:	d106      	bne.n	800112a <__aeabi_ddiv+0x45e>
 800111c:	431c      	orrs	r4, r3
 800111e:	0324      	lsls	r4, r4, #12
 8001120:	002e      	movs	r6, r5
 8001122:	4690      	mov	r8, r2
 8001124:	4b71      	ldr	r3, [pc, #452]	@ (80012ec <__aeabi_ddiv+0x620>)
 8001126:	0b24      	lsrs	r4, r4, #12
 8001128:	e630      	b.n	8000d8c <__aeabi_ddiv+0xc0>
 800112a:	2480      	movs	r4, #128	@ 0x80
 800112c:	464b      	mov	r3, r9
 800112e:	0324      	lsls	r4, r4, #12
 8001130:	431c      	orrs	r4, r3
 8001132:	0324      	lsls	r4, r4, #12
 8001134:	9e02      	ldr	r6, [sp, #8]
 8001136:	4b6d      	ldr	r3, [pc, #436]	@ (80012ec <__aeabi_ddiv+0x620>)
 8001138:	0b24      	lsrs	r4, r4, #12
 800113a:	e627      	b.n	8000d8c <__aeabi_ddiv+0xc0>
 800113c:	2b00      	cmp	r3, #0
 800113e:	d100      	bne.n	8001142 <__aeabi_ddiv+0x476>
 8001140:	e700      	b.n	8000f44 <__aeabi_ddiv+0x278>
 8001142:	9800      	ldr	r0, [sp, #0]
 8001144:	1e51      	subs	r1, r2, #1
 8001146:	4684      	mov	ip, r0
 8001148:	4464      	add	r4, ip
 800114a:	4284      	cmp	r4, r0
 800114c:	d200      	bcs.n	8001150 <__aeabi_ddiv+0x484>
 800114e:	e084      	b.n	800125a <__aeabi_ddiv+0x58e>
 8001150:	42bc      	cmp	r4, r7
 8001152:	d200      	bcs.n	8001156 <__aeabi_ddiv+0x48a>
 8001154:	e0ae      	b.n	80012b4 <__aeabi_ddiv+0x5e8>
 8001156:	d100      	bne.n	800115a <__aeabi_ddiv+0x48e>
 8001158:	e0c1      	b.n	80012de <__aeabi_ddiv+0x612>
 800115a:	000a      	movs	r2, r1
 800115c:	e6f0      	b.n	8000f40 <__aeabi_ddiv+0x274>
 800115e:	4542      	cmp	r2, r8
 8001160:	d900      	bls.n	8001164 <__aeabi_ddiv+0x498>
 8001162:	e62c      	b.n	8000dbe <__aeabi_ddiv+0xf2>
 8001164:	464b      	mov	r3, r9
 8001166:	07dc      	lsls	r4, r3, #31
 8001168:	0858      	lsrs	r0, r3, #1
 800116a:	4643      	mov	r3, r8
 800116c:	085b      	lsrs	r3, r3, #1
 800116e:	431c      	orrs	r4, r3
 8001170:	4643      	mov	r3, r8
 8001172:	07df      	lsls	r7, r3, #31
 8001174:	e62a      	b.n	8000dcc <__aeabi_ddiv+0x100>
 8001176:	f001 f9ab 	bl	80024d0 <__clzsi2>
 800117a:	2315      	movs	r3, #21
 800117c:	469c      	mov	ip, r3
 800117e:	4484      	add	ip, r0
 8001180:	0002      	movs	r2, r0
 8001182:	4663      	mov	r3, ip
 8001184:	3220      	adds	r2, #32
 8001186:	2b1c      	cmp	r3, #28
 8001188:	dc00      	bgt.n	800118c <__aeabi_ddiv+0x4c0>
 800118a:	e72e      	b.n	8000fea <__aeabi_ddiv+0x31e>
 800118c:	0023      	movs	r3, r4
 800118e:	3808      	subs	r0, #8
 8001190:	4083      	lsls	r3, r0
 8001192:	4699      	mov	r9, r3
 8001194:	2300      	movs	r3, #0
 8001196:	4698      	mov	r8, r3
 8001198:	e736      	b.n	8001008 <__aeabi_ddiv+0x33c>
 800119a:	f001 f999 	bl	80024d0 <__clzsi2>
 800119e:	0002      	movs	r2, r0
 80011a0:	0003      	movs	r3, r0
 80011a2:	3215      	adds	r2, #21
 80011a4:	3320      	adds	r3, #32
 80011a6:	2a1c      	cmp	r2, #28
 80011a8:	dc00      	bgt.n	80011ac <__aeabi_ddiv+0x4e0>
 80011aa:	e6fb      	b.n	8000fa4 <__aeabi_ddiv+0x2d8>
 80011ac:	9900      	ldr	r1, [sp, #0]
 80011ae:	3808      	subs	r0, #8
 80011b0:	4081      	lsls	r1, r0
 80011b2:	2200      	movs	r2, #0
 80011b4:	468b      	mov	fp, r1
 80011b6:	e702      	b.n	8000fbe <__aeabi_ddiv+0x2f2>
 80011b8:	9900      	ldr	r1, [sp, #0]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	468c      	mov	ip, r1
 80011be:	4464      	add	r4, ip
 80011c0:	42a1      	cmp	r1, r4
 80011c2:	d900      	bls.n	80011c6 <__aeabi_ddiv+0x4fa>
 80011c4:	e69a      	b.n	8000efc <__aeabi_ddiv+0x230>
 80011c6:	42a2      	cmp	r2, r4
 80011c8:	d800      	bhi.n	80011cc <__aeabi_ddiv+0x500>
 80011ca:	e697      	b.n	8000efc <__aeabi_ddiv+0x230>
 80011cc:	1e83      	subs	r3, r0, #2
 80011ce:	4464      	add	r4, ip
 80011d0:	e694      	b.n	8000efc <__aeabi_ddiv+0x230>
 80011d2:	46ac      	mov	ip, r5
 80011d4:	4461      	add	r1, ip
 80011d6:	3f01      	subs	r7, #1
 80011d8:	428d      	cmp	r5, r1
 80011da:	d900      	bls.n	80011de <__aeabi_ddiv+0x512>
 80011dc:	e680      	b.n	8000ee0 <__aeabi_ddiv+0x214>
 80011de:	428a      	cmp	r2, r1
 80011e0:	d800      	bhi.n	80011e4 <__aeabi_ddiv+0x518>
 80011e2:	e67d      	b.n	8000ee0 <__aeabi_ddiv+0x214>
 80011e4:	1e87      	subs	r7, r0, #2
 80011e6:	4461      	add	r1, ip
 80011e8:	e67a      	b.n	8000ee0 <__aeabi_ddiv+0x214>
 80011ea:	4285      	cmp	r5, r0
 80011ec:	d000      	beq.n	80011f0 <__aeabi_ddiv+0x524>
 80011ee:	e65f      	b.n	8000eb0 <__aeabi_ddiv+0x1e4>
 80011f0:	45b9      	cmp	r9, r7
 80011f2:	d900      	bls.n	80011f6 <__aeabi_ddiv+0x52a>
 80011f4:	e65c      	b.n	8000eb0 <__aeabi_ddiv+0x1e4>
 80011f6:	e656      	b.n	8000ea6 <__aeabi_ddiv+0x1da>
 80011f8:	42a2      	cmp	r2, r4
 80011fa:	d800      	bhi.n	80011fe <__aeabi_ddiv+0x532>
 80011fc:	e61a      	b.n	8000e34 <__aeabi_ddiv+0x168>
 80011fe:	1e83      	subs	r3, r0, #2
 8001200:	4464      	add	r4, ip
 8001202:	e617      	b.n	8000e34 <__aeabi_ddiv+0x168>
 8001204:	428a      	cmp	r2, r1
 8001206:	d800      	bhi.n	800120a <__aeabi_ddiv+0x53e>
 8001208:	e600      	b.n	8000e0c <__aeabi_ddiv+0x140>
 800120a:	46ac      	mov	ip, r5
 800120c:	1e83      	subs	r3, r0, #2
 800120e:	4698      	mov	r8, r3
 8001210:	4461      	add	r1, ip
 8001212:	e5fb      	b.n	8000e0c <__aeabi_ddiv+0x140>
 8001214:	4837      	ldr	r0, [pc, #220]	@ (80012f4 <__aeabi_ddiv+0x628>)
 8001216:	0014      	movs	r4, r2
 8001218:	4450      	add	r0, sl
 800121a:	4082      	lsls	r2, r0
 800121c:	465b      	mov	r3, fp
 800121e:	0017      	movs	r7, r2
 8001220:	4083      	lsls	r3, r0
 8001222:	40cc      	lsrs	r4, r1
 8001224:	1e7a      	subs	r2, r7, #1
 8001226:	4197      	sbcs	r7, r2
 8001228:	4323      	orrs	r3, r4
 800122a:	433b      	orrs	r3, r7
 800122c:	001a      	movs	r2, r3
 800122e:	465b      	mov	r3, fp
 8001230:	40cb      	lsrs	r3, r1
 8001232:	0751      	lsls	r1, r2, #29
 8001234:	d009      	beq.n	800124a <__aeabi_ddiv+0x57e>
 8001236:	210f      	movs	r1, #15
 8001238:	4011      	ands	r1, r2
 800123a:	2904      	cmp	r1, #4
 800123c:	d005      	beq.n	800124a <__aeabi_ddiv+0x57e>
 800123e:	1d11      	adds	r1, r2, #4
 8001240:	4291      	cmp	r1, r2
 8001242:	4192      	sbcs	r2, r2
 8001244:	4252      	negs	r2, r2
 8001246:	189b      	adds	r3, r3, r2
 8001248:	000a      	movs	r2, r1
 800124a:	0219      	lsls	r1, r3, #8
 800124c:	d400      	bmi.n	8001250 <__aeabi_ddiv+0x584>
 800124e:	e755      	b.n	80010fc <__aeabi_ddiv+0x430>
 8001250:	2200      	movs	r2, #0
 8001252:	2301      	movs	r3, #1
 8001254:	2400      	movs	r4, #0
 8001256:	4690      	mov	r8, r2
 8001258:	e598      	b.n	8000d8c <__aeabi_ddiv+0xc0>
 800125a:	000a      	movs	r2, r1
 800125c:	42bc      	cmp	r4, r7
 800125e:	d000      	beq.n	8001262 <__aeabi_ddiv+0x596>
 8001260:	e66e      	b.n	8000f40 <__aeabi_ddiv+0x274>
 8001262:	454b      	cmp	r3, r9
 8001264:	d000      	beq.n	8001268 <__aeabi_ddiv+0x59c>
 8001266:	e66b      	b.n	8000f40 <__aeabi_ddiv+0x274>
 8001268:	e66c      	b.n	8000f44 <__aeabi_ddiv+0x278>
 800126a:	4b23      	ldr	r3, [pc, #140]	@ (80012f8 <__aeabi_ddiv+0x62c>)
 800126c:	4a23      	ldr	r2, [pc, #140]	@ (80012fc <__aeabi_ddiv+0x630>)
 800126e:	4453      	add	r3, sl
 8001270:	4592      	cmp	sl, r2
 8001272:	da00      	bge.n	8001276 <__aeabi_ddiv+0x5aa>
 8001274:	e718      	b.n	80010a8 <__aeabi_ddiv+0x3dc>
 8001276:	2101      	movs	r1, #1
 8001278:	4249      	negs	r1, r1
 800127a:	1d0a      	adds	r2, r1, #4
 800127c:	428a      	cmp	r2, r1
 800127e:	4189      	sbcs	r1, r1
 8001280:	4249      	negs	r1, r1
 8001282:	448b      	add	fp, r1
 8001284:	e666      	b.n	8000f54 <__aeabi_ddiv+0x288>
 8001286:	210f      	movs	r1, #15
 8001288:	4011      	ands	r1, r2
 800128a:	2904      	cmp	r1, #4
 800128c:	d100      	bne.n	8001290 <__aeabi_ddiv+0x5c4>
 800128e:	e661      	b.n	8000f54 <__aeabi_ddiv+0x288>
 8001290:	0011      	movs	r1, r2
 8001292:	e7f2      	b.n	800127a <__aeabi_ddiv+0x5ae>
 8001294:	42bc      	cmp	r4, r7
 8001296:	d800      	bhi.n	800129a <__aeabi_ddiv+0x5ce>
 8001298:	e60a      	b.n	8000eb0 <__aeabi_ddiv+0x1e4>
 800129a:	2302      	movs	r3, #2
 800129c:	425b      	negs	r3, r3
 800129e:	469c      	mov	ip, r3
 80012a0:	9900      	ldr	r1, [sp, #0]
 80012a2:	444f      	add	r7, r9
 80012a4:	454f      	cmp	r7, r9
 80012a6:	419b      	sbcs	r3, r3
 80012a8:	44e3      	add	fp, ip
 80012aa:	468c      	mov	ip, r1
 80012ac:	425b      	negs	r3, r3
 80012ae:	4463      	add	r3, ip
 80012b0:	18c0      	adds	r0, r0, r3
 80012b2:	e5ff      	b.n	8000eb4 <__aeabi_ddiv+0x1e8>
 80012b4:	4649      	mov	r1, r9
 80012b6:	9d00      	ldr	r5, [sp, #0]
 80012b8:	0048      	lsls	r0, r1, #1
 80012ba:	4548      	cmp	r0, r9
 80012bc:	4189      	sbcs	r1, r1
 80012be:	46ac      	mov	ip, r5
 80012c0:	4249      	negs	r1, r1
 80012c2:	4461      	add	r1, ip
 80012c4:	4681      	mov	r9, r0
 80012c6:	3a02      	subs	r2, #2
 80012c8:	1864      	adds	r4, r4, r1
 80012ca:	e7c7      	b.n	800125c <__aeabi_ddiv+0x590>
 80012cc:	2480      	movs	r4, #128	@ 0x80
 80012ce:	465b      	mov	r3, fp
 80012d0:	0324      	lsls	r4, r4, #12
 80012d2:	431c      	orrs	r4, r3
 80012d4:	0324      	lsls	r4, r4, #12
 80012d6:	4690      	mov	r8, r2
 80012d8:	4b04      	ldr	r3, [pc, #16]	@ (80012ec <__aeabi_ddiv+0x620>)
 80012da:	0b24      	lsrs	r4, r4, #12
 80012dc:	e556      	b.n	8000d8c <__aeabi_ddiv+0xc0>
 80012de:	4599      	cmp	r9, r3
 80012e0:	d3e8      	bcc.n	80012b4 <__aeabi_ddiv+0x5e8>
 80012e2:	000a      	movs	r2, r1
 80012e4:	e7bd      	b.n	8001262 <__aeabi_ddiv+0x596>
 80012e6:	2300      	movs	r3, #0
 80012e8:	e708      	b.n	80010fc <__aeabi_ddiv+0x430>
 80012ea:	46c0      	nop			@ (mov r8, r8)
 80012ec:	000007ff 	.word	0x000007ff
 80012f0:	0000043e 	.word	0x0000043e
 80012f4:	0000041e 	.word	0x0000041e
 80012f8:	000003ff 	.word	0x000003ff
 80012fc:	fffffc02 	.word	0xfffffc02

08001300 <__eqdf2>:
 8001300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001302:	4657      	mov	r7, sl
 8001304:	46de      	mov	lr, fp
 8001306:	464e      	mov	r6, r9
 8001308:	4645      	mov	r5, r8
 800130a:	b5e0      	push	{r5, r6, r7, lr}
 800130c:	000d      	movs	r5, r1
 800130e:	0004      	movs	r4, r0
 8001310:	0fe8      	lsrs	r0, r5, #31
 8001312:	4683      	mov	fp, r0
 8001314:	0309      	lsls	r1, r1, #12
 8001316:	0fd8      	lsrs	r0, r3, #31
 8001318:	0b09      	lsrs	r1, r1, #12
 800131a:	4682      	mov	sl, r0
 800131c:	4819      	ldr	r0, [pc, #100]	@ (8001384 <__eqdf2+0x84>)
 800131e:	468c      	mov	ip, r1
 8001320:	031f      	lsls	r7, r3, #12
 8001322:	0069      	lsls	r1, r5, #1
 8001324:	005e      	lsls	r6, r3, #1
 8001326:	0d49      	lsrs	r1, r1, #21
 8001328:	0b3f      	lsrs	r7, r7, #12
 800132a:	0d76      	lsrs	r6, r6, #21
 800132c:	4281      	cmp	r1, r0
 800132e:	d018      	beq.n	8001362 <__eqdf2+0x62>
 8001330:	4286      	cmp	r6, r0
 8001332:	d00f      	beq.n	8001354 <__eqdf2+0x54>
 8001334:	2001      	movs	r0, #1
 8001336:	42b1      	cmp	r1, r6
 8001338:	d10d      	bne.n	8001356 <__eqdf2+0x56>
 800133a:	45bc      	cmp	ip, r7
 800133c:	d10b      	bne.n	8001356 <__eqdf2+0x56>
 800133e:	4294      	cmp	r4, r2
 8001340:	d109      	bne.n	8001356 <__eqdf2+0x56>
 8001342:	45d3      	cmp	fp, sl
 8001344:	d01c      	beq.n	8001380 <__eqdf2+0x80>
 8001346:	2900      	cmp	r1, #0
 8001348:	d105      	bne.n	8001356 <__eqdf2+0x56>
 800134a:	4660      	mov	r0, ip
 800134c:	4320      	orrs	r0, r4
 800134e:	1e43      	subs	r3, r0, #1
 8001350:	4198      	sbcs	r0, r3
 8001352:	e000      	b.n	8001356 <__eqdf2+0x56>
 8001354:	2001      	movs	r0, #1
 8001356:	bcf0      	pop	{r4, r5, r6, r7}
 8001358:	46bb      	mov	fp, r7
 800135a:	46b2      	mov	sl, r6
 800135c:	46a9      	mov	r9, r5
 800135e:	46a0      	mov	r8, r4
 8001360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001362:	2001      	movs	r0, #1
 8001364:	428e      	cmp	r6, r1
 8001366:	d1f6      	bne.n	8001356 <__eqdf2+0x56>
 8001368:	4661      	mov	r1, ip
 800136a:	4339      	orrs	r1, r7
 800136c:	000f      	movs	r7, r1
 800136e:	4317      	orrs	r7, r2
 8001370:	4327      	orrs	r7, r4
 8001372:	d1f0      	bne.n	8001356 <__eqdf2+0x56>
 8001374:	465b      	mov	r3, fp
 8001376:	4652      	mov	r2, sl
 8001378:	1a98      	subs	r0, r3, r2
 800137a:	1e43      	subs	r3, r0, #1
 800137c:	4198      	sbcs	r0, r3
 800137e:	e7ea      	b.n	8001356 <__eqdf2+0x56>
 8001380:	2000      	movs	r0, #0
 8001382:	e7e8      	b.n	8001356 <__eqdf2+0x56>
 8001384:	000007ff 	.word	0x000007ff

08001388 <__gedf2>:
 8001388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138a:	4657      	mov	r7, sl
 800138c:	464e      	mov	r6, r9
 800138e:	4645      	mov	r5, r8
 8001390:	46de      	mov	lr, fp
 8001392:	b5e0      	push	{r5, r6, r7, lr}
 8001394:	000d      	movs	r5, r1
 8001396:	030f      	lsls	r7, r1, #12
 8001398:	0b39      	lsrs	r1, r7, #12
 800139a:	b083      	sub	sp, #12
 800139c:	0004      	movs	r4, r0
 800139e:	4680      	mov	r8, r0
 80013a0:	9101      	str	r1, [sp, #4]
 80013a2:	0058      	lsls	r0, r3, #1
 80013a4:	0fe9      	lsrs	r1, r5, #31
 80013a6:	4f31      	ldr	r7, [pc, #196]	@ (800146c <__gedf2+0xe4>)
 80013a8:	0d40      	lsrs	r0, r0, #21
 80013aa:	468c      	mov	ip, r1
 80013ac:	006e      	lsls	r6, r5, #1
 80013ae:	0319      	lsls	r1, r3, #12
 80013b0:	4682      	mov	sl, r0
 80013b2:	4691      	mov	r9, r2
 80013b4:	0d76      	lsrs	r6, r6, #21
 80013b6:	0b09      	lsrs	r1, r1, #12
 80013b8:	0fd8      	lsrs	r0, r3, #31
 80013ba:	42be      	cmp	r6, r7
 80013bc:	d01f      	beq.n	80013fe <__gedf2+0x76>
 80013be:	45ba      	cmp	sl, r7
 80013c0:	d00f      	beq.n	80013e2 <__gedf2+0x5a>
 80013c2:	2e00      	cmp	r6, #0
 80013c4:	d12f      	bne.n	8001426 <__gedf2+0x9e>
 80013c6:	4655      	mov	r5, sl
 80013c8:	9e01      	ldr	r6, [sp, #4]
 80013ca:	4334      	orrs	r4, r6
 80013cc:	2d00      	cmp	r5, #0
 80013ce:	d127      	bne.n	8001420 <__gedf2+0x98>
 80013d0:	430a      	orrs	r2, r1
 80013d2:	d03a      	beq.n	800144a <__gedf2+0xc2>
 80013d4:	2c00      	cmp	r4, #0
 80013d6:	d145      	bne.n	8001464 <__gedf2+0xdc>
 80013d8:	2800      	cmp	r0, #0
 80013da:	d11a      	bne.n	8001412 <__gedf2+0x8a>
 80013dc:	2001      	movs	r0, #1
 80013de:	4240      	negs	r0, r0
 80013e0:	e017      	b.n	8001412 <__gedf2+0x8a>
 80013e2:	4311      	orrs	r1, r2
 80013e4:	d13b      	bne.n	800145e <__gedf2+0xd6>
 80013e6:	2e00      	cmp	r6, #0
 80013e8:	d102      	bne.n	80013f0 <__gedf2+0x68>
 80013ea:	9f01      	ldr	r7, [sp, #4]
 80013ec:	4327      	orrs	r7, r4
 80013ee:	d0f3      	beq.n	80013d8 <__gedf2+0x50>
 80013f0:	4584      	cmp	ip, r0
 80013f2:	d109      	bne.n	8001408 <__gedf2+0x80>
 80013f4:	4663      	mov	r3, ip
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f0      	beq.n	80013dc <__gedf2+0x54>
 80013fa:	4660      	mov	r0, ip
 80013fc:	e009      	b.n	8001412 <__gedf2+0x8a>
 80013fe:	9f01      	ldr	r7, [sp, #4]
 8001400:	4327      	orrs	r7, r4
 8001402:	d12c      	bne.n	800145e <__gedf2+0xd6>
 8001404:	45b2      	cmp	sl, r6
 8001406:	d024      	beq.n	8001452 <__gedf2+0xca>
 8001408:	4663      	mov	r3, ip
 800140a:	2002      	movs	r0, #2
 800140c:	3b01      	subs	r3, #1
 800140e:	4018      	ands	r0, r3
 8001410:	3801      	subs	r0, #1
 8001412:	b003      	add	sp, #12
 8001414:	bcf0      	pop	{r4, r5, r6, r7}
 8001416:	46bb      	mov	fp, r7
 8001418:	46b2      	mov	sl, r6
 800141a:	46a9      	mov	r9, r5
 800141c:	46a0      	mov	r8, r4
 800141e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001420:	2c00      	cmp	r4, #0
 8001422:	d0d9      	beq.n	80013d8 <__gedf2+0x50>
 8001424:	e7e4      	b.n	80013f0 <__gedf2+0x68>
 8001426:	4654      	mov	r4, sl
 8001428:	2c00      	cmp	r4, #0
 800142a:	d0ed      	beq.n	8001408 <__gedf2+0x80>
 800142c:	4584      	cmp	ip, r0
 800142e:	d1eb      	bne.n	8001408 <__gedf2+0x80>
 8001430:	4556      	cmp	r6, sl
 8001432:	dce9      	bgt.n	8001408 <__gedf2+0x80>
 8001434:	dbde      	blt.n	80013f4 <__gedf2+0x6c>
 8001436:	9b01      	ldr	r3, [sp, #4]
 8001438:	428b      	cmp	r3, r1
 800143a:	d8e5      	bhi.n	8001408 <__gedf2+0x80>
 800143c:	d1da      	bne.n	80013f4 <__gedf2+0x6c>
 800143e:	45c8      	cmp	r8, r9
 8001440:	d8e2      	bhi.n	8001408 <__gedf2+0x80>
 8001442:	2000      	movs	r0, #0
 8001444:	45c8      	cmp	r8, r9
 8001446:	d2e4      	bcs.n	8001412 <__gedf2+0x8a>
 8001448:	e7d4      	b.n	80013f4 <__gedf2+0x6c>
 800144a:	2000      	movs	r0, #0
 800144c:	2c00      	cmp	r4, #0
 800144e:	d0e0      	beq.n	8001412 <__gedf2+0x8a>
 8001450:	e7da      	b.n	8001408 <__gedf2+0x80>
 8001452:	4311      	orrs	r1, r2
 8001454:	d103      	bne.n	800145e <__gedf2+0xd6>
 8001456:	4584      	cmp	ip, r0
 8001458:	d1d6      	bne.n	8001408 <__gedf2+0x80>
 800145a:	2000      	movs	r0, #0
 800145c:	e7d9      	b.n	8001412 <__gedf2+0x8a>
 800145e:	2002      	movs	r0, #2
 8001460:	4240      	negs	r0, r0
 8001462:	e7d6      	b.n	8001412 <__gedf2+0x8a>
 8001464:	4584      	cmp	ip, r0
 8001466:	d0e6      	beq.n	8001436 <__gedf2+0xae>
 8001468:	e7ce      	b.n	8001408 <__gedf2+0x80>
 800146a:	46c0      	nop			@ (mov r8, r8)
 800146c:	000007ff 	.word	0x000007ff

08001470 <__ledf2>:
 8001470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001472:	4657      	mov	r7, sl
 8001474:	464e      	mov	r6, r9
 8001476:	4645      	mov	r5, r8
 8001478:	46de      	mov	lr, fp
 800147a:	b5e0      	push	{r5, r6, r7, lr}
 800147c:	000d      	movs	r5, r1
 800147e:	030f      	lsls	r7, r1, #12
 8001480:	0004      	movs	r4, r0
 8001482:	4680      	mov	r8, r0
 8001484:	0fe8      	lsrs	r0, r5, #31
 8001486:	0b39      	lsrs	r1, r7, #12
 8001488:	4684      	mov	ip, r0
 800148a:	b083      	sub	sp, #12
 800148c:	0058      	lsls	r0, r3, #1
 800148e:	4f30      	ldr	r7, [pc, #192]	@ (8001550 <__ledf2+0xe0>)
 8001490:	0d40      	lsrs	r0, r0, #21
 8001492:	9101      	str	r1, [sp, #4]
 8001494:	031e      	lsls	r6, r3, #12
 8001496:	0069      	lsls	r1, r5, #1
 8001498:	4682      	mov	sl, r0
 800149a:	4691      	mov	r9, r2
 800149c:	0d49      	lsrs	r1, r1, #21
 800149e:	0b36      	lsrs	r6, r6, #12
 80014a0:	0fd8      	lsrs	r0, r3, #31
 80014a2:	42b9      	cmp	r1, r7
 80014a4:	d020      	beq.n	80014e8 <__ledf2+0x78>
 80014a6:	45ba      	cmp	sl, r7
 80014a8:	d00f      	beq.n	80014ca <__ledf2+0x5a>
 80014aa:	2900      	cmp	r1, #0
 80014ac:	d12b      	bne.n	8001506 <__ledf2+0x96>
 80014ae:	9901      	ldr	r1, [sp, #4]
 80014b0:	430c      	orrs	r4, r1
 80014b2:	4651      	mov	r1, sl
 80014b4:	2900      	cmp	r1, #0
 80014b6:	d137      	bne.n	8001528 <__ledf2+0xb8>
 80014b8:	4332      	orrs	r2, r6
 80014ba:	d038      	beq.n	800152e <__ledf2+0xbe>
 80014bc:	2c00      	cmp	r4, #0
 80014be:	d144      	bne.n	800154a <__ledf2+0xda>
 80014c0:	2800      	cmp	r0, #0
 80014c2:	d119      	bne.n	80014f8 <__ledf2+0x88>
 80014c4:	2001      	movs	r0, #1
 80014c6:	4240      	negs	r0, r0
 80014c8:	e016      	b.n	80014f8 <__ledf2+0x88>
 80014ca:	4316      	orrs	r6, r2
 80014cc:	d113      	bne.n	80014f6 <__ledf2+0x86>
 80014ce:	2900      	cmp	r1, #0
 80014d0:	d102      	bne.n	80014d8 <__ledf2+0x68>
 80014d2:	9f01      	ldr	r7, [sp, #4]
 80014d4:	4327      	orrs	r7, r4
 80014d6:	d0f3      	beq.n	80014c0 <__ledf2+0x50>
 80014d8:	4584      	cmp	ip, r0
 80014da:	d020      	beq.n	800151e <__ledf2+0xae>
 80014dc:	4663      	mov	r3, ip
 80014de:	2002      	movs	r0, #2
 80014e0:	3b01      	subs	r3, #1
 80014e2:	4018      	ands	r0, r3
 80014e4:	3801      	subs	r0, #1
 80014e6:	e007      	b.n	80014f8 <__ledf2+0x88>
 80014e8:	9f01      	ldr	r7, [sp, #4]
 80014ea:	4327      	orrs	r7, r4
 80014ec:	d103      	bne.n	80014f6 <__ledf2+0x86>
 80014ee:	458a      	cmp	sl, r1
 80014f0:	d1f4      	bne.n	80014dc <__ledf2+0x6c>
 80014f2:	4316      	orrs	r6, r2
 80014f4:	d01f      	beq.n	8001536 <__ledf2+0xc6>
 80014f6:	2002      	movs	r0, #2
 80014f8:	b003      	add	sp, #12
 80014fa:	bcf0      	pop	{r4, r5, r6, r7}
 80014fc:	46bb      	mov	fp, r7
 80014fe:	46b2      	mov	sl, r6
 8001500:	46a9      	mov	r9, r5
 8001502:	46a0      	mov	r8, r4
 8001504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001506:	4654      	mov	r4, sl
 8001508:	2c00      	cmp	r4, #0
 800150a:	d0e7      	beq.n	80014dc <__ledf2+0x6c>
 800150c:	4584      	cmp	ip, r0
 800150e:	d1e5      	bne.n	80014dc <__ledf2+0x6c>
 8001510:	4551      	cmp	r1, sl
 8001512:	dce3      	bgt.n	80014dc <__ledf2+0x6c>
 8001514:	db03      	blt.n	800151e <__ledf2+0xae>
 8001516:	9b01      	ldr	r3, [sp, #4]
 8001518:	42b3      	cmp	r3, r6
 800151a:	d8df      	bhi.n	80014dc <__ledf2+0x6c>
 800151c:	d00f      	beq.n	800153e <__ledf2+0xce>
 800151e:	4663      	mov	r3, ip
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0cf      	beq.n	80014c4 <__ledf2+0x54>
 8001524:	4660      	mov	r0, ip
 8001526:	e7e7      	b.n	80014f8 <__ledf2+0x88>
 8001528:	2c00      	cmp	r4, #0
 800152a:	d0c9      	beq.n	80014c0 <__ledf2+0x50>
 800152c:	e7d4      	b.n	80014d8 <__ledf2+0x68>
 800152e:	2000      	movs	r0, #0
 8001530:	2c00      	cmp	r4, #0
 8001532:	d0e1      	beq.n	80014f8 <__ledf2+0x88>
 8001534:	e7d2      	b.n	80014dc <__ledf2+0x6c>
 8001536:	4584      	cmp	ip, r0
 8001538:	d1d0      	bne.n	80014dc <__ledf2+0x6c>
 800153a:	2000      	movs	r0, #0
 800153c:	e7dc      	b.n	80014f8 <__ledf2+0x88>
 800153e:	45c8      	cmp	r8, r9
 8001540:	d8cc      	bhi.n	80014dc <__ledf2+0x6c>
 8001542:	2000      	movs	r0, #0
 8001544:	45c8      	cmp	r8, r9
 8001546:	d2d7      	bcs.n	80014f8 <__ledf2+0x88>
 8001548:	e7e9      	b.n	800151e <__ledf2+0xae>
 800154a:	4584      	cmp	ip, r0
 800154c:	d0e3      	beq.n	8001516 <__ledf2+0xa6>
 800154e:	e7c5      	b.n	80014dc <__ledf2+0x6c>
 8001550:	000007ff 	.word	0x000007ff

08001554 <__aeabi_dmul>:
 8001554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001556:	4657      	mov	r7, sl
 8001558:	46de      	mov	lr, fp
 800155a:	464e      	mov	r6, r9
 800155c:	4645      	mov	r5, r8
 800155e:	b5e0      	push	{r5, r6, r7, lr}
 8001560:	001f      	movs	r7, r3
 8001562:	030b      	lsls	r3, r1, #12
 8001564:	0b1b      	lsrs	r3, r3, #12
 8001566:	0016      	movs	r6, r2
 8001568:	469a      	mov	sl, r3
 800156a:	0fca      	lsrs	r2, r1, #31
 800156c:	004b      	lsls	r3, r1, #1
 800156e:	0004      	movs	r4, r0
 8001570:	4693      	mov	fp, r2
 8001572:	b087      	sub	sp, #28
 8001574:	0d5b      	lsrs	r3, r3, #21
 8001576:	d100      	bne.n	800157a <__aeabi_dmul+0x26>
 8001578:	e0d5      	b.n	8001726 <__aeabi_dmul+0x1d2>
 800157a:	4abb      	ldr	r2, [pc, #748]	@ (8001868 <__aeabi_dmul+0x314>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d100      	bne.n	8001582 <__aeabi_dmul+0x2e>
 8001580:	e0f8      	b.n	8001774 <__aeabi_dmul+0x220>
 8001582:	4651      	mov	r1, sl
 8001584:	0f42      	lsrs	r2, r0, #29
 8001586:	00c9      	lsls	r1, r1, #3
 8001588:	430a      	orrs	r2, r1
 800158a:	2180      	movs	r1, #128	@ 0x80
 800158c:	0409      	lsls	r1, r1, #16
 800158e:	4311      	orrs	r1, r2
 8001590:	00c2      	lsls	r2, r0, #3
 8001592:	4691      	mov	r9, r2
 8001594:	4ab5      	ldr	r2, [pc, #724]	@ (800186c <__aeabi_dmul+0x318>)
 8001596:	468a      	mov	sl, r1
 8001598:	189d      	adds	r5, r3, r2
 800159a:	2300      	movs	r3, #0
 800159c:	4698      	mov	r8, r3
 800159e:	9302      	str	r3, [sp, #8]
 80015a0:	033c      	lsls	r4, r7, #12
 80015a2:	007b      	lsls	r3, r7, #1
 80015a4:	0ffa      	lsrs	r2, r7, #31
 80015a6:	0030      	movs	r0, r6
 80015a8:	0b24      	lsrs	r4, r4, #12
 80015aa:	0d5b      	lsrs	r3, r3, #21
 80015ac:	9200      	str	r2, [sp, #0]
 80015ae:	d100      	bne.n	80015b2 <__aeabi_dmul+0x5e>
 80015b0:	e096      	b.n	80016e0 <__aeabi_dmul+0x18c>
 80015b2:	4aad      	ldr	r2, [pc, #692]	@ (8001868 <__aeabi_dmul+0x314>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d031      	beq.n	800161c <__aeabi_dmul+0xc8>
 80015b8:	0f72      	lsrs	r2, r6, #29
 80015ba:	00e4      	lsls	r4, r4, #3
 80015bc:	4322      	orrs	r2, r4
 80015be:	2480      	movs	r4, #128	@ 0x80
 80015c0:	0424      	lsls	r4, r4, #16
 80015c2:	4314      	orrs	r4, r2
 80015c4:	4aa9      	ldr	r2, [pc, #676]	@ (800186c <__aeabi_dmul+0x318>)
 80015c6:	00f0      	lsls	r0, r6, #3
 80015c8:	4694      	mov	ip, r2
 80015ca:	4463      	add	r3, ip
 80015cc:	195b      	adds	r3, r3, r5
 80015ce:	1c5a      	adds	r2, r3, #1
 80015d0:	9201      	str	r2, [sp, #4]
 80015d2:	4642      	mov	r2, r8
 80015d4:	2600      	movs	r6, #0
 80015d6:	2a0a      	cmp	r2, #10
 80015d8:	dc42      	bgt.n	8001660 <__aeabi_dmul+0x10c>
 80015da:	465a      	mov	r2, fp
 80015dc:	9900      	ldr	r1, [sp, #0]
 80015de:	404a      	eors	r2, r1
 80015e0:	4693      	mov	fp, r2
 80015e2:	4642      	mov	r2, r8
 80015e4:	2a02      	cmp	r2, #2
 80015e6:	dc32      	bgt.n	800164e <__aeabi_dmul+0xfa>
 80015e8:	3a01      	subs	r2, #1
 80015ea:	2a01      	cmp	r2, #1
 80015ec:	d900      	bls.n	80015f0 <__aeabi_dmul+0x9c>
 80015ee:	e149      	b.n	8001884 <__aeabi_dmul+0x330>
 80015f0:	2e02      	cmp	r6, #2
 80015f2:	d100      	bne.n	80015f6 <__aeabi_dmul+0xa2>
 80015f4:	e0ca      	b.n	800178c <__aeabi_dmul+0x238>
 80015f6:	2e01      	cmp	r6, #1
 80015f8:	d13d      	bne.n	8001676 <__aeabi_dmul+0x122>
 80015fa:	2300      	movs	r3, #0
 80015fc:	2400      	movs	r4, #0
 80015fe:	2200      	movs	r2, #0
 8001600:	0010      	movs	r0, r2
 8001602:	465a      	mov	r2, fp
 8001604:	051b      	lsls	r3, r3, #20
 8001606:	4323      	orrs	r3, r4
 8001608:	07d2      	lsls	r2, r2, #31
 800160a:	4313      	orrs	r3, r2
 800160c:	0019      	movs	r1, r3
 800160e:	b007      	add	sp, #28
 8001610:	bcf0      	pop	{r4, r5, r6, r7}
 8001612:	46bb      	mov	fp, r7
 8001614:	46b2      	mov	sl, r6
 8001616:	46a9      	mov	r9, r5
 8001618:	46a0      	mov	r8, r4
 800161a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800161c:	4b92      	ldr	r3, [pc, #584]	@ (8001868 <__aeabi_dmul+0x314>)
 800161e:	4326      	orrs	r6, r4
 8001620:	18eb      	adds	r3, r5, r3
 8001622:	2e00      	cmp	r6, #0
 8001624:	d100      	bne.n	8001628 <__aeabi_dmul+0xd4>
 8001626:	e0bb      	b.n	80017a0 <__aeabi_dmul+0x24c>
 8001628:	2203      	movs	r2, #3
 800162a:	4641      	mov	r1, r8
 800162c:	4311      	orrs	r1, r2
 800162e:	465a      	mov	r2, fp
 8001630:	4688      	mov	r8, r1
 8001632:	9900      	ldr	r1, [sp, #0]
 8001634:	404a      	eors	r2, r1
 8001636:	2180      	movs	r1, #128	@ 0x80
 8001638:	0109      	lsls	r1, r1, #4
 800163a:	468c      	mov	ip, r1
 800163c:	0029      	movs	r1, r5
 800163e:	4461      	add	r1, ip
 8001640:	9101      	str	r1, [sp, #4]
 8001642:	4641      	mov	r1, r8
 8001644:	290a      	cmp	r1, #10
 8001646:	dd00      	ble.n	800164a <__aeabi_dmul+0xf6>
 8001648:	e233      	b.n	8001ab2 <__aeabi_dmul+0x55e>
 800164a:	4693      	mov	fp, r2
 800164c:	2603      	movs	r6, #3
 800164e:	4642      	mov	r2, r8
 8001650:	2701      	movs	r7, #1
 8001652:	4097      	lsls	r7, r2
 8001654:	21a6      	movs	r1, #166	@ 0xa6
 8001656:	003a      	movs	r2, r7
 8001658:	00c9      	lsls	r1, r1, #3
 800165a:	400a      	ands	r2, r1
 800165c:	420f      	tst	r7, r1
 800165e:	d031      	beq.n	80016c4 <__aeabi_dmul+0x170>
 8001660:	9e02      	ldr	r6, [sp, #8]
 8001662:	2e02      	cmp	r6, #2
 8001664:	d100      	bne.n	8001668 <__aeabi_dmul+0x114>
 8001666:	e235      	b.n	8001ad4 <__aeabi_dmul+0x580>
 8001668:	2e03      	cmp	r6, #3
 800166a:	d100      	bne.n	800166e <__aeabi_dmul+0x11a>
 800166c:	e1d2      	b.n	8001a14 <__aeabi_dmul+0x4c0>
 800166e:	4654      	mov	r4, sl
 8001670:	4648      	mov	r0, r9
 8001672:	2e01      	cmp	r6, #1
 8001674:	d0c1      	beq.n	80015fa <__aeabi_dmul+0xa6>
 8001676:	9a01      	ldr	r2, [sp, #4]
 8001678:	4b7d      	ldr	r3, [pc, #500]	@ (8001870 <__aeabi_dmul+0x31c>)
 800167a:	4694      	mov	ip, r2
 800167c:	4463      	add	r3, ip
 800167e:	2b00      	cmp	r3, #0
 8001680:	dc00      	bgt.n	8001684 <__aeabi_dmul+0x130>
 8001682:	e0c0      	b.n	8001806 <__aeabi_dmul+0x2b2>
 8001684:	0742      	lsls	r2, r0, #29
 8001686:	d009      	beq.n	800169c <__aeabi_dmul+0x148>
 8001688:	220f      	movs	r2, #15
 800168a:	4002      	ands	r2, r0
 800168c:	2a04      	cmp	r2, #4
 800168e:	d005      	beq.n	800169c <__aeabi_dmul+0x148>
 8001690:	1d02      	adds	r2, r0, #4
 8001692:	4282      	cmp	r2, r0
 8001694:	4180      	sbcs	r0, r0
 8001696:	4240      	negs	r0, r0
 8001698:	1824      	adds	r4, r4, r0
 800169a:	0010      	movs	r0, r2
 800169c:	01e2      	lsls	r2, r4, #7
 800169e:	d506      	bpl.n	80016ae <__aeabi_dmul+0x15a>
 80016a0:	4b74      	ldr	r3, [pc, #464]	@ (8001874 <__aeabi_dmul+0x320>)
 80016a2:	9a01      	ldr	r2, [sp, #4]
 80016a4:	401c      	ands	r4, r3
 80016a6:	2380      	movs	r3, #128	@ 0x80
 80016a8:	4694      	mov	ip, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4463      	add	r3, ip
 80016ae:	4a72      	ldr	r2, [pc, #456]	@ (8001878 <__aeabi_dmul+0x324>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	dc6b      	bgt.n	800178c <__aeabi_dmul+0x238>
 80016b4:	0762      	lsls	r2, r4, #29
 80016b6:	08c0      	lsrs	r0, r0, #3
 80016b8:	0264      	lsls	r4, r4, #9
 80016ba:	055b      	lsls	r3, r3, #21
 80016bc:	4302      	orrs	r2, r0
 80016be:	0b24      	lsrs	r4, r4, #12
 80016c0:	0d5b      	lsrs	r3, r3, #21
 80016c2:	e79d      	b.n	8001600 <__aeabi_dmul+0xac>
 80016c4:	2190      	movs	r1, #144	@ 0x90
 80016c6:	0089      	lsls	r1, r1, #2
 80016c8:	420f      	tst	r7, r1
 80016ca:	d163      	bne.n	8001794 <__aeabi_dmul+0x240>
 80016cc:	2288      	movs	r2, #136	@ 0x88
 80016ce:	423a      	tst	r2, r7
 80016d0:	d100      	bne.n	80016d4 <__aeabi_dmul+0x180>
 80016d2:	e0d7      	b.n	8001884 <__aeabi_dmul+0x330>
 80016d4:	9b00      	ldr	r3, [sp, #0]
 80016d6:	46a2      	mov	sl, r4
 80016d8:	469b      	mov	fp, r3
 80016da:	4681      	mov	r9, r0
 80016dc:	9602      	str	r6, [sp, #8]
 80016de:	e7bf      	b.n	8001660 <__aeabi_dmul+0x10c>
 80016e0:	0023      	movs	r3, r4
 80016e2:	4333      	orrs	r3, r6
 80016e4:	d100      	bne.n	80016e8 <__aeabi_dmul+0x194>
 80016e6:	e07f      	b.n	80017e8 <__aeabi_dmul+0x294>
 80016e8:	2c00      	cmp	r4, #0
 80016ea:	d100      	bne.n	80016ee <__aeabi_dmul+0x19a>
 80016ec:	e1ad      	b.n	8001a4a <__aeabi_dmul+0x4f6>
 80016ee:	0020      	movs	r0, r4
 80016f0:	f000 feee 	bl	80024d0 <__clzsi2>
 80016f4:	0002      	movs	r2, r0
 80016f6:	0003      	movs	r3, r0
 80016f8:	3a0b      	subs	r2, #11
 80016fa:	201d      	movs	r0, #29
 80016fc:	0019      	movs	r1, r3
 80016fe:	1a82      	subs	r2, r0, r2
 8001700:	0030      	movs	r0, r6
 8001702:	3908      	subs	r1, #8
 8001704:	40d0      	lsrs	r0, r2
 8001706:	408c      	lsls	r4, r1
 8001708:	4304      	orrs	r4, r0
 800170a:	0030      	movs	r0, r6
 800170c:	4088      	lsls	r0, r1
 800170e:	4a5b      	ldr	r2, [pc, #364]	@ (800187c <__aeabi_dmul+0x328>)
 8001710:	1aeb      	subs	r3, r5, r3
 8001712:	4694      	mov	ip, r2
 8001714:	4463      	add	r3, ip
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	9201      	str	r2, [sp, #4]
 800171a:	4642      	mov	r2, r8
 800171c:	2600      	movs	r6, #0
 800171e:	2a0a      	cmp	r2, #10
 8001720:	dc00      	bgt.n	8001724 <__aeabi_dmul+0x1d0>
 8001722:	e75a      	b.n	80015da <__aeabi_dmul+0x86>
 8001724:	e79c      	b.n	8001660 <__aeabi_dmul+0x10c>
 8001726:	4653      	mov	r3, sl
 8001728:	4303      	orrs	r3, r0
 800172a:	4699      	mov	r9, r3
 800172c:	d054      	beq.n	80017d8 <__aeabi_dmul+0x284>
 800172e:	4653      	mov	r3, sl
 8001730:	2b00      	cmp	r3, #0
 8001732:	d100      	bne.n	8001736 <__aeabi_dmul+0x1e2>
 8001734:	e177      	b.n	8001a26 <__aeabi_dmul+0x4d2>
 8001736:	4650      	mov	r0, sl
 8001738:	f000 feca 	bl	80024d0 <__clzsi2>
 800173c:	230b      	movs	r3, #11
 800173e:	425b      	negs	r3, r3
 8001740:	469c      	mov	ip, r3
 8001742:	0002      	movs	r2, r0
 8001744:	4484      	add	ip, r0
 8001746:	0011      	movs	r1, r2
 8001748:	4650      	mov	r0, sl
 800174a:	3908      	subs	r1, #8
 800174c:	4088      	lsls	r0, r1
 800174e:	231d      	movs	r3, #29
 8001750:	4680      	mov	r8, r0
 8001752:	4660      	mov	r0, ip
 8001754:	1a1b      	subs	r3, r3, r0
 8001756:	0020      	movs	r0, r4
 8001758:	40d8      	lsrs	r0, r3
 800175a:	0003      	movs	r3, r0
 800175c:	4640      	mov	r0, r8
 800175e:	4303      	orrs	r3, r0
 8001760:	469a      	mov	sl, r3
 8001762:	0023      	movs	r3, r4
 8001764:	408b      	lsls	r3, r1
 8001766:	4699      	mov	r9, r3
 8001768:	2300      	movs	r3, #0
 800176a:	4d44      	ldr	r5, [pc, #272]	@ (800187c <__aeabi_dmul+0x328>)
 800176c:	4698      	mov	r8, r3
 800176e:	1aad      	subs	r5, r5, r2
 8001770:	9302      	str	r3, [sp, #8]
 8001772:	e715      	b.n	80015a0 <__aeabi_dmul+0x4c>
 8001774:	4652      	mov	r2, sl
 8001776:	4302      	orrs	r2, r0
 8001778:	4691      	mov	r9, r2
 800177a:	d126      	bne.n	80017ca <__aeabi_dmul+0x276>
 800177c:	2200      	movs	r2, #0
 800177e:	001d      	movs	r5, r3
 8001780:	2302      	movs	r3, #2
 8001782:	4692      	mov	sl, r2
 8001784:	3208      	adds	r2, #8
 8001786:	4690      	mov	r8, r2
 8001788:	9302      	str	r3, [sp, #8]
 800178a:	e709      	b.n	80015a0 <__aeabi_dmul+0x4c>
 800178c:	2400      	movs	r4, #0
 800178e:	2200      	movs	r2, #0
 8001790:	4b35      	ldr	r3, [pc, #212]	@ (8001868 <__aeabi_dmul+0x314>)
 8001792:	e735      	b.n	8001600 <__aeabi_dmul+0xac>
 8001794:	2300      	movs	r3, #0
 8001796:	2480      	movs	r4, #128	@ 0x80
 8001798:	469b      	mov	fp, r3
 800179a:	0324      	lsls	r4, r4, #12
 800179c:	4b32      	ldr	r3, [pc, #200]	@ (8001868 <__aeabi_dmul+0x314>)
 800179e:	e72f      	b.n	8001600 <__aeabi_dmul+0xac>
 80017a0:	2202      	movs	r2, #2
 80017a2:	4641      	mov	r1, r8
 80017a4:	4311      	orrs	r1, r2
 80017a6:	2280      	movs	r2, #128	@ 0x80
 80017a8:	0112      	lsls	r2, r2, #4
 80017aa:	4694      	mov	ip, r2
 80017ac:	002a      	movs	r2, r5
 80017ae:	4462      	add	r2, ip
 80017b0:	4688      	mov	r8, r1
 80017b2:	9201      	str	r2, [sp, #4]
 80017b4:	290a      	cmp	r1, #10
 80017b6:	dd00      	ble.n	80017ba <__aeabi_dmul+0x266>
 80017b8:	e752      	b.n	8001660 <__aeabi_dmul+0x10c>
 80017ba:	465a      	mov	r2, fp
 80017bc:	2000      	movs	r0, #0
 80017be:	9900      	ldr	r1, [sp, #0]
 80017c0:	0004      	movs	r4, r0
 80017c2:	404a      	eors	r2, r1
 80017c4:	4693      	mov	fp, r2
 80017c6:	2602      	movs	r6, #2
 80017c8:	e70b      	b.n	80015e2 <__aeabi_dmul+0x8e>
 80017ca:	220c      	movs	r2, #12
 80017cc:	001d      	movs	r5, r3
 80017ce:	2303      	movs	r3, #3
 80017d0:	4681      	mov	r9, r0
 80017d2:	4690      	mov	r8, r2
 80017d4:	9302      	str	r3, [sp, #8]
 80017d6:	e6e3      	b.n	80015a0 <__aeabi_dmul+0x4c>
 80017d8:	2300      	movs	r3, #0
 80017da:	469a      	mov	sl, r3
 80017dc:	3304      	adds	r3, #4
 80017de:	4698      	mov	r8, r3
 80017e0:	3b03      	subs	r3, #3
 80017e2:	2500      	movs	r5, #0
 80017e4:	9302      	str	r3, [sp, #8]
 80017e6:	e6db      	b.n	80015a0 <__aeabi_dmul+0x4c>
 80017e8:	4642      	mov	r2, r8
 80017ea:	3301      	adds	r3, #1
 80017ec:	431a      	orrs	r2, r3
 80017ee:	002b      	movs	r3, r5
 80017f0:	4690      	mov	r8, r2
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	9201      	str	r2, [sp, #4]
 80017f6:	4642      	mov	r2, r8
 80017f8:	2400      	movs	r4, #0
 80017fa:	2000      	movs	r0, #0
 80017fc:	2601      	movs	r6, #1
 80017fe:	2a0a      	cmp	r2, #10
 8001800:	dc00      	bgt.n	8001804 <__aeabi_dmul+0x2b0>
 8001802:	e6ea      	b.n	80015da <__aeabi_dmul+0x86>
 8001804:	e72c      	b.n	8001660 <__aeabi_dmul+0x10c>
 8001806:	2201      	movs	r2, #1
 8001808:	1ad2      	subs	r2, r2, r3
 800180a:	2a38      	cmp	r2, #56	@ 0x38
 800180c:	dd00      	ble.n	8001810 <__aeabi_dmul+0x2bc>
 800180e:	e6f4      	b.n	80015fa <__aeabi_dmul+0xa6>
 8001810:	2a1f      	cmp	r2, #31
 8001812:	dc00      	bgt.n	8001816 <__aeabi_dmul+0x2c2>
 8001814:	e12a      	b.n	8001a6c <__aeabi_dmul+0x518>
 8001816:	211f      	movs	r1, #31
 8001818:	4249      	negs	r1, r1
 800181a:	1acb      	subs	r3, r1, r3
 800181c:	0021      	movs	r1, r4
 800181e:	40d9      	lsrs	r1, r3
 8001820:	000b      	movs	r3, r1
 8001822:	2a20      	cmp	r2, #32
 8001824:	d005      	beq.n	8001832 <__aeabi_dmul+0x2de>
 8001826:	4a16      	ldr	r2, [pc, #88]	@ (8001880 <__aeabi_dmul+0x32c>)
 8001828:	9d01      	ldr	r5, [sp, #4]
 800182a:	4694      	mov	ip, r2
 800182c:	4465      	add	r5, ip
 800182e:	40ac      	lsls	r4, r5
 8001830:	4320      	orrs	r0, r4
 8001832:	1e42      	subs	r2, r0, #1
 8001834:	4190      	sbcs	r0, r2
 8001836:	4318      	orrs	r0, r3
 8001838:	2307      	movs	r3, #7
 800183a:	0019      	movs	r1, r3
 800183c:	2400      	movs	r4, #0
 800183e:	4001      	ands	r1, r0
 8001840:	4203      	tst	r3, r0
 8001842:	d00c      	beq.n	800185e <__aeabi_dmul+0x30a>
 8001844:	230f      	movs	r3, #15
 8001846:	4003      	ands	r3, r0
 8001848:	2b04      	cmp	r3, #4
 800184a:	d100      	bne.n	800184e <__aeabi_dmul+0x2fa>
 800184c:	e140      	b.n	8001ad0 <__aeabi_dmul+0x57c>
 800184e:	1d03      	adds	r3, r0, #4
 8001850:	4283      	cmp	r3, r0
 8001852:	41a4      	sbcs	r4, r4
 8001854:	0018      	movs	r0, r3
 8001856:	4264      	negs	r4, r4
 8001858:	0761      	lsls	r1, r4, #29
 800185a:	0264      	lsls	r4, r4, #9
 800185c:	0b24      	lsrs	r4, r4, #12
 800185e:	08c2      	lsrs	r2, r0, #3
 8001860:	2300      	movs	r3, #0
 8001862:	430a      	orrs	r2, r1
 8001864:	e6cc      	b.n	8001600 <__aeabi_dmul+0xac>
 8001866:	46c0      	nop			@ (mov r8, r8)
 8001868:	000007ff 	.word	0x000007ff
 800186c:	fffffc01 	.word	0xfffffc01
 8001870:	000003ff 	.word	0x000003ff
 8001874:	feffffff 	.word	0xfeffffff
 8001878:	000007fe 	.word	0x000007fe
 800187c:	fffffc0d 	.word	0xfffffc0d
 8001880:	0000043e 	.word	0x0000043e
 8001884:	4649      	mov	r1, r9
 8001886:	464a      	mov	r2, r9
 8001888:	0409      	lsls	r1, r1, #16
 800188a:	0c09      	lsrs	r1, r1, #16
 800188c:	000d      	movs	r5, r1
 800188e:	0c16      	lsrs	r6, r2, #16
 8001890:	0c02      	lsrs	r2, r0, #16
 8001892:	0400      	lsls	r0, r0, #16
 8001894:	0c00      	lsrs	r0, r0, #16
 8001896:	4345      	muls	r5, r0
 8001898:	46ac      	mov	ip, r5
 800189a:	0005      	movs	r5, r0
 800189c:	4375      	muls	r5, r6
 800189e:	46a8      	mov	r8, r5
 80018a0:	0015      	movs	r5, r2
 80018a2:	000f      	movs	r7, r1
 80018a4:	4375      	muls	r5, r6
 80018a6:	9200      	str	r2, [sp, #0]
 80018a8:	9502      	str	r5, [sp, #8]
 80018aa:	002a      	movs	r2, r5
 80018ac:	9d00      	ldr	r5, [sp, #0]
 80018ae:	436f      	muls	r7, r5
 80018b0:	4665      	mov	r5, ip
 80018b2:	0c2d      	lsrs	r5, r5, #16
 80018b4:	46a9      	mov	r9, r5
 80018b6:	4447      	add	r7, r8
 80018b8:	444f      	add	r7, r9
 80018ba:	45b8      	cmp	r8, r7
 80018bc:	d905      	bls.n	80018ca <__aeabi_dmul+0x376>
 80018be:	0015      	movs	r5, r2
 80018c0:	2280      	movs	r2, #128	@ 0x80
 80018c2:	0252      	lsls	r2, r2, #9
 80018c4:	4690      	mov	r8, r2
 80018c6:	4445      	add	r5, r8
 80018c8:	9502      	str	r5, [sp, #8]
 80018ca:	0c3d      	lsrs	r5, r7, #16
 80018cc:	9503      	str	r5, [sp, #12]
 80018ce:	4665      	mov	r5, ip
 80018d0:	042d      	lsls	r5, r5, #16
 80018d2:	043f      	lsls	r7, r7, #16
 80018d4:	0c2d      	lsrs	r5, r5, #16
 80018d6:	46ac      	mov	ip, r5
 80018d8:	003d      	movs	r5, r7
 80018da:	4465      	add	r5, ip
 80018dc:	9504      	str	r5, [sp, #16]
 80018de:	0c25      	lsrs	r5, r4, #16
 80018e0:	0424      	lsls	r4, r4, #16
 80018e2:	0c24      	lsrs	r4, r4, #16
 80018e4:	46ac      	mov	ip, r5
 80018e6:	0025      	movs	r5, r4
 80018e8:	4375      	muls	r5, r6
 80018ea:	46a8      	mov	r8, r5
 80018ec:	4665      	mov	r5, ip
 80018ee:	000f      	movs	r7, r1
 80018f0:	4369      	muls	r1, r5
 80018f2:	4441      	add	r1, r8
 80018f4:	4689      	mov	r9, r1
 80018f6:	4367      	muls	r7, r4
 80018f8:	0c39      	lsrs	r1, r7, #16
 80018fa:	4449      	add	r1, r9
 80018fc:	436e      	muls	r6, r5
 80018fe:	4588      	cmp	r8, r1
 8001900:	d903      	bls.n	800190a <__aeabi_dmul+0x3b6>
 8001902:	2280      	movs	r2, #128	@ 0x80
 8001904:	0252      	lsls	r2, r2, #9
 8001906:	4690      	mov	r8, r2
 8001908:	4446      	add	r6, r8
 800190a:	0c0d      	lsrs	r5, r1, #16
 800190c:	46a8      	mov	r8, r5
 800190e:	0035      	movs	r5, r6
 8001910:	4445      	add	r5, r8
 8001912:	9505      	str	r5, [sp, #20]
 8001914:	9d03      	ldr	r5, [sp, #12]
 8001916:	043f      	lsls	r7, r7, #16
 8001918:	46a8      	mov	r8, r5
 800191a:	0c3f      	lsrs	r7, r7, #16
 800191c:	0409      	lsls	r1, r1, #16
 800191e:	19c9      	adds	r1, r1, r7
 8001920:	4488      	add	r8, r1
 8001922:	4645      	mov	r5, r8
 8001924:	9503      	str	r5, [sp, #12]
 8001926:	4655      	mov	r5, sl
 8001928:	042e      	lsls	r6, r5, #16
 800192a:	0c36      	lsrs	r6, r6, #16
 800192c:	0c2f      	lsrs	r7, r5, #16
 800192e:	0035      	movs	r5, r6
 8001930:	4345      	muls	r5, r0
 8001932:	4378      	muls	r0, r7
 8001934:	4681      	mov	r9, r0
 8001936:	0038      	movs	r0, r7
 8001938:	46a8      	mov	r8, r5
 800193a:	0c2d      	lsrs	r5, r5, #16
 800193c:	46aa      	mov	sl, r5
 800193e:	9a00      	ldr	r2, [sp, #0]
 8001940:	4350      	muls	r0, r2
 8001942:	4372      	muls	r2, r6
 8001944:	444a      	add	r2, r9
 8001946:	4452      	add	r2, sl
 8001948:	4591      	cmp	r9, r2
 800194a:	d903      	bls.n	8001954 <__aeabi_dmul+0x400>
 800194c:	2580      	movs	r5, #128	@ 0x80
 800194e:	026d      	lsls	r5, r5, #9
 8001950:	46a9      	mov	r9, r5
 8001952:	4448      	add	r0, r9
 8001954:	0c15      	lsrs	r5, r2, #16
 8001956:	46a9      	mov	r9, r5
 8001958:	4645      	mov	r5, r8
 800195a:	042d      	lsls	r5, r5, #16
 800195c:	0c2d      	lsrs	r5, r5, #16
 800195e:	46a8      	mov	r8, r5
 8001960:	4665      	mov	r5, ip
 8001962:	437d      	muls	r5, r7
 8001964:	0412      	lsls	r2, r2, #16
 8001966:	4448      	add	r0, r9
 8001968:	4490      	add	r8, r2
 800196a:	46a9      	mov	r9, r5
 800196c:	0032      	movs	r2, r6
 800196e:	4665      	mov	r5, ip
 8001970:	4362      	muls	r2, r4
 8001972:	436e      	muls	r6, r5
 8001974:	437c      	muls	r4, r7
 8001976:	0c17      	lsrs	r7, r2, #16
 8001978:	1936      	adds	r6, r6, r4
 800197a:	19bf      	adds	r7, r7, r6
 800197c:	42bc      	cmp	r4, r7
 800197e:	d903      	bls.n	8001988 <__aeabi_dmul+0x434>
 8001980:	2480      	movs	r4, #128	@ 0x80
 8001982:	0264      	lsls	r4, r4, #9
 8001984:	46a4      	mov	ip, r4
 8001986:	44e1      	add	r9, ip
 8001988:	9c02      	ldr	r4, [sp, #8]
 800198a:	9e03      	ldr	r6, [sp, #12]
 800198c:	46a4      	mov	ip, r4
 800198e:	9d05      	ldr	r5, [sp, #20]
 8001990:	4466      	add	r6, ip
 8001992:	428e      	cmp	r6, r1
 8001994:	4189      	sbcs	r1, r1
 8001996:	46ac      	mov	ip, r5
 8001998:	0412      	lsls	r2, r2, #16
 800199a:	043c      	lsls	r4, r7, #16
 800199c:	0c12      	lsrs	r2, r2, #16
 800199e:	18a2      	adds	r2, r4, r2
 80019a0:	4462      	add	r2, ip
 80019a2:	4249      	negs	r1, r1
 80019a4:	1854      	adds	r4, r2, r1
 80019a6:	4446      	add	r6, r8
 80019a8:	46a4      	mov	ip, r4
 80019aa:	4546      	cmp	r6, r8
 80019ac:	41a4      	sbcs	r4, r4
 80019ae:	4682      	mov	sl, r0
 80019b0:	4264      	negs	r4, r4
 80019b2:	46a0      	mov	r8, r4
 80019b4:	42aa      	cmp	r2, r5
 80019b6:	4192      	sbcs	r2, r2
 80019b8:	458c      	cmp	ip, r1
 80019ba:	4189      	sbcs	r1, r1
 80019bc:	44e2      	add	sl, ip
 80019be:	44d0      	add	r8, sl
 80019c0:	4249      	negs	r1, r1
 80019c2:	4252      	negs	r2, r2
 80019c4:	430a      	orrs	r2, r1
 80019c6:	45a0      	cmp	r8, r4
 80019c8:	41a4      	sbcs	r4, r4
 80019ca:	4582      	cmp	sl, r0
 80019cc:	4189      	sbcs	r1, r1
 80019ce:	4264      	negs	r4, r4
 80019d0:	4249      	negs	r1, r1
 80019d2:	430c      	orrs	r4, r1
 80019d4:	4641      	mov	r1, r8
 80019d6:	0c3f      	lsrs	r7, r7, #16
 80019d8:	19d2      	adds	r2, r2, r7
 80019da:	1912      	adds	r2, r2, r4
 80019dc:	0dcc      	lsrs	r4, r1, #23
 80019de:	9904      	ldr	r1, [sp, #16]
 80019e0:	0270      	lsls	r0, r6, #9
 80019e2:	4308      	orrs	r0, r1
 80019e4:	1e41      	subs	r1, r0, #1
 80019e6:	4188      	sbcs	r0, r1
 80019e8:	4641      	mov	r1, r8
 80019ea:	444a      	add	r2, r9
 80019ec:	0df6      	lsrs	r6, r6, #23
 80019ee:	0252      	lsls	r2, r2, #9
 80019f0:	4330      	orrs	r0, r6
 80019f2:	0249      	lsls	r1, r1, #9
 80019f4:	4314      	orrs	r4, r2
 80019f6:	4308      	orrs	r0, r1
 80019f8:	01d2      	lsls	r2, r2, #7
 80019fa:	d535      	bpl.n	8001a68 <__aeabi_dmul+0x514>
 80019fc:	2201      	movs	r2, #1
 80019fe:	0843      	lsrs	r3, r0, #1
 8001a00:	4002      	ands	r2, r0
 8001a02:	4313      	orrs	r3, r2
 8001a04:	07e0      	lsls	r0, r4, #31
 8001a06:	4318      	orrs	r0, r3
 8001a08:	0864      	lsrs	r4, r4, #1
 8001a0a:	e634      	b.n	8001676 <__aeabi_dmul+0x122>
 8001a0c:	9b00      	ldr	r3, [sp, #0]
 8001a0e:	46a2      	mov	sl, r4
 8001a10:	469b      	mov	fp, r3
 8001a12:	4681      	mov	r9, r0
 8001a14:	2480      	movs	r4, #128	@ 0x80
 8001a16:	4653      	mov	r3, sl
 8001a18:	0324      	lsls	r4, r4, #12
 8001a1a:	431c      	orrs	r4, r3
 8001a1c:	0324      	lsls	r4, r4, #12
 8001a1e:	464a      	mov	r2, r9
 8001a20:	4b2e      	ldr	r3, [pc, #184]	@ (8001adc <__aeabi_dmul+0x588>)
 8001a22:	0b24      	lsrs	r4, r4, #12
 8001a24:	e5ec      	b.n	8001600 <__aeabi_dmul+0xac>
 8001a26:	f000 fd53 	bl	80024d0 <__clzsi2>
 8001a2a:	2315      	movs	r3, #21
 8001a2c:	469c      	mov	ip, r3
 8001a2e:	4484      	add	ip, r0
 8001a30:	0002      	movs	r2, r0
 8001a32:	4663      	mov	r3, ip
 8001a34:	3220      	adds	r2, #32
 8001a36:	2b1c      	cmp	r3, #28
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dmul+0x4e8>
 8001a3a:	e684      	b.n	8001746 <__aeabi_dmul+0x1f2>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	4699      	mov	r9, r3
 8001a40:	0023      	movs	r3, r4
 8001a42:	3808      	subs	r0, #8
 8001a44:	4083      	lsls	r3, r0
 8001a46:	469a      	mov	sl, r3
 8001a48:	e68e      	b.n	8001768 <__aeabi_dmul+0x214>
 8001a4a:	f000 fd41 	bl	80024d0 <__clzsi2>
 8001a4e:	0002      	movs	r2, r0
 8001a50:	0003      	movs	r3, r0
 8001a52:	3215      	adds	r2, #21
 8001a54:	3320      	adds	r3, #32
 8001a56:	2a1c      	cmp	r2, #28
 8001a58:	dc00      	bgt.n	8001a5c <__aeabi_dmul+0x508>
 8001a5a:	e64e      	b.n	80016fa <__aeabi_dmul+0x1a6>
 8001a5c:	0002      	movs	r2, r0
 8001a5e:	0034      	movs	r4, r6
 8001a60:	3a08      	subs	r2, #8
 8001a62:	2000      	movs	r0, #0
 8001a64:	4094      	lsls	r4, r2
 8001a66:	e652      	b.n	800170e <__aeabi_dmul+0x1ba>
 8001a68:	9301      	str	r3, [sp, #4]
 8001a6a:	e604      	b.n	8001676 <__aeabi_dmul+0x122>
 8001a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae0 <__aeabi_dmul+0x58c>)
 8001a6e:	0021      	movs	r1, r4
 8001a70:	469c      	mov	ip, r3
 8001a72:	0003      	movs	r3, r0
 8001a74:	9d01      	ldr	r5, [sp, #4]
 8001a76:	40d3      	lsrs	r3, r2
 8001a78:	4465      	add	r5, ip
 8001a7a:	40a9      	lsls	r1, r5
 8001a7c:	4319      	orrs	r1, r3
 8001a7e:	0003      	movs	r3, r0
 8001a80:	40ab      	lsls	r3, r5
 8001a82:	1e58      	subs	r0, r3, #1
 8001a84:	4183      	sbcs	r3, r0
 8001a86:	4319      	orrs	r1, r3
 8001a88:	0008      	movs	r0, r1
 8001a8a:	40d4      	lsrs	r4, r2
 8001a8c:	074b      	lsls	r3, r1, #29
 8001a8e:	d009      	beq.n	8001aa4 <__aeabi_dmul+0x550>
 8001a90:	230f      	movs	r3, #15
 8001a92:	400b      	ands	r3, r1
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d005      	beq.n	8001aa4 <__aeabi_dmul+0x550>
 8001a98:	1d0b      	adds	r3, r1, #4
 8001a9a:	428b      	cmp	r3, r1
 8001a9c:	4180      	sbcs	r0, r0
 8001a9e:	4240      	negs	r0, r0
 8001aa0:	1824      	adds	r4, r4, r0
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	0223      	lsls	r3, r4, #8
 8001aa6:	d400      	bmi.n	8001aaa <__aeabi_dmul+0x556>
 8001aa8:	e6d6      	b.n	8001858 <__aeabi_dmul+0x304>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	2400      	movs	r4, #0
 8001aae:	2200      	movs	r2, #0
 8001ab0:	e5a6      	b.n	8001600 <__aeabi_dmul+0xac>
 8001ab2:	290f      	cmp	r1, #15
 8001ab4:	d1aa      	bne.n	8001a0c <__aeabi_dmul+0x4b8>
 8001ab6:	2380      	movs	r3, #128	@ 0x80
 8001ab8:	4652      	mov	r2, sl
 8001aba:	031b      	lsls	r3, r3, #12
 8001abc:	421a      	tst	r2, r3
 8001abe:	d0a9      	beq.n	8001a14 <__aeabi_dmul+0x4c0>
 8001ac0:	421c      	tst	r4, r3
 8001ac2:	d1a7      	bne.n	8001a14 <__aeabi_dmul+0x4c0>
 8001ac4:	431c      	orrs	r4, r3
 8001ac6:	9b00      	ldr	r3, [sp, #0]
 8001ac8:	0002      	movs	r2, r0
 8001aca:	469b      	mov	fp, r3
 8001acc:	4b03      	ldr	r3, [pc, #12]	@ (8001adc <__aeabi_dmul+0x588>)
 8001ace:	e597      	b.n	8001600 <__aeabi_dmul+0xac>
 8001ad0:	2400      	movs	r4, #0
 8001ad2:	e6c1      	b.n	8001858 <__aeabi_dmul+0x304>
 8001ad4:	2400      	movs	r4, #0
 8001ad6:	4b01      	ldr	r3, [pc, #4]	@ (8001adc <__aeabi_dmul+0x588>)
 8001ad8:	0022      	movs	r2, r4
 8001ada:	e591      	b.n	8001600 <__aeabi_dmul+0xac>
 8001adc:	000007ff 	.word	0x000007ff
 8001ae0:	0000041e 	.word	0x0000041e

08001ae4 <__aeabi_dsub>:
 8001ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae6:	464e      	mov	r6, r9
 8001ae8:	4645      	mov	r5, r8
 8001aea:	46de      	mov	lr, fp
 8001aec:	4657      	mov	r7, sl
 8001aee:	b5e0      	push	{r5, r6, r7, lr}
 8001af0:	b085      	sub	sp, #20
 8001af2:	9000      	str	r0, [sp, #0]
 8001af4:	9101      	str	r1, [sp, #4]
 8001af6:	030c      	lsls	r4, r1, #12
 8001af8:	004f      	lsls	r7, r1, #1
 8001afa:	0fce      	lsrs	r6, r1, #31
 8001afc:	0a61      	lsrs	r1, r4, #9
 8001afe:	9c00      	ldr	r4, [sp, #0]
 8001b00:	46b0      	mov	r8, r6
 8001b02:	0f64      	lsrs	r4, r4, #29
 8001b04:	430c      	orrs	r4, r1
 8001b06:	9900      	ldr	r1, [sp, #0]
 8001b08:	0d7f      	lsrs	r7, r7, #21
 8001b0a:	00c8      	lsls	r0, r1, #3
 8001b0c:	0011      	movs	r1, r2
 8001b0e:	001a      	movs	r2, r3
 8001b10:	031b      	lsls	r3, r3, #12
 8001b12:	469c      	mov	ip, r3
 8001b14:	9100      	str	r1, [sp, #0]
 8001b16:	9201      	str	r2, [sp, #4]
 8001b18:	0051      	lsls	r1, r2, #1
 8001b1a:	0d4b      	lsrs	r3, r1, #21
 8001b1c:	4699      	mov	r9, r3
 8001b1e:	9b01      	ldr	r3, [sp, #4]
 8001b20:	9d00      	ldr	r5, [sp, #0]
 8001b22:	0fd9      	lsrs	r1, r3, #31
 8001b24:	4663      	mov	r3, ip
 8001b26:	0f6a      	lsrs	r2, r5, #29
 8001b28:	0a5b      	lsrs	r3, r3, #9
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	00ea      	lsls	r2, r5, #3
 8001b2e:	4694      	mov	ip, r2
 8001b30:	4693      	mov	fp, r2
 8001b32:	4ac1      	ldr	r2, [pc, #772]	@ (8001e38 <__aeabi_dsub+0x354>)
 8001b34:	9003      	str	r0, [sp, #12]
 8001b36:	9302      	str	r3, [sp, #8]
 8001b38:	4591      	cmp	r9, r2
 8001b3a:	d100      	bne.n	8001b3e <__aeabi_dsub+0x5a>
 8001b3c:	e0cd      	b.n	8001cda <__aeabi_dsub+0x1f6>
 8001b3e:	2501      	movs	r5, #1
 8001b40:	4069      	eors	r1, r5
 8001b42:	464d      	mov	r5, r9
 8001b44:	1b7d      	subs	r5, r7, r5
 8001b46:	46aa      	mov	sl, r5
 8001b48:	428e      	cmp	r6, r1
 8001b4a:	d100      	bne.n	8001b4e <__aeabi_dsub+0x6a>
 8001b4c:	e080      	b.n	8001c50 <__aeabi_dsub+0x16c>
 8001b4e:	2d00      	cmp	r5, #0
 8001b50:	dc00      	bgt.n	8001b54 <__aeabi_dsub+0x70>
 8001b52:	e335      	b.n	80021c0 <__aeabi_dsub+0x6dc>
 8001b54:	4649      	mov	r1, r9
 8001b56:	2900      	cmp	r1, #0
 8001b58:	d100      	bne.n	8001b5c <__aeabi_dsub+0x78>
 8001b5a:	e0df      	b.n	8001d1c <__aeabi_dsub+0x238>
 8001b5c:	4297      	cmp	r7, r2
 8001b5e:	d100      	bne.n	8001b62 <__aeabi_dsub+0x7e>
 8001b60:	e194      	b.n	8001e8c <__aeabi_dsub+0x3a8>
 8001b62:	4652      	mov	r2, sl
 8001b64:	2501      	movs	r5, #1
 8001b66:	2a38      	cmp	r2, #56	@ 0x38
 8001b68:	dc19      	bgt.n	8001b9e <__aeabi_dsub+0xba>
 8001b6a:	2280      	movs	r2, #128	@ 0x80
 8001b6c:	9b02      	ldr	r3, [sp, #8]
 8001b6e:	0412      	lsls	r2, r2, #16
 8001b70:	4313      	orrs	r3, r2
 8001b72:	9302      	str	r3, [sp, #8]
 8001b74:	4652      	mov	r2, sl
 8001b76:	2a1f      	cmp	r2, #31
 8001b78:	dd00      	ble.n	8001b7c <__aeabi_dsub+0x98>
 8001b7a:	e1e3      	b.n	8001f44 <__aeabi_dsub+0x460>
 8001b7c:	4653      	mov	r3, sl
 8001b7e:	2220      	movs	r2, #32
 8001b80:	4661      	mov	r1, ip
 8001b82:	9d02      	ldr	r5, [sp, #8]
 8001b84:	1ad2      	subs	r2, r2, r3
 8001b86:	4095      	lsls	r5, r2
 8001b88:	40d9      	lsrs	r1, r3
 8001b8a:	430d      	orrs	r5, r1
 8001b8c:	4661      	mov	r1, ip
 8001b8e:	4091      	lsls	r1, r2
 8001b90:	000a      	movs	r2, r1
 8001b92:	1e51      	subs	r1, r2, #1
 8001b94:	418a      	sbcs	r2, r1
 8001b96:	4315      	orrs	r5, r2
 8001b98:	9a02      	ldr	r2, [sp, #8]
 8001b9a:	40da      	lsrs	r2, r3
 8001b9c:	1aa4      	subs	r4, r4, r2
 8001b9e:	1b45      	subs	r5, r0, r5
 8001ba0:	42a8      	cmp	r0, r5
 8001ba2:	4180      	sbcs	r0, r0
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	1a24      	subs	r4, r4, r0
 8001ba8:	0223      	lsls	r3, r4, #8
 8001baa:	d400      	bmi.n	8001bae <__aeabi_dsub+0xca>
 8001bac:	e13d      	b.n	8001e2a <__aeabi_dsub+0x346>
 8001bae:	0264      	lsls	r4, r4, #9
 8001bb0:	0a64      	lsrs	r4, r4, #9
 8001bb2:	2c00      	cmp	r4, #0
 8001bb4:	d100      	bne.n	8001bb8 <__aeabi_dsub+0xd4>
 8001bb6:	e147      	b.n	8001e48 <__aeabi_dsub+0x364>
 8001bb8:	0020      	movs	r0, r4
 8001bba:	f000 fc89 	bl	80024d0 <__clzsi2>
 8001bbe:	0003      	movs	r3, r0
 8001bc0:	3b08      	subs	r3, #8
 8001bc2:	2120      	movs	r1, #32
 8001bc4:	0028      	movs	r0, r5
 8001bc6:	1aca      	subs	r2, r1, r3
 8001bc8:	40d0      	lsrs	r0, r2
 8001bca:	409c      	lsls	r4, r3
 8001bcc:	0002      	movs	r2, r0
 8001bce:	409d      	lsls	r5, r3
 8001bd0:	4322      	orrs	r2, r4
 8001bd2:	429f      	cmp	r7, r3
 8001bd4:	dd00      	ble.n	8001bd8 <__aeabi_dsub+0xf4>
 8001bd6:	e177      	b.n	8001ec8 <__aeabi_dsub+0x3e4>
 8001bd8:	1bd8      	subs	r0, r3, r7
 8001bda:	3001      	adds	r0, #1
 8001bdc:	1a09      	subs	r1, r1, r0
 8001bde:	002c      	movs	r4, r5
 8001be0:	408d      	lsls	r5, r1
 8001be2:	40c4      	lsrs	r4, r0
 8001be4:	1e6b      	subs	r3, r5, #1
 8001be6:	419d      	sbcs	r5, r3
 8001be8:	0013      	movs	r3, r2
 8001bea:	40c2      	lsrs	r2, r0
 8001bec:	408b      	lsls	r3, r1
 8001bee:	4325      	orrs	r5, r4
 8001bf0:	2700      	movs	r7, #0
 8001bf2:	0014      	movs	r4, r2
 8001bf4:	431d      	orrs	r5, r3
 8001bf6:	076b      	lsls	r3, r5, #29
 8001bf8:	d009      	beq.n	8001c0e <__aeabi_dsub+0x12a>
 8001bfa:	230f      	movs	r3, #15
 8001bfc:	402b      	ands	r3, r5
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	d005      	beq.n	8001c0e <__aeabi_dsub+0x12a>
 8001c02:	1d2b      	adds	r3, r5, #4
 8001c04:	42ab      	cmp	r3, r5
 8001c06:	41ad      	sbcs	r5, r5
 8001c08:	426d      	negs	r5, r5
 8001c0a:	1964      	adds	r4, r4, r5
 8001c0c:	001d      	movs	r5, r3
 8001c0e:	0223      	lsls	r3, r4, #8
 8001c10:	d400      	bmi.n	8001c14 <__aeabi_dsub+0x130>
 8001c12:	e140      	b.n	8001e96 <__aeabi_dsub+0x3b2>
 8001c14:	4a88      	ldr	r2, [pc, #544]	@ (8001e38 <__aeabi_dsub+0x354>)
 8001c16:	3701      	adds	r7, #1
 8001c18:	4297      	cmp	r7, r2
 8001c1a:	d100      	bne.n	8001c1e <__aeabi_dsub+0x13a>
 8001c1c:	e101      	b.n	8001e22 <__aeabi_dsub+0x33e>
 8001c1e:	2601      	movs	r6, #1
 8001c20:	4643      	mov	r3, r8
 8001c22:	4986      	ldr	r1, [pc, #536]	@ (8001e3c <__aeabi_dsub+0x358>)
 8001c24:	08ed      	lsrs	r5, r5, #3
 8001c26:	4021      	ands	r1, r4
 8001c28:	074a      	lsls	r2, r1, #29
 8001c2a:	432a      	orrs	r2, r5
 8001c2c:	057c      	lsls	r4, r7, #21
 8001c2e:	024d      	lsls	r5, r1, #9
 8001c30:	0b2d      	lsrs	r5, r5, #12
 8001c32:	0d64      	lsrs	r4, r4, #21
 8001c34:	401e      	ands	r6, r3
 8001c36:	0524      	lsls	r4, r4, #20
 8001c38:	432c      	orrs	r4, r5
 8001c3a:	07f6      	lsls	r6, r6, #31
 8001c3c:	4334      	orrs	r4, r6
 8001c3e:	0010      	movs	r0, r2
 8001c40:	0021      	movs	r1, r4
 8001c42:	b005      	add	sp, #20
 8001c44:	bcf0      	pop	{r4, r5, r6, r7}
 8001c46:	46bb      	mov	fp, r7
 8001c48:	46b2      	mov	sl, r6
 8001c4a:	46a9      	mov	r9, r5
 8001c4c:	46a0      	mov	r8, r4
 8001c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c50:	2d00      	cmp	r5, #0
 8001c52:	dc00      	bgt.n	8001c56 <__aeabi_dsub+0x172>
 8001c54:	e2d0      	b.n	80021f8 <__aeabi_dsub+0x714>
 8001c56:	4649      	mov	r1, r9
 8001c58:	2900      	cmp	r1, #0
 8001c5a:	d000      	beq.n	8001c5e <__aeabi_dsub+0x17a>
 8001c5c:	e0d4      	b.n	8001e08 <__aeabi_dsub+0x324>
 8001c5e:	4661      	mov	r1, ip
 8001c60:	9b02      	ldr	r3, [sp, #8]
 8001c62:	4319      	orrs	r1, r3
 8001c64:	d100      	bne.n	8001c68 <__aeabi_dsub+0x184>
 8001c66:	e12b      	b.n	8001ec0 <__aeabi_dsub+0x3dc>
 8001c68:	1e69      	subs	r1, r5, #1
 8001c6a:	2d01      	cmp	r5, #1
 8001c6c:	d100      	bne.n	8001c70 <__aeabi_dsub+0x18c>
 8001c6e:	e1d9      	b.n	8002024 <__aeabi_dsub+0x540>
 8001c70:	4295      	cmp	r5, r2
 8001c72:	d100      	bne.n	8001c76 <__aeabi_dsub+0x192>
 8001c74:	e10a      	b.n	8001e8c <__aeabi_dsub+0x3a8>
 8001c76:	2501      	movs	r5, #1
 8001c78:	2938      	cmp	r1, #56	@ 0x38
 8001c7a:	dc17      	bgt.n	8001cac <__aeabi_dsub+0x1c8>
 8001c7c:	468a      	mov	sl, r1
 8001c7e:	4653      	mov	r3, sl
 8001c80:	2b1f      	cmp	r3, #31
 8001c82:	dd00      	ble.n	8001c86 <__aeabi_dsub+0x1a2>
 8001c84:	e1e7      	b.n	8002056 <__aeabi_dsub+0x572>
 8001c86:	2220      	movs	r2, #32
 8001c88:	1ad2      	subs	r2, r2, r3
 8001c8a:	9b02      	ldr	r3, [sp, #8]
 8001c8c:	4661      	mov	r1, ip
 8001c8e:	4093      	lsls	r3, r2
 8001c90:	001d      	movs	r5, r3
 8001c92:	4653      	mov	r3, sl
 8001c94:	40d9      	lsrs	r1, r3
 8001c96:	4663      	mov	r3, ip
 8001c98:	4093      	lsls	r3, r2
 8001c9a:	001a      	movs	r2, r3
 8001c9c:	430d      	orrs	r5, r1
 8001c9e:	1e51      	subs	r1, r2, #1
 8001ca0:	418a      	sbcs	r2, r1
 8001ca2:	4653      	mov	r3, sl
 8001ca4:	4315      	orrs	r5, r2
 8001ca6:	9a02      	ldr	r2, [sp, #8]
 8001ca8:	40da      	lsrs	r2, r3
 8001caa:	18a4      	adds	r4, r4, r2
 8001cac:	182d      	adds	r5, r5, r0
 8001cae:	4285      	cmp	r5, r0
 8001cb0:	4180      	sbcs	r0, r0
 8001cb2:	4240      	negs	r0, r0
 8001cb4:	1824      	adds	r4, r4, r0
 8001cb6:	0223      	lsls	r3, r4, #8
 8001cb8:	d400      	bmi.n	8001cbc <__aeabi_dsub+0x1d8>
 8001cba:	e0b6      	b.n	8001e2a <__aeabi_dsub+0x346>
 8001cbc:	4b5e      	ldr	r3, [pc, #376]	@ (8001e38 <__aeabi_dsub+0x354>)
 8001cbe:	3701      	adds	r7, #1
 8001cc0:	429f      	cmp	r7, r3
 8001cc2:	d100      	bne.n	8001cc6 <__aeabi_dsub+0x1e2>
 8001cc4:	e0ad      	b.n	8001e22 <__aeabi_dsub+0x33e>
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	4b5c      	ldr	r3, [pc, #368]	@ (8001e3c <__aeabi_dsub+0x358>)
 8001cca:	086a      	lsrs	r2, r5, #1
 8001ccc:	401c      	ands	r4, r3
 8001cce:	4029      	ands	r1, r5
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	07e5      	lsls	r5, r4, #31
 8001cd4:	4315      	orrs	r5, r2
 8001cd6:	0864      	lsrs	r4, r4, #1
 8001cd8:	e78d      	b.n	8001bf6 <__aeabi_dsub+0x112>
 8001cda:	4a59      	ldr	r2, [pc, #356]	@ (8001e40 <__aeabi_dsub+0x35c>)
 8001cdc:	9b02      	ldr	r3, [sp, #8]
 8001cde:	4692      	mov	sl, r2
 8001ce0:	4662      	mov	r2, ip
 8001ce2:	44ba      	add	sl, r7
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	d02c      	beq.n	8001d42 <__aeabi_dsub+0x25e>
 8001ce8:	428e      	cmp	r6, r1
 8001cea:	d02e      	beq.n	8001d4a <__aeabi_dsub+0x266>
 8001cec:	4652      	mov	r2, sl
 8001cee:	2a00      	cmp	r2, #0
 8001cf0:	d060      	beq.n	8001db4 <__aeabi_dsub+0x2d0>
 8001cf2:	2f00      	cmp	r7, #0
 8001cf4:	d100      	bne.n	8001cf8 <__aeabi_dsub+0x214>
 8001cf6:	e0db      	b.n	8001eb0 <__aeabi_dsub+0x3cc>
 8001cf8:	4663      	mov	r3, ip
 8001cfa:	000e      	movs	r6, r1
 8001cfc:	9c02      	ldr	r4, [sp, #8]
 8001cfe:	08d8      	lsrs	r0, r3, #3
 8001d00:	0762      	lsls	r2, r4, #29
 8001d02:	4302      	orrs	r2, r0
 8001d04:	08e4      	lsrs	r4, r4, #3
 8001d06:	0013      	movs	r3, r2
 8001d08:	4323      	orrs	r3, r4
 8001d0a:	d100      	bne.n	8001d0e <__aeabi_dsub+0x22a>
 8001d0c:	e254      	b.n	80021b8 <__aeabi_dsub+0x6d4>
 8001d0e:	2580      	movs	r5, #128	@ 0x80
 8001d10:	032d      	lsls	r5, r5, #12
 8001d12:	4325      	orrs	r5, r4
 8001d14:	032d      	lsls	r5, r5, #12
 8001d16:	4c48      	ldr	r4, [pc, #288]	@ (8001e38 <__aeabi_dsub+0x354>)
 8001d18:	0b2d      	lsrs	r5, r5, #12
 8001d1a:	e78c      	b.n	8001c36 <__aeabi_dsub+0x152>
 8001d1c:	4661      	mov	r1, ip
 8001d1e:	9b02      	ldr	r3, [sp, #8]
 8001d20:	4319      	orrs	r1, r3
 8001d22:	d100      	bne.n	8001d26 <__aeabi_dsub+0x242>
 8001d24:	e0cc      	b.n	8001ec0 <__aeabi_dsub+0x3dc>
 8001d26:	0029      	movs	r1, r5
 8001d28:	3901      	subs	r1, #1
 8001d2a:	2d01      	cmp	r5, #1
 8001d2c:	d100      	bne.n	8001d30 <__aeabi_dsub+0x24c>
 8001d2e:	e188      	b.n	8002042 <__aeabi_dsub+0x55e>
 8001d30:	4295      	cmp	r5, r2
 8001d32:	d100      	bne.n	8001d36 <__aeabi_dsub+0x252>
 8001d34:	e0aa      	b.n	8001e8c <__aeabi_dsub+0x3a8>
 8001d36:	2501      	movs	r5, #1
 8001d38:	2938      	cmp	r1, #56	@ 0x38
 8001d3a:	dd00      	ble.n	8001d3e <__aeabi_dsub+0x25a>
 8001d3c:	e72f      	b.n	8001b9e <__aeabi_dsub+0xba>
 8001d3e:	468a      	mov	sl, r1
 8001d40:	e718      	b.n	8001b74 <__aeabi_dsub+0x90>
 8001d42:	2201      	movs	r2, #1
 8001d44:	4051      	eors	r1, r2
 8001d46:	428e      	cmp	r6, r1
 8001d48:	d1d0      	bne.n	8001cec <__aeabi_dsub+0x208>
 8001d4a:	4653      	mov	r3, sl
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d100      	bne.n	8001d52 <__aeabi_dsub+0x26e>
 8001d50:	e0be      	b.n	8001ed0 <__aeabi_dsub+0x3ec>
 8001d52:	2f00      	cmp	r7, #0
 8001d54:	d000      	beq.n	8001d58 <__aeabi_dsub+0x274>
 8001d56:	e138      	b.n	8001fca <__aeabi_dsub+0x4e6>
 8001d58:	46ca      	mov	sl, r9
 8001d5a:	0022      	movs	r2, r4
 8001d5c:	4302      	orrs	r2, r0
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_dsub+0x27e>
 8001d60:	e1e2      	b.n	8002128 <__aeabi_dsub+0x644>
 8001d62:	4653      	mov	r3, sl
 8001d64:	1e59      	subs	r1, r3, #1
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x288>
 8001d6a:	e20d      	b.n	8002188 <__aeabi_dsub+0x6a4>
 8001d6c:	4a32      	ldr	r2, [pc, #200]	@ (8001e38 <__aeabi_dsub+0x354>)
 8001d6e:	4592      	cmp	sl, r2
 8001d70:	d100      	bne.n	8001d74 <__aeabi_dsub+0x290>
 8001d72:	e1d2      	b.n	800211a <__aeabi_dsub+0x636>
 8001d74:	2701      	movs	r7, #1
 8001d76:	2938      	cmp	r1, #56	@ 0x38
 8001d78:	dc13      	bgt.n	8001da2 <__aeabi_dsub+0x2be>
 8001d7a:	291f      	cmp	r1, #31
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x29c>
 8001d7e:	e1ee      	b.n	800215e <__aeabi_dsub+0x67a>
 8001d80:	2220      	movs	r2, #32
 8001d82:	9b02      	ldr	r3, [sp, #8]
 8001d84:	1a52      	subs	r2, r2, r1
 8001d86:	0025      	movs	r5, r4
 8001d88:	0007      	movs	r7, r0
 8001d8a:	469a      	mov	sl, r3
 8001d8c:	40cc      	lsrs	r4, r1
 8001d8e:	4090      	lsls	r0, r2
 8001d90:	4095      	lsls	r5, r2
 8001d92:	40cf      	lsrs	r7, r1
 8001d94:	44a2      	add	sl, r4
 8001d96:	1e42      	subs	r2, r0, #1
 8001d98:	4190      	sbcs	r0, r2
 8001d9a:	4653      	mov	r3, sl
 8001d9c:	432f      	orrs	r7, r5
 8001d9e:	4307      	orrs	r7, r0
 8001da0:	9302      	str	r3, [sp, #8]
 8001da2:	003d      	movs	r5, r7
 8001da4:	4465      	add	r5, ip
 8001da6:	4565      	cmp	r5, ip
 8001da8:	4192      	sbcs	r2, r2
 8001daa:	9b02      	ldr	r3, [sp, #8]
 8001dac:	4252      	negs	r2, r2
 8001dae:	464f      	mov	r7, r9
 8001db0:	18d4      	adds	r4, r2, r3
 8001db2:	e780      	b.n	8001cb6 <__aeabi_dsub+0x1d2>
 8001db4:	4a23      	ldr	r2, [pc, #140]	@ (8001e44 <__aeabi_dsub+0x360>)
 8001db6:	1c7d      	adds	r5, r7, #1
 8001db8:	4215      	tst	r5, r2
 8001dba:	d000      	beq.n	8001dbe <__aeabi_dsub+0x2da>
 8001dbc:	e0aa      	b.n	8001f14 <__aeabi_dsub+0x430>
 8001dbe:	4662      	mov	r2, ip
 8001dc0:	0025      	movs	r5, r4
 8001dc2:	9b02      	ldr	r3, [sp, #8]
 8001dc4:	4305      	orrs	r5, r0
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	2f00      	cmp	r7, #0
 8001dca:	d000      	beq.n	8001dce <__aeabi_dsub+0x2ea>
 8001dcc:	e0f5      	b.n	8001fba <__aeabi_dsub+0x4d6>
 8001dce:	2d00      	cmp	r5, #0
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x2f0>
 8001dd2:	e16b      	b.n	80020ac <__aeabi_dsub+0x5c8>
 8001dd4:	2a00      	cmp	r2, #0
 8001dd6:	d100      	bne.n	8001dda <__aeabi_dsub+0x2f6>
 8001dd8:	e152      	b.n	8002080 <__aeabi_dsub+0x59c>
 8001dda:	4663      	mov	r3, ip
 8001ddc:	1ac5      	subs	r5, r0, r3
 8001dde:	9b02      	ldr	r3, [sp, #8]
 8001de0:	1ae2      	subs	r2, r4, r3
 8001de2:	42a8      	cmp	r0, r5
 8001de4:	419b      	sbcs	r3, r3
 8001de6:	425b      	negs	r3, r3
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	021a      	lsls	r2, r3, #8
 8001dec:	d400      	bmi.n	8001df0 <__aeabi_dsub+0x30c>
 8001dee:	e1d5      	b.n	800219c <__aeabi_dsub+0x6b8>
 8001df0:	4663      	mov	r3, ip
 8001df2:	1a1d      	subs	r5, r3, r0
 8001df4:	45ac      	cmp	ip, r5
 8001df6:	4192      	sbcs	r2, r2
 8001df8:	2601      	movs	r6, #1
 8001dfa:	9b02      	ldr	r3, [sp, #8]
 8001dfc:	4252      	negs	r2, r2
 8001dfe:	1b1c      	subs	r4, r3, r4
 8001e00:	4688      	mov	r8, r1
 8001e02:	1aa4      	subs	r4, r4, r2
 8001e04:	400e      	ands	r6, r1
 8001e06:	e6f6      	b.n	8001bf6 <__aeabi_dsub+0x112>
 8001e08:	4297      	cmp	r7, r2
 8001e0a:	d03f      	beq.n	8001e8c <__aeabi_dsub+0x3a8>
 8001e0c:	4652      	mov	r2, sl
 8001e0e:	2501      	movs	r5, #1
 8001e10:	2a38      	cmp	r2, #56	@ 0x38
 8001e12:	dd00      	ble.n	8001e16 <__aeabi_dsub+0x332>
 8001e14:	e74a      	b.n	8001cac <__aeabi_dsub+0x1c8>
 8001e16:	2280      	movs	r2, #128	@ 0x80
 8001e18:	9b02      	ldr	r3, [sp, #8]
 8001e1a:	0412      	lsls	r2, r2, #16
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	9302      	str	r3, [sp, #8]
 8001e20:	e72d      	b.n	8001c7e <__aeabi_dsub+0x19a>
 8001e22:	003c      	movs	r4, r7
 8001e24:	2500      	movs	r5, #0
 8001e26:	2200      	movs	r2, #0
 8001e28:	e705      	b.n	8001c36 <__aeabi_dsub+0x152>
 8001e2a:	2307      	movs	r3, #7
 8001e2c:	402b      	ands	r3, r5
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d000      	beq.n	8001e34 <__aeabi_dsub+0x350>
 8001e32:	e6e2      	b.n	8001bfa <__aeabi_dsub+0x116>
 8001e34:	e06b      	b.n	8001f0e <__aeabi_dsub+0x42a>
 8001e36:	46c0      	nop			@ (mov r8, r8)
 8001e38:	000007ff 	.word	0x000007ff
 8001e3c:	ff7fffff 	.word	0xff7fffff
 8001e40:	fffff801 	.word	0xfffff801
 8001e44:	000007fe 	.word	0x000007fe
 8001e48:	0028      	movs	r0, r5
 8001e4a:	f000 fb41 	bl	80024d0 <__clzsi2>
 8001e4e:	0003      	movs	r3, r0
 8001e50:	3318      	adds	r3, #24
 8001e52:	2b1f      	cmp	r3, #31
 8001e54:	dc00      	bgt.n	8001e58 <__aeabi_dsub+0x374>
 8001e56:	e6b4      	b.n	8001bc2 <__aeabi_dsub+0xde>
 8001e58:	002a      	movs	r2, r5
 8001e5a:	3808      	subs	r0, #8
 8001e5c:	4082      	lsls	r2, r0
 8001e5e:	429f      	cmp	r7, r3
 8001e60:	dd00      	ble.n	8001e64 <__aeabi_dsub+0x380>
 8001e62:	e0b9      	b.n	8001fd8 <__aeabi_dsub+0x4f4>
 8001e64:	1bdb      	subs	r3, r3, r7
 8001e66:	1c58      	adds	r0, r3, #1
 8001e68:	281f      	cmp	r0, #31
 8001e6a:	dc00      	bgt.n	8001e6e <__aeabi_dsub+0x38a>
 8001e6c:	e1a0      	b.n	80021b0 <__aeabi_dsub+0x6cc>
 8001e6e:	0015      	movs	r5, r2
 8001e70:	3b1f      	subs	r3, #31
 8001e72:	40dd      	lsrs	r5, r3
 8001e74:	2820      	cmp	r0, #32
 8001e76:	d005      	beq.n	8001e84 <__aeabi_dsub+0x3a0>
 8001e78:	2340      	movs	r3, #64	@ 0x40
 8001e7a:	1a1b      	subs	r3, r3, r0
 8001e7c:	409a      	lsls	r2, r3
 8001e7e:	1e53      	subs	r3, r2, #1
 8001e80:	419a      	sbcs	r2, r3
 8001e82:	4315      	orrs	r5, r2
 8001e84:	2307      	movs	r3, #7
 8001e86:	2700      	movs	r7, #0
 8001e88:	402b      	ands	r3, r5
 8001e8a:	e7d0      	b.n	8001e2e <__aeabi_dsub+0x34a>
 8001e8c:	08c0      	lsrs	r0, r0, #3
 8001e8e:	0762      	lsls	r2, r4, #29
 8001e90:	4302      	orrs	r2, r0
 8001e92:	08e4      	lsrs	r4, r4, #3
 8001e94:	e737      	b.n	8001d06 <__aeabi_dsub+0x222>
 8001e96:	08ea      	lsrs	r2, r5, #3
 8001e98:	0763      	lsls	r3, r4, #29
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	4bd3      	ldr	r3, [pc, #844]	@ (80021ec <__aeabi_dsub+0x708>)
 8001e9e:	08e4      	lsrs	r4, r4, #3
 8001ea0:	429f      	cmp	r7, r3
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_dsub+0x3c2>
 8001ea4:	e72f      	b.n	8001d06 <__aeabi_dsub+0x222>
 8001ea6:	0324      	lsls	r4, r4, #12
 8001ea8:	0b25      	lsrs	r5, r4, #12
 8001eaa:	057c      	lsls	r4, r7, #21
 8001eac:	0d64      	lsrs	r4, r4, #21
 8001eae:	e6c2      	b.n	8001c36 <__aeabi_dsub+0x152>
 8001eb0:	46ca      	mov	sl, r9
 8001eb2:	0022      	movs	r2, r4
 8001eb4:	4302      	orrs	r2, r0
 8001eb6:	d158      	bne.n	8001f6a <__aeabi_dsub+0x486>
 8001eb8:	4663      	mov	r3, ip
 8001eba:	000e      	movs	r6, r1
 8001ebc:	9c02      	ldr	r4, [sp, #8]
 8001ebe:	9303      	str	r3, [sp, #12]
 8001ec0:	9b03      	ldr	r3, [sp, #12]
 8001ec2:	4657      	mov	r7, sl
 8001ec4:	08da      	lsrs	r2, r3, #3
 8001ec6:	e7e7      	b.n	8001e98 <__aeabi_dsub+0x3b4>
 8001ec8:	4cc9      	ldr	r4, [pc, #804]	@ (80021f0 <__aeabi_dsub+0x70c>)
 8001eca:	1aff      	subs	r7, r7, r3
 8001ecc:	4014      	ands	r4, r2
 8001ece:	e692      	b.n	8001bf6 <__aeabi_dsub+0x112>
 8001ed0:	4dc8      	ldr	r5, [pc, #800]	@ (80021f4 <__aeabi_dsub+0x710>)
 8001ed2:	1c7a      	adds	r2, r7, #1
 8001ed4:	422a      	tst	r2, r5
 8001ed6:	d000      	beq.n	8001eda <__aeabi_dsub+0x3f6>
 8001ed8:	e084      	b.n	8001fe4 <__aeabi_dsub+0x500>
 8001eda:	0022      	movs	r2, r4
 8001edc:	4302      	orrs	r2, r0
 8001ede:	2f00      	cmp	r7, #0
 8001ee0:	d000      	beq.n	8001ee4 <__aeabi_dsub+0x400>
 8001ee2:	e0ef      	b.n	80020c4 <__aeabi_dsub+0x5e0>
 8001ee4:	2a00      	cmp	r2, #0
 8001ee6:	d100      	bne.n	8001eea <__aeabi_dsub+0x406>
 8001ee8:	e0e5      	b.n	80020b6 <__aeabi_dsub+0x5d2>
 8001eea:	4662      	mov	r2, ip
 8001eec:	9902      	ldr	r1, [sp, #8]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	d100      	bne.n	8001ef4 <__aeabi_dsub+0x410>
 8001ef2:	e0c5      	b.n	8002080 <__aeabi_dsub+0x59c>
 8001ef4:	4663      	mov	r3, ip
 8001ef6:	18c5      	adds	r5, r0, r3
 8001ef8:	468c      	mov	ip, r1
 8001efa:	4285      	cmp	r5, r0
 8001efc:	4180      	sbcs	r0, r0
 8001efe:	4464      	add	r4, ip
 8001f00:	4240      	negs	r0, r0
 8001f02:	1824      	adds	r4, r4, r0
 8001f04:	0223      	lsls	r3, r4, #8
 8001f06:	d502      	bpl.n	8001f0e <__aeabi_dsub+0x42a>
 8001f08:	4bb9      	ldr	r3, [pc, #740]	@ (80021f0 <__aeabi_dsub+0x70c>)
 8001f0a:	3701      	adds	r7, #1
 8001f0c:	401c      	ands	r4, r3
 8001f0e:	46ba      	mov	sl, r7
 8001f10:	9503      	str	r5, [sp, #12]
 8001f12:	e7d5      	b.n	8001ec0 <__aeabi_dsub+0x3dc>
 8001f14:	4662      	mov	r2, ip
 8001f16:	1a85      	subs	r5, r0, r2
 8001f18:	42a8      	cmp	r0, r5
 8001f1a:	4192      	sbcs	r2, r2
 8001f1c:	4252      	negs	r2, r2
 8001f1e:	4691      	mov	r9, r2
 8001f20:	9b02      	ldr	r3, [sp, #8]
 8001f22:	1ae3      	subs	r3, r4, r3
 8001f24:	001a      	movs	r2, r3
 8001f26:	464b      	mov	r3, r9
 8001f28:	1ad2      	subs	r2, r2, r3
 8001f2a:	0013      	movs	r3, r2
 8001f2c:	4691      	mov	r9, r2
 8001f2e:	021a      	lsls	r2, r3, #8
 8001f30:	d46c      	bmi.n	800200c <__aeabi_dsub+0x528>
 8001f32:	464a      	mov	r2, r9
 8001f34:	464c      	mov	r4, r9
 8001f36:	432a      	orrs	r2, r5
 8001f38:	d000      	beq.n	8001f3c <__aeabi_dsub+0x458>
 8001f3a:	e63a      	b.n	8001bb2 <__aeabi_dsub+0xce>
 8001f3c:	2600      	movs	r6, #0
 8001f3e:	2400      	movs	r4, #0
 8001f40:	2500      	movs	r5, #0
 8001f42:	e678      	b.n	8001c36 <__aeabi_dsub+0x152>
 8001f44:	9902      	ldr	r1, [sp, #8]
 8001f46:	4653      	mov	r3, sl
 8001f48:	000d      	movs	r5, r1
 8001f4a:	3a20      	subs	r2, #32
 8001f4c:	40d5      	lsrs	r5, r2
 8001f4e:	2b20      	cmp	r3, #32
 8001f50:	d006      	beq.n	8001f60 <__aeabi_dsub+0x47c>
 8001f52:	2240      	movs	r2, #64	@ 0x40
 8001f54:	1ad2      	subs	r2, r2, r3
 8001f56:	000b      	movs	r3, r1
 8001f58:	4093      	lsls	r3, r2
 8001f5a:	4662      	mov	r2, ip
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	4693      	mov	fp, r2
 8001f60:	465b      	mov	r3, fp
 8001f62:	1e5a      	subs	r2, r3, #1
 8001f64:	4193      	sbcs	r3, r2
 8001f66:	431d      	orrs	r5, r3
 8001f68:	e619      	b.n	8001b9e <__aeabi_dsub+0xba>
 8001f6a:	4653      	mov	r3, sl
 8001f6c:	1e5a      	subs	r2, r3, #1
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d100      	bne.n	8001f74 <__aeabi_dsub+0x490>
 8001f72:	e0c6      	b.n	8002102 <__aeabi_dsub+0x61e>
 8001f74:	4e9d      	ldr	r6, [pc, #628]	@ (80021ec <__aeabi_dsub+0x708>)
 8001f76:	45b2      	cmp	sl, r6
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x498>
 8001f7a:	e6bd      	b.n	8001cf8 <__aeabi_dsub+0x214>
 8001f7c:	4688      	mov	r8, r1
 8001f7e:	000e      	movs	r6, r1
 8001f80:	2501      	movs	r5, #1
 8001f82:	2a38      	cmp	r2, #56	@ 0x38
 8001f84:	dc10      	bgt.n	8001fa8 <__aeabi_dsub+0x4c4>
 8001f86:	2a1f      	cmp	r2, #31
 8001f88:	dc7f      	bgt.n	800208a <__aeabi_dsub+0x5a6>
 8001f8a:	2120      	movs	r1, #32
 8001f8c:	0025      	movs	r5, r4
 8001f8e:	1a89      	subs	r1, r1, r2
 8001f90:	0007      	movs	r7, r0
 8001f92:	4088      	lsls	r0, r1
 8001f94:	408d      	lsls	r5, r1
 8001f96:	40d7      	lsrs	r7, r2
 8001f98:	40d4      	lsrs	r4, r2
 8001f9a:	1e41      	subs	r1, r0, #1
 8001f9c:	4188      	sbcs	r0, r1
 8001f9e:	9b02      	ldr	r3, [sp, #8]
 8001fa0:	433d      	orrs	r5, r7
 8001fa2:	1b1b      	subs	r3, r3, r4
 8001fa4:	4305      	orrs	r5, r0
 8001fa6:	9302      	str	r3, [sp, #8]
 8001fa8:	4662      	mov	r2, ip
 8001faa:	1b55      	subs	r5, r2, r5
 8001fac:	45ac      	cmp	ip, r5
 8001fae:	4192      	sbcs	r2, r2
 8001fb0:	9b02      	ldr	r3, [sp, #8]
 8001fb2:	4252      	negs	r2, r2
 8001fb4:	464f      	mov	r7, r9
 8001fb6:	1a9c      	subs	r4, r3, r2
 8001fb8:	e5f6      	b.n	8001ba8 <__aeabi_dsub+0xc4>
 8001fba:	2d00      	cmp	r5, #0
 8001fbc:	d000      	beq.n	8001fc0 <__aeabi_dsub+0x4dc>
 8001fbe:	e0b7      	b.n	8002130 <__aeabi_dsub+0x64c>
 8001fc0:	2a00      	cmp	r2, #0
 8001fc2:	d100      	bne.n	8001fc6 <__aeabi_dsub+0x4e2>
 8001fc4:	e0f0      	b.n	80021a8 <__aeabi_dsub+0x6c4>
 8001fc6:	2601      	movs	r6, #1
 8001fc8:	400e      	ands	r6, r1
 8001fca:	4663      	mov	r3, ip
 8001fcc:	9802      	ldr	r0, [sp, #8]
 8001fce:	08d9      	lsrs	r1, r3, #3
 8001fd0:	0742      	lsls	r2, r0, #29
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	08c4      	lsrs	r4, r0, #3
 8001fd6:	e696      	b.n	8001d06 <__aeabi_dsub+0x222>
 8001fd8:	4c85      	ldr	r4, [pc, #532]	@ (80021f0 <__aeabi_dsub+0x70c>)
 8001fda:	1aff      	subs	r7, r7, r3
 8001fdc:	4014      	ands	r4, r2
 8001fde:	0762      	lsls	r2, r4, #29
 8001fe0:	08e4      	lsrs	r4, r4, #3
 8001fe2:	e760      	b.n	8001ea6 <__aeabi_dsub+0x3c2>
 8001fe4:	4981      	ldr	r1, [pc, #516]	@ (80021ec <__aeabi_dsub+0x708>)
 8001fe6:	428a      	cmp	r2, r1
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x508>
 8001fea:	e0c9      	b.n	8002180 <__aeabi_dsub+0x69c>
 8001fec:	4663      	mov	r3, ip
 8001fee:	18c1      	adds	r1, r0, r3
 8001ff0:	4281      	cmp	r1, r0
 8001ff2:	4180      	sbcs	r0, r0
 8001ff4:	9b02      	ldr	r3, [sp, #8]
 8001ff6:	4240      	negs	r0, r0
 8001ff8:	18e3      	adds	r3, r4, r3
 8001ffa:	181b      	adds	r3, r3, r0
 8001ffc:	07dd      	lsls	r5, r3, #31
 8001ffe:	085c      	lsrs	r4, r3, #1
 8002000:	2307      	movs	r3, #7
 8002002:	0849      	lsrs	r1, r1, #1
 8002004:	430d      	orrs	r5, r1
 8002006:	0017      	movs	r7, r2
 8002008:	402b      	ands	r3, r5
 800200a:	e710      	b.n	8001e2e <__aeabi_dsub+0x34a>
 800200c:	4663      	mov	r3, ip
 800200e:	1a1d      	subs	r5, r3, r0
 8002010:	45ac      	cmp	ip, r5
 8002012:	4192      	sbcs	r2, r2
 8002014:	2601      	movs	r6, #1
 8002016:	9b02      	ldr	r3, [sp, #8]
 8002018:	4252      	negs	r2, r2
 800201a:	1b1c      	subs	r4, r3, r4
 800201c:	4688      	mov	r8, r1
 800201e:	1aa4      	subs	r4, r4, r2
 8002020:	400e      	ands	r6, r1
 8002022:	e5c6      	b.n	8001bb2 <__aeabi_dsub+0xce>
 8002024:	4663      	mov	r3, ip
 8002026:	18c5      	adds	r5, r0, r3
 8002028:	9b02      	ldr	r3, [sp, #8]
 800202a:	4285      	cmp	r5, r0
 800202c:	4180      	sbcs	r0, r0
 800202e:	469c      	mov	ip, r3
 8002030:	4240      	negs	r0, r0
 8002032:	4464      	add	r4, ip
 8002034:	1824      	adds	r4, r4, r0
 8002036:	2701      	movs	r7, #1
 8002038:	0223      	lsls	r3, r4, #8
 800203a:	d400      	bmi.n	800203e <__aeabi_dsub+0x55a>
 800203c:	e6f5      	b.n	8001e2a <__aeabi_dsub+0x346>
 800203e:	2702      	movs	r7, #2
 8002040:	e641      	b.n	8001cc6 <__aeabi_dsub+0x1e2>
 8002042:	4663      	mov	r3, ip
 8002044:	1ac5      	subs	r5, r0, r3
 8002046:	42a8      	cmp	r0, r5
 8002048:	4180      	sbcs	r0, r0
 800204a:	9b02      	ldr	r3, [sp, #8]
 800204c:	4240      	negs	r0, r0
 800204e:	1ae4      	subs	r4, r4, r3
 8002050:	2701      	movs	r7, #1
 8002052:	1a24      	subs	r4, r4, r0
 8002054:	e5a8      	b.n	8001ba8 <__aeabi_dsub+0xc4>
 8002056:	9d02      	ldr	r5, [sp, #8]
 8002058:	4652      	mov	r2, sl
 800205a:	002b      	movs	r3, r5
 800205c:	3a20      	subs	r2, #32
 800205e:	40d3      	lsrs	r3, r2
 8002060:	0019      	movs	r1, r3
 8002062:	4653      	mov	r3, sl
 8002064:	2b20      	cmp	r3, #32
 8002066:	d006      	beq.n	8002076 <__aeabi_dsub+0x592>
 8002068:	2240      	movs	r2, #64	@ 0x40
 800206a:	1ad2      	subs	r2, r2, r3
 800206c:	002b      	movs	r3, r5
 800206e:	4093      	lsls	r3, r2
 8002070:	4662      	mov	r2, ip
 8002072:	431a      	orrs	r2, r3
 8002074:	4693      	mov	fp, r2
 8002076:	465d      	mov	r5, fp
 8002078:	1e6b      	subs	r3, r5, #1
 800207a:	419d      	sbcs	r5, r3
 800207c:	430d      	orrs	r5, r1
 800207e:	e615      	b.n	8001cac <__aeabi_dsub+0x1c8>
 8002080:	0762      	lsls	r2, r4, #29
 8002082:	08c0      	lsrs	r0, r0, #3
 8002084:	4302      	orrs	r2, r0
 8002086:	08e4      	lsrs	r4, r4, #3
 8002088:	e70d      	b.n	8001ea6 <__aeabi_dsub+0x3c2>
 800208a:	0011      	movs	r1, r2
 800208c:	0027      	movs	r7, r4
 800208e:	3920      	subs	r1, #32
 8002090:	40cf      	lsrs	r7, r1
 8002092:	2a20      	cmp	r2, #32
 8002094:	d005      	beq.n	80020a2 <__aeabi_dsub+0x5be>
 8002096:	2140      	movs	r1, #64	@ 0x40
 8002098:	1a8a      	subs	r2, r1, r2
 800209a:	4094      	lsls	r4, r2
 800209c:	0025      	movs	r5, r4
 800209e:	4305      	orrs	r5, r0
 80020a0:	9503      	str	r5, [sp, #12]
 80020a2:	9d03      	ldr	r5, [sp, #12]
 80020a4:	1e6a      	subs	r2, r5, #1
 80020a6:	4195      	sbcs	r5, r2
 80020a8:	433d      	orrs	r5, r7
 80020aa:	e77d      	b.n	8001fa8 <__aeabi_dsub+0x4c4>
 80020ac:	2a00      	cmp	r2, #0
 80020ae:	d100      	bne.n	80020b2 <__aeabi_dsub+0x5ce>
 80020b0:	e744      	b.n	8001f3c <__aeabi_dsub+0x458>
 80020b2:	2601      	movs	r6, #1
 80020b4:	400e      	ands	r6, r1
 80020b6:	4663      	mov	r3, ip
 80020b8:	08d9      	lsrs	r1, r3, #3
 80020ba:	9b02      	ldr	r3, [sp, #8]
 80020bc:	075a      	lsls	r2, r3, #29
 80020be:	430a      	orrs	r2, r1
 80020c0:	08dc      	lsrs	r4, r3, #3
 80020c2:	e6f0      	b.n	8001ea6 <__aeabi_dsub+0x3c2>
 80020c4:	2a00      	cmp	r2, #0
 80020c6:	d028      	beq.n	800211a <__aeabi_dsub+0x636>
 80020c8:	4662      	mov	r2, ip
 80020ca:	9f02      	ldr	r7, [sp, #8]
 80020cc:	08c0      	lsrs	r0, r0, #3
 80020ce:	433a      	orrs	r2, r7
 80020d0:	d100      	bne.n	80020d4 <__aeabi_dsub+0x5f0>
 80020d2:	e6dc      	b.n	8001e8e <__aeabi_dsub+0x3aa>
 80020d4:	0762      	lsls	r2, r4, #29
 80020d6:	4310      	orrs	r0, r2
 80020d8:	2280      	movs	r2, #128	@ 0x80
 80020da:	08e4      	lsrs	r4, r4, #3
 80020dc:	0312      	lsls	r2, r2, #12
 80020de:	4214      	tst	r4, r2
 80020e0:	d009      	beq.n	80020f6 <__aeabi_dsub+0x612>
 80020e2:	08fd      	lsrs	r5, r7, #3
 80020e4:	4215      	tst	r5, r2
 80020e6:	d106      	bne.n	80020f6 <__aeabi_dsub+0x612>
 80020e8:	4663      	mov	r3, ip
 80020ea:	2601      	movs	r6, #1
 80020ec:	002c      	movs	r4, r5
 80020ee:	08d8      	lsrs	r0, r3, #3
 80020f0:	077b      	lsls	r3, r7, #29
 80020f2:	4318      	orrs	r0, r3
 80020f4:	400e      	ands	r6, r1
 80020f6:	0f42      	lsrs	r2, r0, #29
 80020f8:	00c0      	lsls	r0, r0, #3
 80020fa:	08c0      	lsrs	r0, r0, #3
 80020fc:	0752      	lsls	r2, r2, #29
 80020fe:	4302      	orrs	r2, r0
 8002100:	e601      	b.n	8001d06 <__aeabi_dsub+0x222>
 8002102:	4663      	mov	r3, ip
 8002104:	1a1d      	subs	r5, r3, r0
 8002106:	45ac      	cmp	ip, r5
 8002108:	4192      	sbcs	r2, r2
 800210a:	9b02      	ldr	r3, [sp, #8]
 800210c:	4252      	negs	r2, r2
 800210e:	1b1c      	subs	r4, r3, r4
 8002110:	000e      	movs	r6, r1
 8002112:	4688      	mov	r8, r1
 8002114:	2701      	movs	r7, #1
 8002116:	1aa4      	subs	r4, r4, r2
 8002118:	e546      	b.n	8001ba8 <__aeabi_dsub+0xc4>
 800211a:	4663      	mov	r3, ip
 800211c:	08d9      	lsrs	r1, r3, #3
 800211e:	9b02      	ldr	r3, [sp, #8]
 8002120:	075a      	lsls	r2, r3, #29
 8002122:	430a      	orrs	r2, r1
 8002124:	08dc      	lsrs	r4, r3, #3
 8002126:	e5ee      	b.n	8001d06 <__aeabi_dsub+0x222>
 8002128:	4663      	mov	r3, ip
 800212a:	9c02      	ldr	r4, [sp, #8]
 800212c:	9303      	str	r3, [sp, #12]
 800212e:	e6c7      	b.n	8001ec0 <__aeabi_dsub+0x3dc>
 8002130:	08c0      	lsrs	r0, r0, #3
 8002132:	2a00      	cmp	r2, #0
 8002134:	d100      	bne.n	8002138 <__aeabi_dsub+0x654>
 8002136:	e6aa      	b.n	8001e8e <__aeabi_dsub+0x3aa>
 8002138:	0762      	lsls	r2, r4, #29
 800213a:	4310      	orrs	r0, r2
 800213c:	2280      	movs	r2, #128	@ 0x80
 800213e:	08e4      	lsrs	r4, r4, #3
 8002140:	0312      	lsls	r2, r2, #12
 8002142:	4214      	tst	r4, r2
 8002144:	d0d7      	beq.n	80020f6 <__aeabi_dsub+0x612>
 8002146:	9f02      	ldr	r7, [sp, #8]
 8002148:	08fd      	lsrs	r5, r7, #3
 800214a:	4215      	tst	r5, r2
 800214c:	d1d3      	bne.n	80020f6 <__aeabi_dsub+0x612>
 800214e:	4663      	mov	r3, ip
 8002150:	2601      	movs	r6, #1
 8002152:	08d8      	lsrs	r0, r3, #3
 8002154:	077b      	lsls	r3, r7, #29
 8002156:	002c      	movs	r4, r5
 8002158:	4318      	orrs	r0, r3
 800215a:	400e      	ands	r6, r1
 800215c:	e7cb      	b.n	80020f6 <__aeabi_dsub+0x612>
 800215e:	000a      	movs	r2, r1
 8002160:	0027      	movs	r7, r4
 8002162:	3a20      	subs	r2, #32
 8002164:	40d7      	lsrs	r7, r2
 8002166:	2920      	cmp	r1, #32
 8002168:	d005      	beq.n	8002176 <__aeabi_dsub+0x692>
 800216a:	2240      	movs	r2, #64	@ 0x40
 800216c:	1a52      	subs	r2, r2, r1
 800216e:	4094      	lsls	r4, r2
 8002170:	0025      	movs	r5, r4
 8002172:	4305      	orrs	r5, r0
 8002174:	9503      	str	r5, [sp, #12]
 8002176:	9d03      	ldr	r5, [sp, #12]
 8002178:	1e6a      	subs	r2, r5, #1
 800217a:	4195      	sbcs	r5, r2
 800217c:	432f      	orrs	r7, r5
 800217e:	e610      	b.n	8001da2 <__aeabi_dsub+0x2be>
 8002180:	0014      	movs	r4, r2
 8002182:	2500      	movs	r5, #0
 8002184:	2200      	movs	r2, #0
 8002186:	e556      	b.n	8001c36 <__aeabi_dsub+0x152>
 8002188:	9b02      	ldr	r3, [sp, #8]
 800218a:	4460      	add	r0, ip
 800218c:	4699      	mov	r9, r3
 800218e:	4560      	cmp	r0, ip
 8002190:	4192      	sbcs	r2, r2
 8002192:	444c      	add	r4, r9
 8002194:	4252      	negs	r2, r2
 8002196:	0005      	movs	r5, r0
 8002198:	18a4      	adds	r4, r4, r2
 800219a:	e74c      	b.n	8002036 <__aeabi_dsub+0x552>
 800219c:	001a      	movs	r2, r3
 800219e:	001c      	movs	r4, r3
 80021a0:	432a      	orrs	r2, r5
 80021a2:	d000      	beq.n	80021a6 <__aeabi_dsub+0x6c2>
 80021a4:	e6b3      	b.n	8001f0e <__aeabi_dsub+0x42a>
 80021a6:	e6c9      	b.n	8001f3c <__aeabi_dsub+0x458>
 80021a8:	2480      	movs	r4, #128	@ 0x80
 80021aa:	2600      	movs	r6, #0
 80021ac:	0324      	lsls	r4, r4, #12
 80021ae:	e5ae      	b.n	8001d0e <__aeabi_dsub+0x22a>
 80021b0:	2120      	movs	r1, #32
 80021b2:	2500      	movs	r5, #0
 80021b4:	1a09      	subs	r1, r1, r0
 80021b6:	e517      	b.n	8001be8 <__aeabi_dsub+0x104>
 80021b8:	2200      	movs	r2, #0
 80021ba:	2500      	movs	r5, #0
 80021bc:	4c0b      	ldr	r4, [pc, #44]	@ (80021ec <__aeabi_dsub+0x708>)
 80021be:	e53a      	b.n	8001c36 <__aeabi_dsub+0x152>
 80021c0:	2d00      	cmp	r5, #0
 80021c2:	d100      	bne.n	80021c6 <__aeabi_dsub+0x6e2>
 80021c4:	e5f6      	b.n	8001db4 <__aeabi_dsub+0x2d0>
 80021c6:	464b      	mov	r3, r9
 80021c8:	1bda      	subs	r2, r3, r7
 80021ca:	4692      	mov	sl, r2
 80021cc:	2f00      	cmp	r7, #0
 80021ce:	d100      	bne.n	80021d2 <__aeabi_dsub+0x6ee>
 80021d0:	e66f      	b.n	8001eb2 <__aeabi_dsub+0x3ce>
 80021d2:	2a38      	cmp	r2, #56	@ 0x38
 80021d4:	dc05      	bgt.n	80021e2 <__aeabi_dsub+0x6fe>
 80021d6:	2680      	movs	r6, #128	@ 0x80
 80021d8:	0436      	lsls	r6, r6, #16
 80021da:	4334      	orrs	r4, r6
 80021dc:	4688      	mov	r8, r1
 80021de:	000e      	movs	r6, r1
 80021e0:	e6d1      	b.n	8001f86 <__aeabi_dsub+0x4a2>
 80021e2:	4688      	mov	r8, r1
 80021e4:	000e      	movs	r6, r1
 80021e6:	2501      	movs	r5, #1
 80021e8:	e6de      	b.n	8001fa8 <__aeabi_dsub+0x4c4>
 80021ea:	46c0      	nop			@ (mov r8, r8)
 80021ec:	000007ff 	.word	0x000007ff
 80021f0:	ff7fffff 	.word	0xff7fffff
 80021f4:	000007fe 	.word	0x000007fe
 80021f8:	2d00      	cmp	r5, #0
 80021fa:	d100      	bne.n	80021fe <__aeabi_dsub+0x71a>
 80021fc:	e668      	b.n	8001ed0 <__aeabi_dsub+0x3ec>
 80021fe:	464b      	mov	r3, r9
 8002200:	1bd9      	subs	r1, r3, r7
 8002202:	2f00      	cmp	r7, #0
 8002204:	d101      	bne.n	800220a <__aeabi_dsub+0x726>
 8002206:	468a      	mov	sl, r1
 8002208:	e5a7      	b.n	8001d5a <__aeabi_dsub+0x276>
 800220a:	2701      	movs	r7, #1
 800220c:	2938      	cmp	r1, #56	@ 0x38
 800220e:	dd00      	ble.n	8002212 <__aeabi_dsub+0x72e>
 8002210:	e5c7      	b.n	8001da2 <__aeabi_dsub+0x2be>
 8002212:	2280      	movs	r2, #128	@ 0x80
 8002214:	0412      	lsls	r2, r2, #16
 8002216:	4314      	orrs	r4, r2
 8002218:	e5af      	b.n	8001d7a <__aeabi_dsub+0x296>
 800221a:	46c0      	nop			@ (mov r8, r8)

0800221c <__aeabi_d2iz>:
 800221c:	000b      	movs	r3, r1
 800221e:	0002      	movs	r2, r0
 8002220:	b570      	push	{r4, r5, r6, lr}
 8002222:	4d16      	ldr	r5, [pc, #88]	@ (800227c <__aeabi_d2iz+0x60>)
 8002224:	030c      	lsls	r4, r1, #12
 8002226:	b082      	sub	sp, #8
 8002228:	0049      	lsls	r1, r1, #1
 800222a:	2000      	movs	r0, #0
 800222c:	9200      	str	r2, [sp, #0]
 800222e:	9301      	str	r3, [sp, #4]
 8002230:	0b24      	lsrs	r4, r4, #12
 8002232:	0d49      	lsrs	r1, r1, #21
 8002234:	0fde      	lsrs	r6, r3, #31
 8002236:	42a9      	cmp	r1, r5
 8002238:	dd04      	ble.n	8002244 <__aeabi_d2iz+0x28>
 800223a:	4811      	ldr	r0, [pc, #68]	@ (8002280 <__aeabi_d2iz+0x64>)
 800223c:	4281      	cmp	r1, r0
 800223e:	dd03      	ble.n	8002248 <__aeabi_d2iz+0x2c>
 8002240:	4b10      	ldr	r3, [pc, #64]	@ (8002284 <__aeabi_d2iz+0x68>)
 8002242:	18f0      	adds	r0, r6, r3
 8002244:	b002      	add	sp, #8
 8002246:	bd70      	pop	{r4, r5, r6, pc}
 8002248:	2080      	movs	r0, #128	@ 0x80
 800224a:	0340      	lsls	r0, r0, #13
 800224c:	4320      	orrs	r0, r4
 800224e:	4c0e      	ldr	r4, [pc, #56]	@ (8002288 <__aeabi_d2iz+0x6c>)
 8002250:	1a64      	subs	r4, r4, r1
 8002252:	2c1f      	cmp	r4, #31
 8002254:	dd08      	ble.n	8002268 <__aeabi_d2iz+0x4c>
 8002256:	4b0d      	ldr	r3, [pc, #52]	@ (800228c <__aeabi_d2iz+0x70>)
 8002258:	1a5b      	subs	r3, r3, r1
 800225a:	40d8      	lsrs	r0, r3
 800225c:	0003      	movs	r3, r0
 800225e:	4258      	negs	r0, r3
 8002260:	2e00      	cmp	r6, #0
 8002262:	d1ef      	bne.n	8002244 <__aeabi_d2iz+0x28>
 8002264:	0018      	movs	r0, r3
 8002266:	e7ed      	b.n	8002244 <__aeabi_d2iz+0x28>
 8002268:	4b09      	ldr	r3, [pc, #36]	@ (8002290 <__aeabi_d2iz+0x74>)
 800226a:	9a00      	ldr	r2, [sp, #0]
 800226c:	469c      	mov	ip, r3
 800226e:	0003      	movs	r3, r0
 8002270:	4461      	add	r1, ip
 8002272:	408b      	lsls	r3, r1
 8002274:	40e2      	lsrs	r2, r4
 8002276:	4313      	orrs	r3, r2
 8002278:	e7f1      	b.n	800225e <__aeabi_d2iz+0x42>
 800227a:	46c0      	nop			@ (mov r8, r8)
 800227c:	000003fe 	.word	0x000003fe
 8002280:	0000041d 	.word	0x0000041d
 8002284:	7fffffff 	.word	0x7fffffff
 8002288:	00000433 	.word	0x00000433
 800228c:	00000413 	.word	0x00000413
 8002290:	fffffbed 	.word	0xfffffbed

08002294 <__aeabi_i2d>:
 8002294:	b570      	push	{r4, r5, r6, lr}
 8002296:	2800      	cmp	r0, #0
 8002298:	d016      	beq.n	80022c8 <__aeabi_i2d+0x34>
 800229a:	17c3      	asrs	r3, r0, #31
 800229c:	18c5      	adds	r5, r0, r3
 800229e:	405d      	eors	r5, r3
 80022a0:	0fc4      	lsrs	r4, r0, #31
 80022a2:	0028      	movs	r0, r5
 80022a4:	f000 f914 	bl	80024d0 <__clzsi2>
 80022a8:	4b10      	ldr	r3, [pc, #64]	@ (80022ec <__aeabi_i2d+0x58>)
 80022aa:	1a1b      	subs	r3, r3, r0
 80022ac:	055b      	lsls	r3, r3, #21
 80022ae:	0d5b      	lsrs	r3, r3, #21
 80022b0:	280a      	cmp	r0, #10
 80022b2:	dc14      	bgt.n	80022de <__aeabi_i2d+0x4a>
 80022b4:	0002      	movs	r2, r0
 80022b6:	002e      	movs	r6, r5
 80022b8:	3215      	adds	r2, #21
 80022ba:	4096      	lsls	r6, r2
 80022bc:	220b      	movs	r2, #11
 80022be:	1a12      	subs	r2, r2, r0
 80022c0:	40d5      	lsrs	r5, r2
 80022c2:	032d      	lsls	r5, r5, #12
 80022c4:	0b2d      	lsrs	r5, r5, #12
 80022c6:	e003      	b.n	80022d0 <__aeabi_i2d+0x3c>
 80022c8:	2400      	movs	r4, #0
 80022ca:	2300      	movs	r3, #0
 80022cc:	2500      	movs	r5, #0
 80022ce:	2600      	movs	r6, #0
 80022d0:	051b      	lsls	r3, r3, #20
 80022d2:	432b      	orrs	r3, r5
 80022d4:	07e4      	lsls	r4, r4, #31
 80022d6:	4323      	orrs	r3, r4
 80022d8:	0030      	movs	r0, r6
 80022da:	0019      	movs	r1, r3
 80022dc:	bd70      	pop	{r4, r5, r6, pc}
 80022de:	380b      	subs	r0, #11
 80022e0:	4085      	lsls	r5, r0
 80022e2:	032d      	lsls	r5, r5, #12
 80022e4:	2600      	movs	r6, #0
 80022e6:	0b2d      	lsrs	r5, r5, #12
 80022e8:	e7f2      	b.n	80022d0 <__aeabi_i2d+0x3c>
 80022ea:	46c0      	nop			@ (mov r8, r8)
 80022ec:	0000041e 	.word	0x0000041e

080022f0 <__aeabi_ui2d>:
 80022f0:	b510      	push	{r4, lr}
 80022f2:	1e04      	subs	r4, r0, #0
 80022f4:	d010      	beq.n	8002318 <__aeabi_ui2d+0x28>
 80022f6:	f000 f8eb 	bl	80024d0 <__clzsi2>
 80022fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002334 <__aeabi_ui2d+0x44>)
 80022fc:	1a1b      	subs	r3, r3, r0
 80022fe:	055b      	lsls	r3, r3, #21
 8002300:	0d5b      	lsrs	r3, r3, #21
 8002302:	280a      	cmp	r0, #10
 8002304:	dc0f      	bgt.n	8002326 <__aeabi_ui2d+0x36>
 8002306:	220b      	movs	r2, #11
 8002308:	0021      	movs	r1, r4
 800230a:	1a12      	subs	r2, r2, r0
 800230c:	40d1      	lsrs	r1, r2
 800230e:	3015      	adds	r0, #21
 8002310:	030a      	lsls	r2, r1, #12
 8002312:	4084      	lsls	r4, r0
 8002314:	0b12      	lsrs	r2, r2, #12
 8002316:	e001      	b.n	800231c <__aeabi_ui2d+0x2c>
 8002318:	2300      	movs	r3, #0
 800231a:	2200      	movs	r2, #0
 800231c:	051b      	lsls	r3, r3, #20
 800231e:	4313      	orrs	r3, r2
 8002320:	0020      	movs	r0, r4
 8002322:	0019      	movs	r1, r3
 8002324:	bd10      	pop	{r4, pc}
 8002326:	0022      	movs	r2, r4
 8002328:	380b      	subs	r0, #11
 800232a:	4082      	lsls	r2, r0
 800232c:	0312      	lsls	r2, r2, #12
 800232e:	2400      	movs	r4, #0
 8002330:	0b12      	lsrs	r2, r2, #12
 8002332:	e7f3      	b.n	800231c <__aeabi_ui2d+0x2c>
 8002334:	0000041e 	.word	0x0000041e

08002338 <__aeabi_f2d>:
 8002338:	b570      	push	{r4, r5, r6, lr}
 800233a:	0242      	lsls	r2, r0, #9
 800233c:	0043      	lsls	r3, r0, #1
 800233e:	0fc4      	lsrs	r4, r0, #31
 8002340:	20fe      	movs	r0, #254	@ 0xfe
 8002342:	0e1b      	lsrs	r3, r3, #24
 8002344:	1c59      	adds	r1, r3, #1
 8002346:	0a55      	lsrs	r5, r2, #9
 8002348:	4208      	tst	r0, r1
 800234a:	d00c      	beq.n	8002366 <__aeabi_f2d+0x2e>
 800234c:	21e0      	movs	r1, #224	@ 0xe0
 800234e:	0089      	lsls	r1, r1, #2
 8002350:	468c      	mov	ip, r1
 8002352:	076d      	lsls	r5, r5, #29
 8002354:	0b12      	lsrs	r2, r2, #12
 8002356:	4463      	add	r3, ip
 8002358:	051b      	lsls	r3, r3, #20
 800235a:	4313      	orrs	r3, r2
 800235c:	07e4      	lsls	r4, r4, #31
 800235e:	4323      	orrs	r3, r4
 8002360:	0028      	movs	r0, r5
 8002362:	0019      	movs	r1, r3
 8002364:	bd70      	pop	{r4, r5, r6, pc}
 8002366:	2b00      	cmp	r3, #0
 8002368:	d114      	bne.n	8002394 <__aeabi_f2d+0x5c>
 800236a:	2d00      	cmp	r5, #0
 800236c:	d01b      	beq.n	80023a6 <__aeabi_f2d+0x6e>
 800236e:	0028      	movs	r0, r5
 8002370:	f000 f8ae 	bl	80024d0 <__clzsi2>
 8002374:	280a      	cmp	r0, #10
 8002376:	dc1c      	bgt.n	80023b2 <__aeabi_f2d+0x7a>
 8002378:	230b      	movs	r3, #11
 800237a:	002a      	movs	r2, r5
 800237c:	1a1b      	subs	r3, r3, r0
 800237e:	40da      	lsrs	r2, r3
 8002380:	0003      	movs	r3, r0
 8002382:	3315      	adds	r3, #21
 8002384:	409d      	lsls	r5, r3
 8002386:	4b0e      	ldr	r3, [pc, #56]	@ (80023c0 <__aeabi_f2d+0x88>)
 8002388:	0312      	lsls	r2, r2, #12
 800238a:	1a1b      	subs	r3, r3, r0
 800238c:	055b      	lsls	r3, r3, #21
 800238e:	0b12      	lsrs	r2, r2, #12
 8002390:	0d5b      	lsrs	r3, r3, #21
 8002392:	e7e1      	b.n	8002358 <__aeabi_f2d+0x20>
 8002394:	2d00      	cmp	r5, #0
 8002396:	d009      	beq.n	80023ac <__aeabi_f2d+0x74>
 8002398:	0b13      	lsrs	r3, r2, #12
 800239a:	2280      	movs	r2, #128	@ 0x80
 800239c:	0312      	lsls	r2, r2, #12
 800239e:	431a      	orrs	r2, r3
 80023a0:	076d      	lsls	r5, r5, #29
 80023a2:	4b08      	ldr	r3, [pc, #32]	@ (80023c4 <__aeabi_f2d+0x8c>)
 80023a4:	e7d8      	b.n	8002358 <__aeabi_f2d+0x20>
 80023a6:	2300      	movs	r3, #0
 80023a8:	2200      	movs	r2, #0
 80023aa:	e7d5      	b.n	8002358 <__aeabi_f2d+0x20>
 80023ac:	2200      	movs	r2, #0
 80023ae:	4b05      	ldr	r3, [pc, #20]	@ (80023c4 <__aeabi_f2d+0x8c>)
 80023b0:	e7d2      	b.n	8002358 <__aeabi_f2d+0x20>
 80023b2:	0003      	movs	r3, r0
 80023b4:	002a      	movs	r2, r5
 80023b6:	3b0b      	subs	r3, #11
 80023b8:	409a      	lsls	r2, r3
 80023ba:	2500      	movs	r5, #0
 80023bc:	e7e3      	b.n	8002386 <__aeabi_f2d+0x4e>
 80023be:	46c0      	nop			@ (mov r8, r8)
 80023c0:	00000389 	.word	0x00000389
 80023c4:	000007ff 	.word	0x000007ff

080023c8 <__aeabi_d2f>:
 80023c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ca:	004b      	lsls	r3, r1, #1
 80023cc:	030f      	lsls	r7, r1, #12
 80023ce:	0d5b      	lsrs	r3, r3, #21
 80023d0:	4c3b      	ldr	r4, [pc, #236]	@ (80024c0 <__aeabi_d2f+0xf8>)
 80023d2:	0f45      	lsrs	r5, r0, #29
 80023d4:	b083      	sub	sp, #12
 80023d6:	0a7f      	lsrs	r7, r7, #9
 80023d8:	1c5e      	adds	r6, r3, #1
 80023da:	432f      	orrs	r7, r5
 80023dc:	9000      	str	r0, [sp, #0]
 80023de:	9101      	str	r1, [sp, #4]
 80023e0:	0fca      	lsrs	r2, r1, #31
 80023e2:	00c5      	lsls	r5, r0, #3
 80023e4:	4226      	tst	r6, r4
 80023e6:	d00b      	beq.n	8002400 <__aeabi_d2f+0x38>
 80023e8:	4936      	ldr	r1, [pc, #216]	@ (80024c4 <__aeabi_d2f+0xfc>)
 80023ea:	185c      	adds	r4, r3, r1
 80023ec:	2cfe      	cmp	r4, #254	@ 0xfe
 80023ee:	dd13      	ble.n	8002418 <__aeabi_d2f+0x50>
 80023f0:	20ff      	movs	r0, #255	@ 0xff
 80023f2:	2300      	movs	r3, #0
 80023f4:	05c0      	lsls	r0, r0, #23
 80023f6:	4318      	orrs	r0, r3
 80023f8:	07d2      	lsls	r2, r2, #31
 80023fa:	4310      	orrs	r0, r2
 80023fc:	b003      	add	sp, #12
 80023fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002400:	2b00      	cmp	r3, #0
 8002402:	d102      	bne.n	800240a <__aeabi_d2f+0x42>
 8002404:	2000      	movs	r0, #0
 8002406:	2300      	movs	r3, #0
 8002408:	e7f4      	b.n	80023f4 <__aeabi_d2f+0x2c>
 800240a:	433d      	orrs	r5, r7
 800240c:	d0f0      	beq.n	80023f0 <__aeabi_d2f+0x28>
 800240e:	2380      	movs	r3, #128	@ 0x80
 8002410:	03db      	lsls	r3, r3, #15
 8002412:	20ff      	movs	r0, #255	@ 0xff
 8002414:	433b      	orrs	r3, r7
 8002416:	e7ed      	b.n	80023f4 <__aeabi_d2f+0x2c>
 8002418:	2c00      	cmp	r4, #0
 800241a:	dd14      	ble.n	8002446 <__aeabi_d2f+0x7e>
 800241c:	9b00      	ldr	r3, [sp, #0]
 800241e:	00ff      	lsls	r7, r7, #3
 8002420:	019b      	lsls	r3, r3, #6
 8002422:	1e58      	subs	r0, r3, #1
 8002424:	4183      	sbcs	r3, r0
 8002426:	0f69      	lsrs	r1, r5, #29
 8002428:	433b      	orrs	r3, r7
 800242a:	430b      	orrs	r3, r1
 800242c:	0759      	lsls	r1, r3, #29
 800242e:	d041      	beq.n	80024b4 <__aeabi_d2f+0xec>
 8002430:	210f      	movs	r1, #15
 8002432:	4019      	ands	r1, r3
 8002434:	2904      	cmp	r1, #4
 8002436:	d028      	beq.n	800248a <__aeabi_d2f+0xc2>
 8002438:	3304      	adds	r3, #4
 800243a:	0159      	lsls	r1, r3, #5
 800243c:	d525      	bpl.n	800248a <__aeabi_d2f+0xc2>
 800243e:	3401      	adds	r4, #1
 8002440:	2300      	movs	r3, #0
 8002442:	b2e0      	uxtb	r0, r4
 8002444:	e7d6      	b.n	80023f4 <__aeabi_d2f+0x2c>
 8002446:	0021      	movs	r1, r4
 8002448:	3117      	adds	r1, #23
 800244a:	dbdb      	blt.n	8002404 <__aeabi_d2f+0x3c>
 800244c:	2180      	movs	r1, #128	@ 0x80
 800244e:	201e      	movs	r0, #30
 8002450:	0409      	lsls	r1, r1, #16
 8002452:	4339      	orrs	r1, r7
 8002454:	1b00      	subs	r0, r0, r4
 8002456:	281f      	cmp	r0, #31
 8002458:	dd1b      	ble.n	8002492 <__aeabi_d2f+0xca>
 800245a:	2602      	movs	r6, #2
 800245c:	4276      	negs	r6, r6
 800245e:	1b34      	subs	r4, r6, r4
 8002460:	000e      	movs	r6, r1
 8002462:	40e6      	lsrs	r6, r4
 8002464:	0034      	movs	r4, r6
 8002466:	2820      	cmp	r0, #32
 8002468:	d004      	beq.n	8002474 <__aeabi_d2f+0xac>
 800246a:	4817      	ldr	r0, [pc, #92]	@ (80024c8 <__aeabi_d2f+0x100>)
 800246c:	4684      	mov	ip, r0
 800246e:	4463      	add	r3, ip
 8002470:	4099      	lsls	r1, r3
 8002472:	430d      	orrs	r5, r1
 8002474:	002b      	movs	r3, r5
 8002476:	1e59      	subs	r1, r3, #1
 8002478:	418b      	sbcs	r3, r1
 800247a:	4323      	orrs	r3, r4
 800247c:	0759      	lsls	r1, r3, #29
 800247e:	d015      	beq.n	80024ac <__aeabi_d2f+0xe4>
 8002480:	210f      	movs	r1, #15
 8002482:	2400      	movs	r4, #0
 8002484:	4019      	ands	r1, r3
 8002486:	2904      	cmp	r1, #4
 8002488:	d117      	bne.n	80024ba <__aeabi_d2f+0xf2>
 800248a:	019b      	lsls	r3, r3, #6
 800248c:	0a5b      	lsrs	r3, r3, #9
 800248e:	b2e0      	uxtb	r0, r4
 8002490:	e7b0      	b.n	80023f4 <__aeabi_d2f+0x2c>
 8002492:	4c0e      	ldr	r4, [pc, #56]	@ (80024cc <__aeabi_d2f+0x104>)
 8002494:	191c      	adds	r4, r3, r4
 8002496:	002b      	movs	r3, r5
 8002498:	40a5      	lsls	r5, r4
 800249a:	40c3      	lsrs	r3, r0
 800249c:	40a1      	lsls	r1, r4
 800249e:	1e68      	subs	r0, r5, #1
 80024a0:	4185      	sbcs	r5, r0
 80024a2:	4329      	orrs	r1, r5
 80024a4:	430b      	orrs	r3, r1
 80024a6:	2400      	movs	r4, #0
 80024a8:	0759      	lsls	r1, r3, #29
 80024aa:	d1c1      	bne.n	8002430 <__aeabi_d2f+0x68>
 80024ac:	019b      	lsls	r3, r3, #6
 80024ae:	2000      	movs	r0, #0
 80024b0:	0a5b      	lsrs	r3, r3, #9
 80024b2:	e79f      	b.n	80023f4 <__aeabi_d2f+0x2c>
 80024b4:	08db      	lsrs	r3, r3, #3
 80024b6:	b2e0      	uxtb	r0, r4
 80024b8:	e79c      	b.n	80023f4 <__aeabi_d2f+0x2c>
 80024ba:	3304      	adds	r3, #4
 80024bc:	e7e5      	b.n	800248a <__aeabi_d2f+0xc2>
 80024be:	46c0      	nop			@ (mov r8, r8)
 80024c0:	000007fe 	.word	0x000007fe
 80024c4:	fffffc80 	.word	0xfffffc80
 80024c8:	fffffca2 	.word	0xfffffca2
 80024cc:	fffffc82 	.word	0xfffffc82

080024d0 <__clzsi2>:
 80024d0:	211c      	movs	r1, #28
 80024d2:	2301      	movs	r3, #1
 80024d4:	041b      	lsls	r3, r3, #16
 80024d6:	4298      	cmp	r0, r3
 80024d8:	d301      	bcc.n	80024de <__clzsi2+0xe>
 80024da:	0c00      	lsrs	r0, r0, #16
 80024dc:	3910      	subs	r1, #16
 80024de:	0a1b      	lsrs	r3, r3, #8
 80024e0:	4298      	cmp	r0, r3
 80024e2:	d301      	bcc.n	80024e8 <__clzsi2+0x18>
 80024e4:	0a00      	lsrs	r0, r0, #8
 80024e6:	3908      	subs	r1, #8
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	4298      	cmp	r0, r3
 80024ec:	d301      	bcc.n	80024f2 <__clzsi2+0x22>
 80024ee:	0900      	lsrs	r0, r0, #4
 80024f0:	3904      	subs	r1, #4
 80024f2:	a202      	add	r2, pc, #8	@ (adr r2, 80024fc <__clzsi2+0x2c>)
 80024f4:	5c10      	ldrb	r0, [r2, r0]
 80024f6:	1840      	adds	r0, r0, r1
 80024f8:	4770      	bx	lr
 80024fa:	46c0      	nop			@ (mov r8, r8)
 80024fc:	02020304 	.word	0x02020304
 8002500:	01010101 	.word	0x01010101
	...

0800250c <__clzdi2>:
 800250c:	b510      	push	{r4, lr}
 800250e:	2900      	cmp	r1, #0
 8002510:	d103      	bne.n	800251a <__clzdi2+0xe>
 8002512:	f7ff ffdd 	bl	80024d0 <__clzsi2>
 8002516:	3020      	adds	r0, #32
 8002518:	e002      	b.n	8002520 <__clzdi2+0x14>
 800251a:	0008      	movs	r0, r1
 800251c:	f7ff ffd8 	bl	80024d0 <__clzsi2>
 8002520:	bd10      	pop	{r4, pc}
 8002522:	46c0      	nop			@ (mov r8, r8)

08002524 <__aeabi_d2uiz>:
 8002524:	b570      	push	{r4, r5, r6, lr}
 8002526:	2200      	movs	r2, #0
 8002528:	4b0c      	ldr	r3, [pc, #48]	@ (800255c <__aeabi_d2uiz+0x38>)
 800252a:	0004      	movs	r4, r0
 800252c:	000d      	movs	r5, r1
 800252e:	f7fd feb3 	bl	8000298 <__aeabi_dcmpge>
 8002532:	2800      	cmp	r0, #0
 8002534:	d104      	bne.n	8002540 <__aeabi_d2uiz+0x1c>
 8002536:	0020      	movs	r0, r4
 8002538:	0029      	movs	r1, r5
 800253a:	f7ff fe6f 	bl	800221c <__aeabi_d2iz>
 800253e:	bd70      	pop	{r4, r5, r6, pc}
 8002540:	4b06      	ldr	r3, [pc, #24]	@ (800255c <__aeabi_d2uiz+0x38>)
 8002542:	2200      	movs	r2, #0
 8002544:	0020      	movs	r0, r4
 8002546:	0029      	movs	r1, r5
 8002548:	f7ff facc 	bl	8001ae4 <__aeabi_dsub>
 800254c:	f7ff fe66 	bl	800221c <__aeabi_d2iz>
 8002550:	2380      	movs	r3, #128	@ 0x80
 8002552:	061b      	lsls	r3, r3, #24
 8002554:	469c      	mov	ip, r3
 8002556:	4460      	add	r0, ip
 8002558:	e7f1      	b.n	800253e <__aeabi_d2uiz+0x1a>
 800255a:	46c0      	nop			@ (mov r8, r8)
 800255c:	41e00000 	.word	0x41e00000

08002560 <__divdi3>:
 8002560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002562:	46d6      	mov	lr, sl
 8002564:	464f      	mov	r7, r9
 8002566:	4646      	mov	r6, r8
 8002568:	b5c0      	push	{r6, r7, lr}
 800256a:	0004      	movs	r4, r0
 800256c:	000d      	movs	r5, r1
 800256e:	0010      	movs	r0, r2
 8002570:	0019      	movs	r1, r3
 8002572:	b082      	sub	sp, #8
 8002574:	2d00      	cmp	r5, #0
 8002576:	da00      	bge.n	800257a <__divdi3+0x1a>
 8002578:	e087      	b.n	800268a <__divdi3+0x12a>
 800257a:	2b00      	cmp	r3, #0
 800257c:	db0b      	blt.n	8002596 <__divdi3+0x36>
 800257e:	0016      	movs	r6, r2
 8002580:	001f      	movs	r7, r3
 8002582:	42ab      	cmp	r3, r5
 8002584:	d919      	bls.n	80025ba <__divdi3+0x5a>
 8002586:	2000      	movs	r0, #0
 8002588:	2100      	movs	r1, #0
 800258a:	b002      	add	sp, #8
 800258c:	bce0      	pop	{r5, r6, r7}
 800258e:	46ba      	mov	sl, r7
 8002590:	46b1      	mov	r9, r6
 8002592:	46a8      	mov	r8, r5
 8002594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002596:	2700      	movs	r7, #0
 8002598:	4246      	negs	r6, r0
 800259a:	418f      	sbcs	r7, r1
 800259c:	42af      	cmp	r7, r5
 800259e:	d804      	bhi.n	80025aa <__divdi3+0x4a>
 80025a0:	d000      	beq.n	80025a4 <__divdi3+0x44>
 80025a2:	e082      	b.n	80026aa <__divdi3+0x14a>
 80025a4:	42a6      	cmp	r6, r4
 80025a6:	d800      	bhi.n	80025aa <__divdi3+0x4a>
 80025a8:	e07f      	b.n	80026aa <__divdi3+0x14a>
 80025aa:	2000      	movs	r0, #0
 80025ac:	2100      	movs	r1, #0
 80025ae:	e08f      	b.n	80026d0 <__divdi3+0x170>
 80025b0:	2700      	movs	r7, #0
 80025b2:	4246      	negs	r6, r0
 80025b4:	418f      	sbcs	r7, r1
 80025b6:	429f      	cmp	r7, r3
 80025b8:	d8e5      	bhi.n	8002586 <__divdi3+0x26>
 80025ba:	42af      	cmp	r7, r5
 80025bc:	d100      	bne.n	80025c0 <__divdi3+0x60>
 80025be:	e098      	b.n	80026f2 <__divdi3+0x192>
 80025c0:	2300      	movs	r3, #0
 80025c2:	4699      	mov	r9, r3
 80025c4:	0039      	movs	r1, r7
 80025c6:	0030      	movs	r0, r6
 80025c8:	f7ff ffa0 	bl	800250c <__clzdi2>
 80025cc:	4680      	mov	r8, r0
 80025ce:	0029      	movs	r1, r5
 80025d0:	0020      	movs	r0, r4
 80025d2:	f7ff ff9b 	bl	800250c <__clzdi2>
 80025d6:	4643      	mov	r3, r8
 80025d8:	1a1b      	subs	r3, r3, r0
 80025da:	4698      	mov	r8, r3
 80025dc:	3b20      	subs	r3, #32
 80025de:	d500      	bpl.n	80025e2 <__divdi3+0x82>
 80025e0:	e07c      	b.n	80026dc <__divdi3+0x17c>
 80025e2:	0031      	movs	r1, r6
 80025e4:	4099      	lsls	r1, r3
 80025e6:	469a      	mov	sl, r3
 80025e8:	000b      	movs	r3, r1
 80025ea:	0031      	movs	r1, r6
 80025ec:	4640      	mov	r0, r8
 80025ee:	4081      	lsls	r1, r0
 80025f0:	000a      	movs	r2, r1
 80025f2:	42ab      	cmp	r3, r5
 80025f4:	d85f      	bhi.n	80026b6 <__divdi3+0x156>
 80025f6:	d05c      	beq.n	80026b2 <__divdi3+0x152>
 80025f8:	4651      	mov	r1, sl
 80025fa:	1aa4      	subs	r4, r4, r2
 80025fc:	419d      	sbcs	r5, r3
 80025fe:	2900      	cmp	r1, #0
 8002600:	da00      	bge.n	8002604 <__divdi3+0xa4>
 8002602:	e093      	b.n	800272c <__divdi3+0x1cc>
 8002604:	2100      	movs	r1, #0
 8002606:	2000      	movs	r0, #0
 8002608:	2601      	movs	r6, #1
 800260a:	9000      	str	r0, [sp, #0]
 800260c:	9101      	str	r1, [sp, #4]
 800260e:	4651      	mov	r1, sl
 8002610:	408e      	lsls	r6, r1
 8002612:	9601      	str	r6, [sp, #4]
 8002614:	4641      	mov	r1, r8
 8002616:	2601      	movs	r6, #1
 8002618:	408e      	lsls	r6, r1
 800261a:	4641      	mov	r1, r8
 800261c:	9600      	str	r6, [sp, #0]
 800261e:	2900      	cmp	r1, #0
 8002620:	d050      	beq.n	80026c4 <__divdi3+0x164>
 8002622:	07d9      	lsls	r1, r3, #31
 8002624:	0856      	lsrs	r6, r2, #1
 8002626:	430e      	orrs	r6, r1
 8002628:	085f      	lsrs	r7, r3, #1
 800262a:	4641      	mov	r1, r8
 800262c:	2201      	movs	r2, #1
 800262e:	2300      	movs	r3, #0
 8002630:	e00c      	b.n	800264c <__divdi3+0xec>
 8002632:	42af      	cmp	r7, r5
 8002634:	d101      	bne.n	800263a <__divdi3+0xda>
 8002636:	42a6      	cmp	r6, r4
 8002638:	d80a      	bhi.n	8002650 <__divdi3+0xf0>
 800263a:	1ba4      	subs	r4, r4, r6
 800263c:	41bd      	sbcs	r5, r7
 800263e:	1924      	adds	r4, r4, r4
 8002640:	416d      	adcs	r5, r5
 8002642:	3901      	subs	r1, #1
 8002644:	18a4      	adds	r4, r4, r2
 8002646:	415d      	adcs	r5, r3
 8002648:	2900      	cmp	r1, #0
 800264a:	d006      	beq.n	800265a <__divdi3+0xfa>
 800264c:	42af      	cmp	r7, r5
 800264e:	d9f0      	bls.n	8002632 <__divdi3+0xd2>
 8002650:	3901      	subs	r1, #1
 8002652:	1924      	adds	r4, r4, r4
 8002654:	416d      	adcs	r5, r5
 8002656:	2900      	cmp	r1, #0
 8002658:	d1f8      	bne.n	800264c <__divdi3+0xec>
 800265a:	9800      	ldr	r0, [sp, #0]
 800265c:	9901      	ldr	r1, [sp, #4]
 800265e:	4653      	mov	r3, sl
 8002660:	1900      	adds	r0, r0, r4
 8002662:	4169      	adcs	r1, r5
 8002664:	2b00      	cmp	r3, #0
 8002666:	db48      	blt.n	80026fa <__divdi3+0x19a>
 8002668:	002e      	movs	r6, r5
 800266a:	002c      	movs	r4, r5
 800266c:	40de      	lsrs	r6, r3
 800266e:	4643      	mov	r3, r8
 8002670:	40dc      	lsrs	r4, r3
 8002672:	4653      	mov	r3, sl
 8002674:	2b00      	cmp	r3, #0
 8002676:	db50      	blt.n	800271a <__divdi3+0x1ba>
 8002678:	0034      	movs	r4, r6
 800267a:	409c      	lsls	r4, r3
 800267c:	0023      	movs	r3, r4
 800267e:	4644      	mov	r4, r8
 8002680:	40a6      	lsls	r6, r4
 8002682:	0032      	movs	r2, r6
 8002684:	1a80      	subs	r0, r0, r2
 8002686:	4199      	sbcs	r1, r3
 8002688:	e01e      	b.n	80026c8 <__divdi3+0x168>
 800268a:	2300      	movs	r3, #0
 800268c:	4262      	negs	r2, r4
 800268e:	41ab      	sbcs	r3, r5
 8002690:	0014      	movs	r4, r2
 8002692:	001d      	movs	r5, r3
 8002694:	2900      	cmp	r1, #0
 8002696:	db8b      	blt.n	80025b0 <__divdi3+0x50>
 8002698:	0006      	movs	r6, r0
 800269a:	000f      	movs	r7, r1
 800269c:	4299      	cmp	r1, r3
 800269e:	d900      	bls.n	80026a2 <__divdi3+0x142>
 80026a0:	e771      	b.n	8002586 <__divdi3+0x26>
 80026a2:	d102      	bne.n	80026aa <__divdi3+0x14a>
 80026a4:	4290      	cmp	r0, r2
 80026a6:	d900      	bls.n	80026aa <__divdi3+0x14a>
 80026a8:	e76d      	b.n	8002586 <__divdi3+0x26>
 80026aa:	2301      	movs	r3, #1
 80026ac:	425b      	negs	r3, r3
 80026ae:	4699      	mov	r9, r3
 80026b0:	e788      	b.n	80025c4 <__divdi3+0x64>
 80026b2:	42a1      	cmp	r1, r4
 80026b4:	d9a0      	bls.n	80025f8 <__divdi3+0x98>
 80026b6:	2100      	movs	r1, #0
 80026b8:	2000      	movs	r0, #0
 80026ba:	9000      	str	r0, [sp, #0]
 80026bc:	9101      	str	r1, [sp, #4]
 80026be:	4641      	mov	r1, r8
 80026c0:	2900      	cmp	r1, #0
 80026c2:	d1ae      	bne.n	8002622 <__divdi3+0xc2>
 80026c4:	9800      	ldr	r0, [sp, #0]
 80026c6:	9901      	ldr	r1, [sp, #4]
 80026c8:	464b      	mov	r3, r9
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d100      	bne.n	80026d0 <__divdi3+0x170>
 80026ce:	e75c      	b.n	800258a <__divdi3+0x2a>
 80026d0:	0003      	movs	r3, r0
 80026d2:	000c      	movs	r4, r1
 80026d4:	2100      	movs	r1, #0
 80026d6:	4258      	negs	r0, r3
 80026d8:	41a1      	sbcs	r1, r4
 80026da:	e756      	b.n	800258a <__divdi3+0x2a>
 80026dc:	4642      	mov	r2, r8
 80026de:	0038      	movs	r0, r7
 80026e0:	469a      	mov	sl, r3
 80026e2:	2320      	movs	r3, #32
 80026e4:	0031      	movs	r1, r6
 80026e6:	4090      	lsls	r0, r2
 80026e8:	1a9b      	subs	r3, r3, r2
 80026ea:	40d9      	lsrs	r1, r3
 80026ec:	0003      	movs	r3, r0
 80026ee:	430b      	orrs	r3, r1
 80026f0:	e77b      	b.n	80025ea <__divdi3+0x8a>
 80026f2:	42a6      	cmp	r6, r4
 80026f4:	d800      	bhi.n	80026f8 <__divdi3+0x198>
 80026f6:	e763      	b.n	80025c0 <__divdi3+0x60>
 80026f8:	e745      	b.n	8002586 <__divdi3+0x26>
 80026fa:	4642      	mov	r2, r8
 80026fc:	2320      	movs	r3, #32
 80026fe:	1a9b      	subs	r3, r3, r2
 8002700:	002a      	movs	r2, r5
 8002702:	409a      	lsls	r2, r3
 8002704:	0026      	movs	r6, r4
 8002706:	0013      	movs	r3, r2
 8002708:	4642      	mov	r2, r8
 800270a:	40d6      	lsrs	r6, r2
 800270c:	002c      	movs	r4, r5
 800270e:	431e      	orrs	r6, r3
 8002710:	4643      	mov	r3, r8
 8002712:	40dc      	lsrs	r4, r3
 8002714:	4653      	mov	r3, sl
 8002716:	2b00      	cmp	r3, #0
 8002718:	daae      	bge.n	8002678 <__divdi3+0x118>
 800271a:	4642      	mov	r2, r8
 800271c:	2320      	movs	r3, #32
 800271e:	0035      	movs	r5, r6
 8002720:	4094      	lsls	r4, r2
 8002722:	1a9b      	subs	r3, r3, r2
 8002724:	40dd      	lsrs	r5, r3
 8002726:	0023      	movs	r3, r4
 8002728:	432b      	orrs	r3, r5
 800272a:	e7a8      	b.n	800267e <__divdi3+0x11e>
 800272c:	4641      	mov	r1, r8
 800272e:	2620      	movs	r6, #32
 8002730:	2701      	movs	r7, #1
 8002732:	1a76      	subs	r6, r6, r1
 8002734:	2000      	movs	r0, #0
 8002736:	2100      	movs	r1, #0
 8002738:	40f7      	lsrs	r7, r6
 800273a:	9000      	str	r0, [sp, #0]
 800273c:	9101      	str	r1, [sp, #4]
 800273e:	9701      	str	r7, [sp, #4]
 8002740:	e768      	b.n	8002614 <__divdi3+0xb4>
 8002742:	46c0      	nop			@ (mov r8, r8)

08002744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002746:	b099      	sub	sp, #100	@ 0x64
 8002748:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */
  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800274a:	f002 ff79 	bl	8005640 <HAL_Init>
  /* USER CODE BEGIN Init */
  /* USER CODE END Init */
  /* Configure the system clock */
  SystemClock_Config();
 800274e:	f000 f9e5 	bl	8002b1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002752:	f000 fac5 	bl	8002ce0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002756:	f000 fa93 	bl	8002c80 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800275a:	f000 fa51 	bl	8002c00 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t INT1_CTRL = 0x01;	// Acc data-ready interrupt on INT1
 800275e:	2417      	movs	r4, #23
 8002760:	2608      	movs	r6, #8
 8002762:	19a3      	adds	r3, r4, r6
 8002764:	19db      	adds	r3, r3, r7
 8002766:	2201      	movs	r2, #1
 8002768:	701a      	strb	r2, [r3, #0]
  uint8_t CTRL1_XL = 0x60;	// ODR = 416 Hz, FS = ±2g
 800276a:	2116      	movs	r1, #22
 800276c:	198b      	adds	r3, r1, r6
 800276e:	19db      	adds	r3, r3, r7
 8002770:	2260      	movs	r2, #96	@ 0x60
 8002772:	701a      	strb	r2, [r3, #0]
  uint8_t CTRL2_G = 0x60;	// ODR = 416 Hz, FS = ±250 dps
 8002774:	2515      	movs	r5, #21
 8002776:	19ab      	adds	r3, r5, r6
 8002778:	19db      	adds	r3, r3, r7
 800277a:	2260      	movs	r2, #96	@ 0x60
 800277c:	701a      	strb	r2, [r3, #0]
  //set the data-ready interrupt on INT1 and ODR/FS on CTRL1_XL
  HAL_I2C_Mem_Write(&hi2c1, (0b01101010 << 1), 0x10, 1, &CTRL1_XL, 1, 100);	//accel
 800277e:	48da      	ldr	r0, [pc, #872]	@ (8002ae8 <main+0x3a4>)
 8002780:	2364      	movs	r3, #100	@ 0x64
 8002782:	9302      	str	r3, [sp, #8]
 8002784:	2301      	movs	r3, #1
 8002786:	9301      	str	r3, [sp, #4]
 8002788:	198b      	adds	r3, r1, r6
 800278a:	19db      	adds	r3, r3, r7
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	2301      	movs	r3, #1
 8002790:	2210      	movs	r2, #16
 8002792:	21d4      	movs	r1, #212	@ 0xd4
 8002794:	f003 fbd6 	bl	8005f44 <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Write(&hi2c1, (0b01101010 << 1), 0x11, 1, &CTRL2_G, 1, 100);	//gyro
 8002798:	48d3      	ldr	r0, [pc, #844]	@ (8002ae8 <main+0x3a4>)
 800279a:	2364      	movs	r3, #100	@ 0x64
 800279c:	9302      	str	r3, [sp, #8]
 800279e:	2301      	movs	r3, #1
 80027a0:	9301      	str	r3, [sp, #4]
 80027a2:	19ab      	adds	r3, r5, r6
 80027a4:	19db      	adds	r3, r3, r7
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	2301      	movs	r3, #1
 80027aa:	2211      	movs	r2, #17
 80027ac:	21d4      	movs	r1, #212	@ 0xd4
 80027ae:	f003 fbc9 	bl	8005f44 <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Write(&hi2c1, (0b01101010 << 1), 0x0, 1, &INT1_CTRL, 1, 100);	//data-ready interrupt pin
 80027b2:	48cd      	ldr	r0, [pc, #820]	@ (8002ae8 <main+0x3a4>)
 80027b4:	2364      	movs	r3, #100	@ 0x64
 80027b6:	9302      	str	r3, [sp, #8]
 80027b8:	2301      	movs	r3, #1
 80027ba:	9301      	str	r3, [sp, #4]
 80027bc:	19a3      	adds	r3, r4, r6
 80027be:	19db      	adds	r3, r3, r7
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	2301      	movs	r3, #1
 80027c4:	2200      	movs	r2, #0
 80027c6:	21d4      	movs	r1, #212	@ 0xd4
 80027c8:	f003 fbbc 	bl	8005f44 <HAL_I2C_Mem_Write>
  HAL_I2C_IsDeviceReady(&hi2c1, (0b01101010 << 1) , 1, 100);
 80027cc:	48c6      	ldr	r0, [pc, #792]	@ (8002ae8 <main+0x3a4>)
 80027ce:	2364      	movs	r3, #100	@ 0x64
 80027d0:	2201      	movs	r2, #1
 80027d2:	21d4      	movs	r1, #212	@ 0xd4
 80027d4:	f003 fe18 	bl	8006408 <HAL_I2C_IsDeviceReady>
  //sending a "0" on I2C just in case
  HAL_I2C_Master_Transmit(&hi2c1, (0b01101010 << 1), &temp_data, 1, 100);
 80027d8:	4ac4      	ldr	r2, [pc, #784]	@ (8002aec <main+0x3a8>)
 80027da:	48c3      	ldr	r0, [pc, #780]	@ (8002ae8 <main+0x3a4>)
 80027dc:	2364      	movs	r3, #100	@ 0x64
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	2301      	movs	r3, #1
 80027e2:	21d4      	movs	r1, #212	@ 0xd4
 80027e4:	f003 faa6 	bl	8005d34 <HAL_I2C_Master_Transmit>
  //reading the WHO_AM_I register
  HAL_I2C_Mem_Read(&hi2c1, (0b01101010 << 1) + 1, 0x0F, 1, &temp_data, 1, 100);
 80027e8:	48bf      	ldr	r0, [pc, #764]	@ (8002ae8 <main+0x3a4>)
 80027ea:	2364      	movs	r3, #100	@ 0x64
 80027ec:	9302      	str	r3, [sp, #8]
 80027ee:	2301      	movs	r3, #1
 80027f0:	9301      	str	r3, [sp, #4]
 80027f2:	4bbe      	ldr	r3, [pc, #760]	@ (8002aec <main+0x3a8>)
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	2301      	movs	r3, #1
 80027f8:	220f      	movs	r2, #15
 80027fa:	21d5      	movs	r1, #213	@ 0xd5
 80027fc:	f003 fcd0 	bl	80061a0 <HAL_I2C_Mem_Read>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  if (temp_data == 0x6C) {
 8002800:	4bba      	ldr	r3, [pc, #744]	@ (8002aec <main+0x3a8>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b6c      	cmp	r3, #108	@ 0x6c
 8002806:	d106      	bne.n	8002816 <main+0xd2>
		  // Turn the LED on if the WHO_AM_I register is fine
	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8002808:	23a0      	movs	r3, #160	@ 0xa0
 800280a:	05db      	lsls	r3, r3, #23
 800280c:	2201      	movs	r2, #1
 800280e:	2120      	movs	r1, #32
 8002810:	0018      	movs	r0, r3
 8002812:	f003 f9db 	bl	8005bcc <HAL_GPIO_WritePin>
	  }
	  /* Accelerometer data read*/
	  uint8_t accel_data[6]; // Array to store X, Y, Z values
	  HAL_I2C_Mem_Read(&hi2c1, (0b01101010 << 1), 0x28, 1, accel_data, 6, 100);
 8002816:	48b4      	ldr	r0, [pc, #720]	@ (8002ae8 <main+0x3a4>)
 8002818:	2364      	movs	r3, #100	@ 0x64
 800281a:	9302      	str	r3, [sp, #8]
 800281c:	2306      	movs	r3, #6
 800281e:	9301      	str	r3, [sp, #4]
 8002820:	240c      	movs	r4, #12
 8002822:	2508      	movs	r5, #8
 8002824:	1963      	adds	r3, r4, r5
 8002826:	19db      	adds	r3, r3, r7
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	2301      	movs	r3, #1
 800282c:	2228      	movs	r2, #40	@ 0x28
 800282e:	21d4      	movs	r1, #212	@ 0xd4
 8002830:	f003 fcb6 	bl	80061a0 <HAL_I2C_Mem_Read>
	  int16_t accel_x = (int16_t)(accel_data[1] << 8 | accel_data[0]);
 8002834:	0020      	movs	r0, r4
 8002836:	002a      	movs	r2, r5
 8002838:	1883      	adds	r3, r0, r2
 800283a:	19db      	adds	r3, r3, r7
 800283c:	785b      	ldrb	r3, [r3, #1]
 800283e:	021b      	lsls	r3, r3, #8
 8002840:	b219      	sxth	r1, r3
 8002842:	0015      	movs	r5, r2
 8002844:	1943      	adds	r3, r0, r5
 8002846:	19db      	adds	r3, r3, r7
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	b21a      	sxth	r2, r3
 800284c:	243e      	movs	r4, #62	@ 0x3e
 800284e:	1963      	adds	r3, r4, r5
 8002850:	19db      	adds	r3, r3, r7
 8002852:	430a      	orrs	r2, r1
 8002854:	801a      	strh	r2, [r3, #0]
	  int16_t accel_y = (int16_t)(accel_data[3] << 8 | accel_data[2]);
 8002856:	002a      	movs	r2, r5
 8002858:	1883      	adds	r3, r0, r2
 800285a:	19db      	adds	r3, r3, r7
 800285c:	78db      	ldrb	r3, [r3, #3]
 800285e:	021b      	lsls	r3, r3, #8
 8002860:	b219      	sxth	r1, r3
 8002862:	0016      	movs	r6, r2
 8002864:	1983      	adds	r3, r0, r6
 8002866:	19db      	adds	r3, r3, r7
 8002868:	789b      	ldrb	r3, [r3, #2]
 800286a:	b21a      	sxth	r2, r3
 800286c:	253c      	movs	r5, #60	@ 0x3c
 800286e:	19ab      	adds	r3, r5, r6
 8002870:	19db      	adds	r3, r3, r7
 8002872:	430a      	orrs	r2, r1
 8002874:	801a      	strh	r2, [r3, #0]
	  int16_t accel_z = (int16_t)(accel_data[5] << 8 | accel_data[4]);
 8002876:	0032      	movs	r2, r6
 8002878:	1883      	adds	r3, r0, r2
 800287a:	19db      	adds	r3, r3, r7
 800287c:	795b      	ldrb	r3, [r3, #5]
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	b219      	sxth	r1, r3
 8002882:	1883      	adds	r3, r0, r2
 8002884:	19db      	adds	r3, r3, r7
 8002886:	791b      	ldrb	r3, [r3, #4]
 8002888:	b21a      	sxth	r2, r3
 800288a:	263a      	movs	r6, #58	@ 0x3a
 800288c:	2008      	movs	r0, #8
 800288e:	1833      	adds	r3, r6, r0
 8002890:	19db      	adds	r3, r3, r7
 8002892:	430a      	orrs	r2, r1
 8002894:	801a      	strh	r2, [r3, #0]
	  //convert to g based on a sensitivity of 0.061 mg/LSB for FS = ±2g
	  float accel_x_g = accel_x * (0.061 / 1000)*9.8;
 8002896:	1823      	adds	r3, r4, r0
 8002898:	19db      	adds	r3, r3, r7
 800289a:	2200      	movs	r2, #0
 800289c:	5e9b      	ldrsh	r3, [r3, r2]
 800289e:	0018      	movs	r0, r3
 80028a0:	f7ff fcf8 	bl	8002294 <__aeabi_i2d>
 80028a4:	4a92      	ldr	r2, [pc, #584]	@ (8002af0 <main+0x3ac>)
 80028a6:	4b93      	ldr	r3, [pc, #588]	@ (8002af4 <main+0x3b0>)
 80028a8:	f7fe fe54 	bl	8001554 <__aeabi_dmul>
 80028ac:	0002      	movs	r2, r0
 80028ae:	000b      	movs	r3, r1
 80028b0:	0010      	movs	r0, r2
 80028b2:	0019      	movs	r1, r3
 80028b4:	4a90      	ldr	r2, [pc, #576]	@ (8002af8 <main+0x3b4>)
 80028b6:	4b91      	ldr	r3, [pc, #580]	@ (8002afc <main+0x3b8>)
 80028b8:	f7fe fe4c 	bl	8001554 <__aeabi_dmul>
 80028bc:	0002      	movs	r2, r0
 80028be:	000b      	movs	r3, r1
 80028c0:	0010      	movs	r0, r2
 80028c2:	0019      	movs	r1, r3
 80028c4:	f7ff fd80 	bl	80023c8 <__aeabi_d2f>
 80028c8:	1c03      	adds	r3, r0, #0
 80028ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  float accel_y_g = accel_y * (0.061 / 1000)*9.8;
 80028cc:	2408      	movs	r4, #8
 80028ce:	192b      	adds	r3, r5, r4
 80028d0:	19db      	adds	r3, r3, r7
 80028d2:	2200      	movs	r2, #0
 80028d4:	5e9b      	ldrsh	r3, [r3, r2]
 80028d6:	0018      	movs	r0, r3
 80028d8:	f7ff fcdc 	bl	8002294 <__aeabi_i2d>
 80028dc:	4a84      	ldr	r2, [pc, #528]	@ (8002af0 <main+0x3ac>)
 80028de:	4b85      	ldr	r3, [pc, #532]	@ (8002af4 <main+0x3b0>)
 80028e0:	f7fe fe38 	bl	8001554 <__aeabi_dmul>
 80028e4:	0002      	movs	r2, r0
 80028e6:	000b      	movs	r3, r1
 80028e8:	0010      	movs	r0, r2
 80028ea:	0019      	movs	r1, r3
 80028ec:	4a82      	ldr	r2, [pc, #520]	@ (8002af8 <main+0x3b4>)
 80028ee:	4b83      	ldr	r3, [pc, #524]	@ (8002afc <main+0x3b8>)
 80028f0:	f7fe fe30 	bl	8001554 <__aeabi_dmul>
 80028f4:	0002      	movs	r2, r0
 80028f6:	000b      	movs	r3, r1
 80028f8:	0010      	movs	r0, r2
 80028fa:	0019      	movs	r1, r3
 80028fc:	f7ff fd64 	bl	80023c8 <__aeabi_d2f>
 8002900:	1c03      	adds	r3, r0, #0
 8002902:	63bb      	str	r3, [r7, #56]	@ 0x38
	  float accel_z_g = accel_z * (0.061 / 1000)*9.8;
 8002904:	1933      	adds	r3, r6, r4
 8002906:	19db      	adds	r3, r3, r7
 8002908:	2200      	movs	r2, #0
 800290a:	5e9b      	ldrsh	r3, [r3, r2]
 800290c:	0018      	movs	r0, r3
 800290e:	f7ff fcc1 	bl	8002294 <__aeabi_i2d>
 8002912:	4a77      	ldr	r2, [pc, #476]	@ (8002af0 <main+0x3ac>)
 8002914:	4b77      	ldr	r3, [pc, #476]	@ (8002af4 <main+0x3b0>)
 8002916:	f7fe fe1d 	bl	8001554 <__aeabi_dmul>
 800291a:	0002      	movs	r2, r0
 800291c:	000b      	movs	r3, r1
 800291e:	0010      	movs	r0, r2
 8002920:	0019      	movs	r1, r3
 8002922:	4a75      	ldr	r2, [pc, #468]	@ (8002af8 <main+0x3b4>)
 8002924:	4b75      	ldr	r3, [pc, #468]	@ (8002afc <main+0x3b8>)
 8002926:	f7fe fe15 	bl	8001554 <__aeabi_dmul>
 800292a:	0002      	movs	r2, r0
 800292c:	000b      	movs	r3, r1
 800292e:	0010      	movs	r0, r2
 8002930:	0019      	movs	r1, r3
 8002932:	f7ff fd49 	bl	80023c8 <__aeabi_d2f>
 8002936:	1c03      	adds	r3, r0, #0
 8002938:	637b      	str	r3, [r7, #52]	@ 0x34
	  /* Gyroscope data read*/
	  uint8_t gyro_data[6];  // Array to store X, Y, Z values
	  HAL_I2C_Mem_Read(&hi2c1, (0b01101010 << 1), 0x22, 1, gyro_data, 6, 100);
 800293a:	486b      	ldr	r0, [pc, #428]	@ (8002ae8 <main+0x3a4>)
 800293c:	2364      	movs	r3, #100	@ 0x64
 800293e:	9302      	str	r3, [sp, #8]
 8002940:	2306      	movs	r3, #6
 8002942:	9301      	str	r3, [sp, #4]
 8002944:	250c      	movs	r5, #12
 8002946:	197b      	adds	r3, r7, r5
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	2301      	movs	r3, #1
 800294c:	2222      	movs	r2, #34	@ 0x22
 800294e:	21d4      	movs	r1, #212	@ 0xd4
 8002950:	f003 fc26 	bl	80061a0 <HAL_I2C_Mem_Read>
	  int16_t gyro_x = (int16_t)(gyro_data[1] << 8 | gyro_data[0]);
 8002954:	197b      	adds	r3, r7, r5
 8002956:	785b      	ldrb	r3, [r3, #1]
 8002958:	021b      	lsls	r3, r3, #8
 800295a:	b219      	sxth	r1, r3
 800295c:	197b      	adds	r3, r7, r5
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	b21a      	sxth	r2, r3
 8002962:	202a      	movs	r0, #42	@ 0x2a
 8002964:	0026      	movs	r6, r4
 8002966:	1983      	adds	r3, r0, r6
 8002968:	19db      	adds	r3, r3, r7
 800296a:	430a      	orrs	r2, r1
 800296c:	801a      	strh	r2, [r3, #0]
	  int16_t gyro_y = (int16_t)(gyro_data[3] << 8 | gyro_data[2]);
 800296e:	197b      	adds	r3, r7, r5
 8002970:	78db      	ldrb	r3, [r3, #3]
 8002972:	021b      	lsls	r3, r3, #8
 8002974:	b219      	sxth	r1, r3
 8002976:	197b      	adds	r3, r7, r5
 8002978:	789b      	ldrb	r3, [r3, #2]
 800297a:	b21a      	sxth	r2, r3
 800297c:	2428      	movs	r4, #40	@ 0x28
 800297e:	19a3      	adds	r3, r4, r6
 8002980:	19db      	adds	r3, r3, r7
 8002982:	430a      	orrs	r2, r1
 8002984:	801a      	strh	r2, [r3, #0]
	  int16_t gyro_z = (int16_t)(gyro_data[5] << 8 | gyro_data[4]);
 8002986:	197b      	adds	r3, r7, r5
 8002988:	795b      	ldrb	r3, [r3, #5]
 800298a:	021b      	lsls	r3, r3, #8
 800298c:	b219      	sxth	r1, r3
 800298e:	197b      	adds	r3, r7, r5
 8002990:	791b      	ldrb	r3, [r3, #4]
 8002992:	b21a      	sxth	r2, r3
 8002994:	2526      	movs	r5, #38	@ 0x26
 8002996:	19ab      	adds	r3, r5, r6
 8002998:	19db      	adds	r3, r3, r7
 800299a:	430a      	orrs	r2, r1
 800299c:	801a      	strh	r2, [r3, #0]
	  // Convert to dps (degrees per second) based on sensitivity 8.75 mdps/LSB for ±250 dps
	  float gyro_x_dps = gyro_x * 8.75 / 1000;
 800299e:	1983      	adds	r3, r0, r6
 80029a0:	19db      	adds	r3, r3, r7
 80029a2:	2200      	movs	r2, #0
 80029a4:	5e9b      	ldrsh	r3, [r3, r2]
 80029a6:	0018      	movs	r0, r3
 80029a8:	f7ff fc74 	bl	8002294 <__aeabi_i2d>
 80029ac:	2200      	movs	r2, #0
 80029ae:	4b54      	ldr	r3, [pc, #336]	@ (8002b00 <main+0x3bc>)
 80029b0:	f7fe fdd0 	bl	8001554 <__aeabi_dmul>
 80029b4:	0002      	movs	r2, r0
 80029b6:	000b      	movs	r3, r1
 80029b8:	0010      	movs	r0, r2
 80029ba:	0019      	movs	r1, r3
 80029bc:	2200      	movs	r2, #0
 80029be:	4b51      	ldr	r3, [pc, #324]	@ (8002b04 <main+0x3c0>)
 80029c0:	f7fe f984 	bl	8000ccc <__aeabi_ddiv>
 80029c4:	0002      	movs	r2, r0
 80029c6:	000b      	movs	r3, r1
 80029c8:	0010      	movs	r0, r2
 80029ca:	0019      	movs	r1, r3
 80029cc:	f7ff fcfc 	bl	80023c8 <__aeabi_d2f>
 80029d0:	1c03      	adds	r3, r0, #0
 80029d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	  float gyro_y_dps = gyro_y * 8.75 / 1000;
 80029d4:	19a3      	adds	r3, r4, r6
 80029d6:	19db      	adds	r3, r3, r7
 80029d8:	2200      	movs	r2, #0
 80029da:	5e9b      	ldrsh	r3, [r3, r2]
 80029dc:	0018      	movs	r0, r3
 80029de:	f7ff fc59 	bl	8002294 <__aeabi_i2d>
 80029e2:	2200      	movs	r2, #0
 80029e4:	4b46      	ldr	r3, [pc, #280]	@ (8002b00 <main+0x3bc>)
 80029e6:	f7fe fdb5 	bl	8001554 <__aeabi_dmul>
 80029ea:	0002      	movs	r2, r0
 80029ec:	000b      	movs	r3, r1
 80029ee:	0010      	movs	r0, r2
 80029f0:	0019      	movs	r1, r3
 80029f2:	2200      	movs	r2, #0
 80029f4:	4b43      	ldr	r3, [pc, #268]	@ (8002b04 <main+0x3c0>)
 80029f6:	f7fe f969 	bl	8000ccc <__aeabi_ddiv>
 80029fa:	0002      	movs	r2, r0
 80029fc:	000b      	movs	r3, r1
 80029fe:	0010      	movs	r0, r2
 8002a00:	0019      	movs	r1, r3
 8002a02:	f7ff fce1 	bl	80023c8 <__aeabi_d2f>
 8002a06:	1c03      	adds	r3, r0, #0
 8002a08:	627b      	str	r3, [r7, #36]	@ 0x24
	  float gyro_z_dps = gyro_z * 8.75 / 1000;
 8002a0a:	19ab      	adds	r3, r5, r6
 8002a0c:	19db      	adds	r3, r3, r7
 8002a0e:	2200      	movs	r2, #0
 8002a10:	5e9b      	ldrsh	r3, [r3, r2]
 8002a12:	0018      	movs	r0, r3
 8002a14:	f7ff fc3e 	bl	8002294 <__aeabi_i2d>
 8002a18:	2200      	movs	r2, #0
 8002a1a:	4b39      	ldr	r3, [pc, #228]	@ (8002b00 <main+0x3bc>)
 8002a1c:	f7fe fd9a 	bl	8001554 <__aeabi_dmul>
 8002a20:	0002      	movs	r2, r0
 8002a22:	000b      	movs	r3, r1
 8002a24:	0010      	movs	r0, r2
 8002a26:	0019      	movs	r1, r3
 8002a28:	2200      	movs	r2, #0
 8002a2a:	4b36      	ldr	r3, [pc, #216]	@ (8002b04 <main+0x3c0>)
 8002a2c:	f7fe f94e 	bl	8000ccc <__aeabi_ddiv>
 8002a30:	0002      	movs	r2, r0
 8002a32:	000b      	movs	r3, r1
 8002a34:	0010      	movs	r0, r2
 8002a36:	0019      	movs	r1, r3
 8002a38:	f7ff fcc6 	bl	80023c8 <__aeabi_d2f>
 8002a3c:	1c03      	adds	r3, r0, #0
 8002a3e:	623b      	str	r3, [r7, #32]
	  /*Data transfer to terminal*/
	  //set all the data in the buffer to send it all at once to the USB-TTL converter
	  snprintf_(uart_buffer_accel, 100, "Accel - X: %.2f g, Y: %.2f g, Z: %.2f g\r\n", accel_x_g, accel_y_g, accel_z_g);
 8002a40:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002a42:	f7ff fc79 	bl	8002338 <__aeabi_f2d>
 8002a46:	0004      	movs	r4, r0
 8002a48:	000d      	movs	r5, r1
 8002a4a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002a4c:	f7ff fc74 	bl	8002338 <__aeabi_f2d>
 8002a50:	6038      	str	r0, [r7, #0]
 8002a52:	6079      	str	r1, [r7, #4]
 8002a54:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002a56:	f7ff fc6f 	bl	8002338 <__aeabi_f2d>
 8002a5a:	0002      	movs	r2, r0
 8002a5c:	000b      	movs	r3, r1
 8002a5e:	492a      	ldr	r1, [pc, #168]	@ (8002b08 <main+0x3c4>)
 8002a60:	482a      	ldr	r0, [pc, #168]	@ (8002b0c <main+0x3c8>)
 8002a62:	9204      	str	r2, [sp, #16]
 8002a64:	9305      	str	r3, [sp, #20]
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	9202      	str	r2, [sp, #8]
 8002a6c:	9303      	str	r3, [sp, #12]
 8002a6e:	9400      	str	r4, [sp, #0]
 8002a70:	9501      	str	r5, [sp, #4]
 8002a72:	000a      	movs	r2, r1
 8002a74:	2164      	movs	r1, #100	@ 0x64
 8002a76:	f002 fce6 	bl	8005446 <snprintf_>
	  snprintf_(uart_buffer_gyro, 100, "Gyro - X: %.2f dps, Y: %.2f dps, Z: %.2f dps\r\n\n", gyro_x_dps, gyro_y_dps, gyro_z_dps);
 8002a7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a7c:	f7ff fc5c 	bl	8002338 <__aeabi_f2d>
 8002a80:	0004      	movs	r4, r0
 8002a82:	000d      	movs	r5, r1
 8002a84:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a86:	f7ff fc57 	bl	8002338 <__aeabi_f2d>
 8002a8a:	6038      	str	r0, [r7, #0]
 8002a8c:	6079      	str	r1, [r7, #4]
 8002a8e:	6a38      	ldr	r0, [r7, #32]
 8002a90:	f7ff fc52 	bl	8002338 <__aeabi_f2d>
 8002a94:	0002      	movs	r2, r0
 8002a96:	000b      	movs	r3, r1
 8002a98:	491d      	ldr	r1, [pc, #116]	@ (8002b10 <main+0x3cc>)
 8002a9a:	481e      	ldr	r0, [pc, #120]	@ (8002b14 <main+0x3d0>)
 8002a9c:	9204      	str	r2, [sp, #16]
 8002a9e:	9305      	str	r3, [sp, #20]
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	9202      	str	r2, [sp, #8]
 8002aa6:	9303      	str	r3, [sp, #12]
 8002aa8:	9400      	str	r4, [sp, #0]
 8002aaa:	9501      	str	r5, [sp, #4]
 8002aac:	000a      	movs	r2, r1
 8002aae:	2164      	movs	r1, #100	@ 0x64
 8002ab0:	f002 fcc9 	bl	8005446 <snprintf_>
	  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer_accel, strlen(uart_buffer_accel), 100);
 8002ab4:	4b15      	ldr	r3, [pc, #84]	@ (8002b0c <main+0x3c8>)
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f7fd fb26 	bl	8000108 <strlen>
 8002abc:	0003      	movs	r3, r0
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	4912      	ldr	r1, [pc, #72]	@ (8002b0c <main+0x3c8>)
 8002ac2:	4815      	ldr	r0, [pc, #84]	@ (8002b18 <main+0x3d4>)
 8002ac4:	2364      	movs	r3, #100	@ 0x64
 8002ac6:	f005 f92d 	bl	8007d24 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer_gyro, strlen(uart_buffer_gyro), 100);
 8002aca:	4b12      	ldr	r3, [pc, #72]	@ (8002b14 <main+0x3d0>)
 8002acc:	0018      	movs	r0, r3
 8002ace:	f7fd fb1b 	bl	8000108 <strlen>
 8002ad2:	0003      	movs	r3, r0
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	490f      	ldr	r1, [pc, #60]	@ (8002b14 <main+0x3d0>)
 8002ad8:	480f      	ldr	r0, [pc, #60]	@ (8002b18 <main+0x3d4>)
 8002ada:	2364      	movs	r3, #100	@ 0x64
 8002adc:	f005 f922 	bl	8007d24 <HAL_UART_Transmit>
//	    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer_accel, strlen(uart_buffer_accel), 100);
//	    HAL_Delay(200);  // Adjust delay for your data rate
//	    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer_gyro, strlen(uart_buffer_gyro), 100);
//	  uint8_t CTRL3_C = 0x1;
//	  HAL_I2C_Mem_Write(&hi2c1,(0b01101010 << 1) , CTRL3_C, 1, &CTRL3_C, 1, 100);
	  HAL_Delay(200);
 8002ae0:	20c8      	movs	r0, #200	@ 0xc8
 8002ae2:	f002 fe1d 	bl	8005720 <HAL_Delay>
  {
 8002ae6:	e68b      	b.n	8002800 <main+0xbc>
 8002ae8:	20000028 	.word	0x20000028
 8002aec:	20000104 	.word	0x20000104
 8002af0:	0a5accd5 	.word	0x0a5accd5
 8002af4:	3f0ffb48 	.word	0x3f0ffb48
 8002af8:	9999999a 	.word	0x9999999a
 8002afc:	40239999 	.word	0x40239999
 8002b00:	40218000 	.word	0x40218000
 8002b04:	408f4000 	.word	0x408f4000
 8002b08:	08008878 	.word	0x08008878
 8002b0c:	20000108 	.word	0x20000108
 8002b10:	080088a4 	.word	0x080088a4
 8002b14:	20000148 	.word	0x20000148
 8002b18:	2000007c 	.word	0x2000007c

08002b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b1c:	b590      	push	{r4, r7, lr}
 8002b1e:	b09f      	sub	sp, #124	@ 0x7c
 8002b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b22:	2440      	movs	r4, #64	@ 0x40
 8002b24:	193b      	adds	r3, r7, r4
 8002b26:	0018      	movs	r0, r3
 8002b28:	2338      	movs	r3, #56	@ 0x38
 8002b2a:	001a      	movs	r2, r3
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	f005 fe61 	bl	80087f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b32:	232c      	movs	r3, #44	@ 0x2c
 8002b34:	18fb      	adds	r3, r7, r3
 8002b36:	0018      	movs	r0, r3
 8002b38:	2314      	movs	r3, #20
 8002b3a:	001a      	movs	r2, r3
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	f005 fe59 	bl	80087f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b42:	1d3b      	adds	r3, r7, #4
 8002b44:	0018      	movs	r0, r3
 8002b46:	2328      	movs	r3, #40	@ 0x28
 8002b48:	001a      	movs	r2, r3
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	f005 fe52 	bl	80087f4 <memset>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b50:	4b29      	ldr	r3, [pc, #164]	@ (8002bf8 <SystemClock_Config+0xdc>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a29      	ldr	r2, [pc, #164]	@ (8002bfc <SystemClock_Config+0xe0>)
 8002b56:	401a      	ands	r2, r3
 8002b58:	4b27      	ldr	r3, [pc, #156]	@ (8002bf8 <SystemClock_Config+0xdc>)
 8002b5a:	2180      	movs	r1, #128	@ 0x80
 8002b5c:	0109      	lsls	r1, r1, #4
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002b62:	0021      	movs	r1, r4
 8002b64:	187b      	adds	r3, r7, r1
 8002b66:	2210      	movs	r2, #16
 8002b68:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002b6a:	187b      	adds	r3, r7, r1
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002b70:	187b      	adds	r3, r7, r1
 8002b72:	2200      	movs	r2, #0
 8002b74:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002b76:	187b      	adds	r3, r7, r1
 8002b78:	22a0      	movs	r2, #160	@ 0xa0
 8002b7a:	0212      	lsls	r2, r2, #8
 8002b7c:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002b7e:	187b      	adds	r3, r7, r1
 8002b80:	2200      	movs	r2, #0
 8002b82:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b84:	187b      	adds	r3, r7, r1
 8002b86:	0018      	movs	r0, r3
 8002b88:	f004 f8e2 	bl	8006d50 <HAL_RCC_OscConfig>
 8002b8c:	1e03      	subs	r3, r0, #0
 8002b8e:	d001      	beq.n	8002b94 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002b90:	f000 f916 	bl	8002dc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b94:	212c      	movs	r1, #44	@ 0x2c
 8002b96:	187b      	adds	r3, r7, r1
 8002b98:	220f      	movs	r2, #15
 8002b9a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002b9c:	187b      	adds	r3, r7, r1
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ba2:	187b      	adds	r3, r7, r1
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ba8:	187b      	adds	r3, r7, r1
 8002baa:	2200      	movs	r2, #0
 8002bac:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bae:	187b      	adds	r3, r7, r1
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	611a      	str	r2, [r3, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002bb4:	187b      	adds	r3, r7, r1
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f004 fc9d 	bl	80074f8 <HAL_RCC_ClockConfig>
 8002bbe:	1e03      	subs	r3, r0, #0
 8002bc0:	d001      	beq.n	8002bc6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002bc2:	f000 f8fd 	bl	8002dc0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8002bc6:	1d3b      	adds	r3, r7, #4
 8002bc8:	220b      	movs	r2, #11
 8002bca:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002bcc:	1d3b      	adds	r3, r7, #4
 8002bce:	2200      	movs	r2, #0
 8002bd0:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002bd2:	1d3b      	adds	r3, r7, #4
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002bd8:	1d3b      	adds	r3, r7, #4
 8002bda:	2200      	movs	r2, #0
 8002bdc:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bde:	1d3b      	adds	r3, r7, #4
 8002be0:	0018      	movs	r0, r3
 8002be2:	f004 fead 	bl	8007940 <HAL_RCCEx_PeriphCLKConfig>
 8002be6:	1e03      	subs	r3, r0, #0
 8002be8:	d001      	beq.n	8002bee <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002bea:	f000 f8e9 	bl	8002dc0 <Error_Handler>
  }
}
 8002bee:	46c0      	nop			@ (mov r8, r8)
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	b01f      	add	sp, #124	@ 0x7c
 8002bf4:	bd90      	pop	{r4, r7, pc}
 8002bf6:	46c0      	nop			@ (mov r8, r8)
 8002bf8:	40007000 	.word	0x40007000
 8002bfc:	ffffe7ff 	.word	0xffffe7ff

08002c00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */
  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c04:	4b1c      	ldr	r3, [pc, #112]	@ (8002c78 <MX_I2C1_Init+0x78>)
 8002c06:	4a1d      	ldr	r2, [pc, #116]	@ (8002c7c <MX_I2C1_Init+0x7c>)
 8002c08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 8002c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8002c78 <MX_I2C1_Init+0x78>)
 8002c0c:	22c1      	movs	r2, #193	@ 0xc1
 8002c0e:	00d2      	lsls	r2, r2, #3
 8002c10:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002c12:	4b19      	ldr	r3, [pc, #100]	@ (8002c78 <MX_I2C1_Init+0x78>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c18:	4b17      	ldr	r3, [pc, #92]	@ (8002c78 <MX_I2C1_Init+0x78>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c1e:	4b16      	ldr	r3, [pc, #88]	@ (8002c78 <MX_I2C1_Init+0x78>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002c24:	4b14      	ldr	r3, [pc, #80]	@ (8002c78 <MX_I2C1_Init+0x78>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c2a:	4b13      	ldr	r3, [pc, #76]	@ (8002c78 <MX_I2C1_Init+0x78>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c30:	4b11      	ldr	r3, [pc, #68]	@ (8002c78 <MX_I2C1_Init+0x78>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c36:	4b10      	ldr	r3, [pc, #64]	@ (8002c78 <MX_I2C1_Init+0x78>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c78 <MX_I2C1_Init+0x78>)
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f002 ffe2 	bl	8005c08 <HAL_I2C_Init>
 8002c44:	1e03      	subs	r3, r0, #0
 8002c46:	d001      	beq.n	8002c4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002c48:	f000 f8ba 	bl	8002dc0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c78 <MX_I2C1_Init+0x78>)
 8002c4e:	2100      	movs	r1, #0
 8002c50:	0018      	movs	r0, r3
 8002c52:	f003 ffe5 	bl	8006c20 <HAL_I2CEx_ConfigAnalogFilter>
 8002c56:	1e03      	subs	r3, r0, #0
 8002c58:	d001      	beq.n	8002c5e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002c5a:	f000 f8b1 	bl	8002dc0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002c5e:	4b06      	ldr	r3, [pc, #24]	@ (8002c78 <MX_I2C1_Init+0x78>)
 8002c60:	2100      	movs	r1, #0
 8002c62:	0018      	movs	r0, r3
 8002c64:	f004 f828 	bl	8006cb8 <HAL_I2CEx_ConfigDigitalFilter>
 8002c68:	1e03      	subs	r3, r0, #0
 8002c6a:	d001      	beq.n	8002c70 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002c6c:	f000 f8a8 	bl	8002dc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */
}
 8002c70:	46c0      	nop			@ (mov r8, r8)
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	46c0      	nop			@ (mov r8, r8)
 8002c78:	20000028 	.word	0x20000028
 8002c7c:	40005400 	.word	0x40005400

08002c80 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */
  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c84:	4b14      	ldr	r3, [pc, #80]	@ (8002cd8 <MX_USART2_UART_Init+0x58>)
 8002c86:	4a15      	ldr	r2, [pc, #84]	@ (8002cdc <MX_USART2_UART_Init+0x5c>)
 8002c88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c8a:	4b13      	ldr	r3, [pc, #76]	@ (8002cd8 <MX_USART2_UART_Init+0x58>)
 8002c8c:	22e1      	movs	r2, #225	@ 0xe1
 8002c8e:	0252      	lsls	r2, r2, #9
 8002c90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c92:	4b11      	ldr	r3, [pc, #68]	@ (8002cd8 <MX_USART2_UART_Init+0x58>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c98:	4b0f      	ldr	r3, [pc, #60]	@ (8002cd8 <MX_USART2_UART_Init+0x58>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd8 <MX_USART2_UART_Init+0x58>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8002cd8 <MX_USART2_UART_Init+0x58>)
 8002ca6:	220c      	movs	r2, #12
 8002ca8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002caa:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd8 <MX_USART2_UART_Init+0x58>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cb0:	4b09      	ldr	r3, [pc, #36]	@ (8002cd8 <MX_USART2_UART_Init+0x58>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cb6:	4b08      	ldr	r3, [pc, #32]	@ (8002cd8 <MX_USART2_UART_Init+0x58>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cbc:	4b06      	ldr	r3, [pc, #24]	@ (8002cd8 <MX_USART2_UART_Init+0x58>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cc2:	4b05      	ldr	r3, [pc, #20]	@ (8002cd8 <MX_USART2_UART_Init+0x58>)
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f004 ffd9 	bl	8007c7c <HAL_UART_Init>
 8002cca:	1e03      	subs	r3, r0, #0
 8002ccc:	d001      	beq.n	8002cd2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002cce:	f000 f877 	bl	8002dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */
}
 8002cd2:	46c0      	nop			@ (mov r8, r8)
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	2000007c 	.word	0x2000007c
 8002cdc:	40004400 	.word	0x40004400

08002ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ce0:	b590      	push	{r4, r7, lr}
 8002ce2:	b08b      	sub	sp, #44	@ 0x2c
 8002ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce6:	2414      	movs	r4, #20
 8002ce8:	193b      	adds	r3, r7, r4
 8002cea:	0018      	movs	r0, r3
 8002cec:	2314      	movs	r3, #20
 8002cee:	001a      	movs	r2, r3
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	f005 fd7f 	bl	80087f4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cf6:	4b30      	ldr	r3, [pc, #192]	@ (8002db8 <MX_GPIO_Init+0xd8>)
 8002cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8002db8 <MX_GPIO_Init+0xd8>)
 8002cfc:	2104      	movs	r1, #4
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002d02:	4b2d      	ldr	r3, [pc, #180]	@ (8002db8 <MX_GPIO_Init+0xd8>)
 8002d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d06:	2204      	movs	r2, #4
 8002d08:	4013      	ands	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]
 8002d0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8002db8 <MX_GPIO_Init+0xd8>)
 8002d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d12:	4b29      	ldr	r3, [pc, #164]	@ (8002db8 <MX_GPIO_Init+0xd8>)
 8002d14:	2180      	movs	r1, #128	@ 0x80
 8002d16:	430a      	orrs	r2, r1
 8002d18:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002d1a:	4b27      	ldr	r3, [pc, #156]	@ (8002db8 <MX_GPIO_Init+0xd8>)
 8002d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1e:	2280      	movs	r2, #128	@ 0x80
 8002d20:	4013      	ands	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d26:	4b24      	ldr	r3, [pc, #144]	@ (8002db8 <MX_GPIO_Init+0xd8>)
 8002d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d2a:	4b23      	ldr	r3, [pc, #140]	@ (8002db8 <MX_GPIO_Init+0xd8>)
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002d32:	4b21      	ldr	r3, [pc, #132]	@ (8002db8 <MX_GPIO_Init+0xd8>)
 8002d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d36:	2201      	movs	r2, #1
 8002d38:	4013      	ands	r3, r2
 8002d3a:	60bb      	str	r3, [r7, #8]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8002db8 <MX_GPIO_Init+0xd8>)
 8002d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d42:	4b1d      	ldr	r3, [pc, #116]	@ (8002db8 <MX_GPIO_Init+0xd8>)
 8002d44:	2102      	movs	r1, #2
 8002d46:	430a      	orrs	r2, r1
 8002d48:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002db8 <MX_GPIO_Init+0xd8>)
 8002d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4e:	2202      	movs	r2, #2
 8002d50:	4013      	ands	r3, r2
 8002d52:	607b      	str	r3, [r7, #4]
 8002d54:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002d56:	23a0      	movs	r3, #160	@ 0xa0
 8002d58:	05db      	lsls	r3, r3, #23
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2120      	movs	r1, #32
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f002 ff34 	bl	8005bcc <HAL_GPIO_WritePin>
  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002d64:	193b      	adds	r3, r7, r4
 8002d66:	2280      	movs	r2, #128	@ 0x80
 8002d68:	0192      	lsls	r2, r2, #6
 8002d6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d6c:	193b      	adds	r3, r7, r4
 8002d6e:	2284      	movs	r2, #132	@ 0x84
 8002d70:	0392      	lsls	r2, r2, #14
 8002d72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d74:	193b      	adds	r3, r7, r4
 8002d76:	2200      	movs	r2, #0
 8002d78:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d7a:	193b      	adds	r3, r7, r4
 8002d7c:	4a0f      	ldr	r2, [pc, #60]	@ (8002dbc <MX_GPIO_Init+0xdc>)
 8002d7e:	0019      	movs	r1, r3
 8002d80:	0010      	movs	r0, r2
 8002d82:	f002 fda5 	bl	80058d0 <HAL_GPIO_Init>
  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002d86:	0021      	movs	r1, r4
 8002d88:	187b      	adds	r3, r7, r1
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d8e:	187b      	adds	r3, r7, r1
 8002d90:	2201      	movs	r2, #1
 8002d92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d94:	187b      	adds	r3, r7, r1
 8002d96:	2200      	movs	r2, #0
 8002d98:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9a:	187b      	adds	r3, r7, r1
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002da0:	187a      	adds	r2, r7, r1
 8002da2:	23a0      	movs	r3, #160	@ 0xa0
 8002da4:	05db      	lsls	r3, r3, #23
 8002da6:	0011      	movs	r1, r2
 8002da8:	0018      	movs	r0, r3
 8002daa:	f002 fd91 	bl	80058d0 <HAL_GPIO_Init>
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002dae:	46c0      	nop			@ (mov r8, r8)
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b00b      	add	sp, #44	@ 0x2c
 8002db4:	bd90      	pop	{r4, r7, pc}
 8002db6:	46c0      	nop			@ (mov r8, r8)
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	50000800 	.word	0x50000800

08002dc0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */

void Error_Handler(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc4:	b672      	cpsid	i
}
 8002dc6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dc8:	46c0      	nop			@ (mov r8, r8)
 8002dca:	e7fd      	b.n	8002dc8 <Error_Handler+0x8>

08002dcc <get_bit_access>:
// but:
// 1. Some compilers are finicky about this;
// 2. Some people may want to convert this to C89;
// 3. If you try to use it as C++, only C++20 supports compound literals
static inline double_with_bit_access get_bit_access(double x)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	603a      	str	r2, [r7, #0]
 8002dd6:	607b      	str	r3, [r7, #4]
  double_with_bit_access dwba;
  dwba.F = x;
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	613a      	str	r2, [r7, #16]
 8002dde:	617b      	str	r3, [r7, #20]
  return dwba;
 8002de0:	68f9      	ldr	r1, [r7, #12]
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	600a      	str	r2, [r1, #0]
 8002de8:	604b      	str	r3, [r1, #4]
}
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	46bd      	mov	sp, r7
 8002dee:	b006      	add	sp, #24
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <get_sign_bit>:

static inline int get_sign_bit(double x)
{
 8002df2:	b5b0      	push	{r4, r5, r7, lr}
 8002df4:	b084      	sub	sp, #16
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6038      	str	r0, [r7, #0]
 8002dfa:	6079      	str	r1, [r7, #4]
  // The sign is stored in the highest bit
  return (int) (get_bit_access(x).U >> (DOUBLE_SIZE_IN_BITS - 1));
 8002dfc:	2308      	movs	r3, #8
 8002dfe:	18f9      	adds	r1, r7, r3
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	0008      	movs	r0, r1
 8002e06:	f7ff ffe1 	bl	8002dcc <get_bit_access>
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	0fdc      	lsrs	r4, r3, #31
 8002e10:	2300      	movs	r3, #0
 8002e12:	001d      	movs	r5, r3
 8002e14:	0023      	movs	r3, r4
}
 8002e16:	0018      	movs	r0, r3
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	b004      	add	sp, #16
 8002e1c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002e20 <get_exp2>:

static inline int get_exp2(double_with_bit_access x)
{
 8002e20:	b5b0      	push	{r4, r5, r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6038      	str	r0, [r7, #0]
 8002e28:	6079      	str	r1, [r7, #4]
  // The exponent in an IEEE-754 floating-point number occupies a contiguous
  // sequence of bits (e.g. 52..62 for 64-bit doubles), but with a non-trivial representation: An
  // unsigned offset from some negative value (with the extremal offset values reserved for
  // special use).
  return (int)((x.U >> DOUBLE_STORED_MANTISSA_BITS ) & DOUBLE_EXPONENT_MASK) - DOUBLE_BASE_EXPONENT;
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	0d1c      	lsrs	r4, r3, #20
 8002e30:	2300      	movs	r3, #0
 8002e32:	001d      	movs	r5, r3
 8002e34:	0023      	movs	r3, r4
 8002e36:	055b      	lsls	r3, r3, #21
 8002e38:	0d5b      	lsrs	r3, r3, #21
 8002e3a:	4a03      	ldr	r2, [pc, #12]	@ (8002e48 <get_exp2+0x28>)
 8002e3c:	4694      	mov	ip, r2
 8002e3e:	4463      	add	r3, ip
}
 8002e40:	0018      	movs	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b002      	add	sp, #8
 8002e46:	bdb0      	pop	{r4, r5, r7, pc}
 8002e48:	fffffc01 	.word	0xfffffc01

08002e4c <putchar_via_gadget>:
// Note: This function currently assumes it is not passed a '\0' c,
// or alternatively, that '\0' can be passed to the function in the output
// gadget. The former assumption holds within the printf library. It also
// assumes that the output gadget has been properly initialized.
static inline void putchar_via_gadget(output_gadget_t* gadget, char c)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	000a      	movs	r2, r1
 8002e56:	1cfb      	adds	r3, r7, #3
 8002e58:	701a      	strb	r2, [r3, #0]
  printf_size_t write_pos = gadget->pos++;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	1c59      	adds	r1, r3, #1
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	60d1      	str	r1, [r2, #12]
 8002e64:	60fb      	str	r3, [r7, #12]
    // We're _always_ increasing pos, so as to count how may characters
    // _would_ have been written if not for the max_chars limitation
  if (write_pos >= gadget->max_chars) {
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d214      	bcs.n	8002e9a <putchar_via_gadget+0x4e>
    return;
  }
  if (gadget->function != NULL) {
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d008      	beq.n	8002e8a <putchar_via_gadget+0x3e>
    // No check for c == '\0' .
    gadget->function(c, gadget->extra_function_arg);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6859      	ldr	r1, [r3, #4]
 8002e80:	1cfb      	adds	r3, r7, #3
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	0018      	movs	r0, r3
 8002e86:	4790      	blx	r2
 8002e88:	e008      	b.n	8002e9c <putchar_via_gadget+0x50>
  }
  else {
    // it must be the case that gadget->buffer != NULL , due to the constraint
    // on output_gadget_t ; and note we're relying on write_pos being non-negative.
    gadget->buffer[write_pos] = c;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	18d3      	adds	r3, r2, r3
 8002e92:	1cfa      	adds	r2, r7, #3
 8002e94:	7812      	ldrb	r2, [r2, #0]
 8002e96:	701a      	strb	r2, [r3, #0]
 8002e98:	e000      	b.n	8002e9c <putchar_via_gadget+0x50>
    return;
 8002e9a:	46c0      	nop			@ (mov r8, r8)
  }
}
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	b004      	add	sp, #16
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <append_termination_with_gadget>:

// Possibly-write the string-terminating '\0' character
static inline void append_termination_with_gadget(output_gadget_t* gadget)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b084      	sub	sp, #16
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  if (gadget->function != NULL || gadget->max_chars == 0) {
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d11b      	bne.n	8002eea <append_termination_with_gadget+0x48>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d017      	beq.n	8002eea <append_termination_with_gadget+0x48>
    return;
  }
  if (gadget->buffer == NULL) {
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d015      	beq.n	8002eee <append_termination_with_gadget+0x4c>
    return;
  }
  printf_size_t null_char_pos = gadget->pos < gadget->max_chars ? gadget->pos : gadget->max_chars - 1;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d202      	bcs.n	8002ed4 <append_termination_with_gadget+0x32>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	e002      	b.n	8002eda <append_termination_with_gadget+0x38>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	60fb      	str	r3, [r7, #12]
  gadget->buffer[null_char_pos] = '\0';
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	18d3      	adds	r3, r2, r3
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]
 8002ee8:	e002      	b.n	8002ef0 <append_termination_with_gadget+0x4e>
    return;
 8002eea:	46c0      	nop			@ (mov r8, r8)
 8002eec:	e000      	b.n	8002ef0 <append_termination_with_gadget+0x4e>
    return;
 8002eee:	46c0      	nop			@ (mov r8, r8)
}
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	b004      	add	sp, #16
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <discarding_gadget>:
  (void) unused;
  putchar_(c);
}

static inline output_gadget_t discarding_gadget(void)
{
 8002ef6:	b590      	push	{r4, r7, lr}
 8002ef8:	b089      	sub	sp, #36	@ 0x24
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  output_gadget_t gadget;
  gadget.function = NULL;
 8002efe:	210c      	movs	r1, #12
 8002f00:	187b      	adds	r3, r7, r1
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
  gadget.extra_function_arg = NULL;
 8002f06:	187b      	adds	r3, r7, r1
 8002f08:	2200      	movs	r2, #0
 8002f0a:	605a      	str	r2, [r3, #4]
  gadget.buffer = NULL;
 8002f0c:	187b      	adds	r3, r7, r1
 8002f0e:	2200      	movs	r2, #0
 8002f10:	609a      	str	r2, [r3, #8]
  gadget.pos = 0;
 8002f12:	187b      	adds	r3, r7, r1
 8002f14:	2200      	movs	r2, #0
 8002f16:	60da      	str	r2, [r3, #12]
  gadget.max_chars = 0;
 8002f18:	187b      	adds	r3, r7, r1
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	611a      	str	r2, [r3, #16]
  return gadget;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	187a      	adds	r2, r7, r1
 8002f22:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002f24:	c313      	stmia	r3!, {r0, r1, r4}
 8002f26:	ca03      	ldmia	r2!, {r0, r1}
 8002f28:	c303      	stmia	r3!, {r0, r1}
}
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	b009      	add	sp, #36	@ 0x24
 8002f30:	bd90      	pop	{r4, r7, pc}
	...

08002f34 <buffer_gadget>:

static inline output_gadget_t buffer_gadget(char* buffer, size_t buffer_size)
{
 8002f34:	b590      	push	{r4, r7, lr}
 8002f36:	b08b      	sub	sp, #44	@ 0x2c
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
  printf_size_t usable_buffer_size = (buffer_size > PRINTF_MAX_POSSIBLE_BUFFER_SIZE) ?
 8002f40:	687b      	ldr	r3, [r7, #4]
    PRINTF_MAX_POSSIBLE_BUFFER_SIZE : (printf_size_t) buffer_size;
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	db01      	blt.n	8002f4a <buffer_gadget+0x16>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	e000      	b.n	8002f4c <buffer_gadget+0x18>
 8002f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f80 <buffer_gadget+0x4c>)
  printf_size_t usable_buffer_size = (buffer_size > PRINTF_MAX_POSSIBLE_BUFFER_SIZE) ?
 8002f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  output_gadget_t result = discarding_gadget();
 8002f4e:	2410      	movs	r4, #16
 8002f50:	193b      	adds	r3, r7, r4
 8002f52:	0018      	movs	r0, r3
 8002f54:	f7ff ffcf 	bl	8002ef6 <discarding_gadget>
  if (buffer != NULL) {
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d005      	beq.n	8002f6a <buffer_gadget+0x36>
    result.buffer = buffer;
 8002f5e:	193b      	adds	r3, r7, r4
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	609a      	str	r2, [r3, #8]
    result.max_chars = usable_buffer_size;
 8002f64:	193b      	adds	r3, r7, r4
 8002f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f68:	611a      	str	r2, [r3, #16]
  }
  return result;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2210      	movs	r2, #16
 8002f6e:	18ba      	adds	r2, r7, r2
 8002f70:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002f72:	c313      	stmia	r3!, {r0, r1, r4}
 8002f74:	ca03      	ldmia	r2!, {r0, r1}
 8002f76:	c303      	stmia	r3!, {r0, r1}
}
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	b00b      	add	sp, #44	@ 0x2c
 8002f7e:	bd90      	pop	{r4, r7, pc}
 8002f80:	7fffffff 	.word	0x7fffffff

08002f84 <strnlen_s_>:
// internal secure strlen
// @return The length of the string (excluding the terminating 0) limited by 'maxsize'
// @note strlen uses size_t, but wes only use this function with printf_size_t
// variables - hence the signature.
static inline printf_size_t strnlen_s_(const char* str, printf_size_t maxsize)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	e002      	b.n	8002f9a <strnlen_s_+0x16>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	3301      	adds	r3, #1
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d004      	beq.n	8002fac <strnlen_s_+0x28>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	1e5a      	subs	r2, r3, #1
 8002fa6:	603a      	str	r2, [r7, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1f3      	bne.n	8002f94 <strnlen_s_+0x10>
  return (printf_size_t)(s - str);
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	1ad3      	subs	r3, r2, r3
}
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	b004      	add	sp, #16
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <is_digit_>:


// internal test if char is a digit (0-9)
// @return true if char is a digit
static inline bool is_digit_(char ch)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b082      	sub	sp, #8
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	0002      	movs	r2, r0
 8002fc2:	1dfb      	adds	r3, r7, #7
 8002fc4:	701a      	strb	r2, [r3, #0]
  return (ch >= '0') && (ch <= '9');
 8002fc6:	1dfb      	adds	r3, r7, #7
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b2f      	cmp	r3, #47	@ 0x2f
 8002fcc:	d905      	bls.n	8002fda <is_digit_+0x20>
 8002fce:	1dfb      	adds	r3, r7, #7
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b39      	cmp	r3, #57	@ 0x39
 8002fd4:	d801      	bhi.n	8002fda <is_digit_+0x20>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <is_digit_+0x22>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	1c1a      	adds	r2, r3, #0
 8002fde:	2301      	movs	r3, #1
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	b2db      	uxtb	r3, r3
}
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b002      	add	sp, #8
 8002fea:	bd80      	pop	{r7, pc}

08002fec <atou_>:


// internal ASCII string to printf_size_t conversion
static printf_size_t atou_(const char** str)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  printf_size_t i = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]
  while (is_digit_(**str)) {
 8002ff8:	e00e      	b.n	8003018 <atou_+0x2c>
    i = i * 10U + (printf_size_t)(*((*str)++) - '0');
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	0013      	movs	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	189b      	adds	r3, r3, r2
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	0018      	movs	r0, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	1c59      	adds	r1, r3, #1
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6011      	str	r1, [r2, #0]
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	18c3      	adds	r3, r0, r3
 8003014:	3b30      	subs	r3, #48	@ 0x30
 8003016:	60fb      	str	r3, [r7, #12]
  while (is_digit_(**str)) {
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	0018      	movs	r0, r3
 8003020:	f7ff ffcb 	bl	8002fba <is_digit_>
 8003024:	1e03      	subs	r3, r0, #0
 8003026:	d1e8      	bne.n	8002ffa <atou_+0xe>
  }
  return i;
 8003028:	68fb      	ldr	r3, [r7, #12]
}
 800302a:	0018      	movs	r0, r3
 800302c:	46bd      	mov	sp, r7
 800302e:	b004      	add	sp, #16
 8003030:	bd80      	pop	{r7, pc}

08003032 <out_rev_>:


// output the specified string in reverse, taking care of any zero-padding
static void out_rev_(output_gadget_t* output, const char* buf, printf_size_t len, printf_size_t width, printf_flags_t flags)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b086      	sub	sp, #24
 8003036:	af00      	add	r7, sp, #0
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	607a      	str	r2, [r7, #4]
 800303e:	603b      	str	r3, [r7, #0]
  const printf_size_t start_pos = output->pos;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	2202      	movs	r2, #2
 800304a:	4013      	ands	r3, r2
 800304c:	d11f      	bne.n	800308e <out_rev_+0x5c>
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	2201      	movs	r2, #1
 8003052:	4013      	ands	r3, r2
 8003054:	d11b      	bne.n	800308e <out_rev_+0x5c>
    for (printf_size_t i = len; i < width; i++) {
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	617b      	str	r3, [r7, #20]
 800305a:	e007      	b.n	800306c <out_rev_+0x3a>
      putchar_via_gadget(output, ' ');
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2120      	movs	r1, #32
 8003060:	0018      	movs	r0, r3
 8003062:	f7ff fef3 	bl	8002e4c <putchar_via_gadget>
    for (printf_size_t i = len; i < width; i++) {
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	3301      	adds	r3, #1
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d3f3      	bcc.n	800305c <out_rev_+0x2a>
    }
  }

  // reverse string
  while (len) {
 8003074:	e00b      	b.n	800308e <out_rev_+0x5c>
    putchar_via_gadget(output, buf[--len]);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3b01      	subs	r3, #1
 800307a:	607b      	str	r3, [r7, #4]
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	18d3      	adds	r3, r2, r3
 8003082:	781a      	ldrb	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	0011      	movs	r1, r2
 8003088:	0018      	movs	r0, r3
 800308a:	f7ff fedf 	bl	8002e4c <putchar_via_gadget>
  while (len) {
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1f0      	bne.n	8003076 <out_rev_+0x44>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	2202      	movs	r2, #2
 8003098:	4013      	ands	r3, r2
 800309a:	d00c      	beq.n	80030b6 <out_rev_+0x84>
    while (output->pos - start_pos < width) {
 800309c:	e004      	b.n	80030a8 <out_rev_+0x76>
      putchar_via_gadget(output, ' ');
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2120      	movs	r1, #32
 80030a2:	0018      	movs	r0, r3
 80030a4:	f7ff fed2 	bl	8002e4c <putchar_via_gadget>
    while (output->pos - start_pos < width) {
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d8f3      	bhi.n	800309e <out_rev_+0x6c>
    }
  }
}
 80030b6:	46c0      	nop			@ (mov r8, r8)
 80030b8:	46bd      	mov	sp, r7
 80030ba:	b006      	add	sp, #24
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <print_integer_finalization>:


// Invoked by print_integer after the actual number has been printed, performing necessary
// work on the number's prefix (as the number is initially printed in reverse order)
static void print_integer_finalization(output_gadget_t* output, char* buf, printf_size_t len, bool negative, numeric_base_t base, printf_size_t precision, printf_size_t width, printf_flags_t flags)
{
 80030c0:	b590      	push	{r4, r7, lr}
 80030c2:	b089      	sub	sp, #36	@ 0x24
 80030c4:	af02      	add	r7, sp, #8
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
 80030cc:	001a      	movs	r2, r3
 80030ce:	1cfb      	adds	r3, r7, #3
 80030d0:	701a      	strb	r2, [r3, #0]
  printf_size_t unpadded_len = len;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	617b      	str	r3, [r7, #20]

  // pad with leading zeros
  {
    if (!(flags & FLAGS_LEFT)) {
 80030d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030d8:	2202      	movs	r2, #2
 80030da:	4013      	ands	r3, r2
 80030dc:	d12c      	bne.n	8003138 <print_integer_finalization+0x78>
      if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80030de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d016      	beq.n	8003112 <print_integer_finalization+0x52>
 80030e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030e6:	2201      	movs	r2, #1
 80030e8:	4013      	ands	r3, r2
 80030ea:	d012      	beq.n	8003112 <print_integer_finalization+0x52>
 80030ec:	1cfb      	adds	r3, r7, #3
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d103      	bne.n	80030fc <print_integer_finalization+0x3c>
 80030f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030f6:	220c      	movs	r2, #12
 80030f8:	4013      	ands	r3, r2
 80030fa:	d00a      	beq.n	8003112 <print_integer_finalization+0x52>
        width--;
 80030fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030fe:	3b01      	subs	r3, #1
 8003100:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8003102:	e006      	b.n	8003112 <print_integer_finalization+0x52>
        buf[len++] = '0';
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	607a      	str	r2, [r7, #4]
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	18d3      	adds	r3, r2, r3
 800310e:	2230      	movs	r2, #48	@ 0x30
 8003110:	701a      	strb	r2, [r3, #0]
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8003112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003114:	2201      	movs	r2, #1
 8003116:	4013      	ands	r3, r2
 8003118:	d00e      	beq.n	8003138 <print_integer_finalization+0x78>
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800311e:	429a      	cmp	r2, r3
 8003120:	d20a      	bcs.n	8003138 <print_integer_finalization+0x78>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b1f      	cmp	r3, #31
 8003126:	d9ed      	bls.n	8003104 <print_integer_finalization+0x44>
      }
    }

    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8003128:	e006      	b.n	8003138 <print_integer_finalization+0x78>
      buf[len++] = '0';
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	18d3      	adds	r3, r2, r3
 8003134:	2230      	movs	r2, #48	@ 0x30
 8003136:	701a      	strb	r2, [r3, #0]
    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800313c:	429a      	cmp	r2, r3
 800313e:	d202      	bcs.n	8003146 <print_integer_finalization+0x86>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b1f      	cmp	r3, #31
 8003144:	d9f1      	bls.n	800312a <print_integer_finalization+0x6a>
    }

    if (base == BASE_OCTAL && (len > unpadded_len)) {
 8003146:	2328      	movs	r3, #40	@ 0x28
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b08      	cmp	r3, #8
 800314e:	d107      	bne.n	8003160 <print_integer_finalization+0xa0>
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	429a      	cmp	r2, r3
 8003156:	d903      	bls.n	8003160 <print_integer_finalization+0xa0>
      // Since we've written some zeros, we've satisfied the alternative format leading space requirement
      flags &= ~FLAGS_HASH;
 8003158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800315a:	2210      	movs	r2, #16
 800315c:	4393      	bics	r3, r2
 800315e:	637b      	str	r3, [r7, #52]	@ 0x34
    }
  }

  // handle hash
  if (flags & (FLAGS_HASH | FLAGS_POINTER)) {
 8003160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003162:	4a51      	ldr	r2, [pc, #324]	@ (80032a8 <print_integer_finalization+0x1e8>)
 8003164:	4013      	ands	r3, r2
 8003166:	d100      	bne.n	800316a <print_integer_finalization+0xaa>
 8003168:	e06a      	b.n	8003240 <print_integer_finalization+0x180>
    if (!(flags & FLAGS_PRECISION) && len && ((len == precision) || (len == width))) {
 800316a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800316c:	2380      	movs	r3, #128	@ 0x80
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	4013      	ands	r3, r2
 8003172:	d124      	bne.n	80031be <print_integer_finalization+0xfe>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d021      	beq.n	80031be <print_integer_finalization+0xfe>
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800317e:	429a      	cmp	r2, r3
 8003180:	d003      	beq.n	800318a <print_integer_finalization+0xca>
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003186:	429a      	cmp	r2, r3
 8003188:	d119      	bne.n	80031be <print_integer_finalization+0xfe>
      // Let's take back some padding digits to fit in what will eventually
      // be the format-specific prefix
      if (unpadded_len < len) {
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	429a      	cmp	r2, r3
 8003190:	d202      	bcs.n	8003198 <print_integer_finalization+0xd8>
        len--; // This should suffice for BASE_OCTAL
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	3b01      	subs	r3, #1
 8003196:	607b      	str	r3, [r7, #4]
      }
      if (len && (base == BASE_HEX || base == BASE_BINARY) && (unpadded_len < len)) {
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00f      	beq.n	80031be <print_integer_finalization+0xfe>
 800319e:	2228      	movs	r2, #40	@ 0x28
 80031a0:	18bb      	adds	r3, r7, r2
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b10      	cmp	r3, #16
 80031a6:	d003      	beq.n	80031b0 <print_integer_finalization+0xf0>
 80031a8:	18bb      	adds	r3, r7, r2
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d106      	bne.n	80031be <print_integer_finalization+0xfe>
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d202      	bcs.n	80031be <print_integer_finalization+0xfe>
        len--; // ... and an extra one for 0x or 0b
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3b01      	subs	r3, #1
 80031bc:	607b      	str	r3, [r7, #4]
      }
    }
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80031be:	2328      	movs	r3, #40	@ 0x28
 80031c0:	18fb      	adds	r3, r7, r3
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2b10      	cmp	r3, #16
 80031c6:	d10e      	bne.n	80031e6 <print_integer_finalization+0x126>
 80031c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ca:	2220      	movs	r2, #32
 80031cc:	4013      	ands	r3, r2
 80031ce:	d10a      	bne.n	80031e6 <print_integer_finalization+0x126>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b1f      	cmp	r3, #31
 80031d4:	d807      	bhi.n	80031e6 <print_integer_finalization+0x126>
      buf[len++] = 'x';
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	607a      	str	r2, [r7, #4]
 80031dc:	68ba      	ldr	r2, [r7, #8]
 80031de:	18d3      	adds	r3, r2, r3
 80031e0:	2278      	movs	r2, #120	@ 0x78
 80031e2:	701a      	strb	r2, [r3, #0]
 80031e4:	e022      	b.n	800322c <print_integer_finalization+0x16c>
    }
    else if ((base == BASE_HEX) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80031e6:	2328      	movs	r3, #40	@ 0x28
 80031e8:	18fb      	adds	r3, r7, r3
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b10      	cmp	r3, #16
 80031ee:	d10e      	bne.n	800320e <print_integer_finalization+0x14e>
 80031f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f2:	2220      	movs	r2, #32
 80031f4:	4013      	ands	r3, r2
 80031f6:	d00a      	beq.n	800320e <print_integer_finalization+0x14e>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b1f      	cmp	r3, #31
 80031fc:	d807      	bhi.n	800320e <print_integer_finalization+0x14e>
      buf[len++] = 'X';
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	18d3      	adds	r3, r2, r3
 8003208:	2258      	movs	r2, #88	@ 0x58
 800320a:	701a      	strb	r2, [r3, #0]
 800320c:	e00e      	b.n	800322c <print_integer_finalization+0x16c>
    }
    else if ((base == BASE_BINARY) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 800320e:	2328      	movs	r3, #40	@ 0x28
 8003210:	18fb      	adds	r3, r7, r3
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b02      	cmp	r3, #2
 8003216:	d109      	bne.n	800322c <print_integer_finalization+0x16c>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b1f      	cmp	r3, #31
 800321c:	d806      	bhi.n	800322c <print_integer_finalization+0x16c>
      buf[len++] = 'b';
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	607a      	str	r2, [r7, #4]
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	18d3      	adds	r3, r2, r3
 8003228:	2262      	movs	r2, #98	@ 0x62
 800322a:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_INTEGER_BUFFER_SIZE) {
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b1f      	cmp	r3, #31
 8003230:	d806      	bhi.n	8003240 <print_integer_finalization+0x180>
      buf[len++] = '0';
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	607a      	str	r2, [r7, #4]
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	18d3      	adds	r3, r2, r3
 800323c:	2230      	movs	r2, #48	@ 0x30
 800323e:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_INTEGER_BUFFER_SIZE) {
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b1f      	cmp	r3, #31
 8003244:	d822      	bhi.n	800328c <print_integer_finalization+0x1cc>
    if (negative) {
 8003246:	1cfb      	adds	r3, r7, #3
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d007      	beq.n	800325e <print_integer_finalization+0x19e>
      buf[len++] = '-';
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	607a      	str	r2, [r7, #4]
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	18d3      	adds	r3, r2, r3
 8003258:	222d      	movs	r2, #45	@ 0x2d
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	e016      	b.n	800328c <print_integer_finalization+0x1cc>
    }
    else if (flags & FLAGS_PLUS) {
 800325e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003260:	2204      	movs	r2, #4
 8003262:	4013      	ands	r3, r2
 8003264:	d007      	beq.n	8003276 <print_integer_finalization+0x1b6>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	1c5a      	adds	r2, r3, #1
 800326a:	607a      	str	r2, [r7, #4]
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	18d3      	adds	r3, r2, r3
 8003270:	222b      	movs	r2, #43	@ 0x2b
 8003272:	701a      	strb	r2, [r3, #0]
 8003274:	e00a      	b.n	800328c <print_integer_finalization+0x1cc>
    }
    else if (flags & FLAGS_SPACE) {
 8003276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003278:	2208      	movs	r2, #8
 800327a:	4013      	ands	r3, r2
 800327c:	d006      	beq.n	800328c <print_integer_finalization+0x1cc>
      buf[len++] = ' ';
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	18d3      	adds	r3, r2, r3
 8003288:	2220      	movs	r2, #32
 800328a:	701a      	strb	r2, [r3, #0]
    }
  }

  out_rev_(output, buf, len, width, flags);
 800328c:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	68b9      	ldr	r1, [r7, #8]
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	0023      	movs	r3, r4
 800329a:	f7ff feca 	bl	8003032 <out_rev_>
}
 800329e:	46c0      	nop			@ (mov r8, r8)
 80032a0:	46bd      	mov	sp, r7
 80032a2:	b007      	add	sp, #28
 80032a4:	bd90      	pop	{r4, r7, pc}
 80032a6:	46c0      	nop			@ (mov r8, r8)
 80032a8:	00002010 	.word	0x00002010

080032ac <print_integer>:

// An internal itoa-like function
static void print_integer(output_gadget_t* output, printf_unsigned_value_t value, bool negative, numeric_base_t base, printf_size_t precision, printf_size_t width, printf_flags_t flags)
{
 80032ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ae:	b095      	sub	sp, #84	@ 0x54
 80032b0:	af04      	add	r7, sp, #16
 80032b2:	6178      	str	r0, [r7, #20]
 80032b4:	60ba      	str	r2, [r7, #8]
 80032b6:	60fb      	str	r3, [r7, #12]
  char buf[PRINTF_INTEGER_BUFFER_SIZE];
  printf_size_t len = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!value) {
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	d121      	bne.n	8003308 <print_integer+0x5c>
    if ( !(flags & FLAGS_PRECISION) ) {
 80032c4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80032c6:	2380      	movs	r3, #128	@ 0x80
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	4013      	ands	r3, r2
 80032cc:	d10d      	bne.n	80032ea <print_integer+0x3e>
      buf[len++] = '0';
 80032ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80032d4:	2210      	movs	r2, #16
 80032d6:	2108      	movs	r1, #8
 80032d8:	1852      	adds	r2, r2, r1
 80032da:	19d2      	adds	r2, r2, r7
 80032dc:	2130      	movs	r1, #48	@ 0x30
 80032de:	54d1      	strb	r1, [r2, r3]
      flags &= ~FLAGS_HASH;
 80032e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032e2:	2210      	movs	r2, #16
 80032e4:	4393      	bics	r3, r2
 80032e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032e8:	e06b      	b.n	80033c2 <print_integer+0x116>
      // We drop this flag this since either the alternative and regular modes of the specifier
      // don't differ on 0 values, or (in the case of octal) we've already provided the special
      // handling for this mode.
    }
    else if (base == BASE_HEX) {
 80032ea:	234c      	movs	r3, #76	@ 0x4c
 80032ec:	2208      	movs	r2, #8
 80032ee:	189b      	adds	r3, r3, r2
 80032f0:	2208      	movs	r2, #8
 80032f2:	4694      	mov	ip, r2
 80032f4:	44bc      	add	ip, r7
 80032f6:	4463      	add	r3, ip
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b10      	cmp	r3, #16
 80032fc:	d161      	bne.n	80033c2 <print_integer+0x116>
      flags &= ~FLAGS_HASH;
 80032fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003300:	2210      	movs	r2, #16
 8003302:	4393      	bics	r3, r2
 8003304:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003306:	e05c      	b.n	80033c2 <print_integer+0x116>
      // don't differ on 0 values
    }
  }
  else {
    do {
      const char digit = (char)(value % base);
 8003308:	234c      	movs	r3, #76	@ 0x4c
 800330a:	2208      	movs	r2, #8
 800330c:	189b      	adds	r3, r3, r2
 800330e:	2208      	movs	r2, #8
 8003310:	4694      	mov	ip, r2
 8003312:	44bc      	add	ip, r7
 8003314:	4463      	add	r3, ip
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	b2db      	uxtb	r3, r3
 800331a:	001c      	movs	r4, r3
 800331c:	2300      	movs	r3, #0
 800331e:	001d      	movs	r5, r3
 8003320:	68b8      	ldr	r0, [r7, #8]
 8003322:	68f9      	ldr	r1, [r7, #12]
 8003324:	0022      	movs	r2, r4
 8003326:	002b      	movs	r3, r5
 8003328:	f7fc ffe4 	bl	80002f4 <__aeabi_uldivmod>
 800332c:	0010      	movs	r0, r2
 800332e:	0019      	movs	r1, r3
 8003330:	2633      	movs	r6, #51	@ 0x33
 8003332:	2308      	movs	r3, #8
 8003334:	18f3      	adds	r3, r6, r3
 8003336:	19db      	adds	r3, r3, r7
 8003338:	1c02      	adds	r2, r0, #0
 800333a:	701a      	strb	r2, [r3, #0]
      buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
 800333c:	0032      	movs	r2, r6
 800333e:	2308      	movs	r3, #8
 8003340:	18d3      	adds	r3, r2, r3
 8003342:	19db      	adds	r3, r3, r7
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	2b09      	cmp	r3, #9
 8003348:	d806      	bhi.n	8003358 <print_integer+0xac>
 800334a:	2308      	movs	r3, #8
 800334c:	18d3      	adds	r3, r2, r3
 800334e:	19db      	adds	r3, r3, r7
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	3330      	adds	r3, #48	@ 0x30
 8003354:	b2da      	uxtb	r2, r3
 8003356:	e00f      	b.n	8003378 <print_integer+0xcc>
 8003358:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800335a:	2220      	movs	r2, #32
 800335c:	4013      	ands	r3, r2
 800335e:	d001      	beq.n	8003364 <print_integer+0xb8>
 8003360:	2341      	movs	r3, #65	@ 0x41
 8003362:	e000      	b.n	8003366 <print_integer+0xba>
 8003364:	2361      	movs	r3, #97	@ 0x61
 8003366:	2233      	movs	r2, #51	@ 0x33
 8003368:	2108      	movs	r1, #8
 800336a:	1852      	adds	r2, r2, r1
 800336c:	19d2      	adds	r2, r2, r7
 800336e:	7812      	ldrb	r2, [r2, #0]
 8003370:	189b      	adds	r3, r3, r2
 8003372:	b2db      	uxtb	r3, r3
 8003374:	3b0a      	subs	r3, #10
 8003376:	b2da      	uxtb	r2, r3
 8003378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800337a:	1c59      	adds	r1, r3, #1
 800337c:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800337e:	2110      	movs	r1, #16
 8003380:	2008      	movs	r0, #8
 8003382:	1809      	adds	r1, r1, r0
 8003384:	19c9      	adds	r1, r1, r7
 8003386:	54ca      	strb	r2, [r1, r3]
      value /= base;
 8003388:	234c      	movs	r3, #76	@ 0x4c
 800338a:	2208      	movs	r2, #8
 800338c:	189b      	adds	r3, r3, r2
 800338e:	2208      	movs	r2, #8
 8003390:	4694      	mov	ip, r2
 8003392:	44bc      	add	ip, r7
 8003394:	4463      	add	r3, ip
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	2300      	movs	r3, #0
 800339e:	607b      	str	r3, [r7, #4]
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68b8      	ldr	r0, [r7, #8]
 80033a6:	68f9      	ldr	r1, [r7, #12]
 80033a8:	f7fc ffa4 	bl	80002f4 <__aeabi_uldivmod>
 80033ac:	0002      	movs	r2, r0
 80033ae:	000b      	movs	r3, r1
 80033b0:	60ba      	str	r2, [r7, #8]
 80033b2:	60fb      	str	r3, [r7, #12]
    } while (value && (len < PRINTF_INTEGER_BUFFER_SIZE));
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	d002      	beq.n	80033c2 <print_integer+0x116>
 80033bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033be:	2b1f      	cmp	r3, #31
 80033c0:	d9a2      	bls.n	8003308 <print_integer+0x5c>
  }

  print_integer_finalization(output, buf, len, negative, base, precision, width, flags);
 80033c2:	2348      	movs	r3, #72	@ 0x48
 80033c4:	2508      	movs	r5, #8
 80033c6:	195b      	adds	r3, r3, r5
 80033c8:	2208      	movs	r2, #8
 80033ca:	4694      	mov	ip, r2
 80033cc:	44bc      	add	ip, r7
 80033ce:	4463      	add	r3, ip
 80033d0:	781c      	ldrb	r4, [r3, #0]
 80033d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033d4:	2310      	movs	r3, #16
 80033d6:	2108      	movs	r1, #8
 80033d8:	185b      	adds	r3, r3, r1
 80033da:	19d9      	adds	r1, r3, r7
 80033dc:	6978      	ldr	r0, [r7, #20]
 80033de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033e0:	9303      	str	r3, [sp, #12]
 80033e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033e4:	9302      	str	r3, [sp, #8]
 80033e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033e8:	9301      	str	r3, [sp, #4]
 80033ea:	234c      	movs	r3, #76	@ 0x4c
 80033ec:	195b      	adds	r3, r3, r5
 80033ee:	2508      	movs	r5, #8
 80033f0:	46ac      	mov	ip, r5
 80033f2:	44bc      	add	ip, r7
 80033f4:	4463      	add	r3, ip
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	0023      	movs	r3, r4
 80033fc:	f7ff fe60 	bl	80030c0 <print_integer_finalization>
}
 8003400:	46c0      	nop			@ (mov r8, r8)
 8003402:	46bd      	mov	sp, r7
 8003404:	b011      	add	sp, #68	@ 0x44
 8003406:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003408 <get_components>:

// Break up a double number - which is known to be a finite non-negative number -
// into its base-10 parts: integral - before the decimal point, and fractional - after it.
// Taken the precision into account, but does not change it even internally.
static struct double_components get_components(double number, printf_size_t precision)
{
 8003408:	b5b0      	push	{r4, r5, r7, lr}
 800340a:	b092      	sub	sp, #72	@ 0x48
 800340c:	af00      	add	r7, sp, #0
 800340e:	61f8      	str	r0, [r7, #28]
 8003410:	613a      	str	r2, [r7, #16]
 8003412:	617b      	str	r3, [r7, #20]
  struct double_components number_;
  number_.is_negative = get_sign_bit(number);
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	0010      	movs	r0, r2
 800341a:	0019      	movs	r1, r3
 800341c:	f7ff fce9 	bl	8002df2 <get_sign_bit>
 8003420:	0003      	movs	r3, r0
 8003422:	1e5a      	subs	r2, r3, #1
 8003424:	4193      	sbcs	r3, r2
 8003426:	b2da      	uxtb	r2, r3
 8003428:	2110      	movs	r1, #16
 800342a:	2010      	movs	r0, #16
 800342c:	180b      	adds	r3, r1, r0
 800342e:	19db      	adds	r3, r3, r7
 8003430:	741a      	strb	r2, [r3, #16]
  double abs_number = (number_.is_negative) ? -number : number;
 8003432:	180b      	adds	r3, r1, r0
 8003434:	19db      	adds	r3, r3, r7
 8003436:	7c1b      	ldrb	r3, [r3, #16]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d007      	beq.n	800344c <get_components+0x44>
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	001c      	movs	r4, r3
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	2280      	movs	r2, #128	@ 0x80
 8003444:	0612      	lsls	r2, r2, #24
 8003446:	405a      	eors	r2, r3
 8003448:	0015      	movs	r5, r2
 800344a:	e001      	b.n	8003450 <get_components+0x48>
 800344c:	693c      	ldr	r4, [r7, #16]
 800344e:	697d      	ldr	r5, [r7, #20]
 8003450:	643c      	str	r4, [r7, #64]	@ 0x40
 8003452:	647d      	str	r5, [r7, #68]	@ 0x44
  number_.integral = (int_fast64_t)abs_number;
 8003454:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8003456:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003458:	f7fc ff9a 	bl	8000390 <__aeabi_d2lz>
 800345c:	0002      	movs	r2, r0
 800345e:	000b      	movs	r3, r1
 8003460:	2410      	movs	r4, #16
 8003462:	2510      	movs	r5, #16
 8003464:	1961      	adds	r1, r4, r5
 8003466:	19c9      	adds	r1, r1, r7
 8003468:	600a      	str	r2, [r1, #0]
 800346a:	604b      	str	r3, [r1, #4]
  double remainder = (abs_number - (double) number_.integral) * powers_of_10[precision];
 800346c:	1963      	adds	r3, r4, r5
 800346e:	19db      	adds	r3, r3, r7
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	0010      	movs	r0, r2
 8003476:	0019      	movs	r1, r3
 8003478:	f7fc ffc4 	bl	8000404 <__aeabi_l2d>
 800347c:	0002      	movs	r2, r0
 800347e:	000b      	movs	r3, r1
 8003480:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8003482:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003484:	f7fe fb2e 	bl	8001ae4 <__aeabi_dsub>
 8003488:	0002      	movs	r2, r0
 800348a:	000b      	movs	r3, r1
 800348c:	0010      	movs	r0, r2
 800348e:	0019      	movs	r1, r3
 8003490:	4a76      	ldr	r2, [pc, #472]	@ (800366c <get_components+0x264>)
 8003492:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	18d3      	adds	r3, r2, r3
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f7fe f85a 	bl	8001554 <__aeabi_dmul>
 80034a0:	0002      	movs	r2, r0
 80034a2:	000b      	movs	r3, r1
 80034a4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80034a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  number_.fractional = (int_fast64_t)remainder;
 80034a8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80034aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80034ac:	f7fc ff70 	bl	8000390 <__aeabi_d2lz>
 80034b0:	0002      	movs	r2, r0
 80034b2:	000b      	movs	r3, r1
 80034b4:	1961      	adds	r1, r4, r5
 80034b6:	19c9      	adds	r1, r1, r7
 80034b8:	608a      	str	r2, [r1, #8]
 80034ba:	60cb      	str	r3, [r1, #12]

  remainder -= (double) number_.fractional;
 80034bc:	1963      	adds	r3, r4, r5
 80034be:	19db      	adds	r3, r3, r7
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	0010      	movs	r0, r2
 80034c6:	0019      	movs	r1, r3
 80034c8:	f7fc ff9c 	bl	8000404 <__aeabi_l2d>
 80034cc:	0002      	movs	r2, r0
 80034ce:	000b      	movs	r3, r1
 80034d0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80034d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80034d4:	f7fe fb06 	bl	8001ae4 <__aeabi_dsub>
 80034d8:	0002      	movs	r2, r0
 80034da:	000b      	movs	r3, r1
 80034dc:	63ba      	str	r2, [r7, #56]	@ 0x38
 80034de:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (remainder > 0.5) {
 80034e0:	2200      	movs	r2, #0
 80034e2:	4b63      	ldr	r3, [pc, #396]	@ (8003670 <get_components+0x268>)
 80034e4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80034e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80034e8:	f7fc fecc 	bl	8000284 <__aeabi_dcmpgt>
 80034ec:	1e03      	subs	r3, r0, #0
 80034ee:	d030      	beq.n	8003552 <get_components+0x14a>
    ++number_.fractional;
 80034f0:	1963      	adds	r3, r4, r5
 80034f2:	19db      	adds	r3, r3, r7
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	2001      	movs	r0, #1
 80034fa:	2100      	movs	r1, #0
 80034fc:	1812      	adds	r2, r2, r0
 80034fe:	414b      	adcs	r3, r1
 8003500:	1961      	adds	r1, r4, r5
 8003502:	19c9      	adds	r1, r1, r7
 8003504:	608a      	str	r2, [r1, #8]
 8003506:	60cb      	str	r3, [r1, #12]
    // handle rollover, e.g. case 0.99 with precision 1 is 1.0
    if ((double) number_.fractional >= powers_of_10[precision]) {
 8003508:	1963      	adds	r3, r4, r5
 800350a:	19db      	adds	r3, r3, r7
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	0010      	movs	r0, r2
 8003512:	0019      	movs	r1, r3
 8003514:	f7fc ff76 	bl	8000404 <__aeabi_l2d>
 8003518:	4a54      	ldr	r2, [pc, #336]	@ (800366c <get_components+0x264>)
 800351a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	18d3      	adds	r3, r2, r3
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f7fc feb8 	bl	8000298 <__aeabi_dcmpge>
 8003528:	1e03      	subs	r3, r0, #0
 800352a:	d040      	beq.n	80035ae <get_components+0x1a6>
      number_.fractional = 0;
 800352c:	1963      	adds	r3, r4, r5
 800352e:	19d9      	adds	r1, r3, r7
 8003530:	2200      	movs	r2, #0
 8003532:	2300      	movs	r3, #0
 8003534:	608a      	str	r2, [r1, #8]
 8003536:	60cb      	str	r3, [r1, #12]
      ++number_.integral;
 8003538:	1963      	adds	r3, r4, r5
 800353a:	19db      	adds	r3, r3, r7
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2001      	movs	r0, #1
 8003542:	2100      	movs	r1, #0
 8003544:	1812      	adds	r2, r2, r0
 8003546:	414b      	adcs	r3, r1
 8003548:	1961      	adds	r1, r4, r5
 800354a:	19c9      	adds	r1, r1, r7
 800354c:	600a      	str	r2, [r1, #0]
 800354e:	604b      	str	r3, [r1, #4]
 8003550:	e02d      	b.n	80035ae <get_components+0x1a6>
    }
  }
  else if ((remainder == 0.5) && ((number_.fractional == 0U) || (number_.fractional & 1U))) {
 8003552:	2200      	movs	r2, #0
 8003554:	4b46      	ldr	r3, [pc, #280]	@ (8003670 <get_components+0x268>)
 8003556:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003558:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800355a:	f7fc fe79 	bl	8000250 <__aeabi_dcmpeq>
 800355e:	1e03      	subs	r3, r0, #0
 8003560:	d025      	beq.n	80035ae <get_components+0x1a6>
 8003562:	2010      	movs	r0, #16
 8003564:	2410      	movs	r4, #16
 8003566:	1903      	adds	r3, r0, r4
 8003568:	19db      	adds	r3, r3, r7
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	0011      	movs	r1, r2
 8003570:	4319      	orrs	r1, r3
 8003572:	d00e      	beq.n	8003592 <get_components+0x18a>
 8003574:	1903      	adds	r3, r0, r4
 8003576:	19db      	adds	r3, r3, r7
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	2101      	movs	r1, #1
 800357e:	4011      	ands	r1, r2
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	2100      	movs	r1, #0
 8003584:	400b      	ands	r3, r1
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68b9      	ldr	r1, [r7, #8]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	000b      	movs	r3, r1
 800358e:	4313      	orrs	r3, r2
 8003590:	d00d      	beq.n	80035ae <get_components+0x1a6>
    // if halfway, round up if odd OR if last digit is 0
    ++number_.fractional;
 8003592:	2410      	movs	r4, #16
 8003594:	2510      	movs	r5, #16
 8003596:	1963      	adds	r3, r4, r5
 8003598:	19db      	adds	r3, r3, r7
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	2001      	movs	r0, #1
 80035a0:	2100      	movs	r1, #0
 80035a2:	1812      	adds	r2, r2, r0
 80035a4:	414b      	adcs	r3, r1
 80035a6:	1961      	adds	r1, r4, r5
 80035a8:	19c9      	adds	r1, r1, r7
 80035aa:	608a      	str	r2, [r1, #8]
 80035ac:	60cb      	str	r3, [r1, #12]
  }

  if (precision == 0U) {
 80035ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d14b      	bne.n	800364c <get_components+0x244>
    remainder = abs_number - (double) number_.integral;
 80035b4:	2310      	movs	r3, #16
 80035b6:	2210      	movs	r2, #16
 80035b8:	189b      	adds	r3, r3, r2
 80035ba:	19db      	adds	r3, r3, r7
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	0010      	movs	r0, r2
 80035c2:	0019      	movs	r1, r3
 80035c4:	f7fc ff1e 	bl	8000404 <__aeabi_l2d>
 80035c8:	0002      	movs	r2, r0
 80035ca:	000b      	movs	r3, r1
 80035cc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80035ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80035d0:	f7fe fa88 	bl	8001ae4 <__aeabi_dsub>
 80035d4:	0002      	movs	r2, r0
 80035d6:	000b      	movs	r3, r1
 80035d8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80035da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if ((!(remainder < 0.5) || (remainder > 0.5)) && (number_.integral & 1)) {
 80035dc:	2301      	movs	r3, #1
 80035de:	1c1c      	adds	r4, r3, #0
 80035e0:	2200      	movs	r2, #0
 80035e2:	4b23      	ldr	r3, [pc, #140]	@ (8003670 <get_components+0x268>)
 80035e4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80035e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035e8:	f7fc fe38 	bl	800025c <__aeabi_dcmplt>
 80035ec:	1e03      	subs	r3, r0, #0
 80035ee:	d101      	bne.n	80035f4 <get_components+0x1ec>
 80035f0:	2300      	movs	r3, #0
 80035f2:	1c1c      	adds	r4, r3, #0
 80035f4:	b2e3      	uxtb	r3, r4
 80035f6:	2201      	movs	r2, #1
 80035f8:	4053      	eors	r3, r2
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d107      	bne.n	8003610 <get_components+0x208>
 8003600:	2200      	movs	r2, #0
 8003602:	4b1b      	ldr	r3, [pc, #108]	@ (8003670 <get_components+0x268>)
 8003604:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003606:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003608:	f7fc fe3c 	bl	8000284 <__aeabi_dcmpgt>
 800360c:	1e03      	subs	r3, r0, #0
 800360e:	d01d      	beq.n	800364c <get_components+0x244>
 8003610:	2010      	movs	r0, #16
 8003612:	2510      	movs	r5, #16
 8003614:	1943      	adds	r3, r0, r5
 8003616:	19db      	adds	r3, r3, r7
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2101      	movs	r1, #1
 800361e:	4011      	ands	r1, r2
 8003620:	6039      	str	r1, [r7, #0]
 8003622:	2100      	movs	r1, #0
 8003624:	400b      	ands	r3, r1
 8003626:	607b      	str	r3, [r7, #4]
 8003628:	6839      	ldr	r1, [r7, #0]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	000b      	movs	r3, r1
 800362e:	4313      	orrs	r3, r2
 8003630:	d00c      	beq.n	800364c <get_components+0x244>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++number_.integral;
 8003632:	0004      	movs	r4, r0
 8003634:	1943      	adds	r3, r0, r5
 8003636:	19db      	adds	r3, r3, r7
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2001      	movs	r0, #1
 800363e:	2100      	movs	r1, #0
 8003640:	1812      	adds	r2, r2, r0
 8003642:	414b      	adcs	r3, r1
 8003644:	1961      	adds	r1, r4, r5
 8003646:	19c9      	adds	r1, r1, r7
 8003648:	600a      	str	r2, [r1, #0]
 800364a:	604b      	str	r3, [r1, #4]
    }
  }
  return number_;
 800364c:	69fa      	ldr	r2, [r7, #28]
 800364e:	2310      	movs	r3, #16
 8003650:	2110      	movs	r1, #16
 8003652:	185b      	adds	r3, r3, r1
 8003654:	19db      	adds	r3, r3, r7
 8003656:	0010      	movs	r0, r2
 8003658:	0019      	movs	r1, r3
 800365a:	2318      	movs	r3, #24
 800365c:	001a      	movs	r2, r3
 800365e:	f005 f8f5 	bl	800884c <memcpy>
}
 8003662:	69f8      	ldr	r0, [r7, #28]
 8003664:	46bd      	mov	sp, r7
 8003666:	b012      	add	sp, #72	@ 0x48
 8003668:	bdb0      	pop	{r4, r5, r7, pc}
 800366a:	46c0      	nop			@ (mov r8, r8)
 800366c:	08008940 	.word	0x08008940
 8003670:	3fe00000 	.word	0x3fe00000

08003674 <apply_scaling>:
  double raw_factor;
  bool multiply; // if true, need to multiply by raw_factor; otherwise need to divide by it
};

static double apply_scaling(double num, struct scaling_factor normalization)
{
 8003674:	b082      	sub	sp, #8
 8003676:	b580      	push	{r7, lr}
 8003678:	b082      	sub	sp, #8
 800367a:	af00      	add	r7, sp, #0
 800367c:	6038      	str	r0, [r7, #0]
 800367e:	6079      	str	r1, [r7, #4]
 8003680:	2010      	movs	r0, #16
 8003682:	1839      	adds	r1, r7, r0
 8003684:	600a      	str	r2, [r1, #0]
 8003686:	604b      	str	r3, [r1, #4]
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 8003688:	0002      	movs	r2, r0
 800368a:	18bb      	adds	r3, r7, r2
 800368c:	7a1b      	ldrb	r3, [r3, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d009      	beq.n	80036a6 <apply_scaling+0x32>
 8003692:	18bb      	adds	r3, r7, r2
 8003694:	6818      	ldr	r0, [r3, #0]
 8003696:	6859      	ldr	r1, [r3, #4]
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f7fd ff5a 	bl	8001554 <__aeabi_dmul>
 80036a0:	0002      	movs	r2, r0
 80036a2:	000b      	movs	r3, r1
 80036a4:	e009      	b.n	80036ba <apply_scaling+0x46>
 80036a6:	2310      	movs	r3, #16
 80036a8:	18fb      	adds	r3, r7, r3
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	6838      	ldr	r0, [r7, #0]
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	f7fd fb0b 	bl	8000ccc <__aeabi_ddiv>
 80036b6:	0002      	movs	r2, r0
 80036b8:	000b      	movs	r3, r1
}
 80036ba:	0010      	movs	r0, r2
 80036bc:	0019      	movs	r1, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	b002      	add	sp, #8
 80036c2:	bc80      	pop	{r7}
 80036c4:	bc08      	pop	{r3}
 80036c6:	b002      	add	sp, #8
 80036c8:	4718      	bx	r3

080036ca <unapply_scaling>:

static double unapply_scaling(double normalized, struct scaling_factor normalization)
{
 80036ca:	b082      	sub	sp, #8
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6038      	str	r0, [r7, #0]
 80036d4:	6079      	str	r1, [r7, #4]
 80036d6:	2010      	movs	r0, #16
 80036d8:	1839      	adds	r1, r7, r0
 80036da:	600a      	str	r2, [r1, #0]
 80036dc:	604b      	str	r3, [r1, #4]
#ifdef __GNUC__
// accounting for a static analysis bug in GCC 6.x and earlier
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
#endif
  return normalization.multiply ? normalized / normalization.raw_factor : normalized * normalization.raw_factor;
 80036de:	0002      	movs	r2, r0
 80036e0:	18bb      	adds	r3, r7, r2
 80036e2:	7a1b      	ldrb	r3, [r3, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d009      	beq.n	80036fc <unapply_scaling+0x32>
 80036e8:	18bb      	adds	r3, r7, r2
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	6838      	ldr	r0, [r7, #0]
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	f7fd faeb 	bl	8000ccc <__aeabi_ddiv>
 80036f6:	0002      	movs	r2, r0
 80036f8:	000b      	movs	r3, r1
 80036fa:	e009      	b.n	8003710 <unapply_scaling+0x46>
 80036fc:	2310      	movs	r3, #16
 80036fe:	18fb      	adds	r3, r7, r3
 8003700:	6818      	ldr	r0, [r3, #0]
 8003702:	6859      	ldr	r1, [r3, #4]
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f7fd ff24 	bl	8001554 <__aeabi_dmul>
 800370c:	0002      	movs	r2, r0
 800370e:	000b      	movs	r3, r1
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif
}
 8003710:	0010      	movs	r0, r2
 8003712:	0019      	movs	r1, r3
 8003714:	46bd      	mov	sp, r7
 8003716:	b002      	add	sp, #8
 8003718:	bc80      	pop	{r7}
 800371a:	bc08      	pop	{r3}
 800371c:	b002      	add	sp, #8
 800371e:	4718      	bx	r3

08003720 <update_normalization>:

static struct scaling_factor update_normalization(struct scaling_factor sf, double extra_multiplicative_factor)
{
 8003720:	b082      	sub	sp, #8
 8003722:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003724:	b08d      	sub	sp, #52	@ 0x34
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	2038      	movs	r0, #56	@ 0x38
 800372c:	2408      	movs	r4, #8
 800372e:	1901      	adds	r1, r0, r4
 8003730:	2508      	movs	r5, #8
 8003732:	46ac      	mov	ip, r5
 8003734:	44bc      	add	ip, r7
 8003736:	4461      	add	r1, ip
 8003738:	600a      	str	r2, [r1, #0]
 800373a:	604b      	str	r3, [r1, #4]
  struct scaling_factor result;
  if (sf.multiply) {
 800373c:	0001      	movs	r1, r0
 800373e:	0020      	movs	r0, r4
 8003740:	180b      	adds	r3, r1, r0
 8003742:	2208      	movs	r2, #8
 8003744:	4694      	mov	ip, r2
 8003746:	44bc      	add	ip, r7
 8003748:	4463      	add	r3, ip
 800374a:	7a1b      	ldrb	r3, [r3, #8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d014      	beq.n	800377a <update_normalization+0x5a>
    result.multiply = true;
 8003750:	2408      	movs	r4, #8
 8003752:	193b      	adds	r3, r7, r4
 8003754:	2201      	movs	r2, #1
 8003756:	721a      	strb	r2, [r3, #8]
    result.raw_factor = sf.raw_factor * extra_multiplicative_factor;
 8003758:	180b      	adds	r3, r1, r0
 800375a:	2208      	movs	r2, #8
 800375c:	4694      	mov	ip, r2
 800375e:	44bc      	add	ip, r7
 8003760:	4463      	add	r3, ip
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	6859      	ldr	r1, [r3, #4]
 8003766:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003768:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800376a:	f7fd fef3 	bl	8001554 <__aeabi_dmul>
 800376e:	0002      	movs	r2, r0
 8003770:	000b      	movs	r3, r1
 8003772:	1939      	adds	r1, r7, r4
 8003774:	600a      	str	r2, [r1, #0]
 8003776:	604b      	str	r3, [r1, #4]
 8003778:	e059      	b.n	800382e <update_normalization+0x10e>
  }
  else {
    int factor_exp2 = get_exp2(get_bit_access(sf.raw_factor));
 800377a:	2438      	movs	r4, #56	@ 0x38
 800377c:	2608      	movs	r6, #8
 800377e:	19a3      	adds	r3, r4, r6
 8003780:	2208      	movs	r2, #8
 8003782:	4694      	mov	ip, r2
 8003784:	44bc      	add	ip, r7
 8003786:	4463      	add	r3, ip
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2118      	movs	r1, #24
 800378e:	1879      	adds	r1, r7, r1
 8003790:	0008      	movs	r0, r1
 8003792:	f7ff fb1b 	bl	8002dcc <get_bit_access>
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	0010      	movs	r0, r2
 800379c:	0019      	movs	r1, r3
 800379e:	f7ff fb3f 	bl	8002e20 <get_exp2>
 80037a2:	0003      	movs	r3, r0
 80037a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int extra_factor_exp2 = get_exp2(get_bit_access(extra_multiplicative_factor));
 80037a6:	2320      	movs	r3, #32
 80037a8:	18f9      	adds	r1, r7, r3
 80037aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037ae:	0008      	movs	r0, r1
 80037b0:	f7ff fb0c 	bl	8002dcc <get_bit_access>
 80037b4:	6a3a      	ldr	r2, [r7, #32]
 80037b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b8:	0010      	movs	r0, r2
 80037ba:	0019      	movs	r1, r3
 80037bc:	f7ff fb30 	bl	8002e20 <get_exp2>
 80037c0:	0003      	movs	r3, r0
 80037c2:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Divide the larger-exponent raw raw_factor by the smaller
    if (PRINTF_ABS(factor_exp2) > PRINTF_ABS(extra_factor_exp2)) {
 80037c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037c6:	17d9      	asrs	r1, r3, #31
 80037c8:	185a      	adds	r2, r3, r1
 80037ca:	404a      	eors	r2, r1
 80037cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ce:	17d9      	asrs	r1, r3, #31
 80037d0:	185b      	adds	r3, r3, r1
 80037d2:	404b      	eors	r3, r1
 80037d4:	429a      	cmp	r2, r3
 80037d6:	dd14      	ble.n	8003802 <update_normalization+0xe2>
      result.multiply = false;
 80037d8:	2508      	movs	r5, #8
 80037da:	197b      	adds	r3, r7, r5
 80037dc:	2200      	movs	r2, #0
 80037de:	721a      	strb	r2, [r3, #8]
      result.raw_factor = sf.raw_factor / extra_multiplicative_factor;
 80037e0:	19a3      	adds	r3, r4, r6
 80037e2:	2208      	movs	r2, #8
 80037e4:	4694      	mov	ip, r2
 80037e6:	44bc      	add	ip, r7
 80037e8:	4463      	add	r3, ip
 80037ea:	6818      	ldr	r0, [r3, #0]
 80037ec:	6859      	ldr	r1, [r3, #4]
 80037ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037f2:	f7fd fa6b 	bl	8000ccc <__aeabi_ddiv>
 80037f6:	0002      	movs	r2, r0
 80037f8:	000b      	movs	r3, r1
 80037fa:	1979      	adds	r1, r7, r5
 80037fc:	600a      	str	r2, [r1, #0]
 80037fe:	604b      	str	r3, [r1, #4]
 8003800:	e015      	b.n	800382e <update_normalization+0x10e>
    }
    else {
      result.multiply = true;
 8003802:	2408      	movs	r4, #8
 8003804:	193b      	adds	r3, r7, r4
 8003806:	2201      	movs	r2, #1
 8003808:	721a      	strb	r2, [r3, #8]
      result.raw_factor = extra_multiplicative_factor / sf.raw_factor;
 800380a:	2338      	movs	r3, #56	@ 0x38
 800380c:	2208      	movs	r2, #8
 800380e:	189b      	adds	r3, r3, r2
 8003810:	2208      	movs	r2, #8
 8003812:	4694      	mov	ip, r2
 8003814:	44bc      	add	ip, r7
 8003816:	4463      	add	r3, ip
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800381e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003820:	f7fd fa54 	bl	8000ccc <__aeabi_ddiv>
 8003824:	0002      	movs	r2, r0
 8003826:	000b      	movs	r3, r1
 8003828:	1939      	adds	r1, r7, r4
 800382a:	600a      	str	r2, [r1, #0]
 800382c:	604b      	str	r3, [r1, #4]
    }
  }
  return result;
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	2308      	movs	r3, #8
 8003832:	18fb      	adds	r3, r7, r3
 8003834:	0010      	movs	r0, r2
 8003836:	0019      	movs	r1, r3
 8003838:	2310      	movs	r3, #16
 800383a:	001a      	movs	r2, r3
 800383c:	f005 f806 	bl	800884c <memcpy>
}
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	46bd      	mov	sp, r7
 8003844:	b00d      	add	sp, #52	@ 0x34
 8003846:	bcf0      	pop	{r4, r5, r6, r7}
 8003848:	bc08      	pop	{r3}
 800384a:	b002      	add	sp, #8
 800384c:	4718      	bx	r3
	...

08003850 <get_normalized_components>:

static struct double_components get_normalized_components(bool negative, printf_size_t precision, double non_normalized, struct scaling_factor normalization, int floored_exp10)
{
 8003850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003852:	b0a5      	sub	sp, #148	@ 0x94
 8003854:	af04      	add	r7, sp, #16
 8003856:	6278      	str	r0, [r7, #36]	@ 0x24
 8003858:	61fa      	str	r2, [r7, #28]
 800385a:	200b      	movs	r0, #11
 800385c:	2618      	movs	r6, #24
 800385e:	1983      	adds	r3, r0, r6
 8003860:	19db      	adds	r3, r3, r7
 8003862:	1c0a      	adds	r2, r1, #0
 8003864:	701a      	strb	r2, [r3, #0]
  struct double_components components;
  components.is_negative = negative;
 8003866:	2320      	movs	r3, #32
 8003868:	0031      	movs	r1, r6
 800386a:	185b      	adds	r3, r3, r1
 800386c:	19db      	adds	r3, r3, r7
 800386e:	1842      	adds	r2, r0, r1
 8003870:	19d2      	adds	r2, r2, r7
 8003872:	7812      	ldrb	r2, [r2, #0]
 8003874:	741a      	strb	r2, [r3, #16]
  double scaled = apply_scaling(non_normalized, normalization);
 8003876:	2308      	movs	r3, #8
 8003878:	2280      	movs	r2, #128	@ 0x80
 800387a:	189b      	adds	r3, r3, r2
 800387c:	1878      	adds	r0, r7, r1
 800387e:	181e      	adds	r6, r3, r0
 8003880:	1853      	adds	r3, r2, r1
 8003882:	19db      	adds	r3, r3, r7
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	603a      	str	r2, [r7, #0]
 800388a:	607b      	str	r3, [r7, #4]
 800388c:	466b      	mov	r3, sp
 800388e:	0018      	movs	r0, r3
 8003890:	0033      	movs	r3, r6
 8003892:	3308      	adds	r3, #8
 8003894:	2208      	movs	r2, #8
 8003896:	0019      	movs	r1, r3
 8003898:	f004 ffd8 	bl	800884c <memcpy>
 800389c:	6832      	ldr	r2, [r6, #0]
 800389e:	6873      	ldr	r3, [r6, #4]
 80038a0:	6838      	ldr	r0, [r7, #0]
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	f7ff fee6 	bl	8003674 <apply_scaling>
 80038a8:	0002      	movs	r2, r0
 80038aa:	000b      	movs	r3, r1
 80038ac:	67ba      	str	r2, [r7, #120]	@ 0x78
 80038ae:	67fb      	str	r3, [r7, #124]	@ 0x7c

  bool close_to_representation_extremum = ( (-floored_exp10 + (int) precision) >= DBL_MAX_10_EXP - 1 );
 80038b0:	69fa      	ldr	r2, [r7, #28]
 80038b2:	2398      	movs	r3, #152	@ 0x98
 80038b4:	2018      	movs	r0, #24
 80038b6:	181b      	adds	r3, r3, r0
 80038b8:	19db      	adds	r3, r3, r7
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	1ad1      	subs	r1, r2, r3
 80038be:	235f      	movs	r3, #95	@ 0x5f
 80038c0:	181b      	adds	r3, r3, r0
 80038c2:	19db      	adds	r3, r3, r7
 80038c4:	2201      	movs	r2, #1
 80038c6:	1c10      	adds	r0, r2, #0
 80038c8:	2299      	movs	r2, #153	@ 0x99
 80038ca:	0052      	lsls	r2, r2, #1
 80038cc:	4291      	cmp	r1, r2
 80038ce:	dc01      	bgt.n	80038d4 <get_normalized_components+0x84>
 80038d0:	2200      	movs	r2, #0
 80038d2:	1c10      	adds	r0, r2, #0
 80038d4:	7018      	strb	r0, [r3, #0]
  if (close_to_representation_extremum) {
 80038d6:	235f      	movs	r3, #95	@ 0x5f
 80038d8:	2218      	movs	r2, #24
 80038da:	189b      	adds	r3, r3, r2
 80038dc:	19db      	adds	r3, r3, r7
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d018      	beq.n	8003916 <get_normalized_components+0xc6>
    // We can't have a normalization factor which also accounts for the precision, i.e. moves
    // some decimal digits into the mantissa, since it's unrepresentable, or nearly unrepresentable.
    // So, we'll give up early on getting extra precision...
    return get_components(negative ? -scaled : scaled, precision);
 80038e4:	230b      	movs	r3, #11
 80038e6:	189b      	adds	r3, r3, r2
 80038e8:	19db      	adds	r3, r3, r7
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d007      	beq.n	8003900 <get_normalized_components+0xb0>
 80038f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038f2:	001c      	movs	r4, r3
 80038f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038f6:	2280      	movs	r2, #128	@ 0x80
 80038f8:	0612      	lsls	r2, r2, #24
 80038fa:	405a      	eors	r2, r3
 80038fc:	0015      	movs	r5, r2
 80038fe:	e001      	b.n	8003904 <get_normalized_components+0xb4>
 8003900:	6fbc      	ldr	r4, [r7, #120]	@ 0x78
 8003902:	6ffd      	ldr	r5, [r7, #124]	@ 0x7c
 8003904:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	0022      	movs	r2, r4
 800390c:	002b      	movs	r3, r5
 800390e:	0008      	movs	r0, r1
 8003910:	f7ff fd7a 	bl	8003408 <get_components>
 8003914:	e0f9      	b.n	8003b0a <get_normalized_components+0x2ba>
  }
  components.integral = (int_fast64_t) scaled;
 8003916:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8003918:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800391a:	f7fc fd39 	bl	8000390 <__aeabi_d2lz>
 800391e:	0002      	movs	r2, r0
 8003920:	000b      	movs	r3, r1
 8003922:	2420      	movs	r4, #32
 8003924:	2018      	movs	r0, #24
 8003926:	1821      	adds	r1, r4, r0
 8003928:	19c9      	adds	r1, r1, r7
 800392a:	600a      	str	r2, [r1, #0]
 800392c:	604b      	str	r3, [r1, #4]
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 800392e:	1823      	adds	r3, r4, r0
 8003930:	19db      	adds	r3, r3, r7
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	0010      	movs	r0, r2
 8003938:	0019      	movs	r1, r3
 800393a:	f7fc fd63 	bl	8000404 <__aeabi_l2d>
 800393e:	0005      	movs	r5, r0
 8003940:	000e      	movs	r6, r1
 8003942:	2308      	movs	r3, #8
 8003944:	2280      	movs	r2, #128	@ 0x80
 8003946:	189b      	adds	r3, r3, r2
 8003948:	2418      	movs	r4, #24
 800394a:	193a      	adds	r2, r7, r4
 800394c:	189c      	adds	r4, r3, r2
 800394e:	466b      	mov	r3, sp
 8003950:	0018      	movs	r0, r3
 8003952:	0023      	movs	r3, r4
 8003954:	3308      	adds	r3, #8
 8003956:	2208      	movs	r2, #8
 8003958:	0019      	movs	r1, r3
 800395a:	f004 ff77 	bl	800884c <memcpy>
 800395e:	6822      	ldr	r2, [r4, #0]
 8003960:	6863      	ldr	r3, [r4, #4]
 8003962:	0028      	movs	r0, r5
 8003964:	0031      	movs	r1, r6
 8003966:	f7ff feb0 	bl	80036ca <unapply_scaling>
 800396a:	0002      	movs	r2, r0
 800396c:	000b      	movs	r3, r1
 800396e:	2680      	movs	r6, #128	@ 0x80
 8003970:	2418      	movs	r4, #24
 8003972:	1931      	adds	r1, r6, r4
 8003974:	19c9      	adds	r1, r1, r7
 8003976:	6808      	ldr	r0, [r1, #0]
 8003978:	6849      	ldr	r1, [r1, #4]
 800397a:	f7fe f8b3 	bl	8001ae4 <__aeabi_dsub>
 800397e:	0002      	movs	r2, r0
 8003980:	000b      	movs	r3, r1
 8003982:	66ba      	str	r2, [r7, #104]	@ 0x68
 8003984:	66fb      	str	r3, [r7, #108]	@ 0x6c
  double prec_power_of_10 = powers_of_10[precision];
 8003986:	4a63      	ldr	r2, [pc, #396]	@ (8003b14 <get_normalized_components+0x2c4>)
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	18d3      	adds	r3, r2, r3
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	663a      	str	r2, [r7, #96]	@ 0x60
 8003994:	667b      	str	r3, [r7, #100]	@ 0x64
  struct scaling_factor account_for_precision = update_normalization(normalization, prec_power_of_10);
 8003996:	2310      	movs	r3, #16
 8003998:	191b      	adds	r3, r3, r4
 800399a:	19dd      	adds	r5, r3, r7
 800399c:	2308      	movs	r3, #8
 800399e:	199a      	adds	r2, r3, r6
 80039a0:	0026      	movs	r6, r4
 80039a2:	193b      	adds	r3, r7, r4
 80039a4:	18d4      	adds	r4, r2, r3
 80039a6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80039a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039aa:	9202      	str	r2, [sp, #8]
 80039ac:	9303      	str	r3, [sp, #12]
 80039ae:	466b      	mov	r3, sp
 80039b0:	0018      	movs	r0, r3
 80039b2:	0022      	movs	r2, r4
 80039b4:	3208      	adds	r2, #8
 80039b6:	0013      	movs	r3, r2
 80039b8:	2208      	movs	r2, #8
 80039ba:	0019      	movs	r1, r3
 80039bc:	f004 ff46 	bl	800884c <memcpy>
 80039c0:	6822      	ldr	r2, [r4, #0]
 80039c2:	6863      	ldr	r3, [r4, #4]
 80039c4:	0028      	movs	r0, r5
 80039c6:	f7ff feab 	bl	8003720 <update_normalization>
  double scaled_remainder = apply_scaling(remainder, account_for_precision);
 80039ca:	2310      	movs	r3, #16
 80039cc:	199b      	adds	r3, r3, r6
 80039ce:	19dc      	adds	r4, r3, r7
 80039d0:	6ebd      	ldr	r5, [r7, #104]	@ 0x68
 80039d2:	6efe      	ldr	r6, [r7, #108]	@ 0x6c
 80039d4:	466b      	mov	r3, sp
 80039d6:	0018      	movs	r0, r3
 80039d8:	0023      	movs	r3, r4
 80039da:	3308      	adds	r3, #8
 80039dc:	2208      	movs	r2, #8
 80039de:	0019      	movs	r1, r3
 80039e0:	f004 ff34 	bl	800884c <memcpy>
 80039e4:	6822      	ldr	r2, [r4, #0]
 80039e6:	6863      	ldr	r3, [r4, #4]
 80039e8:	0028      	movs	r0, r5
 80039ea:	0031      	movs	r1, r6
 80039ec:	f7ff fe42 	bl	8003674 <apply_scaling>
 80039f0:	0002      	movs	r2, r0
 80039f2:	000b      	movs	r3, r1
 80039f4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80039f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  double rounding_threshold = 0.5;
 80039f8:	2200      	movs	r2, #0
 80039fa:	4b47      	ldr	r3, [pc, #284]	@ (8003b18 <get_normalized_components+0x2c8>)
 80039fc:	653a      	str	r2, [r7, #80]	@ 0x50
 80039fe:	657b      	str	r3, [r7, #84]	@ 0x54

  components.fractional = (int_fast64_t) scaled_remainder; // when precision == 0, the assigned value should be 0
 8003a00:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003a02:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003a04:	f7fc fcc4 	bl	8000390 <__aeabi_d2lz>
 8003a08:	0002      	movs	r2, r0
 8003a0a:	000b      	movs	r3, r1
 8003a0c:	2420      	movs	r4, #32
 8003a0e:	2518      	movs	r5, #24
 8003a10:	1961      	adds	r1, r4, r5
 8003a12:	19c9      	adds	r1, r1, r7
 8003a14:	608a      	str	r2, [r1, #8]
 8003a16:	60cb      	str	r3, [r1, #12]
  scaled_remainder -= (double) components.fractional; //when precision == 0, this will not change scaled_remainder
 8003a18:	1963      	adds	r3, r4, r5
 8003a1a:	19db      	adds	r3, r3, r7
 8003a1c:	689a      	ldr	r2, [r3, #8]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	0010      	movs	r0, r2
 8003a22:	0019      	movs	r1, r3
 8003a24:	f7fc fcee 	bl	8000404 <__aeabi_l2d>
 8003a28:	0002      	movs	r2, r0
 8003a2a:	000b      	movs	r3, r1
 8003a2c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003a2e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003a30:	f7fe f858 	bl	8001ae4 <__aeabi_dsub>
 8003a34:	0002      	movs	r2, r0
 8003a36:	000b      	movs	r3, r1
 8003a38:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a3a:	65fb      	str	r3, [r7, #92]	@ 0x5c

  components.fractional += (scaled_remainder >= rounding_threshold);
 8003a3c:	1963      	adds	r3, r4, r5
 8003a3e:	19db      	adds	r3, r3, r7
 8003a40:	689c      	ldr	r4, [r3, #8]
 8003a42:	68dd      	ldr	r5, [r3, #12]
 8003a44:	2301      	movs	r3, #1
 8003a46:	1c1e      	adds	r6, r3, #0
 8003a48:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003a4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a4c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003a4e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003a50:	f7fc fc22 	bl	8000298 <__aeabi_dcmpge>
 8003a54:	1e03      	subs	r3, r0, #0
 8003a56:	d101      	bne.n	8003a5c <get_normalized_components+0x20c>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	1c1e      	adds	r6, r3, #0
 8003a5c:	b2f3      	uxtb	r3, r6
 8003a5e:	613b      	str	r3, [r7, #16]
 8003a60:	2300      	movs	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	1912      	adds	r2, r2, r4
 8003a6a:	416b      	adcs	r3, r5
 8003a6c:	2420      	movs	r4, #32
 8003a6e:	2518      	movs	r5, #24
 8003a70:	1961      	adds	r1, r4, r5
 8003a72:	19c9      	adds	r1, r1, r7
 8003a74:	608a      	str	r2, [r1, #8]
 8003a76:	60cb      	str	r3, [r1, #12]
  if (scaled_remainder == rounding_threshold) {
 8003a78:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003a7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a7c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003a7e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003a80:	f7fc fbe6 	bl	8000250 <__aeabi_dcmpeq>
 8003a84:	1e03      	subs	r3, r0, #0
 8003a86:	d011      	beq.n	8003aac <get_normalized_components+0x25c>
    // banker's rounding: Round towards the even number (making the mean error 0)
    components.fractional &= ~((int_fast64_t) 0x1);
 8003a88:	0020      	movs	r0, r4
 8003a8a:	1943      	adds	r3, r0, r5
 8003a8c:	19db      	adds	r3, r3, r7
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	2101      	movs	r1, #1
 8003a94:	0014      	movs	r4, r2
 8003a96:	438c      	bics	r4, r1
 8003a98:	60bc      	str	r4, [r7, #8]
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	438b      	bics	r3, r1
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	1943      	adds	r3, r0, r5
 8003aa2:	19db      	adds	r3, r3, r7
 8003aa4:	68b9      	ldr	r1, [r7, #8]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	6099      	str	r1, [r3, #8]
 8003aaa:	60da      	str	r2, [r3, #12]
  // handle rollover, e.g. the case of 0.99 with precision 1 becoming (0,100),
  // and must then be corrected into (1, 0).
  // Note: for precision = 0, this will "translate" the rounding effect from
  // the fractional part to the integral part where it should actually be
  // felt (as prec_power_of_10 is 1)
  if ((double) components.fractional >= prec_power_of_10) {
 8003aac:	2420      	movs	r4, #32
 8003aae:	2518      	movs	r5, #24
 8003ab0:	1963      	adds	r3, r4, r5
 8003ab2:	19db      	adds	r3, r3, r7
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	0010      	movs	r0, r2
 8003aba:	0019      	movs	r1, r3
 8003abc:	f7fc fca2 	bl	8000404 <__aeabi_l2d>
 8003ac0:	0002      	movs	r2, r0
 8003ac2:	000b      	movs	r3, r1
 8003ac4:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003ac6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003ac8:	f7fc fbd2 	bl	8000270 <__aeabi_dcmple>
 8003acc:	1e03      	subs	r3, r0, #0
 8003ace:	d011      	beq.n	8003af4 <get_normalized_components+0x2a4>
    components.fractional = 0;
 8003ad0:	1963      	adds	r3, r4, r5
 8003ad2:	19d9      	adds	r1, r3, r7
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	608a      	str	r2, [r1, #8]
 8003ada:	60cb      	str	r3, [r1, #12]
    ++components.integral;
 8003adc:	1963      	adds	r3, r4, r5
 8003ade:	19db      	adds	r3, r3, r7
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	1812      	adds	r2, r2, r0
 8003aea:	414b      	adcs	r3, r1
 8003aec:	1961      	adds	r1, r4, r5
 8003aee:	19c9      	adds	r1, r1, r7
 8003af0:	600a      	str	r2, [r1, #0]
 8003af2:	604b      	str	r3, [r1, #4]
  }
  return components;
 8003af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003af6:	2320      	movs	r3, #32
 8003af8:	2118      	movs	r1, #24
 8003afa:	185b      	adds	r3, r3, r1
 8003afc:	19db      	adds	r3, r3, r7
 8003afe:	0010      	movs	r0, r2
 8003b00:	0019      	movs	r1, r3
 8003b02:	2318      	movs	r3, #24
 8003b04:	001a      	movs	r2, r3
 8003b06:	f004 fea1 	bl	800884c <memcpy>
}
 8003b0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	b021      	add	sp, #132	@ 0x84
 8003b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b12:	46c0      	nop			@ (mov r8, r8)
 8003b14:	08008940 	.word	0x08008940
 8003b18:	3fe00000 	.word	0x3fe00000

08003b1c <print_broken_up_decimal>:
#endif // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS

static void print_broken_up_decimal(
  struct double_components number_, output_gadget_t* output, printf_size_t precision,
  printf_size_t width, printf_flags_t flags, char *buf, printf_size_t len)
{
 8003b1c:	b084      	sub	sp, #16
 8003b1e:	b5b0      	push	{r4, r5, r7, lr}
 8003b20:	b086      	sub	sp, #24
 8003b22:	af02      	add	r7, sp, #8
 8003b24:	2520      	movs	r5, #32
 8003b26:	197c      	adds	r4, r7, r5
 8003b28:	6020      	str	r0, [r4, #0]
 8003b2a:	6061      	str	r1, [r4, #4]
 8003b2c:	60a2      	str	r2, [r4, #8]
 8003b2e:	60e3      	str	r3, [r4, #12]
  if (precision != 0U) {
 8003b30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d100      	bne.n	8003b38 <print_broken_up_decimal+0x1c>
 8003b36:	e08c      	b.n	8003c52 <print_broken_up_decimal+0x136>
    // do fractional part, as an unsigned number

    printf_size_t count = precision;
 8003b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b3a:	60fb      	str	r3, [r7, #12]

    // %g/%G mandates we skip the trailing 0 digits...
    if ((flags & FLAGS_ADAPT_EXP) && !(flags & FLAGS_HASH) && (number_.fractional > 0)) {
 8003b3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b3e:	2380      	movs	r3, #128	@ 0x80
 8003b40:	015b      	lsls	r3, r3, #5
 8003b42:	4013      	ands	r3, r2
 8003b44:	d02a      	beq.n	8003b9c <print_broken_up_decimal+0x80>
 8003b46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b48:	2210      	movs	r2, #16
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d126      	bne.n	8003b9c <print_broken_up_decimal+0x80>
 8003b4e:	197b      	adds	r3, r7, r5
 8003b50:	689a      	ldr	r2, [r3, #8]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	dc02      	bgt.n	8003b5e <print_broken_up_decimal+0x42>
 8003b58:	d120      	bne.n	8003b9c <print_broken_up_decimal+0x80>
 8003b5a:	2a00      	cmp	r2, #0
 8003b5c:	d01e      	beq.n	8003b9c <print_broken_up_decimal+0x80>
      while(true) {
        int_fast64_t digit = number_.fractional % 10U;
 8003b5e:	2420      	movs	r4, #32
 8003b60:	193b      	adds	r3, r7, r4
 8003b62:	6898      	ldr	r0, [r3, #8]
 8003b64:	68d9      	ldr	r1, [r3, #12]
 8003b66:	220a      	movs	r2, #10
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f7fc fb9f 	bl	80002ac <__aeabi_ldivmod>
 8003b6e:	603a      	str	r2, [r7, #0]
 8003b70:	607b      	str	r3, [r7, #4]
        if (digit != 0) {
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	d10f      	bne.n	8003b9a <print_broken_up_decimal+0x7e>
          break;
        }
        --count;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	60fb      	str	r3, [r7, #12]
        number_.fractional /= 10U;
 8003b80:	193b      	adds	r3, r7, r4
 8003b82:	6898      	ldr	r0, [r3, #8]
 8003b84:	68d9      	ldr	r1, [r3, #12]
 8003b86:	220a      	movs	r2, #10
 8003b88:	2300      	movs	r3, #0
 8003b8a:	f7fc fb8f 	bl	80002ac <__aeabi_ldivmod>
 8003b8e:	0002      	movs	r2, r0
 8003b90:	000b      	movs	r3, r1
 8003b92:	1939      	adds	r1, r7, r4
 8003b94:	608a      	str	r2, [r1, #8]
 8003b96:	60cb      	str	r3, [r1, #12]
      while(true) {
 8003b98:	e7e1      	b.n	8003b5e <print_broken_up_decimal+0x42>
          break;
 8003b9a:	46c0      	nop			@ (mov r8, r8)
      }
      // ... and even the decimal point if there are no
      // non-zero fractional part digits (see below)
    }

    if (number_.fractional > 0 || !(flags & FLAGS_ADAPT_EXP) || (flags & FLAGS_HASH) ) {
 8003b9c:	2320      	movs	r3, #32
 8003b9e:	18fb      	adds	r3, r7, r3
 8003ba0:	689a      	ldr	r2, [r3, #8]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	dc33      	bgt.n	8003c10 <print_broken_up_decimal+0xf4>
 8003ba8:	d101      	bne.n	8003bae <print_broken_up_decimal+0x92>
 8003baa:	2a00      	cmp	r2, #0
 8003bac:	d130      	bne.n	8003c10 <print_broken_up_decimal+0xf4>
 8003bae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bb0:	2380      	movs	r3, #128	@ 0x80
 8003bb2:	015b      	lsls	r3, r3, #5
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	d02b      	beq.n	8003c10 <print_broken_up_decimal+0xf4>
 8003bb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bba:	2210      	movs	r2, #16
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	d100      	bne.n	8003bc2 <print_broken_up_decimal+0xa6>
 8003bc0:	e079      	b.n	8003cb6 <print_broken_up_decimal+0x19a>
      while (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8003bc2:	e025      	b.n	8003c10 <print_broken_up_decimal+0xf4>
        --count;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	60fb      	str	r3, [r7, #12]
        buf[len++] = (char)('0' + number_.fractional % 10U);
 8003bca:	2420      	movs	r4, #32
 8003bcc:	193b      	adds	r3, r7, r4
 8003bce:	6898      	ldr	r0, [r3, #8]
 8003bd0:	68d9      	ldr	r1, [r3, #12]
 8003bd2:	220a      	movs	r2, #10
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f7fc fb69 	bl	80002ac <__aeabi_ldivmod>
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bde:	1c59      	adds	r1, r3, #1
 8003be0:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8003be2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003be4:	18cb      	adds	r3, r1, r3
 8003be6:	3230      	adds	r2, #48	@ 0x30
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	701a      	strb	r2, [r3, #0]
        if (!(number_.fractional /= 10U)) {
 8003bec:	193b      	adds	r3, r7, r4
 8003bee:	6898      	ldr	r0, [r3, #8]
 8003bf0:	68d9      	ldr	r1, [r3, #12]
 8003bf2:	220a      	movs	r2, #10
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f7fc fb59 	bl	80002ac <__aeabi_ldivmod>
 8003bfa:	0002      	movs	r2, r0
 8003bfc:	000b      	movs	r3, r1
 8003bfe:	1939      	adds	r1, r7, r4
 8003c00:	608a      	str	r2, [r1, #8]
 8003c02:	60cb      	str	r3, [r1, #12]
 8003c04:	193b      	adds	r3, r7, r4
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	0011      	movs	r1, r2
 8003c0c:	4319      	orrs	r1, r3
 8003c0e:	d003      	beq.n	8003c18 <print_broken_up_decimal+0xfc>
      while (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8003c10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c12:	2b1f      	cmp	r3, #31
 8003c14:	d9d6      	bls.n	8003bc4 <print_broken_up_decimal+0xa8>
 8003c16:	e00b      	b.n	8003c30 <print_broken_up_decimal+0x114>
          break;
 8003c18:	46c0      	nop			@ (mov r8, r8)
        }
      }
      // add extra 0s
      while ((len < PRINTF_DECIMAL_BUFFER_SIZE) && (count > 0U)) {
 8003c1a:	e009      	b.n	8003c30 <print_broken_up_decimal+0x114>
        buf[len++] = '0';
 8003c1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003c22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c24:	18d3      	adds	r3, r2, r3
 8003c26:	2230      	movs	r2, #48	@ 0x30
 8003c28:	701a      	strb	r2, [r3, #0]
        --count;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	60fb      	str	r3, [r7, #12]
      while ((len < PRINTF_DECIMAL_BUFFER_SIZE) && (count > 0U)) {
 8003c30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c32:	2b1f      	cmp	r3, #31
 8003c34:	d802      	bhi.n	8003c3c <print_broken_up_decimal+0x120>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1ef      	bne.n	8003c1c <print_broken_up_decimal+0x100>
      }
      if (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8003c3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c3e:	2b1f      	cmp	r3, #31
 8003c40:	d839      	bhi.n	8003cb6 <print_broken_up_decimal+0x19a>
        buf[len++] = '.';
 8003c42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003c48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c4a:	18d3      	adds	r3, r2, r3
 8003c4c:	222e      	movs	r2, #46	@ 0x2e
 8003c4e:	701a      	strb	r2, [r3, #0]
 8003c50:	e031      	b.n	8003cb6 <print_broken_up_decimal+0x19a>
      }
    }
  }
  else {
    if ((flags & FLAGS_HASH) && (len < PRINTF_DECIMAL_BUFFER_SIZE)) {
 8003c52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c54:	2210      	movs	r2, #16
 8003c56:	4013      	ands	r3, r2
 8003c58:	d02d      	beq.n	8003cb6 <print_broken_up_decimal+0x19a>
 8003c5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c5c:	2b1f      	cmp	r3, #31
 8003c5e:	d82a      	bhi.n	8003cb6 <print_broken_up_decimal+0x19a>
      buf[len++] = '.';
 8003c60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003c66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c68:	18d3      	adds	r3, r2, r3
 8003c6a:	222e      	movs	r2, #46	@ 0x2e
 8003c6c:	701a      	strb	r2, [r3, #0]
    }
  }

  // Write the integer part of the number (it comes after the fractional
  // since the character order is reversed)
  while (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8003c6e:	e022      	b.n	8003cb6 <print_broken_up_decimal+0x19a>
    buf[len++] = (char)('0' + (number_.integral % 10));
 8003c70:	2420      	movs	r4, #32
 8003c72:	193b      	adds	r3, r7, r4
 8003c74:	6818      	ldr	r0, [r3, #0]
 8003c76:	6859      	ldr	r1, [r3, #4]
 8003c78:	220a      	movs	r2, #10
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	f7fc fb16 	bl	80002ac <__aeabi_ldivmod>
 8003c80:	b2d2      	uxtb	r2, r2
 8003c82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c84:	1c59      	adds	r1, r3, #1
 8003c86:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8003c88:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003c8a:	18cb      	adds	r3, r1, r3
 8003c8c:	3230      	adds	r2, #48	@ 0x30
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	701a      	strb	r2, [r3, #0]
    if (!(number_.integral /= 10)) {
 8003c92:	193b      	adds	r3, r7, r4
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	6859      	ldr	r1, [r3, #4]
 8003c98:	220a      	movs	r2, #10
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	f7fc fb06 	bl	80002ac <__aeabi_ldivmod>
 8003ca0:	0002      	movs	r2, r0
 8003ca2:	000b      	movs	r3, r1
 8003ca4:	1939      	adds	r1, r7, r4
 8003ca6:	600a      	str	r2, [r1, #0]
 8003ca8:	604b      	str	r3, [r1, #4]
 8003caa:	193b      	adds	r3, r7, r4
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	0011      	movs	r1, r2
 8003cb2:	4319      	orrs	r1, r3
 8003cb4:	d003      	beq.n	8003cbe <print_broken_up_decimal+0x1a2>
  while (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8003cb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cb8:	2b1f      	cmp	r3, #31
 8003cba:	d9d9      	bls.n	8003c70 <print_broken_up_decimal+0x154>
 8003cbc:	e000      	b.n	8003cc0 <print_broken_up_decimal+0x1a4>
      break;
 8003cbe:	46c0      	nop			@ (mov r8, r8)
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8003cc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	d121      	bne.n	8003d0c <print_broken_up_decimal+0x1f0>
 8003cc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cca:	2201      	movs	r2, #1
 8003ccc:	4013      	ands	r3, r2
 8003cce:	d01d      	beq.n	8003d0c <print_broken_up_decimal+0x1f0>
    if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003cd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d013      	beq.n	8003cfe <print_broken_up_decimal+0x1e2>
 8003cd6:	2320      	movs	r3, #32
 8003cd8:	18fb      	adds	r3, r7, r3
 8003cda:	7c1b      	ldrb	r3, [r3, #16]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d103      	bne.n	8003ce8 <print_broken_up_decimal+0x1cc>
 8003ce0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ce2:	220c      	movs	r2, #12
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	d00a      	beq.n	8003cfe <print_broken_up_decimal+0x1e2>
      width--;
 8003ce8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cea:	3b01      	subs	r3, #1
 8003cec:	643b      	str	r3, [r7, #64]	@ 0x40
    }
    while ((len < width) && (len < PRINTF_DECIMAL_BUFFER_SIZE)) {
 8003cee:	e006      	b.n	8003cfe <print_broken_up_decimal+0x1e2>
      buf[len++] = '0';
 8003cf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003cf6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cf8:	18d3      	adds	r3, r2, r3
 8003cfa:	2230      	movs	r2, #48	@ 0x30
 8003cfc:	701a      	strb	r2, [r3, #0]
    while ((len < width) && (len < PRINTF_DECIMAL_BUFFER_SIZE)) {
 8003cfe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d202      	bcs.n	8003d0c <print_broken_up_decimal+0x1f0>
 8003d06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d08:	2b1f      	cmp	r3, #31
 8003d0a:	d9f1      	bls.n	8003cf0 <print_broken_up_decimal+0x1d4>
    }
  }

  if (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8003d0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d0e:	2b1f      	cmp	r3, #31
 8003d10:	d823      	bhi.n	8003d5a <print_broken_up_decimal+0x23e>
    if (number_.is_negative) {
 8003d12:	2320      	movs	r3, #32
 8003d14:	18fb      	adds	r3, r7, r3
 8003d16:	7c1b      	ldrb	r3, [r3, #16]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d007      	beq.n	8003d2c <print_broken_up_decimal+0x210>
      buf[len++] = '-';
 8003d1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d1e:	1c5a      	adds	r2, r3, #1
 8003d20:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003d22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d24:	18d3      	adds	r3, r2, r3
 8003d26:	222d      	movs	r2, #45	@ 0x2d
 8003d28:	701a      	strb	r2, [r3, #0]
 8003d2a:	e016      	b.n	8003d5a <print_broken_up_decimal+0x23e>
    }
    else if (flags & FLAGS_PLUS) {
 8003d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d2e:	2204      	movs	r2, #4
 8003d30:	4013      	ands	r3, r2
 8003d32:	d007      	beq.n	8003d44 <print_broken_up_decimal+0x228>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003d34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003d3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d3c:	18d3      	adds	r3, r2, r3
 8003d3e:	222b      	movs	r2, #43	@ 0x2b
 8003d40:	701a      	strb	r2, [r3, #0]
 8003d42:	e00a      	b.n	8003d5a <print_broken_up_decimal+0x23e>
    }
    else if (flags & FLAGS_SPACE) {
 8003d44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d46:	2208      	movs	r2, #8
 8003d48:	4013      	ands	r3, r2
 8003d4a:	d006      	beq.n	8003d5a <print_broken_up_decimal+0x23e>
      buf[len++] = ' ';
 8003d4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003d52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d54:	18d3      	adds	r3, r2, r3
 8003d56:	2220      	movs	r2, #32
 8003d58:	701a      	strb	r2, [r3, #0]
    }
  }

  out_rev_(output, buf, len, width, flags);
 8003d5a:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8003d5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d5e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003d60:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003d62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	0023      	movs	r3, r4
 8003d68:	f7ff f963 	bl	8003032 <out_rev_>
}
 8003d6c:	46c0      	nop			@ (mov r8, r8)
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	b004      	add	sp, #16
 8003d72:	bcb0      	pop	{r4, r5, r7}
 8003d74:	bc08      	pop	{r3}
 8003d76:	b004      	add	sp, #16
 8003d78:	4718      	bx	r3

08003d7a <print_decimal_number>:

      // internal ftoa for fixed decimal floating point
static void print_decimal_number(output_gadget_t* output, double number, printf_size_t precision, printf_size_t width, printf_flags_t flags, char* buf, printf_size_t len)
{
 8003d7a:	b590      	push	{r4, r7, lr}
 8003d7c:	b093      	sub	sp, #76	@ 0x4c
 8003d7e:	af08      	add	r7, sp, #32
 8003d80:	60f8      	str	r0, [r7, #12]
 8003d82:	603a      	str	r2, [r7, #0]
 8003d84:	607b      	str	r3, [r7, #4]
  struct double_components value_ = get_components(number, precision);
 8003d86:	2410      	movs	r4, #16
 8003d88:	1938      	adds	r0, r7, r4
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d90:	9100      	str	r1, [sp, #0]
 8003d92:	f7ff fb39 	bl	8003408 <get_components>
  print_broken_up_decimal(value_, output, precision, width, flags, buf, len);
 8003d96:	193c      	adds	r4, r7, r4
 8003d98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d9a:	9307      	str	r3, [sp, #28]
 8003d9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d9e:	9306      	str	r3, [sp, #24]
 8003da0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003da2:	9305      	str	r3, [sp, #20]
 8003da4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003da6:	9304      	str	r3, [sp, #16]
 8003da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003daa:	9303      	str	r3, [sp, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	9302      	str	r3, [sp, #8]
 8003db0:	466b      	mov	r3, sp
 8003db2:	0018      	movs	r0, r3
 8003db4:	0023      	movs	r3, r4
 8003db6:	3310      	adds	r3, #16
 8003db8:	2208      	movs	r2, #8
 8003dba:	0019      	movs	r1, r3
 8003dbc:	f004 fd46 	bl	800884c <memcpy>
 8003dc0:	6820      	ldr	r0, [r4, #0]
 8003dc2:	6861      	ldr	r1, [r4, #4]
 8003dc4:	68a2      	ldr	r2, [r4, #8]
 8003dc6:	68e3      	ldr	r3, [r4, #12]
 8003dc8:	f7ff fea8 	bl	8003b1c <print_broken_up_decimal>
}
 8003dcc:	46c0      	nop			@ (mov r8, r8)
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	b00b      	add	sp, #44	@ 0x2c
 8003dd2:	bd90      	pop	{r4, r7, pc}

08003dd4 <bastardized_floor>:
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS

// A floor function - but one which only works for numbers whose
// floor value is representable by an int.
static int bastardized_floor(double x)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6038      	str	r0, [r7, #0]
 8003ddc:	6079      	str	r1, [r7, #4]
  if (x >= 0) { return (int) x; }
 8003dde:	2200      	movs	r2, #0
 8003de0:	2300      	movs	r3, #0
 8003de2:	6838      	ldr	r0, [r7, #0]
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	f7fc fa57 	bl	8000298 <__aeabi_dcmpge>
 8003dea:	1e03      	subs	r3, r0, #0
 8003dec:	d005      	beq.n	8003dfa <bastardized_floor+0x26>
 8003dee:	6838      	ldr	r0, [r7, #0]
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	f7fe fa13 	bl	800221c <__aeabi_d2iz>
 8003df6:	0003      	movs	r3, r0
 8003df8:	e014      	b.n	8003e24 <bastardized_floor+0x50>
  int n = (int) x;
 8003dfa:	6838      	ldr	r0, [r7, #0]
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	f7fe fa0d 	bl	800221c <__aeabi_d2iz>
 8003e02:	0003      	movs	r3, r0
 8003e04:	60fb      	str	r3, [r7, #12]
  return ( ((double) n) == x ) ? n : n-1;
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f7fe fa44 	bl	8002294 <__aeabi_i2d>
 8003e0c:	0002      	movs	r2, r0
 8003e0e:	000b      	movs	r3, r1
 8003e10:	6838      	ldr	r0, [r7, #0]
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	f7fc fa1c 	bl	8000250 <__aeabi_dcmpeq>
 8003e18:	1e03      	subs	r3, r0, #0
 8003e1a:	d102      	bne.n	8003e22 <bastardized_floor+0x4e>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	e000      	b.n	8003e24 <bastardized_floor+0x50>
 8003e22:	68fb      	ldr	r3, [r7, #12]
}
 8003e24:	0018      	movs	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	b004      	add	sp, #16
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <log10_of_positive>:

// Computes the base-10 logarithm of the input number - which must be an actual
// positive number (not infinity or NaN, nor a sub-normal)
static double log10_of_positive(double positive_number)
{
 8003e2c:	b5b0      	push	{r4, r5, r7, lr}
 8003e2e:	b08a      	sub	sp, #40	@ 0x28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60b8      	str	r0, [r7, #8]
 8003e34:	60f9      	str	r1, [r7, #12]
  // our input number, and need only solve log_10(M) for M between 1 and 2 (as
  // the base-2 mantissa is always 1-point-something). In that limited range, a
  // Taylor series expansion of log10(x) should serve us well enough; and we'll
  // take the mid-point, 1.5, as the point of expansion.

  double_with_bit_access dwba = get_bit_access(positive_number);
 8003e36:	2308      	movs	r3, #8
 8003e38:	2208      	movs	r2, #8
 8003e3a:	189b      	adds	r3, r3, r2
 8003e3c:	19d9      	adds	r1, r3, r7
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	0008      	movs	r0, r1
 8003e44:	f7fe ffc2 	bl	8002dcc <get_bit_access>
  // based on the algorithm by David Gay (https://www.ampl.com/netlib/fp/dtoa.c)
  int exp2 = get_exp2(dwba);
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	0010      	movs	r0, r2
 8003e4e:	0019      	movs	r1, r3
 8003e50:	f7fe ffe6 	bl	8002e20 <get_exp2>
 8003e54:	0003      	movs	r3, r0
 8003e56:	627b      	str	r3, [r7, #36]	@ 0x24
  // drop the exponent, so dwba.F comes into the range [1,2)
  dwba.U = (dwba.U & (((double_uint_t) (1) << DOUBLE_STORED_MANTISSA_BITS) - 1U)) |
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	0010      	movs	r0, r2
 8003e60:	4388      	bics	r0, r1
 8003e62:	0004      	movs	r4, r0
 8003e64:	031b      	lsls	r3, r3, #12
 8003e66:	0b1d      	lsrs	r5, r3, #12
 8003e68:	2300      	movs	r3, #0
 8003e6a:	4323      	orrs	r3, r4
 8003e6c:	603b      	str	r3, [r7, #0]
 8003e6e:	4b37      	ldr	r3, [pc, #220]	@ (8003f4c <log10_of_positive+0x120>)
 8003e70:	432b      	orrs	r3, r5
 8003e72:	607b      	str	r3, [r7, #4]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	687c      	ldr	r4, [r7, #4]
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	617c      	str	r4, [r7, #20]
           ((double_uint_t) DOUBLE_BASE_EXPONENT << DOUBLE_STORED_MANTISSA_BITS);
  double z = (dwba.F - 1.5);
 8003e7c:	6938      	ldr	r0, [r7, #16]
 8003e7e:	6979      	ldr	r1, [r7, #20]
 8003e80:	2200      	movs	r2, #0
 8003e82:	4b33      	ldr	r3, [pc, #204]	@ (8003f50 <log10_of_positive+0x124>)
 8003e84:	f7fd fe2e 	bl	8001ae4 <__aeabi_dsub>
 8003e88:	0002      	movs	r2, r0
 8003e8a:	000b      	movs	r3, r1
 8003e8c:	61ba      	str	r2, [r7, #24]
 8003e8e:	61fb      	str	r3, [r7, #28]
  return (
    // Taylor expansion around 1.5:
    0.1760912590556812420           // Expansion term 0: ln(1.5)            / ln(10)
    + z     * 0.2895296546021678851 // Expansion term 1: (M - 1.5)   * 2/3  / ln(10)
 8003e90:	4a30      	ldr	r2, [pc, #192]	@ (8003f54 <log10_of_positive+0x128>)
 8003e92:	4b31      	ldr	r3, [pc, #196]	@ (8003f58 <log10_of_positive+0x12c>)
 8003e94:	69b8      	ldr	r0, [r7, #24]
 8003e96:	69f9      	ldr	r1, [r7, #28]
 8003e98:	f7fd fb5c 	bl	8001554 <__aeabi_dmul>
 8003e9c:	0002      	movs	r2, r0
 8003e9e:	000b      	movs	r3, r1
 8003ea0:	0010      	movs	r0, r2
 8003ea2:	0019      	movs	r1, r3
 8003ea4:	4a2d      	ldr	r2, [pc, #180]	@ (8003f5c <log10_of_positive+0x130>)
 8003ea6:	4b2e      	ldr	r3, [pc, #184]	@ (8003f60 <log10_of_positive+0x134>)
 8003ea8:	f7fc fbac 	bl	8000604 <__aeabi_dadd>
 8003eac:	0002      	movs	r2, r0
 8003eae:	000b      	movs	r3, r1
 8003eb0:	0014      	movs	r4, r2
 8003eb2:	001d      	movs	r5, r3
#if PRINTF_LOG10_TAYLOR_TERMS > 2
    - z*z   * 0.0965098848673892950 // Expansion term 2: (M - 1.5)^2 * 2/9  / ln(10)
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	69b8      	ldr	r0, [r7, #24]
 8003eba:	69f9      	ldr	r1, [r7, #28]
 8003ebc:	f7fd fb4a 	bl	8001554 <__aeabi_dmul>
 8003ec0:	0002      	movs	r2, r0
 8003ec2:	000b      	movs	r3, r1
 8003ec4:	0010      	movs	r0, r2
 8003ec6:	0019      	movs	r1, r3
 8003ec8:	4a26      	ldr	r2, [pc, #152]	@ (8003f64 <log10_of_positive+0x138>)
 8003eca:	4b27      	ldr	r3, [pc, #156]	@ (8003f68 <log10_of_positive+0x13c>)
 8003ecc:	f7fd fb42 	bl	8001554 <__aeabi_dmul>
 8003ed0:	0002      	movs	r2, r0
 8003ed2:	000b      	movs	r3, r1
 8003ed4:	0020      	movs	r0, r4
 8003ed6:	0029      	movs	r1, r5
 8003ed8:	f7fd fe04 	bl	8001ae4 <__aeabi_dsub>
 8003edc:	0002      	movs	r2, r0
 8003ede:	000b      	movs	r3, r1
 8003ee0:	0014      	movs	r4, r2
 8003ee2:	001d      	movs	r5, r3
#if PRINTF_LOG10_TAYLOR_TERMS > 3
    + z*z*z * 0.0428932821632841311 // Expansion term 2: (M - 1.5)^3 * 8/81 / ln(10)
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	69b8      	ldr	r0, [r7, #24]
 8003eea:	69f9      	ldr	r1, [r7, #28]
 8003eec:	f7fd fb32 	bl	8001554 <__aeabi_dmul>
 8003ef0:	0002      	movs	r2, r0
 8003ef2:	000b      	movs	r3, r1
 8003ef4:	0010      	movs	r0, r2
 8003ef6:	0019      	movs	r1, r3
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	f7fd fb2a 	bl	8001554 <__aeabi_dmul>
 8003f00:	0002      	movs	r2, r0
 8003f02:	000b      	movs	r3, r1
 8003f04:	0010      	movs	r0, r2
 8003f06:	0019      	movs	r1, r3
 8003f08:	4a18      	ldr	r2, [pc, #96]	@ (8003f6c <log10_of_positive+0x140>)
 8003f0a:	4b19      	ldr	r3, [pc, #100]	@ (8003f70 <log10_of_positive+0x144>)
 8003f0c:	f7fd fb22 	bl	8001554 <__aeabi_dmul>
 8003f10:	0002      	movs	r2, r0
 8003f12:	000b      	movs	r3, r1
 8003f14:	0020      	movs	r0, r4
 8003f16:	0029      	movs	r1, r5
 8003f18:	f7fc fb74 	bl	8000604 <__aeabi_dadd>
 8003f1c:	0002      	movs	r2, r0
 8003f1e:	000b      	movs	r3, r1
 8003f20:	0014      	movs	r4, r2
 8003f22:	001d      	movs	r5, r3
#endif
#endif
    // exact log_2 of the exponent x, with logarithm base change
    + exp2 * 0.30102999566398119521 // = exp2 * log_10(2) = exp2 * ln(2)/ln(10)
 8003f24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f26:	f7fe f9b5 	bl	8002294 <__aeabi_i2d>
 8003f2a:	4a12      	ldr	r2, [pc, #72]	@ (8003f74 <log10_of_positive+0x148>)
 8003f2c:	4b12      	ldr	r3, [pc, #72]	@ (8003f78 <log10_of_positive+0x14c>)
 8003f2e:	f7fd fb11 	bl	8001554 <__aeabi_dmul>
 8003f32:	0002      	movs	r2, r0
 8003f34:	000b      	movs	r3, r1
 8003f36:	0020      	movs	r0, r4
 8003f38:	0029      	movs	r1, r5
 8003f3a:	f7fc fb63 	bl	8000604 <__aeabi_dadd>
 8003f3e:	0002      	movs	r2, r0
 8003f40:	000b      	movs	r3, r1
  );
}
 8003f42:	0010      	movs	r0, r2
 8003f44:	0019      	movs	r1, r3
 8003f46:	46bd      	mov	sp, r7
 8003f48:	b00a      	add	sp, #40	@ 0x28
 8003f4a:	bdb0      	pop	{r4, r5, r7, pc}
 8003f4c:	3ff00000 	.word	0x3ff00000
 8003f50:	3ff80000 	.word	0x3ff80000
 8003f54:	636f435f 	.word	0x636f435f
 8003f58:	3fd287a7 	.word	0x3fd287a7
 8003f5c:	8b60b7fc 	.word	0x8b60b7fc
 8003f60:	3fc68a28 	.word	0x3fc68a28
 8003f64:	2f3f047e 	.word	0x2f3f047e
 8003f68:	3fb8b4df 	.word	0x3fb8b4df
 8003f6c:	b83803ff 	.word	0xb83803ff
 8003f70:	3fa5f61b 	.word	0x3fa5f61b
 8003f74:	509f79ff 	.word	0x509f79ff
 8003f78:	3fd34413 	.word	0x3fd34413

08003f7c <pow10_of_int>:


static double pow10_of_int(int floored_exp10)
{
 8003f7c:	b5b0      	push	{r4, r5, r7, lr}
 8003f7e:	b08e      	sub	sp, #56	@ 0x38
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6178      	str	r0, [r7, #20]
  // A crude hack for avoiding undesired behavior with barely-normal or slightly-subnormal values.
  if (floored_exp10 == DOUBLE_MAX_SUBNORMAL_EXPONENT_OF_10) {
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	4a59      	ldr	r2, [pc, #356]	@ (80040ec <pow10_of_int+0x170>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d102      	bne.n	8003f92 <pow10_of_int+0x16>
    return DOUBLE_MAX_SUBNORMAL_POWER_OF_10;
 8003f8c:	4a58      	ldr	r2, [pc, #352]	@ (80040f0 <pow10_of_int+0x174>)
 8003f8e:	4b59      	ldr	r3, [pc, #356]	@ (80040f4 <pow10_of_int+0x178>)
 8003f90:	e0a6      	b.n	80040e0 <pow10_of_int+0x164>
  }
  // Compute 10^(floored_exp10) but (try to) make sure that doesn't overflow
  double_with_bit_access dwba;
  int exp2 = bastardized_floor(floored_exp10 * 3.321928094887362 + 0.5);
 8003f92:	6978      	ldr	r0, [r7, #20]
 8003f94:	f7fe f97e 	bl	8002294 <__aeabi_i2d>
 8003f98:	4a57      	ldr	r2, [pc, #348]	@ (80040f8 <pow10_of_int+0x17c>)
 8003f9a:	4b58      	ldr	r3, [pc, #352]	@ (80040fc <pow10_of_int+0x180>)
 8003f9c:	f7fd fada 	bl	8001554 <__aeabi_dmul>
 8003fa0:	0002      	movs	r2, r0
 8003fa2:	000b      	movs	r3, r1
 8003fa4:	0010      	movs	r0, r2
 8003fa6:	0019      	movs	r1, r3
 8003fa8:	2200      	movs	r2, #0
 8003faa:	4b55      	ldr	r3, [pc, #340]	@ (8004100 <pow10_of_int+0x184>)
 8003fac:	f7fc fb2a 	bl	8000604 <__aeabi_dadd>
 8003fb0:	0002      	movs	r2, r0
 8003fb2:	000b      	movs	r3, r1
 8003fb4:	0010      	movs	r0, r2
 8003fb6:	0019      	movs	r1, r3
 8003fb8:	f7ff ff0c 	bl	8003dd4 <bastardized_floor>
 8003fbc:	0003      	movs	r3, r0
 8003fbe:	637b      	str	r3, [r7, #52]	@ 0x34
  const double z  = floored_exp10 * 2.302585092994046 - exp2 * 0.6931471805599453;
 8003fc0:	6978      	ldr	r0, [r7, #20]
 8003fc2:	f7fe f967 	bl	8002294 <__aeabi_i2d>
 8003fc6:	4a4f      	ldr	r2, [pc, #316]	@ (8004104 <pow10_of_int+0x188>)
 8003fc8:	4b4f      	ldr	r3, [pc, #316]	@ (8004108 <pow10_of_int+0x18c>)
 8003fca:	f7fd fac3 	bl	8001554 <__aeabi_dmul>
 8003fce:	0002      	movs	r2, r0
 8003fd0:	000b      	movs	r3, r1
 8003fd2:	603a      	str	r2, [r7, #0]
 8003fd4:	607b      	str	r3, [r7, #4]
 8003fd6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003fd8:	f7fe f95c 	bl	8002294 <__aeabi_i2d>
 8003fdc:	4a4b      	ldr	r2, [pc, #300]	@ (800410c <pow10_of_int+0x190>)
 8003fde:	4b4c      	ldr	r3, [pc, #304]	@ (8004110 <pow10_of_int+0x194>)
 8003fe0:	f7fd fab8 	bl	8001554 <__aeabi_dmul>
 8003fe4:	0002      	movs	r2, r0
 8003fe6:	000b      	movs	r3, r1
 8003fe8:	6838      	ldr	r0, [r7, #0]
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	f7fd fd7a 	bl	8001ae4 <__aeabi_dsub>
 8003ff0:	0002      	movs	r2, r0
 8003ff2:	000b      	movs	r3, r1
 8003ff4:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const double z2 = z * z;
 8003ff8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ffc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ffe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004000:	f7fd faa8 	bl	8001554 <__aeabi_dmul>
 8004004:	0002      	movs	r2, r0
 8004006:	000b      	movs	r3, r1
 8004008:	623a      	str	r2, [r7, #32]
 800400a:	627b      	str	r3, [r7, #36]	@ 0x24
  dwba.U = ((double_uint_t)(exp2) + DOUBLE_BASE_EXPONENT) << DOUBLE_STORED_MANTISSA_BITS;
 800400c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800400e:	60bb      	str	r3, [r7, #8]
 8004010:	17db      	asrs	r3, r3, #31
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	4a3f      	ldr	r2, [pc, #252]	@ (8004114 <pow10_of_int+0x198>)
 8004016:	2300      	movs	r3, #0
 8004018:	68b8      	ldr	r0, [r7, #8]
 800401a:	68f9      	ldr	r1, [r7, #12]
 800401c:	1880      	adds	r0, r0, r2
 800401e:	4159      	adcs	r1, r3
 8004020:	0002      	movs	r2, r0
 8004022:	000b      	movs	r3, r1
 8004024:	0515      	lsls	r5, r2, #20
 8004026:	2300      	movs	r3, #0
 8004028:	001c      	movs	r4, r3
 800402a:	61bc      	str	r4, [r7, #24]
 800402c:	61fd      	str	r5, [r7, #28]
  // compute exp(z) using continued fractions,
  // see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  dwba.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800402e:	69bc      	ldr	r4, [r7, #24]
 8004030:	69fd      	ldr	r5, [r7, #28]
 8004032:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004034:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004036:	0002      	movs	r2, r0
 8004038:	000b      	movs	r3, r1
 800403a:	f7fc fae3 	bl	8000604 <__aeabi_dadd>
 800403e:	0002      	movs	r2, r0
 8004040:	000b      	movs	r3, r1
 8004042:	60ba      	str	r2, [r7, #8]
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800404a:	2000      	movs	r0, #0
 800404c:	2180      	movs	r1, #128	@ 0x80
 800404e:	05c9      	lsls	r1, r1, #23
 8004050:	f7fd fd48 	bl	8001ae4 <__aeabi_dsub>
 8004054:	0002      	movs	r2, r0
 8004056:	000b      	movs	r3, r1
 8004058:	603a      	str	r2, [r7, #0]
 800405a:	607b      	str	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	4b2e      	ldr	r3, [pc, #184]	@ (8004118 <pow10_of_int+0x19c>)
 8004060:	6a38      	ldr	r0, [r7, #32]
 8004062:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004064:	f7fc fe32 	bl	8000ccc <__aeabi_ddiv>
 8004068:	0002      	movs	r2, r0
 800406a:	000b      	movs	r3, r1
 800406c:	0010      	movs	r0, r2
 800406e:	0019      	movs	r1, r3
 8004070:	2200      	movs	r2, #0
 8004072:	4b2a      	ldr	r3, [pc, #168]	@ (800411c <pow10_of_int+0x1a0>)
 8004074:	f7fc fac6 	bl	8000604 <__aeabi_dadd>
 8004078:	0002      	movs	r2, r0
 800407a:	000b      	movs	r3, r1
 800407c:	6a38      	ldr	r0, [r7, #32]
 800407e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004080:	f7fc fe24 	bl	8000ccc <__aeabi_ddiv>
 8004084:	0002      	movs	r2, r0
 8004086:	000b      	movs	r3, r1
 8004088:	0010      	movs	r0, r2
 800408a:	0019      	movs	r1, r3
 800408c:	2200      	movs	r2, #0
 800408e:	4b24      	ldr	r3, [pc, #144]	@ (8004120 <pow10_of_int+0x1a4>)
 8004090:	f7fc fab8 	bl	8000604 <__aeabi_dadd>
 8004094:	0002      	movs	r2, r0
 8004096:	000b      	movs	r3, r1
 8004098:	6a38      	ldr	r0, [r7, #32]
 800409a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800409c:	f7fc fe16 	bl	8000ccc <__aeabi_ddiv>
 80040a0:	0002      	movs	r2, r0
 80040a2:	000b      	movs	r3, r1
 80040a4:	6838      	ldr	r0, [r7, #0]
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	f7fc faac 	bl	8000604 <__aeabi_dadd>
 80040ac:	0002      	movs	r2, r0
 80040ae:	000b      	movs	r3, r1
 80040b0:	68b8      	ldr	r0, [r7, #8]
 80040b2:	68f9      	ldr	r1, [r7, #12]
 80040b4:	f7fc fe0a 	bl	8000ccc <__aeabi_ddiv>
 80040b8:	0002      	movs	r2, r0
 80040ba:	000b      	movs	r3, r1
 80040bc:	0010      	movs	r0, r2
 80040be:	0019      	movs	r1, r3
 80040c0:	2200      	movs	r2, #0
 80040c2:	4b18      	ldr	r3, [pc, #96]	@ (8004124 <pow10_of_int+0x1a8>)
 80040c4:	f7fc fa9e 	bl	8000604 <__aeabi_dadd>
 80040c8:	0002      	movs	r2, r0
 80040ca:	000b      	movs	r3, r1
 80040cc:	0020      	movs	r0, r4
 80040ce:	0029      	movs	r1, r5
 80040d0:	f7fd fa40 	bl	8001554 <__aeabi_dmul>
 80040d4:	0002      	movs	r2, r0
 80040d6:	000b      	movs	r3, r1
 80040d8:	61ba      	str	r2, [r7, #24]
 80040da:	61fb      	str	r3, [r7, #28]
  return dwba.F;
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	69fb      	ldr	r3, [r7, #28]
}
 80040e0:	0010      	movs	r0, r2
 80040e2:	0019      	movs	r1, r3
 80040e4:	46bd      	mov	sp, r7
 80040e6:	b00e      	add	sp, #56	@ 0x38
 80040e8:	bdb0      	pop	{r4, r5, r7, pc}
 80040ea:	46c0      	nop			@ (mov r8, r8)
 80040ec:	fffffecc 	.word	0xfffffecc
 80040f0:	7819e8d2 	.word	0x7819e8d2
 80040f4:	000730d6 	.word	0x000730d6
 80040f8:	0979a371 	.word	0x0979a371
 80040fc:	400a934f 	.word	0x400a934f
 8004100:	3fe00000 	.word	0x3fe00000
 8004104:	bbb55516 	.word	0xbbb55516
 8004108:	40026bb1 	.word	0x40026bb1
 800410c:	fefa39ef 	.word	0xfefa39ef
 8004110:	3fe62e42 	.word	0x3fe62e42
 8004114:	000003ff 	.word	0x000003ff
 8004118:	402c0000 	.word	0x402c0000
 800411c:	40240000 	.word	0x40240000
 8004120:	40180000 	.word	0x40180000
 8004124:	3ff00000 	.word	0x3ff00000

08004128 <print_exponential_number>:

static void print_exponential_number(output_gadget_t* output, double number, printf_size_t precision, printf_size_t width, printf_flags_t flags, char* buf, printf_size_t len)
{
 8004128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800412a:	b0ad      	sub	sp, #180	@ 0xb4
 800412c:	af08      	add	r7, sp, #32
 800412e:	6278      	str	r0, [r7, #36]	@ 0x24
 8004130:	61ba      	str	r2, [r7, #24]
 8004132:	61fb      	str	r3, [r7, #28]
  const bool negative = get_sign_bit(number);
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	0010      	movs	r0, r2
 800413a:	0019      	movs	r1, r3
 800413c:	f7fe fe59 	bl	8002df2 <get_sign_bit>
 8004140:	0002      	movs	r2, r0
 8004142:	2066      	movs	r0, #102	@ 0x66
 8004144:	2618      	movs	r6, #24
 8004146:	1983      	adds	r3, r0, r6
 8004148:	19db      	adds	r3, r3, r7
 800414a:	1e51      	subs	r1, r2, #1
 800414c:	418a      	sbcs	r2, r1
 800414e:	701a      	strb	r2, [r3, #0]
  // This number will decrease gradually (by factors of 10) as we "extract" the exponent out of it
  double abs_number =  negative ? -number : number;
 8004150:	1983      	adds	r3, r0, r6
 8004152:	19db      	adds	r3, r3, r7
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d007      	beq.n	800416a <print_exponential_number+0x42>
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	001c      	movs	r4, r3
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	2280      	movs	r2, #128	@ 0x80
 8004162:	0612      	lsls	r2, r2, #24
 8004164:	405a      	eors	r2, r3
 8004166:	0015      	movs	r5, r2
 8004168:	e001      	b.n	800416e <print_exponential_number+0x46>
 800416a:	69bc      	ldr	r4, [r7, #24]
 800416c:	69fd      	ldr	r5, [r7, #28]
 800416e:	673c      	str	r4, [r7, #112]	@ 0x70
 8004170:	677d      	str	r5, [r7, #116]	@ 0x74
  bool abs_exp10_covered_by_powers_table;
  struct scaling_factor normalization;


  // Determine the decimal exponent
  if (abs_number == 0.0) {
 8004172:	2200      	movs	r2, #0
 8004174:	2300      	movs	r3, #0
 8004176:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004178:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800417a:	f7fc f869 	bl	8000250 <__aeabi_dcmpeq>
 800417e:	1e03      	subs	r3, r0, #0
 8004180:	d004      	beq.n	800418c <print_exponential_number+0x64>
    // TODO: This is a special-case for 0.0 (and -0.0); but proper handling is required for denormals more generally.
    floored_exp10 = 0; // ... and no need to set a normalization factor or check the powers table
 8004182:	2300      	movs	r3, #0
 8004184:	228c      	movs	r2, #140	@ 0x8c
 8004186:	18ba      	adds	r2, r7, r2
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	e068      	b.n	800425e <print_exponential_number+0x136>
  }
  else  {
    double exp10 = log10_of_positive(abs_number);
 800418c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800418e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004190:	0010      	movs	r0, r2
 8004192:	0019      	movs	r1, r3
 8004194:	f7ff fe4a 	bl	8003e2c <log10_of_positive>
 8004198:	0002      	movs	r2, r0
 800419a:	000b      	movs	r3, r1
 800419c:	66ba      	str	r2, [r7, #104]	@ 0x68
 800419e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    floored_exp10 = bastardized_floor(exp10);
 80041a0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80041a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041a4:	0010      	movs	r0, r2
 80041a6:	0019      	movs	r1, r3
 80041a8:	f7ff fe14 	bl	8003dd4 <bastardized_floor>
 80041ac:	0003      	movs	r3, r0
 80041ae:	258c      	movs	r5, #140	@ 0x8c
 80041b0:	197a      	adds	r2, r7, r5
 80041b2:	6013      	str	r3, [r2, #0]
    double p10 = pow10_of_int(floored_exp10);
 80041b4:	197b      	adds	r3, r7, r5
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	0018      	movs	r0, r3
 80041ba:	f7ff fedf 	bl	8003f7c <pow10_of_int>
 80041be:	0002      	movs	r2, r0
 80041c0:	000b      	movs	r3, r1
 80041c2:	2480      	movs	r4, #128	@ 0x80
 80041c4:	1939      	adds	r1, r7, r4
 80041c6:	600a      	str	r2, [r1, #0]
 80041c8:	604b      	str	r3, [r1, #4]
    // correct for rounding errors
    if (abs_number < p10) {
 80041ca:	193b      	adds	r3, r7, r4
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80041d2:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 80041d4:	f7fc f842 	bl	800025c <__aeabi_dcmplt>
 80041d8:	1e03      	subs	r3, r0, #0
 80041da:	d010      	beq.n	80041fe <print_exponential_number+0xd6>
      floored_exp10--;
 80041dc:	197b      	adds	r3, r7, r5
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3b01      	subs	r3, #1
 80041e2:	197a      	adds	r2, r7, r5
 80041e4:	6013      	str	r3, [r2, #0]
      p10 /= 10;
 80041e6:	2200      	movs	r2, #0
 80041e8:	4bc9      	ldr	r3, [pc, #804]	@ (8004510 <print_exponential_number+0x3e8>)
 80041ea:	1939      	adds	r1, r7, r4
 80041ec:	6808      	ldr	r0, [r1, #0]
 80041ee:	6849      	ldr	r1, [r1, #4]
 80041f0:	f7fc fd6c 	bl	8000ccc <__aeabi_ddiv>
 80041f4:	0002      	movs	r2, r0
 80041f6:	000b      	movs	r3, r1
 80041f8:	1939      	adds	r1, r7, r4
 80041fa:	600a      	str	r2, [r1, #0]
 80041fc:	604b      	str	r3, [r1, #4]
    }
    abs_exp10_covered_by_powers_table = PRINTF_ABS(floored_exp10) < PRINTF_MAX_PRECOMPUTED_POWER_OF_10;
 80041fe:	228c      	movs	r2, #140	@ 0x8c
 8004200:	18bb      	adds	r3, r7, r2
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3311      	adds	r3, #17
 8004206:	db05      	blt.n	8004214 <print_exponential_number+0xec>
 8004208:	18bb      	adds	r3, r7, r2
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b11      	cmp	r3, #17
 800420e:	dc01      	bgt.n	8004214 <print_exponential_number+0xec>
 8004210:	2201      	movs	r2, #1
 8004212:	e000      	b.n	8004216 <print_exponential_number+0xee>
 8004214:	2200      	movs	r2, #0
 8004216:	2073      	movs	r0, #115	@ 0x73
 8004218:	2418      	movs	r4, #24
 800421a:	1903      	adds	r3, r0, r4
 800421c:	19db      	adds	r3, r3, r7
 800421e:	701a      	strb	r2, [r3, #0]
 8004220:	781a      	ldrb	r2, [r3, #0]
 8004222:	2101      	movs	r1, #1
 8004224:	400a      	ands	r2, r1
 8004226:	701a      	strb	r2, [r3, #0]
    normalization.raw_factor = abs_exp10_covered_by_powers_table ? powers_of_10[PRINTF_ABS(floored_exp10)] : p10;
 8004228:	1903      	adds	r3, r0, r4
 800422a:	19db      	adds	r3, r3, r7
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00b      	beq.n	800424a <print_exponential_number+0x122>
 8004232:	238c      	movs	r3, #140	@ 0x8c
 8004234:	18fb      	adds	r3, r7, r3
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	17da      	asrs	r2, r3, #31
 800423a:	189b      	adds	r3, r3, r2
 800423c:	4053      	eors	r3, r2
 800423e:	4ab5      	ldr	r2, [pc, #724]	@ (8004514 <print_exponential_number+0x3ec>)
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	18d3      	adds	r3, r2, r3
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	e003      	b.n	8004252 <print_exponential_number+0x12a>
 800424a:	2380      	movs	r3, #128	@ 0x80
 800424c:	18fb      	adds	r3, r7, r3
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2128      	movs	r1, #40	@ 0x28
 8004254:	2018      	movs	r0, #24
 8004256:	1809      	adds	r1, r1, r0
 8004258:	19c9      	adds	r1, r1, r7
 800425a:	600a      	str	r2, [r1, #0]
 800425c:	604b      	str	r3, [r1, #4]
  // the decimal part after decimal exponent extraction, and the base-10 exponent part.
  // For both of these, the value of 0 has a special meaning, but not the same one:
  // a 0 exponent-part width means "don't print the exponent"; a 0 decimal-part width
  // means "use as many characters as necessary".

  bool fall_back_to_decimal_only_mode = false;
 800425e:	2367      	movs	r3, #103	@ 0x67
 8004260:	2118      	movs	r1, #24
 8004262:	185b      	adds	r3, r3, r1
 8004264:	19db      	adds	r3, r3, r7
 8004266:	2200      	movs	r2, #0
 8004268:	701a      	strb	r2, [r3, #0]
  if (flags & FLAGS_ADAPT_EXP) {
 800426a:	2398      	movs	r3, #152	@ 0x98
 800426c:	185b      	adds	r3, r3, r1
 800426e:	19db      	adds	r3, r3, r7
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	2380      	movs	r3, #128	@ 0x80
 8004274:	015b      	lsls	r3, r3, #5
 8004276:	4013      	ands	r3, r2
 8004278:	d04a      	beq.n	8004310 <print_exponential_number+0x1e8>
    int required_significant_digits = (precision == 0) ? 1 : (int) precision;
 800427a:	2290      	movs	r2, #144	@ 0x90
 800427c:	1853      	adds	r3, r2, r1
 800427e:	19db      	adds	r3, r3, r7
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <print_exponential_number+0x166>
 8004286:	1853      	adds	r3, r2, r1
 8004288:	19db      	adds	r3, r3, r7
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	e000      	b.n	8004290 <print_exponential_number+0x168>
 800428e:	2301      	movs	r3, #1
 8004290:	667b      	str	r3, [r7, #100]	@ 0x64
    // Should we want to fall-back to "%f" mode, and only print the decimal part?
    fall_back_to_decimal_only_mode = (floored_exp10 >= -4 && floored_exp10 < required_significant_digits);
 8004292:	228c      	movs	r2, #140	@ 0x8c
 8004294:	18bb      	adds	r3, r7, r2
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	3304      	adds	r3, #4
 800429a:	db06      	blt.n	80042aa <print_exponential_number+0x182>
 800429c:	18bb      	adds	r3, r7, r2
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042a2:	429a      	cmp	r2, r3
 80042a4:	da01      	bge.n	80042aa <print_exponential_number+0x182>
 80042a6:	2201      	movs	r2, #1
 80042a8:	e000      	b.n	80042ac <print_exponential_number+0x184>
 80042aa:	2200      	movs	r2, #0
 80042ac:	2067      	movs	r0, #103	@ 0x67
 80042ae:	2418      	movs	r4, #24
 80042b0:	1903      	adds	r3, r0, r4
 80042b2:	19db      	adds	r3, r3, r7
 80042b4:	701a      	strb	r2, [r3, #0]
 80042b6:	781a      	ldrb	r2, [r3, #0]
 80042b8:	2101      	movs	r1, #1
 80042ba:	400a      	ands	r2, r1
 80042bc:	701a      	strb	r2, [r3, #0]
    // Now, let's adjust the precision
    // This also decided how we adjust the precision value - as in "%g" mode,
    // "precision" is the number of _significant digits_, and this is when we "translate"
    // the precision value to an actual number of decimal digits.
    int precision_ = fall_back_to_decimal_only_mode ?
                     (int) precision - 1 - floored_exp10 :
 80042be:	1903      	adds	r3, r0, r4
 80042c0:	19db      	adds	r3, r3, r7
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d009      	beq.n	80042dc <print_exponential_number+0x1b4>
 80042c8:	2390      	movs	r3, #144	@ 0x90
 80042ca:	191b      	adds	r3, r3, r4
 80042cc:	19db      	adds	r3, r3, r7
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	1e5a      	subs	r2, r3, #1
 80042d2:	238c      	movs	r3, #140	@ 0x8c
 80042d4:	18fb      	adds	r3, r7, r3
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	e005      	b.n	80042e8 <print_exponential_number+0x1c0>
        (int) precision - 1; // the presence of the exponent ensures only one significant digit comes before the decimal point
 80042dc:	2390      	movs	r3, #144	@ 0x90
 80042de:	2218      	movs	r2, #24
 80042e0:	189b      	adds	r3, r3, r2
 80042e2:	19db      	adds	r3, r3, r7
 80042e4:	681b      	ldr	r3, [r3, #0]
                     (int) precision - 1 - floored_exp10 :
 80042e6:	3b01      	subs	r3, #1
    int precision_ = fall_back_to_decimal_only_mode ?
 80042e8:	663b      	str	r3, [r7, #96]	@ 0x60
    precision = (precision_ > 0 ? (unsigned) precision_ : 0U);
 80042ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	da00      	bge.n	80042f2 <print_exponential_number+0x1ca>
 80042f0:	2300      	movs	r3, #0
 80042f2:	2290      	movs	r2, #144	@ 0x90
 80042f4:	2018      	movs	r0, #24
 80042f6:	1812      	adds	r2, r2, r0
 80042f8:	19d2      	adds	r2, r2, r7
 80042fa:	6013      	str	r3, [r2, #0]
    flags |= FLAGS_PRECISION;   // make sure print_broken_up_decimal respects our choice above
 80042fc:	2198      	movs	r1, #152	@ 0x98
 80042fe:	180b      	adds	r3, r1, r0
 8004300:	19db      	adds	r3, r3, r7
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2280      	movs	r2, #128	@ 0x80
 8004306:	0112      	lsls	r2, r2, #4
 8004308:	4313      	orrs	r3, r2
 800430a:	180a      	adds	r2, r1, r0
 800430c:	19d2      	adds	r2, r2, r7
 800430e:	6013      	str	r3, [r2, #0]
  }

  normalization.multiply = (floored_exp10 < 0 && abs_exp10_covered_by_powers_table);
 8004310:	238c      	movs	r3, #140	@ 0x8c
 8004312:	18fb      	adds	r3, r7, r3
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	da08      	bge.n	800432c <print_exponential_number+0x204>
 800431a:	2373      	movs	r3, #115	@ 0x73
 800431c:	2218      	movs	r2, #24
 800431e:	189b      	adds	r3, r3, r2
 8004320:	19db      	adds	r3, r3, r7
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <print_exponential_number+0x204>
 8004328:	2301      	movs	r3, #1
 800432a:	e000      	b.n	800432e <print_exponential_number+0x206>
 800432c:	2300      	movs	r3, #0
 800432e:	1c1a      	adds	r2, r3, #0
 8004330:	2301      	movs	r3, #1
 8004332:	4013      	ands	r3, r2
 8004334:	b2da      	uxtb	r2, r3
 8004336:	2328      	movs	r3, #40	@ 0x28
 8004338:	2118      	movs	r1, #24
 800433a:	185b      	adds	r3, r3, r1
 800433c:	19db      	adds	r3, r3, r7
 800433e:	721a      	strb	r2, [r3, #8]
  bool should_skip_normalization = (fall_back_to_decimal_only_mode || floored_exp10 == 0);
 8004340:	2367      	movs	r3, #103	@ 0x67
 8004342:	185b      	adds	r3, r3, r1
 8004344:	19db      	adds	r3, r3, r7
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d104      	bne.n	8004356 <print_exponential_number+0x22e>
 800434c:	238c      	movs	r3, #140	@ 0x8c
 800434e:	18fb      	adds	r3, r7, r3
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <print_exponential_number+0x232>
 8004356:	2201      	movs	r2, #1
 8004358:	e000      	b.n	800435c <print_exponential_number+0x234>
 800435a:	2200      	movs	r2, #0
 800435c:	2047      	movs	r0, #71	@ 0x47
 800435e:	2418      	movs	r4, #24
 8004360:	1903      	adds	r3, r0, r4
 8004362:	19db      	adds	r3, r3, r7
 8004364:	701a      	strb	r2, [r3, #0]
 8004366:	781a      	ldrb	r2, [r3, #0]
 8004368:	2101      	movs	r1, #1
 800436a:	400a      	ands	r2, r1
 800436c:	701a      	strb	r2, [r3, #0]
  struct double_components decimal_part_components =
    should_skip_normalization ?
    get_components(negative ? -abs_number : abs_number, precision) :
 800436e:	1903      	adds	r3, r0, r4
 8004370:	19db      	adds	r3, r3, r7
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d020      	beq.n	80043ba <print_exponential_number+0x292>
 8004378:	2366      	movs	r3, #102	@ 0x66
 800437a:	191b      	adds	r3, r3, r4
 800437c:	19db      	adds	r3, r3, r7
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d007      	beq.n	8004394 <print_exponential_number+0x26c>
 8004384:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004386:	613b      	str	r3, [r7, #16]
 8004388:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800438a:	2280      	movs	r2, #128	@ 0x80
 800438c:	0612      	lsls	r2, r2, #24
 800438e:	405a      	eors	r2, r3
 8004390:	617a      	str	r2, [r7, #20]
 8004392:	e003      	b.n	800439c <print_exponential_number+0x274>
 8004394:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004396:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 8004398:	613b      	str	r3, [r7, #16]
 800439a:	617c      	str	r4, [r7, #20]
 800439c:	2310      	movs	r3, #16
 800439e:	2218      	movs	r2, #24
 80043a0:	189b      	adds	r3, r3, r2
 80043a2:	19d9      	adds	r1, r3, r7
 80043a4:	2390      	movs	r3, #144	@ 0x90
 80043a6:	189b      	adds	r3, r3, r2
 80043a8:	19db      	adds	r3, r3, r7
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	0008      	movs	r0, r1
 80043b4:	f7ff f828 	bl	8003408 <get_components>
 80043b8:	e023      	b.n	8004402 <print_exponential_number+0x2da>
    get_normalized_components(negative, precision, abs_number, normalization, floored_exp10);
 80043ba:	2310      	movs	r3, #16
 80043bc:	2218      	movs	r2, #24
 80043be:	189b      	adds	r3, r3, r2
 80043c0:	19dc      	adds	r4, r3, r7
 80043c2:	2390      	movs	r3, #144	@ 0x90
 80043c4:	189b      	adds	r3, r3, r2
 80043c6:	19db      	adds	r3, r3, r7
 80043c8:	681e      	ldr	r6, [r3, #0]
 80043ca:	2366      	movs	r3, #102	@ 0x66
 80043cc:	189b      	adds	r3, r3, r2
 80043ce:	19db      	adds	r3, r3, r7
 80043d0:	781d      	ldrb	r5, [r3, #0]
 80043d2:	238c      	movs	r3, #140	@ 0x8c
 80043d4:	18fb      	adds	r3, r7, r3
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	9306      	str	r3, [sp, #24]
 80043da:	2328      	movs	r3, #40	@ 0x28
 80043dc:	189b      	adds	r3, r3, r2
 80043de:	19da      	adds	r2, r3, r7
 80043e0:	2308      	movs	r3, #8
 80043e2:	446b      	add	r3, sp
 80043e4:	0018      	movs	r0, r3
 80043e6:	0011      	movs	r1, r2
 80043e8:	2310      	movs	r3, #16
 80043ea:	001a      	movs	r2, r3
 80043ec:	f004 fa2e 	bl	800884c <memcpy>
 80043f0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80043f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043f4:	9200      	str	r2, [sp, #0]
 80043f6:	9301      	str	r3, [sp, #4]
 80043f8:	0032      	movs	r2, r6
 80043fa:	0029      	movs	r1, r5
 80043fc:	0020      	movs	r0, r4
 80043fe:	f7ff fa27 	bl	8003850 <get_normalized_components>

  // Account for roll-over, e.g. rounding from 9.99 to 100.0 - which effects
  // the exponent and may require additional tweaking of the parts
  if (fall_back_to_decimal_only_mode) {
 8004402:	2367      	movs	r3, #103	@ 0x67
 8004404:	2418      	movs	r4, #24
 8004406:	191b      	adds	r3, r3, r4
 8004408:	19db      	adds	r3, r3, r7
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d02f      	beq.n	8004470 <print_exponential_number+0x348>
    if ((flags & FLAGS_ADAPT_EXP) && floored_exp10 >= -1 && decimal_part_components.integral == powers_of_10[floored_exp10 + 1]) {
 8004410:	2398      	movs	r3, #152	@ 0x98
 8004412:	191b      	adds	r3, r3, r4
 8004414:	19db      	adds	r3, r3, r7
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	2380      	movs	r3, #128	@ 0x80
 800441a:	015b      	lsls	r3, r3, #5
 800441c:	4013      	ands	r3, r2
 800441e:	d046      	beq.n	80044ae <print_exponential_number+0x386>
 8004420:	258c      	movs	r5, #140	@ 0x8c
 8004422:	197b      	adds	r3, r7, r5
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3301      	adds	r3, #1
 8004428:	db41      	blt.n	80044ae <print_exponential_number+0x386>
 800442a:	2310      	movs	r3, #16
 800442c:	191b      	adds	r3, r3, r4
 800442e:	19db      	adds	r3, r3, r7
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	0010      	movs	r0, r2
 8004436:	0019      	movs	r1, r3
 8004438:	f7fb ffe4 	bl	8000404 <__aeabi_l2d>
 800443c:	197b      	adds	r3, r7, r5
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3301      	adds	r3, #1
 8004442:	4a34      	ldr	r2, [pc, #208]	@ (8004514 <print_exponential_number+0x3ec>)
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	18d3      	adds	r3, r2, r3
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f7fb ff00 	bl	8000250 <__aeabi_dcmpeq>
 8004450:	1e03      	subs	r3, r0, #0
 8004452:	d02c      	beq.n	80044ae <print_exponential_number+0x386>
      floored_exp10++; // Not strictly necessary, since floored_exp10 is no longer really used
 8004454:	197b      	adds	r3, r7, r5
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3301      	adds	r3, #1
 800445a:	197a      	adds	r2, r7, r5
 800445c:	6013      	str	r3, [r2, #0]
      precision--;
 800445e:	2290      	movs	r2, #144	@ 0x90
 8004460:	1913      	adds	r3, r2, r4
 8004462:	19db      	adds	r3, r3, r7
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3b01      	subs	r3, #1
 8004468:	1912      	adds	r2, r2, r4
 800446a:	19d2      	adds	r2, r2, r7
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	e01e      	b.n	80044ae <print_exponential_number+0x386>
      // ... and it should already be the case that decimal_part_components.fractional == 0
    }
    // TODO: What about rollover strictly within the fractional part?
  }
  else {
    if (decimal_part_components.integral >= 10) {
 8004470:	2310      	movs	r3, #16
 8004472:	2218      	movs	r2, #24
 8004474:	189b      	adds	r3, r3, r2
 8004476:	19db      	adds	r3, r3, r7
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	dc02      	bgt.n	8004486 <print_exponential_number+0x35e>
 8004480:	d115      	bne.n	80044ae <print_exponential_number+0x386>
 8004482:	2a09      	cmp	r2, #9
 8004484:	d913      	bls.n	80044ae <print_exponential_number+0x386>
      floored_exp10++;
 8004486:	228c      	movs	r2, #140	@ 0x8c
 8004488:	18bb      	adds	r3, r7, r2
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	3301      	adds	r3, #1
 800448e:	18ba      	adds	r2, r7, r2
 8004490:	6013      	str	r3, [r2, #0]
      decimal_part_components.integral = 1;
 8004492:	2010      	movs	r0, #16
 8004494:	2418      	movs	r4, #24
 8004496:	1903      	adds	r3, r0, r4
 8004498:	19d9      	adds	r1, r3, r7
 800449a:	2201      	movs	r2, #1
 800449c:	2300      	movs	r3, #0
 800449e:	600a      	str	r2, [r1, #0]
 80044a0:	604b      	str	r3, [r1, #4]
      decimal_part_components.fractional = 0;
 80044a2:	1903      	adds	r3, r0, r4
 80044a4:	19d9      	adds	r1, r3, r7
 80044a6:	2200      	movs	r2, #0
 80044a8:	2300      	movs	r3, #0
 80044aa:	608a      	str	r2, [r1, #8]
 80044ac:	60cb      	str	r3, [r1, #12]
    }
  }

  // the floored_exp10 format is "E%+03d" and largest possible floored_exp10 value for a 64-bit double
  // is "307" (for 2^1023), so we set aside 4-5 characters overall
  printf_size_t exp10_part_width = fall_back_to_decimal_only_mode ? 0U : (PRINTF_ABS(floored_exp10) < 100) ? 4U : 5U;
 80044ae:	2367      	movs	r3, #103	@ 0x67
 80044b0:	2218      	movs	r2, #24
 80044b2:	189b      	adds	r3, r3, r2
 80044b4:	19db      	adds	r3, r3, r7
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <print_exponential_number+0x398>
 80044bc:	2300      	movs	r3, #0
 80044be:	e00b      	b.n	80044d8 <print_exponential_number+0x3b0>
 80044c0:	228c      	movs	r2, #140	@ 0x8c
 80044c2:	18bb      	adds	r3, r7, r2
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3363      	adds	r3, #99	@ 0x63
 80044c8:	db05      	blt.n	80044d6 <print_exponential_number+0x3ae>
 80044ca:	18bb      	adds	r3, r7, r2
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b63      	cmp	r3, #99	@ 0x63
 80044d0:	dc01      	bgt.n	80044d6 <print_exponential_number+0x3ae>
 80044d2:	2304      	movs	r3, #4
 80044d4:	e000      	b.n	80044d8 <print_exponential_number+0x3b0>
 80044d6:	2305      	movs	r3, #5
 80044d8:	65bb      	str	r3, [r7, #88]	@ 0x58

  printf_size_t decimal_part_width =
    ((flags & FLAGS_LEFT) && exp10_part_width) ?
 80044da:	2398      	movs	r3, #152	@ 0x98
 80044dc:	2218      	movs	r2, #24
 80044de:	189b      	adds	r3, r3, r2
 80044e0:	19db      	adds	r3, r3, r7
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2202      	movs	r2, #2
 80044e6:	4013      	ands	r3, r2
      // We're padding on the right, so the width constraint is the exponent part's
      // problem, not the decimal part's, so we'll use as many characters as we need:
      0U :
 80044e8:	d002      	beq.n	80044f0 <print_exponential_number+0x3c8>
    ((flags & FLAGS_LEFT) && exp10_part_width) ?
 80044ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d113      	bne.n	8004518 <print_exponential_number+0x3f0>
      // We're padding on the left; so the width constraint is the decimal part's
      // problem. Well, can both the decimal part and the exponent part fit within our overall width?
      ((width > exp10_part_width) ?
        // Yes, so we limit our decimal part's width.
        // (Note this is trivially valid even if we've fallen back to "%f" mode)
        width - exp10_part_width :
 80044f0:	2194      	movs	r1, #148	@ 0x94
 80044f2:	2018      	movs	r0, #24
 80044f4:	180b      	adds	r3, r1, r0
 80044f6:	19db      	adds	r3, r3, r7
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d905      	bls.n	800450c <print_exponential_number+0x3e4>
 8004500:	180b      	adds	r3, r1, r0
 8004502:	19db      	adds	r3, r3, r7
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004508:	1ad3      	subs	r3, r2, r3
      0U :
 800450a:	e006      	b.n	800451a <print_exponential_number+0x3f2>
        width - exp10_part_width :
 800450c:	2300      	movs	r3, #0
      0U :
 800450e:	e004      	b.n	800451a <print_exponential_number+0x3f2>
 8004510:	40240000 	.word	0x40240000
 8004514:	08008940 	.word	0x08008940
 8004518:	2300      	movs	r3, #0
  printf_size_t decimal_part_width =
 800451a:	657b      	str	r3, [r7, #84]	@ 0x54
        // No; we just give up on any restriction on the decimal part and use as many
        // characters as we need
        0U);

  const printf_size_t printed_exponential_start_pos = output->pos;
 800451c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	653b      	str	r3, [r7, #80]	@ 0x50
  print_broken_up_decimal(decimal_part_components, output, precision, decimal_part_width, flags, buf, len);
 8004522:	2310      	movs	r3, #16
 8004524:	2618      	movs	r6, #24
 8004526:	199b      	adds	r3, r3, r6
 8004528:	19dc      	adds	r4, r3, r7
 800452a:	23a0      	movs	r3, #160	@ 0xa0
 800452c:	199b      	adds	r3, r3, r6
 800452e:	19db      	adds	r3, r3, r7
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	9307      	str	r3, [sp, #28]
 8004534:	239c      	movs	r3, #156	@ 0x9c
 8004536:	199b      	adds	r3, r3, r6
 8004538:	19db      	adds	r3, r3, r7
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	9306      	str	r3, [sp, #24]
 800453e:	2598      	movs	r5, #152	@ 0x98
 8004540:	19ab      	adds	r3, r5, r6
 8004542:	19db      	adds	r3, r3, r7
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	9305      	str	r3, [sp, #20]
 8004548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800454a:	9304      	str	r3, [sp, #16]
 800454c:	2390      	movs	r3, #144	@ 0x90
 800454e:	199b      	adds	r3, r3, r6
 8004550:	19db      	adds	r3, r3, r7
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	9303      	str	r3, [sp, #12]
 8004556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004558:	9302      	str	r3, [sp, #8]
 800455a:	466b      	mov	r3, sp
 800455c:	0018      	movs	r0, r3
 800455e:	0023      	movs	r3, r4
 8004560:	3310      	adds	r3, #16
 8004562:	2208      	movs	r2, #8
 8004564:	0019      	movs	r1, r3
 8004566:	f004 f971 	bl	800884c <memcpy>
 800456a:	6820      	ldr	r0, [r4, #0]
 800456c:	6861      	ldr	r1, [r4, #4]
 800456e:	68a2      	ldr	r2, [r4, #8]
 8004570:	68e3      	ldr	r3, [r4, #12]
 8004572:	f7ff fad3 	bl	8003b1c <print_broken_up_decimal>

  if (! fall_back_to_decimal_only_mode) {
 8004576:	2367      	movs	r3, #103	@ 0x67
 8004578:	199b      	adds	r3, r3, r6
 800457a:	19db      	adds	r3, r3, r7
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	2201      	movs	r2, #1
 8004580:	4053      	eors	r3, r2
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	d054      	beq.n	8004632 <print_exponential_number+0x50a>
    putchar_via_gadget(output, (flags & FLAGS_UPPERCASE) ? 'E' : 'e');
 8004588:	19ab      	adds	r3, r5, r6
 800458a:	19db      	adds	r3, r3, r7
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2220      	movs	r2, #32
 8004590:	4013      	ands	r3, r2
 8004592:	d001      	beq.n	8004598 <print_exponential_number+0x470>
 8004594:	2345      	movs	r3, #69	@ 0x45
 8004596:	e000      	b.n	800459a <print_exponential_number+0x472>
 8004598:	2365      	movs	r3, #101	@ 0x65
 800459a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800459c:	0019      	movs	r1, r3
 800459e:	0010      	movs	r0, r2
 80045a0:	f7fe fc54 	bl	8002e4c <putchar_via_gadget>
    print_integer(output,
 80045a4:	228c      	movs	r2, #140	@ 0x8c
 80045a6:	18bb      	adds	r3, r7, r2
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	dd05      	ble.n	80045ba <print_exponential_number+0x492>
 80045ae:	18bb      	adds	r3, r7, r2
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	60bb      	str	r3, [r7, #8]
 80045b4:	17db      	asrs	r3, r3, #31
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	e00d      	b.n	80045d6 <print_exponential_number+0x4ae>
                  ABS_FOR_PRINTING(floored_exp10),
 80045ba:	238c      	movs	r3, #140	@ 0x8c
 80045bc:	18fb      	adds	r3, r7, r3
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	603b      	str	r3, [r7, #0]
 80045c2:	17db      	asrs	r3, r3, #31
 80045c4:	607b      	str	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	2300      	movs	r3, #0
 80045ca:	6838      	ldr	r0, [r7, #0]
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	1a12      	subs	r2, r2, r0
 80045d0:	418b      	sbcs	r3, r1
    print_integer(output,
 80045d2:	60ba      	str	r2, [r7, #8]
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	238c      	movs	r3, #140	@ 0x8c
 80045d8:	18fb      	adds	r3, r7, r3
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	0fdb      	lsrs	r3, r3, #31
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045e2:	3a01      	subs	r2, #1
 80045e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045e6:	2005      	movs	r0, #5
 80045e8:	9004      	str	r0, [sp, #16]
 80045ea:	9203      	str	r2, [sp, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	9202      	str	r2, [sp, #8]
 80045f0:	220a      	movs	r2, #10
 80045f2:	9201      	str	r2, [sp, #4]
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	0008      	movs	r0, r1
 80045fc:	f7fe fe56 	bl	80032ac <print_integer>
                  floored_exp10 < 0, 10, 0, exp10_part_width - 1,
                FLAGS_ZEROPAD | FLAGS_PLUS);
    if (flags & FLAGS_LEFT) {
 8004600:	2398      	movs	r3, #152	@ 0x98
 8004602:	2218      	movs	r2, #24
 8004604:	189b      	adds	r3, r3, r2
 8004606:	19db      	adds	r3, r3, r7
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2202      	movs	r2, #2
 800460c:	4013      	ands	r3, r2
 800460e:	d010      	beq.n	8004632 <print_exponential_number+0x50a>
      // We need to right-pad with spaces to meet the width requirement
      while (output->pos - printed_exponential_start_pos < width) {
 8004610:	e004      	b.n	800461c <print_exponential_number+0x4f4>
        putchar_via_gadget(output, ' ');
 8004612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004614:	2120      	movs	r1, #32
 8004616:	0018      	movs	r0, r3
 8004618:	f7fe fc18 	bl	8002e4c <putchar_via_gadget>
      while (output->pos - printed_exponential_start_pos < width) {
 800461c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2294      	movs	r2, #148	@ 0x94
 8004626:	2118      	movs	r1, #24
 8004628:	1852      	adds	r2, r2, r1
 800462a:	19d2      	adds	r2, r2, r7
 800462c:	6812      	ldr	r2, [r2, #0]
 800462e:	429a      	cmp	r2, r3
 8004630:	d8ef      	bhi.n	8004612 <print_exponential_number+0x4ea>
      }
    }
  }
}
 8004632:	46c0      	nop			@ (mov r8, r8)
 8004634:	46bd      	mov	sp, r7
 8004636:	b025      	add	sp, #148	@ 0x94
 8004638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800463a:	46c0      	nop			@ (mov r8, r8)

0800463c <print_floating_point>:
#endif  // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS

static void print_floating_point(output_gadget_t* output, double value, printf_size_t precision, printf_size_t width, printf_flags_t flags, bool prefer_exponential)
{
 800463c:	b590      	push	{r4, r7, lr}
 800463e:	b095      	sub	sp, #84	@ 0x54
 8004640:	af06      	add	r7, sp, #24
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	603a      	str	r2, [r7, #0]
 8004646:	607b      	str	r3, [r7, #4]
  char buf[PRINTF_DECIMAL_BUFFER_SIZE];
  printf_size_t len = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	637b      	str	r3, [r7, #52]	@ 0x34

  // test for special values
  if (value != value) {
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6838      	ldr	r0, [r7, #0]
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	f7fb fdfc 	bl	8000250 <__aeabi_dcmpeq>
 8004658:	1e03      	subs	r3, r0, #0
 800465a:	d109      	bne.n	8004670 <print_floating_point+0x34>
    out_rev_(output, "nan", 3, width, flags);
 800465c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800465e:	4952      	ldr	r1, [pc, #328]	@ (80047a8 <print_floating_point+0x16c>)
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	0013      	movs	r3, r2
 8004668:	2203      	movs	r2, #3
 800466a:	f7fe fce2 	bl	8003032 <out_rev_>
    return;
 800466e:	e098      	b.n	80047a2 <print_floating_point+0x166>
  }
  if (value < -DBL_MAX) {
 8004670:	2201      	movs	r2, #1
 8004672:	4252      	negs	r2, r2
 8004674:	4b4d      	ldr	r3, [pc, #308]	@ (80047ac <print_floating_point+0x170>)
 8004676:	6838      	ldr	r0, [r7, #0]
 8004678:	6879      	ldr	r1, [r7, #4]
 800467a:	f7fb fdef 	bl	800025c <__aeabi_dcmplt>
 800467e:	1e03      	subs	r3, r0, #0
 8004680:	d009      	beq.n	8004696 <print_floating_point+0x5a>
    out_rev_(output, "fni-", 4, width, flags);
 8004682:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004684:	494a      	ldr	r1, [pc, #296]	@ (80047b0 <print_floating_point+0x174>)
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	0013      	movs	r3, r2
 800468e:	2204      	movs	r2, #4
 8004690:	f7fe fccf 	bl	8003032 <out_rev_>
    return;
 8004694:	e085      	b.n	80047a2 <print_floating_point+0x166>
  }
  if (value > DBL_MAX) {
 8004696:	2201      	movs	r2, #1
 8004698:	4252      	negs	r2, r2
 800469a:	4b46      	ldr	r3, [pc, #280]	@ (80047b4 <print_floating_point+0x178>)
 800469c:	6838      	ldr	r0, [r7, #0]
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	f7fb fdf0 	bl	8000284 <__aeabi_dcmpgt>
 80046a4:	1e03      	subs	r3, r0, #0
 80046a6:	d015      	beq.n	80046d4 <print_floating_point+0x98>
    out_rev_(output, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80046a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046aa:	2204      	movs	r2, #4
 80046ac:	4013      	ands	r3, r2
 80046ae:	d001      	beq.n	80046b4 <print_floating_point+0x78>
 80046b0:	4941      	ldr	r1, [pc, #260]	@ (80047b8 <print_floating_point+0x17c>)
 80046b2:	e000      	b.n	80046b6 <print_floating_point+0x7a>
 80046b4:	4941      	ldr	r1, [pc, #260]	@ (80047bc <print_floating_point+0x180>)
 80046b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046b8:	2204      	movs	r2, #4
 80046ba:	4013      	ands	r3, r2
 80046bc:	d001      	beq.n	80046c2 <print_floating_point+0x86>
 80046be:	2204      	movs	r2, #4
 80046c0:	e000      	b.n	80046c4 <print_floating_point+0x88>
 80046c2:	2203      	movs	r2, #3
 80046c4:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	0023      	movs	r3, r4
 80046ce:	f7fe fcb0 	bl	8003032 <out_rev_>
    return;
 80046d2:	e066      	b.n	80047a2 <print_floating_point+0x166>
  }

  if (!prefer_exponential &&
 80046d4:	2354      	movs	r3, #84	@ 0x54
 80046d6:	18fb      	adds	r3, r7, r3
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2201      	movs	r2, #1
 80046dc:	4053      	eors	r3, r2
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d020      	beq.n	8004726 <print_floating_point+0xea>
 80046e4:	2200      	movs	r2, #0
 80046e6:	4b36      	ldr	r3, [pc, #216]	@ (80047c0 <print_floating_point+0x184>)
 80046e8:	6838      	ldr	r0, [r7, #0]
 80046ea:	6879      	ldr	r1, [r7, #4]
 80046ec:	f7fb fdca 	bl	8000284 <__aeabi_dcmpgt>
 80046f0:	1e03      	subs	r3, r0, #0
 80046f2:	d107      	bne.n	8004704 <print_floating_point+0xc8>
      ((value > PRINTF_FLOAT_NOTATION_THRESHOLD) || (value < -PRINTF_FLOAT_NOTATION_THRESHOLD))) {
 80046f4:	2200      	movs	r2, #0
 80046f6:	4b33      	ldr	r3, [pc, #204]	@ (80047c4 <print_floating_point+0x188>)
 80046f8:	6838      	ldr	r0, [r7, #0]
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	f7fb fdae 	bl	800025c <__aeabi_dcmplt>
 8004700:	1e03      	subs	r3, r0, #0
 8004702:	d010      	beq.n	8004726 <print_floating_point+0xea>
    // The required behavior of standard printf is to print _every_ integral-part digit -- which could mean
    // printing hundreds of characters, overflowing any fixed internal buffer and necessitating a more complicated
    // implementation.
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
    print_exponential_number(output, value, precision, width, flags, buf, len);
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800470c:	9104      	str	r1, [sp, #16]
 800470e:	2114      	movs	r1, #20
 8004710:	1879      	adds	r1, r7, r1
 8004712:	9103      	str	r1, [sp, #12]
 8004714:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004716:	9102      	str	r1, [sp, #8]
 8004718:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800471a:	9101      	str	r1, [sp, #4]
 800471c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800471e:	9100      	str	r1, [sp, #0]
 8004720:	f7ff fd02 	bl	8004128 <print_exponential_number>
#endif
    return;
 8004724:	e03d      	b.n	80047a2 <print_floating_point+0x166>
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8004726:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004728:	2380      	movs	r3, #128	@ 0x80
 800472a:	011b      	lsls	r3, r3, #4
 800472c:	4013      	ands	r3, r2
 800472e:	d10c      	bne.n	800474a <print_floating_point+0x10e>
    precision = PRINTF_DEFAULT_FLOAT_PRECISION;
 8004730:	2306      	movs	r3, #6
 8004732:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  // limit precision so that our integer holding the fractional part does not overflow
  while ((len < PRINTF_DECIMAL_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
 8004734:	e009      	b.n	800474a <print_floating_point+0x10e>
    buf[len++] = '0'; // This respects the precision in terms of result length only
 8004736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	637a      	str	r2, [r7, #52]	@ 0x34
 800473c:	2214      	movs	r2, #20
 800473e:	18ba      	adds	r2, r7, r2
 8004740:	2130      	movs	r1, #48	@ 0x30
 8004742:	54d1      	strb	r1, [r2, r3]
    precision--;
 8004744:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004746:	3b01      	subs	r3, #1
 8004748:	64bb      	str	r3, [r7, #72]	@ 0x48
  while ((len < PRINTF_DECIMAL_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
 800474a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800474c:	2b1f      	cmp	r3, #31
 800474e:	d802      	bhi.n	8004756 <print_floating_point+0x11a>
 8004750:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004752:	2b11      	cmp	r3, #17
 8004754:	d8ef      	bhi.n	8004736 <print_floating_point+0xfa>
  }

#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
  if (prefer_exponential)
 8004756:	2354      	movs	r3, #84	@ 0x54
 8004758:	18fb      	adds	r3, r7, r3
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d010      	beq.n	8004782 <print_floating_point+0x146>
    print_exponential_number(output, value, precision, width, flags, buf, len);
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004768:	9104      	str	r1, [sp, #16]
 800476a:	2114      	movs	r1, #20
 800476c:	1879      	adds	r1, r7, r1
 800476e:	9103      	str	r1, [sp, #12]
 8004770:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004772:	9102      	str	r1, [sp, #8]
 8004774:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004776:	9101      	str	r1, [sp, #4]
 8004778:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800477a:	9100      	str	r1, [sp, #0]
 800477c:	f7ff fcd4 	bl	8004128 <print_exponential_number>
 8004780:	e00f      	b.n	80047a2 <print_floating_point+0x166>
  else
#endif
    print_decimal_number(output, value, precision, width, flags, buf, len);
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800478a:	9104      	str	r1, [sp, #16]
 800478c:	2114      	movs	r1, #20
 800478e:	1879      	adds	r1, r7, r1
 8004790:	9103      	str	r1, [sp, #12]
 8004792:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004794:	9102      	str	r1, [sp, #8]
 8004796:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004798:	9101      	str	r1, [sp, #4]
 800479a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800479c:	9100      	str	r1, [sp, #0]
 800479e:	f7ff faec 	bl	8003d7a <print_decimal_number>
}
 80047a2:	46bd      	mov	sp, r7
 80047a4:	b00f      	add	sp, #60	@ 0x3c
 80047a6:	bd90      	pop	{r4, r7, pc}
 80047a8:	080088d4 	.word	0x080088d4
 80047ac:	ffefffff 	.word	0xffefffff
 80047b0:	080088d8 	.word	0x080088d8
 80047b4:	7fefffff 	.word	0x7fefffff
 80047b8:	080088e0 	.word	0x080088e0
 80047bc:	080088e8 	.word	0x080088e8
 80047c0:	41cdcd65 	.word	0x41cdcd65
 80047c4:	c1cdcd65 	.word	0xc1cdcd65

080047c8 <parse_flags>:
#endif  // (PRINTF_SUPPORT_DECIMAL_SPECIFIERS || PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS)

// Advances the format pointer past the flags, and returns the parsed flags
// due to the characters passed
static printf_flags_t parse_flags(const char** format)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  printf_flags_t flags = 0U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	60fb      	str	r3, [r7, #12]
  do {
    switch (**format) {
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	3b20      	subs	r3, #32
 80047dc:	2b10      	cmp	r3, #16
 80047de:	d836      	bhi.n	800484e <parse_flags+0x86>
 80047e0:	009a      	lsls	r2, r3, #2
 80047e2:	4b1e      	ldr	r3, [pc, #120]	@ (800485c <parse_flags+0x94>)
 80047e4:	18d3      	adds	r3, r2, r3
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	469f      	mov	pc, r3
      case '0': flags |= FLAGS_ZEROPAD; (*format)++; break;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2201      	movs	r2, #1
 80047ee:	4313      	orrs	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	e029      	b.n	8004852 <parse_flags+0x8a>
      case '-': flags |= FLAGS_LEFT;    (*format)++; break;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2202      	movs	r2, #2
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	1c5a      	adds	r2, r3, #1
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	e01f      	b.n	8004852 <parse_flags+0x8a>
      case '+': flags |= FLAGS_PLUS;    (*format)++; break;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2204      	movs	r2, #4
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	e015      	b.n	8004852 <parse_flags+0x8a>
      case ' ': flags |= FLAGS_SPACE;   (*format)++; break;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2208      	movs	r2, #8
 800482a:	4313      	orrs	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	e00b      	b.n	8004852 <parse_flags+0x8a>
      case '#': flags |= FLAGS_HASH;    (*format)++; break;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2210      	movs	r2, #16
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	e001      	b.n	8004852 <parse_flags+0x8a>
      default : return flags;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	e000      	b.n	8004854 <parse_flags+0x8c>
    switch (**format) {
 8004852:	e7bf      	b.n	80047d4 <parse_flags+0xc>
    }
  } while (true);
}
 8004854:	0018      	movs	r0, r3
 8004856:	46bd      	mov	sp, r7
 8004858:	b004      	add	sp, #16
 800485a:	bd80      	pop	{r7, pc}
 800485c:	080089d0 	.word	0x080089d0

08004860 <format_string_loop>:

static inline void format_string_loop(output_gadget_t* output, const char* format, va_list args)
{
 8004860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004862:	b0ab      	sub	sp, #172	@ 0xac
 8004864:	af06      	add	r7, sp, #24
 8004866:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8004868:	64b9      	str	r1, [r7, #72]	@ 0x48
 800486a:	647a      	str	r2, [r7, #68]	@ 0x44
#else
#define ADVANCE_IN_FORMAT_STRING(cptr_) (cptr_)++
#endif


  while (*format)
 800486c:	f000 fdaa 	bl	80053c4 <format_string_loop+0xb64>
  {
    if (*format != '%') {
 8004870:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2b25      	cmp	r3, #37	@ 0x25
 8004876:	d00b      	beq.n	8004890 <format_string_loop+0x30>
      // A regular content character
      putchar_via_gadget(output, *format);
 8004878:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800487a:	781a      	ldrb	r2, [r3, #0]
 800487c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800487e:	0011      	movs	r1, r2
 8004880:	0018      	movs	r0, r3
 8004882:	f7fe fae3 	bl	8002e4c <putchar_via_gadget>
      format++;
 8004886:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004888:	3301      	adds	r3, #1
 800488a:	64bb      	str	r3, [r7, #72]	@ 0x48
      continue;
 800488c:	f000 fd9a 	bl	80053c4 <format_string_loop+0xb64>
    }
    // We're parsing a format specifier: %[flags][width][.precision][length]
    ADVANCE_IN_FORMAT_STRING(format);
 8004890:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004892:	3301      	adds	r3, #1
 8004894:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004896:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <format_string_loop+0x42>
 800489e:	f000 fd97 	bl	80053d0 <format_string_loop+0xb70>

    printf_flags_t flags = parse_flags(&format);
 80048a2:	2408      	movs	r4, #8
 80048a4:	2338      	movs	r3, #56	@ 0x38
 80048a6:	001e      	movs	r6, r3
 80048a8:	18e2      	adds	r2, r4, r3
 80048aa:	2308      	movs	r3, #8
 80048ac:	18fb      	adds	r3, r7, r3
 80048ae:	18d3      	adds	r3, r2, r3
 80048b0:	0018      	movs	r0, r3
 80048b2:	f7ff ff89 	bl	80047c8 <parse_flags>
 80048b6:	0003      	movs	r3, r0
 80048b8:	2284      	movs	r2, #132	@ 0x84
 80048ba:	2108      	movs	r1, #8
 80048bc:	1852      	adds	r2, r2, r1
 80048be:	19d2      	adds	r2, r2, r7
 80048c0:	6013      	str	r3, [r2, #0]

    // evaluate width field
    printf_size_t width = 0U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	2280      	movs	r2, #128	@ 0x80
 80048c6:	0015      	movs	r5, r2
 80048c8:	2108      	movs	r1, #8
 80048ca:	1852      	adds	r2, r2, r1
 80048cc:	19d1      	adds	r1, r2, r7
 80048ce:	600b      	str	r3, [r1, #0]
    if (is_digit_(*format)) {
 80048d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	0018      	movs	r0, r3
 80048d6:	f7fe fb70 	bl	8002fba <is_digit_>
 80048da:	1e03      	subs	r3, r0, #0
 80048dc:	d00f      	beq.n	80048fe <format_string_loop+0x9e>
      width = (printf_size_t) atou_(&format);
 80048de:	0033      	movs	r3, r6
 80048e0:	18e3      	adds	r3, r4, r3
 80048e2:	2208      	movs	r2, #8
 80048e4:	4694      	mov	ip, r2
 80048e6:	44bc      	add	ip, r7
 80048e8:	4463      	add	r3, ip
 80048ea:	0018      	movs	r0, r3
 80048ec:	f7fe fb7e 	bl	8002fec <atou_>
 80048f0:	0003      	movs	r3, r0
 80048f2:	002a      	movs	r2, r5
 80048f4:	2108      	movs	r1, #8
 80048f6:	1852      	adds	r2, r2, r1
 80048f8:	19d2      	adds	r2, r2, r7
 80048fa:	6013      	str	r3, [r2, #0]
 80048fc:	e02d      	b.n	800495a <format_string_loop+0xfa>
    }
    else if (*format == '*') {
 80048fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	2b2a      	cmp	r3, #42	@ 0x2a
 8004904:	d129      	bne.n	800495a <format_string_loop+0xfa>
      const int w = va_arg(args, int);
 8004906:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004908:	1d13      	adds	r3, r2, #4
 800490a:	647b      	str	r3, [r7, #68]	@ 0x44
 800490c:	6813      	ldr	r3, [r2, #0]
 800490e:	673b      	str	r3, [r7, #112]	@ 0x70
      if (w < 0) {
 8004910:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004912:	2b00      	cmp	r3, #0
 8004914:	da12      	bge.n	800493c <format_string_loop+0xdc>
        flags |= FLAGS_LEFT;    // reverse padding
 8004916:	2184      	movs	r1, #132	@ 0x84
 8004918:	2308      	movs	r3, #8
 800491a:	18cb      	adds	r3, r1, r3
 800491c:	19db      	adds	r3, r3, r7
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	2302      	movs	r3, #2
 8004922:	4313      	orrs	r3, r2
 8004924:	2208      	movs	r2, #8
 8004926:	188a      	adds	r2, r1, r2
 8004928:	19d2      	adds	r2, r2, r7
 800492a:	6013      	str	r3, [r2, #0]
        width = (printf_size_t)-w;
 800492c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800492e:	425b      	negs	r3, r3
 8004930:	2280      	movs	r2, #128	@ 0x80
 8004932:	2108      	movs	r1, #8
 8004934:	1852      	adds	r2, r2, r1
 8004936:	19d2      	adds	r2, r2, r7
 8004938:	6013      	str	r3, [r2, #0]
 800493a:	e005      	b.n	8004948 <format_string_loop+0xe8>
      }
      else {
        width = (printf_size_t)w;
 800493c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800493e:	2280      	movs	r2, #128	@ 0x80
 8004940:	2108      	movs	r1, #8
 8004942:	1852      	adds	r2, r2, r1
 8004944:	19d2      	adds	r2, r2, r7
 8004946:	6013      	str	r3, [r2, #0]
      }
      ADVANCE_IN_FORMAT_STRING(format);
 8004948:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800494a:	3301      	adds	r3, #1
 800494c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800494e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <format_string_loop+0xfa>
 8004956:	f000 fd3b 	bl	80053d0 <format_string_loop+0xb70>
    }

    // evaluate precision field
    printf_size_t precision = 0U;
 800495a:	2300      	movs	r3, #0
 800495c:	2284      	movs	r2, #132	@ 0x84
 800495e:	18ba      	adds	r2, r7, r2
 8004960:	6013      	str	r3, [r2, #0]
    if (*format == '.') {
 8004962:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b2e      	cmp	r3, #46	@ 0x2e
 8004968:	d143      	bne.n	80049f2 <format_string_loop+0x192>
      flags |= FLAGS_PRECISION;
 800496a:	2184      	movs	r1, #132	@ 0x84
 800496c:	2308      	movs	r3, #8
 800496e:	18cb      	adds	r3, r1, r3
 8004970:	19db      	adds	r3, r3, r7
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	2380      	movs	r3, #128	@ 0x80
 8004976:	011b      	lsls	r3, r3, #4
 8004978:	4313      	orrs	r3, r2
 800497a:	2208      	movs	r2, #8
 800497c:	188a      	adds	r2, r1, r2
 800497e:	19d2      	adds	r2, r2, r7
 8004980:	6013      	str	r3, [r2, #0]
      ADVANCE_IN_FORMAT_STRING(format);
 8004982:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004984:	3301      	adds	r3, #1
 8004986:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004988:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <format_string_loop+0x134>
 8004990:	f000 fd1e 	bl	80053d0 <format_string_loop+0xb70>
      if (is_digit_(*format)) {
 8004994:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	0018      	movs	r0, r3
 800499a:	f7fe fb0e 	bl	8002fba <is_digit_>
 800499e:	1e03      	subs	r3, r0, #0
 80049a0:	d00e      	beq.n	80049c0 <format_string_loop+0x160>
        precision = (printf_size_t) atou_(&format);
 80049a2:	2308      	movs	r3, #8
 80049a4:	2238      	movs	r2, #56	@ 0x38
 80049a6:	189b      	adds	r3, r3, r2
 80049a8:	2208      	movs	r2, #8
 80049aa:	4694      	mov	ip, r2
 80049ac:	44bc      	add	ip, r7
 80049ae:	4463      	add	r3, ip
 80049b0:	0018      	movs	r0, r3
 80049b2:	f7fe fb1b 	bl	8002fec <atou_>
 80049b6:	0003      	movs	r3, r0
 80049b8:	2284      	movs	r2, #132	@ 0x84
 80049ba:	18ba      	adds	r2, r7, r2
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	e018      	b.n	80049f2 <format_string_loop+0x192>
      }
      else if (*format == '*') {
 80049c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80049c6:	d114      	bne.n	80049f2 <format_string_loop+0x192>
        const int precision_ = va_arg(args, int);
 80049c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049ca:	1d13      	adds	r3, r2, #4
 80049cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80049ce:	6813      	ldr	r3, [r2, #0]
 80049d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
        precision = precision_ > 0 ? (printf_size_t) precision_ : 0U;
 80049d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	da00      	bge.n	80049da <format_string_loop+0x17a>
 80049d8:	2300      	movs	r3, #0
 80049da:	2284      	movs	r2, #132	@ 0x84
 80049dc:	18ba      	adds	r2, r7, r2
 80049de:	6013      	str	r3, [r2, #0]
        ADVANCE_IN_FORMAT_STRING(format);
 80049e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049e2:	3301      	adds	r3, #1
 80049e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <format_string_loop+0x192>
 80049ee:	f000 fcef 	bl	80053d0 <format_string_loop+0xb70>
      }
    }

    // evaluate length field
    switch (*format) {
 80049f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	3b68      	subs	r3, #104	@ 0x68
 80049f8:	2b12      	cmp	r3, #18
 80049fa:	d900      	bls.n	80049fe <format_string_loop+0x19e>
 80049fc:	e0a1      	b.n	8004b42 <format_string_loop+0x2e2>
 80049fe:	009a      	lsls	r2, r3, #2
 8004a00:	4be1      	ldr	r3, [pc, #900]	@ (8004d88 <format_string_loop+0x528>)
 8004a02:	18d3      	adds	r3, r2, r3
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	469f      	mov	pc, r3
        }
        break;
      }
#endif
      case 'l' :
        flags |= FLAGS_LONG;
 8004a08:	2184      	movs	r1, #132	@ 0x84
 8004a0a:	2308      	movs	r3, #8
 8004a0c:	18cb      	adds	r3, r1, r3
 8004a0e:	19db      	adds	r3, r3, r7
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	2380      	movs	r3, #128	@ 0x80
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4313      	orrs	r3, r2
 8004a18:	000a      	movs	r2, r1
 8004a1a:	2108      	movs	r1, #8
 8004a1c:	1851      	adds	r1, r2, r1
 8004a1e:	19c9      	adds	r1, r1, r7
 8004a20:	600b      	str	r3, [r1, #0]
        ADVANCE_IN_FORMAT_STRING(format);
 8004a22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a24:	3301      	adds	r3, #1
 8004a26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <format_string_loop+0x1d4>
 8004a30:	f000 fcce 	bl	80053d0 <format_string_loop+0xb70>
        if (*format == 'l') {
 8004a34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	2b6c      	cmp	r3, #108	@ 0x6c
 8004a3a:	d000      	beq.n	8004a3e <format_string_loop+0x1de>
 8004a3c:	e083      	b.n	8004b46 <format_string_loop+0x2e6>
          flags |= FLAGS_LONG_LONG;
 8004a3e:	0011      	movs	r1, r2
 8004a40:	2308      	movs	r3, #8
 8004a42:	18d3      	adds	r3, r2, r3
 8004a44:	19db      	adds	r3, r3, r7
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	2380      	movs	r3, #128	@ 0x80
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	2208      	movs	r2, #8
 8004a50:	188a      	adds	r2, r1, r2
 8004a52:	19d2      	adds	r2, r2, r7
 8004a54:	6013      	str	r3, [r2, #0]
          ADVANCE_IN_FORMAT_STRING(format);
 8004a56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a58:	3301      	adds	r3, #1
 8004a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d170      	bne.n	8004b46 <format_string_loop+0x2e6>
 8004a64:	f000 fcb4 	bl	80053d0 <format_string_loop+0xb70>
        }
        break;
      case 'h' :
        flags |= FLAGS_SHORT;
 8004a68:	2184      	movs	r1, #132	@ 0x84
 8004a6a:	2308      	movs	r3, #8
 8004a6c:	18cb      	adds	r3, r1, r3
 8004a6e:	19db      	adds	r3, r3, r7
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	2380      	movs	r3, #128	@ 0x80
 8004a74:	4313      	orrs	r3, r2
 8004a76:	000a      	movs	r2, r1
 8004a78:	2108      	movs	r1, #8
 8004a7a:	1851      	adds	r1, r2, r1
 8004a7c:	19c9      	adds	r1, r1, r7
 8004a7e:	600b      	str	r3, [r1, #0]
        ADVANCE_IN_FORMAT_STRING(format);
 8004a80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a82:	3301      	adds	r3, #1
 8004a84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <format_string_loop+0x232>
 8004a8e:	f000 fc9f 	bl	80053d0 <format_string_loop+0xb70>
        if (*format == 'h') {
 8004a92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	2b68      	cmp	r3, #104	@ 0x68
 8004a98:	d157      	bne.n	8004b4a <format_string_loop+0x2ea>
          flags |= FLAGS_CHAR;
 8004a9a:	0011      	movs	r1, r2
 8004a9c:	2308      	movs	r3, #8
 8004a9e:	18d3      	adds	r3, r2, r3
 8004aa0:	19db      	adds	r3, r3, r7
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	2340      	movs	r3, #64	@ 0x40
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	2208      	movs	r2, #8
 8004aaa:	188a      	adds	r2, r1, r2
 8004aac:	19d2      	adds	r2, r2, r7
 8004aae:	6013      	str	r3, [r2, #0]
          ADVANCE_IN_FORMAT_STRING(format);
 8004ab0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ab6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d145      	bne.n	8004b4a <format_string_loop+0x2ea>
 8004abe:	f000 fc87 	bl	80053d0 <format_string_loop+0xb70>
        }
        break;
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004ac2:	2184      	movs	r1, #132	@ 0x84
 8004ac4:	2308      	movs	r3, #8
 8004ac6:	18cb      	adds	r3, r1, r3
 8004ac8:	19db      	adds	r3, r3, r7
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	2380      	movs	r3, #128	@ 0x80
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	2208      	movs	r2, #8
 8004ad4:	188a      	adds	r2, r1, r2
 8004ad6:	19d2      	adds	r2, r2, r7
 8004ad8:	6013      	str	r3, [r2, #0]
        ADVANCE_IN_FORMAT_STRING(format);
 8004ada:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004adc:	3301      	adds	r3, #1
 8004ade:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ae0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d132      	bne.n	8004b4e <format_string_loop+0x2ee>
 8004ae8:	f000 fc72 	bl	80053d0 <format_string_loop+0xb70>
        break;
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004aec:	2184      	movs	r1, #132	@ 0x84
 8004aee:	2308      	movs	r3, #8
 8004af0:	18cb      	adds	r3, r1, r3
 8004af2:	19db      	adds	r3, r3, r7
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	2380      	movs	r3, #128	@ 0x80
 8004af8:	00db      	lsls	r3, r3, #3
 8004afa:	4313      	orrs	r3, r2
 8004afc:	2208      	movs	r2, #8
 8004afe:	188a      	adds	r2, r1, r2
 8004b00:	19d2      	adds	r2, r2, r7
 8004b02:	6013      	str	r3, [r2, #0]
        ADVANCE_IN_FORMAT_STRING(format);
 8004b04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b06:	3301      	adds	r3, #1
 8004b08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d11f      	bne.n	8004b52 <format_string_loop+0x2f2>
 8004b12:	f000 fc5d 	bl	80053d0 <format_string_loop+0xb70>
        break;
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004b16:	2184      	movs	r1, #132	@ 0x84
 8004b18:	2308      	movs	r3, #8
 8004b1a:	18cb      	adds	r3, r1, r3
 8004b1c:	19db      	adds	r3, r3, r7
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	2380      	movs	r3, #128	@ 0x80
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4313      	orrs	r3, r2
 8004b26:	2208      	movs	r2, #8
 8004b28:	188a      	adds	r2, r1, r2
 8004b2a:	19d2      	adds	r2, r2, r7
 8004b2c:	6013      	str	r3, [r2, #0]
        ADVANCE_IN_FORMAT_STRING(format);
 8004b2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b30:	3301      	adds	r3, #1
 8004b32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <format_string_loop+0x2e0>
 8004b3c:	f000 fc48 	bl	80053d0 <format_string_loop+0xb70>
        break;
 8004b40:	e008      	b.n	8004b54 <format_string_loop+0x2f4>
      default:
        break;
 8004b42:	46c0      	nop			@ (mov r8, r8)
 8004b44:	e006      	b.n	8004b54 <format_string_loop+0x2f4>
        break;
 8004b46:	46c0      	nop			@ (mov r8, r8)
 8004b48:	e004      	b.n	8004b54 <format_string_loop+0x2f4>
        break;
 8004b4a:	46c0      	nop			@ (mov r8, r8)
 8004b4c:	e002      	b.n	8004b54 <format_string_loop+0x2f4>
        break;
 8004b4e:	46c0      	nop			@ (mov r8, r8)
 8004b50:	e000      	b.n	8004b54 <format_string_loop+0x2f4>
        break;
 8004b52:	46c0      	nop			@ (mov r8, r8)
    }

    // evaluate specifier
    switch (*format) {
 8004b54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	3b25      	subs	r3, #37	@ 0x25
 8004b5a:	2b53      	cmp	r3, #83	@ 0x53
 8004b5c:	d901      	bls.n	8004b62 <format_string_loop+0x302>
 8004b5e:	f000 fc26 	bl	80053ae <format_string_loop+0xb4e>
 8004b62:	009a      	lsls	r2, r3, #2
 8004b64:	4b89      	ldr	r3, [pc, #548]	@ (8004d8c <format_string_loop+0x52c>)
 8004b66:	18d3      	adds	r3, r2, r3
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	469f      	mov	pc, r3
      case 'x' :
      case 'X' :
      case 'o' :
      case 'b' : {

        if (*format == 'd' || *format == 'i') {
 8004b6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	2b64      	cmp	r3, #100	@ 0x64
 8004b72:	d003      	beq.n	8004b7c <format_string_loop+0x31c>
 8004b74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b69      	cmp	r3, #105	@ 0x69
 8004b7a:	d10b      	bne.n	8004b94 <format_string_loop+0x334>
          flags |= FLAGS_SIGNED;
 8004b7c:	2184      	movs	r1, #132	@ 0x84
 8004b7e:	2308      	movs	r3, #8
 8004b80:	18cb      	adds	r3, r1, r3
 8004b82:	19db      	adds	r3, r3, r7
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	2380      	movs	r3, #128	@ 0x80
 8004b88:	01db      	lsls	r3, r3, #7
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	2208      	movs	r2, #8
 8004b8e:	188a      	adds	r2, r1, r2
 8004b90:	19d2      	adds	r2, r2, r7
 8004b92:	6013      	str	r3, [r2, #0]
        }

        numeric_base_t base;
        if (*format == 'x' || *format == 'X') {
 8004b94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	2b78      	cmp	r3, #120	@ 0x78
 8004b9a:	d003      	beq.n	8004ba4 <format_string_loop+0x344>
 8004b9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	2b58      	cmp	r3, #88	@ 0x58
 8004ba2:	d108      	bne.n	8004bb6 <format_string_loop+0x356>
          base = BASE_HEX;
 8004ba4:	2343      	movs	r3, #67	@ 0x43
 8004ba6:	2238      	movs	r2, #56	@ 0x38
 8004ba8:	189b      	adds	r3, r3, r2
 8004baa:	2208      	movs	r2, #8
 8004bac:	18ba      	adds	r2, r7, r2
 8004bae:	189a      	adds	r2, r3, r2
 8004bb0:	2310      	movs	r3, #16
 8004bb2:	7013      	strb	r3, [r2, #0]
 8004bb4:	e02d      	b.n	8004c12 <format_string_loop+0x3b2>
        }
        else if (*format == 'o') {
 8004bb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	2b6f      	cmp	r3, #111	@ 0x6f
 8004bbc:	d108      	bne.n	8004bd0 <format_string_loop+0x370>
          base =  BASE_OCTAL;
 8004bbe:	2343      	movs	r3, #67	@ 0x43
 8004bc0:	2238      	movs	r2, #56	@ 0x38
 8004bc2:	189b      	adds	r3, r3, r2
 8004bc4:	2208      	movs	r2, #8
 8004bc6:	18ba      	adds	r2, r7, r2
 8004bc8:	189a      	adds	r2, r3, r2
 8004bca:	2308      	movs	r3, #8
 8004bcc:	7013      	strb	r3, [r2, #0]
 8004bce:	e020      	b.n	8004c12 <format_string_loop+0x3b2>
        }
        else if (*format == 'b') {
 8004bd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2b62      	cmp	r3, #98	@ 0x62
 8004bd6:	d108      	bne.n	8004bea <format_string_loop+0x38a>
          base =  BASE_BINARY;
 8004bd8:	2343      	movs	r3, #67	@ 0x43
 8004bda:	2238      	movs	r2, #56	@ 0x38
 8004bdc:	189b      	adds	r3, r3, r2
 8004bde:	2208      	movs	r2, #8
 8004be0:	18ba      	adds	r2, r7, r2
 8004be2:	189a      	adds	r2, r3, r2
 8004be4:	2302      	movs	r3, #2
 8004be6:	7013      	strb	r3, [r2, #0]
 8004be8:	e013      	b.n	8004c12 <format_string_loop+0x3b2>
        }
        else {
          base = BASE_DECIMAL;
 8004bea:	2343      	movs	r3, #67	@ 0x43
 8004bec:	2238      	movs	r2, #56	@ 0x38
 8004bee:	189b      	adds	r3, r3, r2
 8004bf0:	2208      	movs	r2, #8
 8004bf2:	18ba      	adds	r2, r7, r2
 8004bf4:	189a      	adds	r2, r3, r2
 8004bf6:	230a      	movs	r3, #10
 8004bf8:	7013      	strb	r3, [r2, #0]
          flags &= ~FLAGS_HASH; // decimal integers have no alternative presentation
 8004bfa:	2184      	movs	r1, #132	@ 0x84
 8004bfc:	2308      	movs	r3, #8
 8004bfe:	18cb      	adds	r3, r1, r3
 8004c00:	19db      	adds	r3, r3, r7
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	2310      	movs	r3, #16
 8004c06:	439a      	bics	r2, r3
 8004c08:	0013      	movs	r3, r2
 8004c0a:	2208      	movs	r2, #8
 8004c0c:	188a      	adds	r2, r1, r2
 8004c0e:	19d2      	adds	r2, r2, r7
 8004c10:	6013      	str	r3, [r2, #0]
        }

        if (*format == 'X') {
 8004c12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	2b58      	cmp	r3, #88	@ 0x58
 8004c18:	d10a      	bne.n	8004c30 <format_string_loop+0x3d0>
          flags |= FLAGS_UPPERCASE;
 8004c1a:	2184      	movs	r1, #132	@ 0x84
 8004c1c:	2308      	movs	r3, #8
 8004c1e:	18cb      	adds	r3, r1, r3
 8004c20:	19db      	adds	r3, r3, r7
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	2320      	movs	r3, #32
 8004c26:	4313      	orrs	r3, r2
 8004c28:	2208      	movs	r2, #8
 8004c2a:	188a      	adds	r2, r1, r2
 8004c2c:	19d2      	adds	r2, r2, r7
 8004c2e:	6013      	str	r3, [r2, #0]
        }

        format++;
 8004c30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c32:	3301      	adds	r3, #1
 8004c34:	64bb      	str	r3, [r7, #72]	@ 0x48
        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8004c36:	2184      	movs	r1, #132	@ 0x84
 8004c38:	2308      	movs	r3, #8
 8004c3a:	18cb      	adds	r3, r1, r3
 8004c3c:	19db      	adds	r3, r3, r7
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	2380      	movs	r3, #128	@ 0x80
 8004c42:	011b      	lsls	r3, r3, #4
 8004c44:	4013      	ands	r3, r2
 8004c46:	d00a      	beq.n	8004c5e <format_string_loop+0x3fe>
          flags &= ~FLAGS_ZEROPAD;
 8004c48:	2308      	movs	r3, #8
 8004c4a:	18cb      	adds	r3, r1, r3
 8004c4c:	19db      	adds	r3, r3, r7
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	2301      	movs	r3, #1
 8004c52:	439a      	bics	r2, r3
 8004c54:	0013      	movs	r3, r2
 8004c56:	2208      	movs	r2, #8
 8004c58:	188a      	adds	r2, r1, r2
 8004c5a:	19d2      	adds	r2, r2, r7
 8004c5c:	6013      	str	r3, [r2, #0]
        }

        if (flags & FLAGS_SIGNED) {
 8004c5e:	2184      	movs	r1, #132	@ 0x84
 8004c60:	2308      	movs	r3, #8
 8004c62:	18cb      	adds	r3, r1, r3
 8004c64:	19db      	adds	r3, r3, r7
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	2380      	movs	r3, #128	@ 0x80
 8004c6a:	01db      	lsls	r3, r3, #7
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	d100      	bne.n	8004c72 <format_string_loop+0x412>
 8004c70:	e0e7      	b.n	8004e42 <format_string_loop+0x5e2>
          // A signed specifier: d, i or possibly I + bit size if enabled

          if (flags & FLAGS_LONG_LONG) {
 8004c72:	2308      	movs	r3, #8
 8004c74:	18cb      	adds	r3, r1, r3
 8004c76:	19db      	adds	r3, r3, r7
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	2380      	movs	r3, #128	@ 0x80
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	4013      	ands	r3, r2
 8004c80:	d03c      	beq.n	8004cfc <format_string_loop+0x49c>
#if PRINTF_SUPPORT_LONG_LONG
            const long long value = va_arg(args, long long);
 8004c82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c84:	1dda      	adds	r2, r3, #7
 8004c86:	2307      	movs	r3, #7
 8004c88:	439a      	bics	r2, r3
 8004c8a:	0013      	movs	r3, r2
 8004c8c:	3308      	adds	r3, #8
 8004c8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c90:	6853      	ldr	r3, [r2, #4]
 8004c92:	6812      	ldr	r2, [r2, #0]
 8004c94:	653a      	str	r2, [r7, #80]	@ 0x50
 8004c96:	657b      	str	r3, [r7, #84]	@ 0x54
            print_integer(output, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 8004c98:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8004c9a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c9c:	2900      	cmp	r1, #0
 8004c9e:	da05      	bge.n	8004cac <format_string_loop+0x44c>
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	1a12      	subs	r2, r2, r0
 8004ca6:	418b      	sbcs	r3, r1
 8004ca8:	0010      	movs	r0, r2
 8004caa:	0019      	movs	r1, r3
 8004cac:	0002      	movs	r2, r0
 8004cae:	000b      	movs	r3, r1
 8004cb0:	0010      	movs	r0, r2
 8004cb2:	0019      	movs	r1, r3
 8004cb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cb6:	0fdb      	lsrs	r3, r3, #31
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8004cbc:	2384      	movs	r3, #132	@ 0x84
 8004cbe:	2508      	movs	r5, #8
 8004cc0:	195b      	adds	r3, r3, r5
 8004cc2:	19db      	adds	r3, r3, r7
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	9304      	str	r3, [sp, #16]
 8004cc8:	2380      	movs	r3, #128	@ 0x80
 8004cca:	2508      	movs	r5, #8
 8004ccc:	195b      	adds	r3, r3, r5
 8004cce:	19db      	adds	r3, r3, r7
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	9303      	str	r3, [sp, #12]
 8004cd4:	2384      	movs	r3, #132	@ 0x84
 8004cd6:	18fb      	adds	r3, r7, r3
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	9302      	str	r3, [sp, #8]
 8004cdc:	2343      	movs	r3, #67	@ 0x43
 8004cde:	2538      	movs	r5, #56	@ 0x38
 8004ce0:	195b      	adds	r3, r3, r5
 8004ce2:	2508      	movs	r5, #8
 8004ce4:	46ac      	mov	ip, r5
 8004ce6:	44bc      	add	ip, r7
 8004ce8:	4463      	add	r3, ip
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	9301      	str	r3, [sp, #4]
 8004cee:	9200      	str	r2, [sp, #0]
 8004cf0:	0002      	movs	r2, r0
 8004cf2:	000b      	movs	r3, r1
 8004cf4:	0020      	movs	r0, r4
 8004cf6:	f7fe fad9 	bl	80032ac <print_integer>
              (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(args, unsigned int) :
              va_arg(args, unsigned int);
            print_integer(output, (printf_unsigned_value_t) value, false, base, precision, width, flags);
          }
        }
        break;
 8004cfa:	e363      	b.n	80053c4 <format_string_loop+0xb64>
          else if (flags & FLAGS_LONG) {
 8004cfc:	2384      	movs	r3, #132	@ 0x84
 8004cfe:	2208      	movs	r2, #8
 8004d00:	189b      	adds	r3, r3, r2
 8004d02:	19db      	adds	r3, r3, r7
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	2380      	movs	r3, #128	@ 0x80
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	d040      	beq.n	8004d90 <format_string_loop+0x530>
            const long value = va_arg(args, long);
 8004d0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d10:	1d13      	adds	r3, r2, #4
 8004d12:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d14:	6813      	ldr	r3, [r2, #0]
 8004d16:	65fb      	str	r3, [r7, #92]	@ 0x5c
            print_integer(output, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 8004d18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	dd04      	ble.n	8004d28 <format_string_loop+0x4c8>
 8004d1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d20:	603b      	str	r3, [r7, #0]
 8004d22:	17db      	asrs	r3, r3, #31
 8004d24:	607b      	str	r3, [r7, #4]
 8004d26:	e00b      	b.n	8004d40 <format_string_loop+0x4e0>
 8004d28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d2c:	17db      	asrs	r3, r3, #31
 8004d2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d30:	2200      	movs	r2, #0
 8004d32:	2300      	movs	r3, #0
 8004d34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d36:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004d38:	1a12      	subs	r2, r2, r0
 8004d3a:	418b      	sbcs	r3, r1
 8004d3c:	603a      	str	r2, [r7, #0]
 8004d3e:	607b      	str	r3, [r7, #4]
 8004d40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d42:	0fdb      	lsrs	r3, r3, #31
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004d48:	2384      	movs	r3, #132	@ 0x84
 8004d4a:	2008      	movs	r0, #8
 8004d4c:	181b      	adds	r3, r3, r0
 8004d4e:	19db      	adds	r3, r3, r7
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	9304      	str	r3, [sp, #16]
 8004d54:	2380      	movs	r3, #128	@ 0x80
 8004d56:	2008      	movs	r0, #8
 8004d58:	181b      	adds	r3, r3, r0
 8004d5a:	19db      	adds	r3, r3, r7
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	9303      	str	r3, [sp, #12]
 8004d60:	2384      	movs	r3, #132	@ 0x84
 8004d62:	18fb      	adds	r3, r7, r3
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	9302      	str	r3, [sp, #8]
 8004d68:	2343      	movs	r3, #67	@ 0x43
 8004d6a:	2038      	movs	r0, #56	@ 0x38
 8004d6c:	181b      	adds	r3, r3, r0
 8004d6e:	2008      	movs	r0, #8
 8004d70:	4684      	mov	ip, r0
 8004d72:	44bc      	add	ip, r7
 8004d74:	4463      	add	r3, ip
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	9301      	str	r3, [sp, #4]
 8004d7a:	9200      	str	r2, [sp, #0]
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	0008      	movs	r0, r1
 8004d82:	f7fe fa93 	bl	80032ac <print_integer>
        break;
 8004d86:	e31d      	b.n	80053c4 <format_string_loop+0xb64>
 8004d88:	08008a14 	.word	0x08008a14
 8004d8c:	08008a60 	.word	0x08008a60
              (flags & FLAGS_CHAR) ? (signed char) va_arg(args, int) :
 8004d90:	2384      	movs	r3, #132	@ 0x84
 8004d92:	2208      	movs	r2, #8
 8004d94:	189b      	adds	r3, r3, r2
 8004d96:	19db      	adds	r3, r3, r7
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	2340      	movs	r3, #64	@ 0x40
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	d005      	beq.n	8004dac <format_string_loop+0x54c>
 8004da0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004da2:	1d13      	adds	r3, r2, #4
 8004da4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004da6:	6813      	ldr	r3, [r2, #0]
 8004da8:	b25b      	sxtb	r3, r3
 8004daa:	e011      	b.n	8004dd0 <format_string_loop+0x570>
              (flags & FLAGS_SHORT) ? (short int) va_arg(args, int) :
 8004dac:	2384      	movs	r3, #132	@ 0x84
 8004dae:	2208      	movs	r2, #8
 8004db0:	189b      	adds	r3, r3, r2
 8004db2:	19db      	adds	r3, r3, r7
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	2380      	movs	r3, #128	@ 0x80
 8004db8:	4013      	ands	r3, r2
 8004dba:	d005      	beq.n	8004dc8 <format_string_loop+0x568>
 8004dbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dbe:	1d13      	adds	r3, r2, #4
 8004dc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dc2:	6813      	ldr	r3, [r2, #0]
 8004dc4:	b21b      	sxth	r3, r3
 8004dc6:	e003      	b.n	8004dd0 <format_string_loop+0x570>
 8004dc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dca:	1d13      	adds	r3, r2, #4
 8004dcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dce:	6813      	ldr	r3, [r2, #0]
            const int value =
 8004dd0:	663b      	str	r3, [r7, #96]	@ 0x60
            print_integer(output, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 8004dd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	dd04      	ble.n	8004de2 <format_string_loop+0x582>
 8004dd8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004dda:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ddc:	17db      	asrs	r3, r3, #31
 8004dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004de0:	e00b      	b.n	8004dfa <format_string_loop+0x59a>
 8004de2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004de4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004de6:	17db      	asrs	r3, r3, #31
 8004de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dea:	2200      	movs	r2, #0
 8004dec:	2300      	movs	r3, #0
 8004dee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004df0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004df2:	1a12      	subs	r2, r2, r0
 8004df4:	418b      	sbcs	r3, r1
 8004df6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dfa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004dfc:	0fdb      	lsrs	r3, r3, #31
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004e02:	2384      	movs	r3, #132	@ 0x84
 8004e04:	2008      	movs	r0, #8
 8004e06:	181b      	adds	r3, r3, r0
 8004e08:	19db      	adds	r3, r3, r7
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	9304      	str	r3, [sp, #16]
 8004e0e:	2380      	movs	r3, #128	@ 0x80
 8004e10:	2008      	movs	r0, #8
 8004e12:	181b      	adds	r3, r3, r0
 8004e14:	19db      	adds	r3, r3, r7
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	9303      	str	r3, [sp, #12]
 8004e1a:	2384      	movs	r3, #132	@ 0x84
 8004e1c:	18fb      	adds	r3, r7, r3
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	9302      	str	r3, [sp, #8]
 8004e22:	2343      	movs	r3, #67	@ 0x43
 8004e24:	2038      	movs	r0, #56	@ 0x38
 8004e26:	181b      	adds	r3, r3, r0
 8004e28:	2008      	movs	r0, #8
 8004e2a:	4684      	mov	ip, r0
 8004e2c:	44bc      	add	ip, r7
 8004e2e:	4463      	add	r3, ip
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	9301      	str	r3, [sp, #4]
 8004e34:	9200      	str	r2, [sp, #0]
 8004e36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e3a:	0008      	movs	r0, r1
 8004e3c:	f7fe fa36 	bl	80032ac <print_integer>
        break;
 8004e40:	e2c0      	b.n	80053c4 <format_string_loop+0xb64>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8004e42:	2184      	movs	r1, #132	@ 0x84
 8004e44:	2308      	movs	r3, #8
 8004e46:	18cb      	adds	r3, r1, r3
 8004e48:	19db      	adds	r3, r3, r7
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	230c      	movs	r3, #12
 8004e4e:	439a      	bics	r2, r3
 8004e50:	0013      	movs	r3, r2
 8004e52:	2208      	movs	r2, #8
 8004e54:	188a      	adds	r2, r1, r2
 8004e56:	19d2      	adds	r2, r2, r7
 8004e58:	6013      	str	r3, [r2, #0]
          if (flags & FLAGS_LONG_LONG) {
 8004e5a:	000d      	movs	r5, r1
 8004e5c:	2308      	movs	r3, #8
 8004e5e:	18cb      	adds	r3, r1, r3
 8004e60:	19da      	adds	r2, r3, r7
 8004e62:	6812      	ldr	r2, [r2, #0]
 8004e64:	2380      	movs	r3, #128	@ 0x80
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	4013      	ands	r3, r2
 8004e6a:	d02a      	beq.n	8004ec2 <format_string_loop+0x662>
            print_integer(output, (printf_unsigned_value_t) va_arg(args, unsigned long long), false, base, precision, width, flags);
 8004e6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e6e:	1dda      	adds	r2, r3, #7
 8004e70:	2307      	movs	r3, #7
 8004e72:	439a      	bics	r2, r3
 8004e74:	0013      	movs	r3, r2
 8004e76:	3308      	adds	r3, #8
 8004e78:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e7a:	6810      	ldr	r0, [r2, #0]
 8004e7c:	6851      	ldr	r1, [r2, #4]
 8004e7e:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8004e80:	002b      	movs	r3, r5
 8004e82:	2208      	movs	r2, #8
 8004e84:	189b      	adds	r3, r3, r2
 8004e86:	19db      	adds	r3, r3, r7
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	9304      	str	r3, [sp, #16]
 8004e8c:	2380      	movs	r3, #128	@ 0x80
 8004e8e:	2208      	movs	r2, #8
 8004e90:	189b      	adds	r3, r3, r2
 8004e92:	19db      	adds	r3, r3, r7
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	9303      	str	r3, [sp, #12]
 8004e98:	2384      	movs	r3, #132	@ 0x84
 8004e9a:	18fb      	adds	r3, r7, r3
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	9302      	str	r3, [sp, #8]
 8004ea0:	2343      	movs	r3, #67	@ 0x43
 8004ea2:	2238      	movs	r2, #56	@ 0x38
 8004ea4:	189b      	adds	r3, r3, r2
 8004ea6:	2208      	movs	r2, #8
 8004ea8:	4694      	mov	ip, r2
 8004eaa:	44bc      	add	ip, r7
 8004eac:	4463      	add	r3, ip
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	9301      	str	r3, [sp, #4]
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	0002      	movs	r2, r0
 8004eb8:	000b      	movs	r3, r1
 8004eba:	0020      	movs	r0, r4
 8004ebc:	f7fe f9f6 	bl	80032ac <print_integer>
        break;
 8004ec0:	e280      	b.n	80053c4 <format_string_loop+0xb64>
          else if (flags & FLAGS_LONG) {
 8004ec2:	2084      	movs	r0, #132	@ 0x84
 8004ec4:	2308      	movs	r3, #8
 8004ec6:	18c3      	adds	r3, r0, r3
 8004ec8:	19db      	adds	r3, r3, r7
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	2380      	movs	r3, #128	@ 0x80
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	d027      	beq.n	8004f24 <format_string_loop+0x6c4>
            print_integer(output, (printf_unsigned_value_t) va_arg(args, unsigned long), false, base, precision, width, flags);
 8004ed4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ed6:	1d13      	adds	r3, r2, #4
 8004ed8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004eda:	6813      	ldr	r3, [r2, #0]
 8004edc:	623b      	str	r3, [r7, #32]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ee2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004ee4:	2308      	movs	r3, #8
 8004ee6:	18c3      	adds	r3, r0, r3
 8004ee8:	19db      	adds	r3, r3, r7
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	9304      	str	r3, [sp, #16]
 8004eee:	2380      	movs	r3, #128	@ 0x80
 8004ef0:	2208      	movs	r2, #8
 8004ef2:	189b      	adds	r3, r3, r2
 8004ef4:	19db      	adds	r3, r3, r7
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	9303      	str	r3, [sp, #12]
 8004efa:	2384      	movs	r3, #132	@ 0x84
 8004efc:	18fb      	adds	r3, r7, r3
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	9302      	str	r3, [sp, #8]
 8004f02:	2343      	movs	r3, #67	@ 0x43
 8004f04:	2238      	movs	r2, #56	@ 0x38
 8004f06:	189b      	adds	r3, r3, r2
 8004f08:	2208      	movs	r2, #8
 8004f0a:	4694      	mov	ip, r2
 8004f0c:	44bc      	add	ip, r7
 8004f0e:	4463      	add	r3, ip
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	9301      	str	r3, [sp, #4]
 8004f14:	2300      	movs	r3, #0
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	6a3a      	ldr	r2, [r7, #32]
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1c:	0008      	movs	r0, r1
 8004f1e:	f7fe f9c5 	bl	80032ac <print_integer>
        break;
 8004f22:	e24f      	b.n	80053c4 <format_string_loop+0xb64>
              (flags & FLAGS_CHAR) ? (unsigned char)va_arg(args, unsigned int) :
 8004f24:	2384      	movs	r3, #132	@ 0x84
 8004f26:	2208      	movs	r2, #8
 8004f28:	189b      	adds	r3, r3, r2
 8004f2a:	19db      	adds	r3, r3, r7
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	2340      	movs	r3, #64	@ 0x40
 8004f30:	4013      	ands	r3, r2
 8004f32:	d005      	beq.n	8004f40 <format_string_loop+0x6e0>
 8004f34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f36:	1d13      	adds	r3, r2, #4
 8004f38:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f3a:	6813      	ldr	r3, [r2, #0]
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	e011      	b.n	8004f64 <format_string_loop+0x704>
              (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(args, unsigned int) :
 8004f40:	2384      	movs	r3, #132	@ 0x84
 8004f42:	2208      	movs	r2, #8
 8004f44:	189b      	adds	r3, r3, r2
 8004f46:	19db      	adds	r3, r3, r7
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	2380      	movs	r3, #128	@ 0x80
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	d005      	beq.n	8004f5c <format_string_loop+0x6fc>
 8004f50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f52:	1d13      	adds	r3, r2, #4
 8004f54:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f56:	6813      	ldr	r3, [r2, #0]
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	e003      	b.n	8004f64 <format_string_loop+0x704>
 8004f5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f5e:	1d13      	adds	r3, r2, #4
 8004f60:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f62:	6813      	ldr	r3, [r2, #0]
            const unsigned int value =
 8004f64:	667b      	str	r3, [r7, #100]	@ 0x64
            print_integer(output, (printf_unsigned_value_t) value, false, base, precision, width, flags);
 8004f66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f68:	61bb      	str	r3, [r7, #24]
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	61fb      	str	r3, [r7, #28]
 8004f6e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004f70:	2384      	movs	r3, #132	@ 0x84
 8004f72:	2208      	movs	r2, #8
 8004f74:	189b      	adds	r3, r3, r2
 8004f76:	19db      	adds	r3, r3, r7
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	9304      	str	r3, [sp, #16]
 8004f7c:	2380      	movs	r3, #128	@ 0x80
 8004f7e:	2208      	movs	r2, #8
 8004f80:	189b      	adds	r3, r3, r2
 8004f82:	19db      	adds	r3, r3, r7
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	9303      	str	r3, [sp, #12]
 8004f88:	2384      	movs	r3, #132	@ 0x84
 8004f8a:	18fb      	adds	r3, r7, r3
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	9302      	str	r3, [sp, #8]
 8004f90:	2343      	movs	r3, #67	@ 0x43
 8004f92:	2238      	movs	r2, #56	@ 0x38
 8004f94:	189b      	adds	r3, r3, r2
 8004f96:	2208      	movs	r2, #8
 8004f98:	4694      	mov	ip, r2
 8004f9a:	44bc      	add	ip, r7
 8004f9c:	4463      	add	r3, ip
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	9301      	str	r3, [sp, #4]
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	0008      	movs	r0, r1
 8004fac:	f7fe f97e 	bl	80032ac <print_integer>
        break;
 8004fb0:	e208      	b.n	80053c4 <format_string_loop+0xb64>
      }
#if PRINTF_SUPPORT_DECIMAL_SPECIFIERS
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8004fb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	2b46      	cmp	r3, #70	@ 0x46
 8004fb8:	d10a      	bne.n	8004fd0 <format_string_loop+0x770>
 8004fba:	2184      	movs	r1, #132	@ 0x84
 8004fbc:	2308      	movs	r3, #8
 8004fbe:	18cb      	adds	r3, r1, r3
 8004fc0:	19db      	adds	r3, r3, r7
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	2320      	movs	r3, #32
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	2208      	movs	r2, #8
 8004fca:	188a      	adds	r2, r1, r2
 8004fcc:	19d2      	adds	r2, r2, r7
 8004fce:	6013      	str	r3, [r2, #0]
        print_floating_point(output, va_arg(args, double), precision, width, flags, PRINTF_PREFER_DECIMAL);
 8004fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fd2:	1dda      	adds	r2, r3, #7
 8004fd4:	2307      	movs	r3, #7
 8004fd6:	439a      	bics	r2, r3
 8004fd8:	0013      	movs	r3, r2
 8004fda:	3308      	adds	r3, #8
 8004fdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fde:	6810      	ldr	r0, [r2, #0]
 8004fe0:	6851      	ldr	r1, [r2, #4]
 8004fe2:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	9303      	str	r3, [sp, #12]
 8004fe8:	2384      	movs	r3, #132	@ 0x84
 8004fea:	2208      	movs	r2, #8
 8004fec:	189b      	adds	r3, r3, r2
 8004fee:	19db      	adds	r3, r3, r7
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	9302      	str	r3, [sp, #8]
 8004ff4:	2380      	movs	r3, #128	@ 0x80
 8004ff6:	2208      	movs	r2, #8
 8004ff8:	189b      	adds	r3, r3, r2
 8004ffa:	19db      	adds	r3, r3, r7
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	9301      	str	r3, [sp, #4]
 8005000:	2384      	movs	r3, #132	@ 0x84
 8005002:	18fb      	adds	r3, r7, r3
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	0002      	movs	r2, r0
 800500a:	000b      	movs	r3, r1
 800500c:	0020      	movs	r0, r4
 800500e:	f7ff fb15 	bl	800463c <print_floating_point>
        format++;
 8005012:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005014:	3301      	adds	r3, #1
 8005016:	64bb      	str	r3, [r7, #72]	@ 0x48
        break;
 8005018:	e1d4      	b.n	80053c4 <format_string_loop+0xb64>
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800501a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2b67      	cmp	r3, #103	@ 0x67
 8005020:	d003      	beq.n	800502a <format_string_loop+0x7ca>
 8005022:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	2b47      	cmp	r3, #71	@ 0x47
 8005028:	d10b      	bne.n	8005042 <format_string_loop+0x7e2>
 800502a:	2184      	movs	r1, #132	@ 0x84
 800502c:	2308      	movs	r3, #8
 800502e:	18cb      	adds	r3, r1, r3
 8005030:	19db      	adds	r3, r3, r7
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	2380      	movs	r3, #128	@ 0x80
 8005036:	015b      	lsls	r3, r3, #5
 8005038:	4313      	orrs	r3, r2
 800503a:	2208      	movs	r2, #8
 800503c:	188a      	adds	r2, r1, r2
 800503e:	19d2      	adds	r2, r2, r7
 8005040:	6013      	str	r3, [r2, #0]
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8005042:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	2b45      	cmp	r3, #69	@ 0x45
 8005048:	d003      	beq.n	8005052 <format_string_loop+0x7f2>
 800504a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b47      	cmp	r3, #71	@ 0x47
 8005050:	d10a      	bne.n	8005068 <format_string_loop+0x808>
 8005052:	2184      	movs	r1, #132	@ 0x84
 8005054:	2308      	movs	r3, #8
 8005056:	18cb      	adds	r3, r1, r3
 8005058:	19db      	adds	r3, r3, r7
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	2320      	movs	r3, #32
 800505e:	4313      	orrs	r3, r2
 8005060:	2208      	movs	r2, #8
 8005062:	188a      	adds	r2, r1, r2
 8005064:	19d2      	adds	r2, r2, r7
 8005066:	6013      	str	r3, [r2, #0]
        print_floating_point(output, va_arg(args, double), precision, width, flags, PRINTF_PREFER_EXPONENTIAL);
 8005068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800506a:	1dda      	adds	r2, r3, #7
 800506c:	2307      	movs	r3, #7
 800506e:	439a      	bics	r2, r3
 8005070:	0013      	movs	r3, r2
 8005072:	3308      	adds	r3, #8
 8005074:	647b      	str	r3, [r7, #68]	@ 0x44
 8005076:	6810      	ldr	r0, [r2, #0]
 8005078:	6851      	ldr	r1, [r2, #4]
 800507a:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 800507c:	2301      	movs	r3, #1
 800507e:	9303      	str	r3, [sp, #12]
 8005080:	2384      	movs	r3, #132	@ 0x84
 8005082:	2208      	movs	r2, #8
 8005084:	189b      	adds	r3, r3, r2
 8005086:	19db      	adds	r3, r3, r7
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	9302      	str	r3, [sp, #8]
 800508c:	2380      	movs	r3, #128	@ 0x80
 800508e:	2208      	movs	r2, #8
 8005090:	189b      	adds	r3, r3, r2
 8005092:	19db      	adds	r3, r3, r7
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	9301      	str	r3, [sp, #4]
 8005098:	2384      	movs	r3, #132	@ 0x84
 800509a:	18fb      	adds	r3, r7, r3
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	0002      	movs	r2, r0
 80050a2:	000b      	movs	r3, r1
 80050a4:	0020      	movs	r0, r4
 80050a6:	f7ff fac9 	bl	800463c <print_floating_point>
        format++;
 80050aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050ac:	3301      	adds	r3, #1
 80050ae:	64bb      	str	r3, [r7, #72]	@ 0x48
        break;
 80050b0:	e188      	b.n	80053c4 <format_string_loop+0xb64>
#endif  // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
      case 'c' : {
        printf_size_t l = 1U;
 80050b2:	2301      	movs	r3, #1
 80050b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 80050b6:	2384      	movs	r3, #132	@ 0x84
 80050b8:	2208      	movs	r2, #8
 80050ba:	189b      	adds	r3, r3, r2
 80050bc:	19db      	adds	r3, r3, r7
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	2302      	movs	r3, #2
 80050c2:	4013      	ands	r3, r2
 80050c4:	d10f      	bne.n	80050e6 <format_string_loop+0x886>
          while (l++ < width) {
 80050c6:	e004      	b.n	80050d2 <format_string_loop+0x872>
            putchar_via_gadget(output, ' ');
 80050c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050ca:	2120      	movs	r1, #32
 80050cc:	0018      	movs	r0, r3
 80050ce:	f7fd febd 	bl	8002e4c <putchar_via_gadget>
          while (l++ < width) {
 80050d2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80050d4:	1c53      	adds	r3, r2, #1
 80050d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80050d8:	2380      	movs	r3, #128	@ 0x80
 80050da:	2108      	movs	r1, #8
 80050dc:	185b      	adds	r3, r3, r1
 80050de:	19db      	adds	r3, r3, r7
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d8f0      	bhi.n	80050c8 <format_string_loop+0x868>
          }
        }
        // char output
        putchar_via_gadget(output, (char) va_arg(args, int) );
 80050e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050e8:	1d13      	adds	r3, r2, #4
 80050ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80050ec:	6813      	ldr	r3, [r2, #0]
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050f2:	0011      	movs	r1, r2
 80050f4:	0018      	movs	r0, r3
 80050f6:	f7fd fea9 	bl	8002e4c <putchar_via_gadget>
        // post padding
        if (flags & FLAGS_LEFT) {
 80050fa:	2384      	movs	r3, #132	@ 0x84
 80050fc:	2208      	movs	r2, #8
 80050fe:	189b      	adds	r3, r3, r2
 8005100:	19db      	adds	r3, r3, r7
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	2302      	movs	r3, #2
 8005106:	4013      	ands	r3, r2
 8005108:	d00f      	beq.n	800512a <format_string_loop+0x8ca>
          while (l++ < width) {
 800510a:	e004      	b.n	8005116 <format_string_loop+0x8b6>
            putchar_via_gadget(output, ' ');
 800510c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800510e:	2120      	movs	r1, #32
 8005110:	0018      	movs	r0, r3
 8005112:	f7fd fe9b 	bl	8002e4c <putchar_via_gadget>
          while (l++ < width) {
 8005116:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005118:	1c53      	adds	r3, r2, #1
 800511a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800511c:	2380      	movs	r3, #128	@ 0x80
 800511e:	2108      	movs	r1, #8
 8005120:	185b      	adds	r3, r3, r1
 8005122:	19db      	adds	r3, r3, r7
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4293      	cmp	r3, r2
 8005128:	d8f0      	bhi.n	800510c <format_string_loop+0x8ac>
          }
        }
        format++;
 800512a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800512c:	3301      	adds	r3, #1
 800512e:	64bb      	str	r3, [r7, #72]	@ 0x48
        break;
 8005130:	e148      	b.n	80053c4 <format_string_loop+0xb64>
      }

      case 's' : {
        const char* p = va_arg(args, char*);
 8005132:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005134:	1d13      	adds	r3, r2, #4
 8005136:	647b      	str	r3, [r7, #68]	@ 0x44
 8005138:	6813      	ldr	r3, [r2, #0]
 800513a:	67bb      	str	r3, [r7, #120]	@ 0x78
        if (p == NULL) {
 800513c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800513e:	2b00      	cmp	r3, #0
 8005140:	d111      	bne.n	8005166 <format_string_loop+0x906>
          out_rev_(output, ")llun(", 6, width, flags);
 8005142:	2380      	movs	r3, #128	@ 0x80
 8005144:	2208      	movs	r2, #8
 8005146:	189b      	adds	r3, r3, r2
 8005148:	19db      	adds	r3, r3, r7
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	49a2      	ldr	r1, [pc, #648]	@ (80053d8 <format_string_loop+0xb78>)
 800514e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005150:	2384      	movs	r3, #132	@ 0x84
 8005152:	2408      	movs	r4, #8
 8005154:	191b      	adds	r3, r3, r4
 8005156:	19db      	adds	r3, r3, r7
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	0013      	movs	r3, r2
 800515e:	2206      	movs	r2, #6
 8005160:	f7fd ff67 	bl	8003032 <out_rev_>
 8005164:	e074      	b.n	8005250 <format_string_loop+0x9f0>
        }
        else {
          printf_size_t l = strnlen_s_(p, precision ? precision : PRINTF_MAX_POSSIBLE_BUFFER_SIZE);
 8005166:	2384      	movs	r3, #132	@ 0x84
 8005168:	18fb      	adds	r3, r7, r3
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d003      	beq.n	8005178 <format_string_loop+0x918>
 8005170:	2384      	movs	r3, #132	@ 0x84
 8005172:	18fb      	adds	r3, r7, r3
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	e000      	b.n	800517a <format_string_loop+0x91a>
 8005178:	4a98      	ldr	r2, [pc, #608]	@ (80053dc <format_string_loop+0xb7c>)
 800517a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800517c:	0011      	movs	r1, r2
 800517e:	0018      	movs	r0, r3
 8005180:	f7fd ff00 	bl	8002f84 <strnlen_s_>
 8005184:	0003      	movs	r3, r0
 8005186:	677b      	str	r3, [r7, #116]	@ 0x74
          // pre padding
          if (flags & FLAGS_PRECISION) {
 8005188:	2384      	movs	r3, #132	@ 0x84
 800518a:	2208      	movs	r2, #8
 800518c:	189b      	adds	r3, r3, r2
 800518e:	19db      	adds	r3, r3, r7
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	2380      	movs	r3, #128	@ 0x80
 8005194:	011b      	lsls	r3, r3, #4
 8005196:	4013      	ands	r3, r2
 8005198:	d007      	beq.n	80051aa <format_string_loop+0x94a>
            l = (l < precision ? l : precision);
 800519a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800519c:	2384      	movs	r3, #132	@ 0x84
 800519e:	18fb      	adds	r3, r7, r3
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d900      	bls.n	80051a8 <format_string_loop+0x948>
 80051a6:	0013      	movs	r3, r2
 80051a8:	677b      	str	r3, [r7, #116]	@ 0x74
          }
          if (!(flags & FLAGS_LEFT)) {
 80051aa:	2384      	movs	r3, #132	@ 0x84
 80051ac:	2208      	movs	r2, #8
 80051ae:	189b      	adds	r3, r3, r2
 80051b0:	19db      	adds	r3, r3, r7
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	2302      	movs	r3, #2
 80051b6:	4013      	ands	r3, r2
 80051b8:	d120      	bne.n	80051fc <format_string_loop+0x99c>
            while (l++ < width) {
 80051ba:	e004      	b.n	80051c6 <format_string_loop+0x966>
              putchar_via_gadget(output, ' ');
 80051bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051be:	2120      	movs	r1, #32
 80051c0:	0018      	movs	r0, r3
 80051c2:	f7fd fe43 	bl	8002e4c <putchar_via_gadget>
            while (l++ < width) {
 80051c6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80051c8:	1c53      	adds	r3, r2, #1
 80051ca:	677b      	str	r3, [r7, #116]	@ 0x74
 80051cc:	2380      	movs	r3, #128	@ 0x80
 80051ce:	2108      	movs	r1, #8
 80051d0:	185b      	adds	r3, r3, r1
 80051d2:	19db      	adds	r3, r3, r7
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d8f0      	bhi.n	80051bc <format_string_loop+0x95c>
            }
          }
          // string output
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision)) {
 80051da:	e00f      	b.n	80051fc <format_string_loop+0x99c>
            putchar_via_gadget(output, *(p++));
 80051dc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80051de:	1c53      	adds	r3, r2, #1
 80051e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80051e2:	7812      	ldrb	r2, [r2, #0]
 80051e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051e6:	0011      	movs	r1, r2
 80051e8:	0018      	movs	r0, r3
 80051ea:	f7fd fe2f 	bl	8002e4c <putchar_via_gadget>
            --precision;
 80051ee:	2384      	movs	r3, #132	@ 0x84
 80051f0:	18fb      	adds	r3, r7, r3
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	3b01      	subs	r3, #1
 80051f6:	2284      	movs	r2, #132	@ 0x84
 80051f8:	18ba      	adds	r2, r7, r2
 80051fa:	6013      	str	r3, [r2, #0]
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision)) {
 80051fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00d      	beq.n	8005220 <format_string_loop+0x9c0>
 8005204:	2384      	movs	r3, #132	@ 0x84
 8005206:	2208      	movs	r2, #8
 8005208:	189b      	adds	r3, r3, r2
 800520a:	19db      	adds	r3, r3, r7
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	2380      	movs	r3, #128	@ 0x80
 8005210:	011b      	lsls	r3, r3, #4
 8005212:	4013      	ands	r3, r2
 8005214:	d0e2      	beq.n	80051dc <format_string_loop+0x97c>
 8005216:	2384      	movs	r3, #132	@ 0x84
 8005218:	18fb      	adds	r3, r7, r3
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1dd      	bne.n	80051dc <format_string_loop+0x97c>
          }
          // post padding
          if (flags & FLAGS_LEFT) {
 8005220:	2384      	movs	r3, #132	@ 0x84
 8005222:	2208      	movs	r2, #8
 8005224:	189b      	adds	r3, r3, r2
 8005226:	19db      	adds	r3, r3, r7
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	2302      	movs	r3, #2
 800522c:	4013      	ands	r3, r2
 800522e:	d00f      	beq.n	8005250 <format_string_loop+0x9f0>
            while (l++ < width) {
 8005230:	e004      	b.n	800523c <format_string_loop+0x9dc>
              putchar_via_gadget(output, ' ');
 8005232:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005234:	2120      	movs	r1, #32
 8005236:	0018      	movs	r0, r3
 8005238:	f7fd fe08 	bl	8002e4c <putchar_via_gadget>
            while (l++ < width) {
 800523c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800523e:	1c53      	adds	r3, r2, #1
 8005240:	677b      	str	r3, [r7, #116]	@ 0x74
 8005242:	2380      	movs	r3, #128	@ 0x80
 8005244:	2108      	movs	r1, #8
 8005246:	185b      	adds	r3, r3, r1
 8005248:	19db      	adds	r3, r3, r7
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4293      	cmp	r3, r2
 800524e:	d8f0      	bhi.n	8005232 <format_string_loop+0x9d2>
            }
          }
        }
        format++;
 8005250:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005252:	3301      	adds	r3, #1
 8005254:	64bb      	str	r3, [r7, #72]	@ 0x48
        break;
 8005256:	e0b5      	b.n	80053c4 <format_string_loop+0xb64>
      }

      case 'p' : {
        width = sizeof(void*) * 2U + 2; // 2 hex chars per byte + the "0x" prefix
 8005258:	230a      	movs	r3, #10
 800525a:	2180      	movs	r1, #128	@ 0x80
 800525c:	2208      	movs	r2, #8
 800525e:	188a      	adds	r2, r1, r2
 8005260:	19d2      	adds	r2, r2, r7
 8005262:	6013      	str	r3, [r2, #0]
        flags |= FLAGS_ZEROPAD | FLAGS_POINTER;
 8005264:	2484      	movs	r4, #132	@ 0x84
 8005266:	2308      	movs	r3, #8
 8005268:	18e3      	adds	r3, r4, r3
 800526a:	19db      	adds	r3, r3, r7
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	4b5c      	ldr	r3, [pc, #368]	@ (80053e0 <format_string_loop+0xb80>)
 8005270:	4313      	orrs	r3, r2
 8005272:	2208      	movs	r2, #8
 8005274:	18a2      	adds	r2, r4, r2
 8005276:	19d2      	adds	r2, r2, r7
 8005278:	6013      	str	r3, [r2, #0]
        uintptr_t value = (uintptr_t)va_arg(args, void*);
 800527a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800527c:	1d13      	adds	r3, r2, #4
 800527e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005280:	6813      	ldr	r3, [r2, #0]
 8005282:	66bb      	str	r3, [r7, #104]	@ 0x68
        (value == (uintptr_t) NULL) ?
          out_rev_(output, ")lin(", 5, width, flags) :
 8005284:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10f      	bne.n	80052aa <format_string_loop+0xa4a>
 800528a:	2308      	movs	r3, #8
 800528c:	18cb      	adds	r3, r1, r3
 800528e:	19db      	adds	r3, r3, r7
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	4954      	ldr	r1, [pc, #336]	@ (80053e4 <format_string_loop+0xb84>)
 8005294:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005296:	2308      	movs	r3, #8
 8005298:	18e3      	adds	r3, r4, r3
 800529a:	19db      	adds	r3, r3, r7
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	0013      	movs	r3, r2
 80052a2:	2205      	movs	r2, #5
 80052a4:	f7fd fec5 	bl	8003032 <out_rev_>
 80052a8:	e01d      	b.n	80052e6 <format_string_loop+0xa86>
          print_integer(output, (printf_unsigned_value_t) value, false, BASE_HEX, precision, width, flags);
 80052aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052ac:	613b      	str	r3, [r7, #16]
 80052ae:	2300      	movs	r3, #0
 80052b0:	617b      	str	r3, [r7, #20]
 80052b2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80052b4:	2384      	movs	r3, #132	@ 0x84
 80052b6:	2208      	movs	r2, #8
 80052b8:	189b      	adds	r3, r3, r2
 80052ba:	19db      	adds	r3, r3, r7
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	9304      	str	r3, [sp, #16]
 80052c0:	2380      	movs	r3, #128	@ 0x80
 80052c2:	2208      	movs	r2, #8
 80052c4:	189b      	adds	r3, r3, r2
 80052c6:	19db      	adds	r3, r3, r7
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	9303      	str	r3, [sp, #12]
 80052cc:	2384      	movs	r3, #132	@ 0x84
 80052ce:	18fb      	adds	r3, r7, r3
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	9302      	str	r3, [sp, #8]
 80052d4:	2310      	movs	r3, #16
 80052d6:	9301      	str	r3, [sp, #4]
 80052d8:	2300      	movs	r3, #0
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	0008      	movs	r0, r1
 80052e2:	f7fd ffe3 	bl	80032ac <print_integer>
        format++;
 80052e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052e8:	3301      	adds	r3, #1
 80052ea:	64bb      	str	r3, [r7, #72]	@ 0x48
        break;
 80052ec:	e06a      	b.n	80053c4 <format_string_loop+0xb64>
      }

      case '%' :
        putchar_via_gadget(output, '%');
 80052ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052f0:	2125      	movs	r1, #37	@ 0x25
 80052f2:	0018      	movs	r0, r3
 80052f4:	f7fd fdaa 	bl	8002e4c <putchar_via_gadget>
        format++;
 80052f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052fa:	3301      	adds	r3, #1
 80052fc:	64bb      	str	r3, [r7, #72]	@ 0x48
        break;
 80052fe:	e061      	b.n	80053c4 <format_string_loop+0xb64>
      // Many people prefer to disable support for %n, as it lets the caller
      // engineer a write to an arbitrary location, of a value the caller
      // effectively controls - which could be a security concern in some cases.
#if PRINTF_SUPPORT_WRITEBACK_SPECIFIER
      case 'n' : {
        if       (flags & FLAGS_CHAR)      *(va_arg(args, char*))      = (char) output->pos;
 8005300:	2384      	movs	r3, #132	@ 0x84
 8005302:	2208      	movs	r2, #8
 8005304:	189b      	adds	r3, r3, r2
 8005306:	19db      	adds	r3, r3, r7
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	2340      	movs	r3, #64	@ 0x40
 800530c:	4013      	ands	r3, r2
 800530e:	d008      	beq.n	8005322 <format_string_loop+0xac2>
 8005310:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005312:	68d9      	ldr	r1, [r3, #12]
 8005314:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005316:	1d13      	adds	r3, r2, #4
 8005318:	647b      	str	r3, [r7, #68]	@ 0x44
 800531a:	6812      	ldr	r2, [r2, #0]
 800531c:	b2cb      	uxtb	r3, r1
 800531e:	7013      	strb	r3, [r2, #0]
 8005320:	e041      	b.n	80053a6 <format_string_loop+0xb46>
        else if  (flags & FLAGS_SHORT)     *(va_arg(args, short*))     = (short) output->pos;
 8005322:	2384      	movs	r3, #132	@ 0x84
 8005324:	2208      	movs	r2, #8
 8005326:	189b      	adds	r3, r3, r2
 8005328:	19db      	adds	r3, r3, r7
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	2380      	movs	r3, #128	@ 0x80
 800532e:	4013      	ands	r3, r2
 8005330:	d008      	beq.n	8005344 <format_string_loop+0xae4>
 8005332:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005334:	68d9      	ldr	r1, [r3, #12]
 8005336:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005338:	1d13      	adds	r3, r2, #4
 800533a:	647b      	str	r3, [r7, #68]	@ 0x44
 800533c:	6812      	ldr	r2, [r2, #0]
 800533e:	b20b      	sxth	r3, r1
 8005340:	8013      	strh	r3, [r2, #0]
 8005342:	e030      	b.n	80053a6 <format_string_loop+0xb46>
        else if  (flags & FLAGS_LONG)      *(va_arg(args, long*))      = (long) output->pos;
 8005344:	2384      	movs	r3, #132	@ 0x84
 8005346:	2208      	movs	r2, #8
 8005348:	189b      	adds	r3, r3, r2
 800534a:	19db      	adds	r3, r3, r7
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	2380      	movs	r3, #128	@ 0x80
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4013      	ands	r3, r2
 8005354:	d008      	beq.n	8005368 <format_string_loop+0xb08>
 8005356:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005358:	68d9      	ldr	r1, [r3, #12]
 800535a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800535c:	1d13      	adds	r3, r2, #4
 800535e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005360:	6813      	ldr	r3, [r2, #0]
 8005362:	000a      	movs	r2, r1
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	e01e      	b.n	80053a6 <format_string_loop+0xb46>
#if PRINTF_SUPPORT_LONG_LONG
        else if  (flags & FLAGS_LONG_LONG) *(va_arg(args, long long*)) = (long long int) output->pos;
 8005368:	2384      	movs	r3, #132	@ 0x84
 800536a:	2208      	movs	r2, #8
 800536c:	189b      	adds	r3, r3, r2
 800536e:	19db      	adds	r3, r3, r7
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	2380      	movs	r3, #128	@ 0x80
 8005374:	00db      	lsls	r3, r3, #3
 8005376:	4013      	ands	r3, r2
 8005378:	d00d      	beq.n	8005396 <format_string_loop+0xb36>
 800537a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800537c:	68d9      	ldr	r1, [r3, #12]
 800537e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005380:	1d13      	adds	r3, r2, #4
 8005382:	647b      	str	r3, [r7, #68]	@ 0x44
 8005384:	6813      	ldr	r3, [r2, #0]
 8005386:	60b9      	str	r1, [r7, #8]
 8005388:	2200      	movs	r2, #0
 800538a:	60fa      	str	r2, [r7, #12]
 800538c:	68b9      	ldr	r1, [r7, #8]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	6019      	str	r1, [r3, #0]
 8005392:	605a      	str	r2, [r3, #4]
 8005394:	e007      	b.n	80053a6 <format_string_loop+0xb46>
#endif // PRINTF_SUPPORT_LONG_LONG
        else                               *(va_arg(args, int*))       = (int) output->pos;
 8005396:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005398:	68d9      	ldr	r1, [r3, #12]
 800539a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800539c:	1d13      	adds	r3, r2, #4
 800539e:	647b      	str	r3, [r7, #68]	@ 0x44
 80053a0:	6813      	ldr	r3, [r2, #0]
 80053a2:	000a      	movs	r2, r1
 80053a4:	601a      	str	r2, [r3, #0]
        format++;
 80053a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053a8:	3301      	adds	r3, #1
 80053aa:	64bb      	str	r3, [r7, #72]	@ 0x48
        break;
 80053ac:	e00a      	b.n	80053c4 <format_string_loop+0xb64>
      }
#endif // PRINTF_SUPPORT_WRITEBACK_SPECIFIER

      default :
        putchar_via_gadget(output, *format);
 80053ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053b0:	781a      	ldrb	r2, [r3, #0]
 80053b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053b4:	0011      	movs	r1, r2
 80053b6:	0018      	movs	r0, r3
 80053b8:	f7fd fd48 	bl	8002e4c <putchar_via_gadget>
        format++;
 80053bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053be:	3301      	adds	r3, #1
 80053c0:	64bb      	str	r3, [r7, #72]	@ 0x48
        break;
 80053c2:	46c0      	nop			@ (mov r8, r8)
  while (*format)
 80053c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <format_string_loop+0xb70>
 80053cc:	f7ff fa50 	bl	8004870 <format_string_loop+0x10>
    }
  }
}
 80053d0:	46bd      	mov	sp, r7
 80053d2:	b025      	add	sp, #148	@ 0x94
 80053d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053d6:	46c0      	nop			@ (mov r8, r8)
 80053d8:	080088ec 	.word	0x080088ec
 80053dc:	7fffffff 	.word	0x7fffffff
 80053e0:	00002001 	.word	0x00002001
 80053e4:	080088f4 	.word	0x080088f4

080053e8 <vsnprintf_impl>:

// internal vsnprintf - used for implementing _all library functions
static int vsnprintf_impl(output_gadget_t* output, const char* format, va_list args)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
  // Note: The library only calls vsnprintf_impl() with output->pos being 0. However, it is
  // possible to call this function with a non-zero pos value for some "remedial printing".
  format_string_loop(output, format, args);
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	68b9      	ldr	r1, [r7, #8]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	0018      	movs	r0, r3
 80053fc:	f7ff fa30 	bl	8004860 <format_string_loop>

  // termination
  append_termination_with_gadget(output);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	0018      	movs	r0, r3
 8005404:	f7fd fd4d 	bl	8002ea2 <append_termination_with_gadget>

  // return written chars without terminating \0
  return (int)output->pos;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	68db      	ldr	r3, [r3, #12]
}
 800540c:	0018      	movs	r0, r3
 800540e:	46bd      	mov	sp, r7
 8005410:	b004      	add	sp, #16
 8005412:	bd80      	pop	{r7, pc}

08005414 <vsnprintf_>:
  output_gadget_t gadget = extern_putchar_gadget();
  return vsnprintf_impl(&gadget, format, arg);
}

int vsnprintf_(char* s, size_t n, const char* format, va_list arg)
{
 8005414:	b590      	push	{r4, r7, lr}
 8005416:	b08b      	sub	sp, #44	@ 0x2c
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
 8005420:	603b      	str	r3, [r7, #0]
  output_gadget_t gadget = buffer_gadget(s, n);
 8005422:	2414      	movs	r4, #20
 8005424:	193b      	adds	r3, r7, r4
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	68f9      	ldr	r1, [r7, #12]
 800542a:	0018      	movs	r0, r3
 800542c:	f7fd fd82 	bl	8002f34 <buffer_gadget>
  return vsnprintf_impl(&gadget, format, arg);
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	6879      	ldr	r1, [r7, #4]
 8005434:	193b      	adds	r3, r7, r4
 8005436:	0018      	movs	r0, r3
 8005438:	f7ff ffd6 	bl	80053e8 <vsnprintf_impl>
 800543c:	0003      	movs	r3, r0
}
 800543e:	0018      	movs	r0, r3
 8005440:	46bd      	mov	sp, r7
 8005442:	b00b      	add	sp, #44	@ 0x2c
 8005444:	bd90      	pop	{r4, r7, pc}

08005446 <snprintf_>:
  va_end(args);
  return ret;
}

int snprintf_(char* s, size_t n, const char* format, ...)
{
 8005446:	b40c      	push	{r2, r3}
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, format);
 8005452:	231c      	movs	r3, #28
 8005454:	18fb      	adds	r3, r7, r3
 8005456:	60bb      	str	r3, [r7, #8]
  const int ret = vsnprintf_(s, n, format, args);
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	69ba      	ldr	r2, [r7, #24]
 800545c:	6839      	ldr	r1, [r7, #0]
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7ff ffd8 	bl	8005414 <vsnprintf_>
 8005464:	0003      	movs	r3, r0
 8005466:	60fb      	str	r3, [r7, #12]
  va_end(args);
  return ret;
 8005468:	68fb      	ldr	r3, [r7, #12]
}
 800546a:	0018      	movs	r0, r3
 800546c:	46bd      	mov	sp, r7
 800546e:	b004      	add	sp, #16
 8005470:	bc80      	pop	{r7}
 8005472:	bc08      	pop	{r3}
 8005474:	b002      	add	sp, #8
 8005476:	4718      	bx	r3

08005478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800547c:	4b07      	ldr	r3, [pc, #28]	@ (800549c <HAL_MspInit+0x24>)
 800547e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005480:	4b06      	ldr	r3, [pc, #24]	@ (800549c <HAL_MspInit+0x24>)
 8005482:	2101      	movs	r1, #1
 8005484:	430a      	orrs	r2, r1
 8005486:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8005488:	4b04      	ldr	r3, [pc, #16]	@ (800549c <HAL_MspInit+0x24>)
 800548a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800548c:	4b03      	ldr	r3, [pc, #12]	@ (800549c <HAL_MspInit+0x24>)
 800548e:	2180      	movs	r1, #128	@ 0x80
 8005490:	0549      	lsls	r1, r1, #21
 8005492:	430a      	orrs	r2, r1
 8005494:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005496:	46c0      	nop			@ (mov r8, r8)
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	40021000 	.word	0x40021000

080054a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80054a0:	b590      	push	{r4, r7, lr}
 80054a2:	b089      	sub	sp, #36	@ 0x24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054a8:	240c      	movs	r4, #12
 80054aa:	193b      	adds	r3, r7, r4
 80054ac:	0018      	movs	r0, r3
 80054ae:	2314      	movs	r3, #20
 80054b0:	001a      	movs	r2, r3
 80054b2:	2100      	movs	r1, #0
 80054b4:	f003 f99e 	bl	80087f4 <memset>
  if(hi2c->Instance==I2C1)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a18      	ldr	r2, [pc, #96]	@ (8005520 <HAL_I2C_MspInit+0x80>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d12a      	bne.n	8005518 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054c2:	4b18      	ldr	r3, [pc, #96]	@ (8005524 <HAL_I2C_MspInit+0x84>)
 80054c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054c6:	4b17      	ldr	r3, [pc, #92]	@ (8005524 <HAL_I2C_MspInit+0x84>)
 80054c8:	2101      	movs	r1, #1
 80054ca:	430a      	orrs	r2, r1
 80054cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80054ce:	4b15      	ldr	r3, [pc, #84]	@ (8005524 <HAL_I2C_MspInit+0x84>)
 80054d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d2:	2201      	movs	r2, #1
 80054d4:	4013      	ands	r3, r2
 80054d6:	60bb      	str	r3, [r7, #8]
 80054d8:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80054da:	193b      	adds	r3, r7, r4
 80054dc:	22c0      	movs	r2, #192	@ 0xc0
 80054de:	00d2      	lsls	r2, r2, #3
 80054e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80054e2:	0021      	movs	r1, r4
 80054e4:	187b      	adds	r3, r7, r1
 80054e6:	2212      	movs	r2, #18
 80054e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ea:	187b      	adds	r3, r7, r1
 80054ec:	2200      	movs	r2, #0
 80054ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054f0:	187b      	adds	r3, r7, r1
 80054f2:	2203      	movs	r2, #3
 80054f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80054f6:	187b      	adds	r3, r7, r1
 80054f8:	2206      	movs	r2, #6
 80054fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054fc:	187a      	adds	r2, r7, r1
 80054fe:	23a0      	movs	r3, #160	@ 0xa0
 8005500:	05db      	lsls	r3, r3, #23
 8005502:	0011      	movs	r1, r2
 8005504:	0018      	movs	r0, r3
 8005506:	f000 f9e3 	bl	80058d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800550a:	4b06      	ldr	r3, [pc, #24]	@ (8005524 <HAL_I2C_MspInit+0x84>)
 800550c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800550e:	4b05      	ldr	r3, [pc, #20]	@ (8005524 <HAL_I2C_MspInit+0x84>)
 8005510:	2180      	movs	r1, #128	@ 0x80
 8005512:	0389      	lsls	r1, r1, #14
 8005514:	430a      	orrs	r2, r1
 8005516:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8005518:	46c0      	nop			@ (mov r8, r8)
 800551a:	46bd      	mov	sp, r7
 800551c:	b009      	add	sp, #36	@ 0x24
 800551e:	bd90      	pop	{r4, r7, pc}
 8005520:	40005400 	.word	0x40005400
 8005524:	40021000 	.word	0x40021000

08005528 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005528:	b590      	push	{r4, r7, lr}
 800552a:	b089      	sub	sp, #36	@ 0x24
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005530:	240c      	movs	r4, #12
 8005532:	193b      	adds	r3, r7, r4
 8005534:	0018      	movs	r0, r3
 8005536:	2314      	movs	r3, #20
 8005538:	001a      	movs	r2, r3
 800553a:	2100      	movs	r1, #0
 800553c:	f003 f95a 	bl	80087f4 <memset>
  if(huart->Instance==USART2)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a18      	ldr	r2, [pc, #96]	@ (80055a8 <HAL_UART_MspInit+0x80>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d129      	bne.n	800559e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800554a:	4b18      	ldr	r3, [pc, #96]	@ (80055ac <HAL_UART_MspInit+0x84>)
 800554c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800554e:	4b17      	ldr	r3, [pc, #92]	@ (80055ac <HAL_UART_MspInit+0x84>)
 8005550:	2180      	movs	r1, #128	@ 0x80
 8005552:	0289      	lsls	r1, r1, #10
 8005554:	430a      	orrs	r2, r1
 8005556:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005558:	4b14      	ldr	r3, [pc, #80]	@ (80055ac <HAL_UART_MspInit+0x84>)
 800555a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800555c:	4b13      	ldr	r3, [pc, #76]	@ (80055ac <HAL_UART_MspInit+0x84>)
 800555e:	2101      	movs	r1, #1
 8005560:	430a      	orrs	r2, r1
 8005562:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005564:	4b11      	ldr	r3, [pc, #68]	@ (80055ac <HAL_UART_MspInit+0x84>)
 8005566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005568:	2201      	movs	r2, #1
 800556a:	4013      	ands	r3, r2
 800556c:	60bb      	str	r3, [r7, #8]
 800556e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005570:	0021      	movs	r1, r4
 8005572:	187b      	adds	r3, r7, r1
 8005574:	220c      	movs	r2, #12
 8005576:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005578:	187b      	adds	r3, r7, r1
 800557a:	2202      	movs	r2, #2
 800557c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800557e:	187b      	adds	r3, r7, r1
 8005580:	2200      	movs	r2, #0
 8005582:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005584:	187b      	adds	r3, r7, r1
 8005586:	2203      	movs	r2, #3
 8005588:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800558a:	187b      	adds	r3, r7, r1
 800558c:	2204      	movs	r2, #4
 800558e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005590:	187a      	adds	r2, r7, r1
 8005592:	23a0      	movs	r3, #160	@ 0xa0
 8005594:	05db      	lsls	r3, r3, #23
 8005596:	0011      	movs	r1, r2
 8005598:	0018      	movs	r0, r3
 800559a:	f000 f999 	bl	80058d0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800559e:	46c0      	nop			@ (mov r8, r8)
 80055a0:	46bd      	mov	sp, r7
 80055a2:	b009      	add	sp, #36	@ 0x24
 80055a4:	bd90      	pop	{r4, r7, pc}
 80055a6:	46c0      	nop			@ (mov r8, r8)
 80055a8:	40004400 	.word	0x40004400
 80055ac:	40021000 	.word	0x40021000

080055b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80055b4:	46c0      	nop			@ (mov r8, r8)
 80055b6:	e7fd      	b.n	80055b4 <NMI_Handler+0x4>

080055b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80055bc:	46c0      	nop			@ (mov r8, r8)
 80055be:	e7fd      	b.n	80055bc <HardFault_Handler+0x4>

080055c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80055c4:	46c0      	nop			@ (mov r8, r8)
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80055ce:	46c0      	nop			@ (mov r8, r8)
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80055d8:	f000 f886 	bl	80056e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80055dc:	46c0      	nop			@ (mov r8, r8)
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80055e6:	46c0      	nop			@ (mov r8, r8)
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80055ec:	480d      	ldr	r0, [pc, #52]	@ (8005624 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80055ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80055f0:	f7ff fff7 	bl	80055e2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80055f4:	480c      	ldr	r0, [pc, #48]	@ (8005628 <LoopForever+0x6>)
  ldr r1, =_edata
 80055f6:	490d      	ldr	r1, [pc, #52]	@ (800562c <LoopForever+0xa>)
  ldr r2, =_sidata
 80055f8:	4a0d      	ldr	r2, [pc, #52]	@ (8005630 <LoopForever+0xe>)
  movs r3, #0
 80055fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055fc:	e002      	b.n	8005604 <LoopCopyDataInit>

080055fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005602:	3304      	adds	r3, #4

08005604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005608:	d3f9      	bcc.n	80055fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800560a:	4a0a      	ldr	r2, [pc, #40]	@ (8005634 <LoopForever+0x12>)
  ldr r4, =_ebss
 800560c:	4c0a      	ldr	r4, [pc, #40]	@ (8005638 <LoopForever+0x16>)
  movs r3, #0
 800560e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005610:	e001      	b.n	8005616 <LoopFillZerobss>

08005612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005614:	3204      	adds	r2, #4

08005616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005618:	d3fb      	bcc.n	8005612 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800561a:	f003 f8f3 	bl	8008804 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800561e:	f7fd f891 	bl	8002744 <main>

08005622 <LoopForever>:

LoopForever:
    b LoopForever
 8005622:	e7fe      	b.n	8005622 <LoopForever>
   ldr   r0, =_estack
 8005624:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8005628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800562c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8005630:	08008c2c 	.word	0x08008c2c
  ldr r2, =_sbss
 8005634:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8005638:	2000018c 	.word	0x2000018c

0800563c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800563c:	e7fe      	b.n	800563c <ADC1_COMP_IRQHandler>
	...

08005640 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005646:	1dfb      	adds	r3, r7, #7
 8005648:	2200      	movs	r2, #0
 800564a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800564c:	4b0b      	ldr	r3, [pc, #44]	@ (800567c <HAL_Init+0x3c>)
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	4b0a      	ldr	r3, [pc, #40]	@ (800567c <HAL_Init+0x3c>)
 8005652:	2140      	movs	r1, #64	@ 0x40
 8005654:	430a      	orrs	r2, r1
 8005656:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005658:	2000      	movs	r0, #0
 800565a:	f000 f811 	bl	8005680 <HAL_InitTick>
 800565e:	1e03      	subs	r3, r0, #0
 8005660:	d003      	beq.n	800566a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8005662:	1dfb      	adds	r3, r7, #7
 8005664:	2201      	movs	r2, #1
 8005666:	701a      	strb	r2, [r3, #0]
 8005668:	e001      	b.n	800566e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800566a:	f7ff ff05 	bl	8005478 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800566e:	1dfb      	adds	r3, r7, #7
 8005670:	781b      	ldrb	r3, [r3, #0]
}
 8005672:	0018      	movs	r0, r3
 8005674:	46bd      	mov	sp, r7
 8005676:	b002      	add	sp, #8
 8005678:	bd80      	pop	{r7, pc}
 800567a:	46c0      	nop			@ (mov r8, r8)
 800567c:	40022000 	.word	0x40022000

08005680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005680:	b590      	push	{r4, r7, lr}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005688:	4b14      	ldr	r3, [pc, #80]	@ (80056dc <HAL_InitTick+0x5c>)
 800568a:	681c      	ldr	r4, [r3, #0]
 800568c:	4b14      	ldr	r3, [pc, #80]	@ (80056e0 <HAL_InitTick+0x60>)
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	0019      	movs	r1, r3
 8005692:	23fa      	movs	r3, #250	@ 0xfa
 8005694:	0098      	lsls	r0, r3, #2
 8005696:	f7fa fd3f 	bl	8000118 <__udivsi3>
 800569a:	0003      	movs	r3, r0
 800569c:	0019      	movs	r1, r3
 800569e:	0020      	movs	r0, r4
 80056a0:	f7fa fd3a 	bl	8000118 <__udivsi3>
 80056a4:	0003      	movs	r3, r0
 80056a6:	0018      	movs	r0, r3
 80056a8:	f000 f905 	bl	80058b6 <HAL_SYSTICK_Config>
 80056ac:	1e03      	subs	r3, r0, #0
 80056ae:	d001      	beq.n	80056b4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e00f      	b.n	80056d4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b03      	cmp	r3, #3
 80056b8:	d80b      	bhi.n	80056d2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80056ba:	6879      	ldr	r1, [r7, #4]
 80056bc:	2301      	movs	r3, #1
 80056be:	425b      	negs	r3, r3
 80056c0:	2200      	movs	r2, #0
 80056c2:	0018      	movs	r0, r3
 80056c4:	f000 f8e2 	bl	800588c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80056c8:	4b06      	ldr	r3, [pc, #24]	@ (80056e4 <HAL_InitTick+0x64>)
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
 80056d0:	e000      	b.n	80056d4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
}
 80056d4:	0018      	movs	r0, r3
 80056d6:	46bd      	mov	sp, r7
 80056d8:	b003      	add	sp, #12
 80056da:	bd90      	pop	{r4, r7, pc}
 80056dc:	20000000 	.word	0x20000000
 80056e0:	20000008 	.word	0x20000008
 80056e4:	20000004 	.word	0x20000004

080056e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80056ec:	4b05      	ldr	r3, [pc, #20]	@ (8005704 <HAL_IncTick+0x1c>)
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	001a      	movs	r2, r3
 80056f2:	4b05      	ldr	r3, [pc, #20]	@ (8005708 <HAL_IncTick+0x20>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	18d2      	adds	r2, r2, r3
 80056f8:	4b03      	ldr	r3, [pc, #12]	@ (8005708 <HAL_IncTick+0x20>)
 80056fa:	601a      	str	r2, [r3, #0]
}
 80056fc:	46c0      	nop			@ (mov r8, r8)
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	46c0      	nop			@ (mov r8, r8)
 8005704:	20000008 	.word	0x20000008
 8005708:	20000188 	.word	0x20000188

0800570c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
  return uwTick;
 8005710:	4b02      	ldr	r3, [pc, #8]	@ (800571c <HAL_GetTick+0x10>)
 8005712:	681b      	ldr	r3, [r3, #0]
}
 8005714:	0018      	movs	r0, r3
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	46c0      	nop			@ (mov r8, r8)
 800571c:	20000188 	.word	0x20000188

08005720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005728:	f7ff fff0 	bl	800570c <HAL_GetTick>
 800572c:	0003      	movs	r3, r0
 800572e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	3301      	adds	r3, #1
 8005738:	d005      	beq.n	8005746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800573a:	4b0a      	ldr	r3, [pc, #40]	@ (8005764 <HAL_Delay+0x44>)
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	001a      	movs	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	189b      	adds	r3, r3, r2
 8005744:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005746:	46c0      	nop			@ (mov r8, r8)
 8005748:	f7ff ffe0 	bl	800570c <HAL_GetTick>
 800574c:	0002      	movs	r2, r0
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	429a      	cmp	r2, r3
 8005756:	d8f7      	bhi.n	8005748 <HAL_Delay+0x28>
  {
  }
}
 8005758:	46c0      	nop			@ (mov r8, r8)
 800575a:	46c0      	nop			@ (mov r8, r8)
 800575c:	46bd      	mov	sp, r7
 800575e:	b004      	add	sp, #16
 8005760:	bd80      	pop	{r7, pc}
 8005762:	46c0      	nop			@ (mov r8, r8)
 8005764:	20000008 	.word	0x20000008

08005768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005768:	b590      	push	{r4, r7, lr}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	0002      	movs	r2, r0
 8005770:	6039      	str	r1, [r7, #0]
 8005772:	1dfb      	adds	r3, r7, #7
 8005774:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005776:	1dfb      	adds	r3, r7, #7
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	2b7f      	cmp	r3, #127	@ 0x7f
 800577c:	d828      	bhi.n	80057d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800577e:	4a2f      	ldr	r2, [pc, #188]	@ (800583c <__NVIC_SetPriority+0xd4>)
 8005780:	1dfb      	adds	r3, r7, #7
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	b25b      	sxtb	r3, r3
 8005786:	089b      	lsrs	r3, r3, #2
 8005788:	33c0      	adds	r3, #192	@ 0xc0
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	589b      	ldr	r3, [r3, r2]
 800578e:	1dfa      	adds	r2, r7, #7
 8005790:	7812      	ldrb	r2, [r2, #0]
 8005792:	0011      	movs	r1, r2
 8005794:	2203      	movs	r2, #3
 8005796:	400a      	ands	r2, r1
 8005798:	00d2      	lsls	r2, r2, #3
 800579a:	21ff      	movs	r1, #255	@ 0xff
 800579c:	4091      	lsls	r1, r2
 800579e:	000a      	movs	r2, r1
 80057a0:	43d2      	mvns	r2, r2
 80057a2:	401a      	ands	r2, r3
 80057a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	019b      	lsls	r3, r3, #6
 80057aa:	22ff      	movs	r2, #255	@ 0xff
 80057ac:	401a      	ands	r2, r3
 80057ae:	1dfb      	adds	r3, r7, #7
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	0018      	movs	r0, r3
 80057b4:	2303      	movs	r3, #3
 80057b6:	4003      	ands	r3, r0
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80057bc:	481f      	ldr	r0, [pc, #124]	@ (800583c <__NVIC_SetPriority+0xd4>)
 80057be:	1dfb      	adds	r3, r7, #7
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	b25b      	sxtb	r3, r3
 80057c4:	089b      	lsrs	r3, r3, #2
 80057c6:	430a      	orrs	r2, r1
 80057c8:	33c0      	adds	r3, #192	@ 0xc0
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80057ce:	e031      	b.n	8005834 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80057d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005840 <__NVIC_SetPriority+0xd8>)
 80057d2:	1dfb      	adds	r3, r7, #7
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	0019      	movs	r1, r3
 80057d8:	230f      	movs	r3, #15
 80057da:	400b      	ands	r3, r1
 80057dc:	3b08      	subs	r3, #8
 80057de:	089b      	lsrs	r3, r3, #2
 80057e0:	3306      	adds	r3, #6
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	18d3      	adds	r3, r2, r3
 80057e6:	3304      	adds	r3, #4
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	1dfa      	adds	r2, r7, #7
 80057ec:	7812      	ldrb	r2, [r2, #0]
 80057ee:	0011      	movs	r1, r2
 80057f0:	2203      	movs	r2, #3
 80057f2:	400a      	ands	r2, r1
 80057f4:	00d2      	lsls	r2, r2, #3
 80057f6:	21ff      	movs	r1, #255	@ 0xff
 80057f8:	4091      	lsls	r1, r2
 80057fa:	000a      	movs	r2, r1
 80057fc:	43d2      	mvns	r2, r2
 80057fe:	401a      	ands	r2, r3
 8005800:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	019b      	lsls	r3, r3, #6
 8005806:	22ff      	movs	r2, #255	@ 0xff
 8005808:	401a      	ands	r2, r3
 800580a:	1dfb      	adds	r3, r7, #7
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	0018      	movs	r0, r3
 8005810:	2303      	movs	r3, #3
 8005812:	4003      	ands	r3, r0
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005818:	4809      	ldr	r0, [pc, #36]	@ (8005840 <__NVIC_SetPriority+0xd8>)
 800581a:	1dfb      	adds	r3, r7, #7
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	001c      	movs	r4, r3
 8005820:	230f      	movs	r3, #15
 8005822:	4023      	ands	r3, r4
 8005824:	3b08      	subs	r3, #8
 8005826:	089b      	lsrs	r3, r3, #2
 8005828:	430a      	orrs	r2, r1
 800582a:	3306      	adds	r3, #6
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	18c3      	adds	r3, r0, r3
 8005830:	3304      	adds	r3, #4
 8005832:	601a      	str	r2, [r3, #0]
}
 8005834:	46c0      	nop			@ (mov r8, r8)
 8005836:	46bd      	mov	sp, r7
 8005838:	b003      	add	sp, #12
 800583a:	bd90      	pop	{r4, r7, pc}
 800583c:	e000e100 	.word	0xe000e100
 8005840:	e000ed00 	.word	0xe000ed00

08005844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	1e5a      	subs	r2, r3, #1
 8005850:	2380      	movs	r3, #128	@ 0x80
 8005852:	045b      	lsls	r3, r3, #17
 8005854:	429a      	cmp	r2, r3
 8005856:	d301      	bcc.n	800585c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005858:	2301      	movs	r3, #1
 800585a:	e010      	b.n	800587e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800585c:	4b0a      	ldr	r3, [pc, #40]	@ (8005888 <SysTick_Config+0x44>)
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	3a01      	subs	r2, #1
 8005862:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005864:	2301      	movs	r3, #1
 8005866:	425b      	negs	r3, r3
 8005868:	2103      	movs	r1, #3
 800586a:	0018      	movs	r0, r3
 800586c:	f7ff ff7c 	bl	8005768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005870:	4b05      	ldr	r3, [pc, #20]	@ (8005888 <SysTick_Config+0x44>)
 8005872:	2200      	movs	r2, #0
 8005874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005876:	4b04      	ldr	r3, [pc, #16]	@ (8005888 <SysTick_Config+0x44>)
 8005878:	2207      	movs	r2, #7
 800587a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800587c:	2300      	movs	r3, #0
}
 800587e:	0018      	movs	r0, r3
 8005880:	46bd      	mov	sp, r7
 8005882:	b002      	add	sp, #8
 8005884:	bd80      	pop	{r7, pc}
 8005886:	46c0      	nop			@ (mov r8, r8)
 8005888:	e000e010 	.word	0xe000e010

0800588c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	60b9      	str	r1, [r7, #8]
 8005894:	607a      	str	r2, [r7, #4]
 8005896:	210f      	movs	r1, #15
 8005898:	187b      	adds	r3, r7, r1
 800589a:	1c02      	adds	r2, r0, #0
 800589c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	187b      	adds	r3, r7, r1
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	b25b      	sxtb	r3, r3
 80058a6:	0011      	movs	r1, r2
 80058a8:	0018      	movs	r0, r3
 80058aa:	f7ff ff5d 	bl	8005768 <__NVIC_SetPriority>
}
 80058ae:	46c0      	nop			@ (mov r8, r8)
 80058b0:	46bd      	mov	sp, r7
 80058b2:	b004      	add	sp, #16
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b082      	sub	sp, #8
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	0018      	movs	r0, r3
 80058c2:	f7ff ffbf 	bl	8005844 <SysTick_Config>
 80058c6:	0003      	movs	r3, r0
}
 80058c8:	0018      	movs	r0, r3
 80058ca:	46bd      	mov	sp, r7
 80058cc:	b002      	add	sp, #8
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80058da:	2300      	movs	r3, #0
 80058dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80058de:	2300      	movs	r3, #0
 80058e0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80058e2:	2300      	movs	r3, #0
 80058e4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80058e6:	e155      	b.n	8005b94 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2101      	movs	r1, #1
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	4091      	lsls	r1, r2
 80058f2:	000a      	movs	r2, r1
 80058f4:	4013      	ands	r3, r2
 80058f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d100      	bne.n	8005900 <HAL_GPIO_Init+0x30>
 80058fe:	e146      	b.n	8005b8e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	2203      	movs	r2, #3
 8005906:	4013      	ands	r3, r2
 8005908:	2b01      	cmp	r3, #1
 800590a:	d005      	beq.n	8005918 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	2203      	movs	r2, #3
 8005912:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005914:	2b02      	cmp	r3, #2
 8005916:	d130      	bne.n	800597a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	005b      	lsls	r3, r3, #1
 8005922:	2203      	movs	r2, #3
 8005924:	409a      	lsls	r2, r3
 8005926:	0013      	movs	r3, r2
 8005928:	43da      	mvns	r2, r3
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	4013      	ands	r3, r2
 800592e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	68da      	ldr	r2, [r3, #12]
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	409a      	lsls	r2, r3
 800593a:	0013      	movs	r3, r2
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	4313      	orrs	r3, r2
 8005940:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800594e:	2201      	movs	r2, #1
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	409a      	lsls	r2, r3
 8005954:	0013      	movs	r3, r2
 8005956:	43da      	mvns	r2, r3
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	4013      	ands	r3, r2
 800595c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	091b      	lsrs	r3, r3, #4
 8005964:	2201      	movs	r2, #1
 8005966:	401a      	ands	r2, r3
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	409a      	lsls	r2, r3
 800596c:	0013      	movs	r3, r2
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	4313      	orrs	r3, r2
 8005972:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	2203      	movs	r2, #3
 8005980:	4013      	ands	r3, r2
 8005982:	2b03      	cmp	r3, #3
 8005984:	d017      	beq.n	80059b6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	2203      	movs	r2, #3
 8005992:	409a      	lsls	r2, r3
 8005994:	0013      	movs	r3, r2
 8005996:	43da      	mvns	r2, r3
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	4013      	ands	r3, r2
 800599c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	689a      	ldr	r2, [r3, #8]
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	409a      	lsls	r2, r3
 80059a8:	0013      	movs	r3, r2
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2203      	movs	r2, #3
 80059bc:	4013      	ands	r3, r2
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d123      	bne.n	8005a0a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	08da      	lsrs	r2, r3, #3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	3208      	adds	r2, #8
 80059ca:	0092      	lsls	r2, r2, #2
 80059cc:	58d3      	ldr	r3, [r2, r3]
 80059ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	2207      	movs	r2, #7
 80059d4:	4013      	ands	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	220f      	movs	r2, #15
 80059da:	409a      	lsls	r2, r3
 80059dc:	0013      	movs	r3, r2
 80059de:	43da      	mvns	r2, r3
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	4013      	ands	r3, r2
 80059e4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	691a      	ldr	r2, [r3, #16]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2107      	movs	r1, #7
 80059ee:	400b      	ands	r3, r1
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	409a      	lsls	r2, r3
 80059f4:	0013      	movs	r3, r2
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	08da      	lsrs	r2, r3, #3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3208      	adds	r2, #8
 8005a04:	0092      	lsls	r2, r2, #2
 8005a06:	6939      	ldr	r1, [r7, #16]
 8005a08:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	2203      	movs	r2, #3
 8005a16:	409a      	lsls	r2, r3
 8005a18:	0013      	movs	r3, r2
 8005a1a:	43da      	mvns	r2, r3
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	2203      	movs	r2, #3
 8005a28:	401a      	ands	r2, r3
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	409a      	lsls	r2, r3
 8005a30:	0013      	movs	r3, r2
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	23c0      	movs	r3, #192	@ 0xc0
 8005a44:	029b      	lsls	r3, r3, #10
 8005a46:	4013      	ands	r3, r2
 8005a48:	d100      	bne.n	8005a4c <HAL_GPIO_Init+0x17c>
 8005a4a:	e0a0      	b.n	8005b8e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a4c:	4b57      	ldr	r3, [pc, #348]	@ (8005bac <HAL_GPIO_Init+0x2dc>)
 8005a4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a50:	4b56      	ldr	r3, [pc, #344]	@ (8005bac <HAL_GPIO_Init+0x2dc>)
 8005a52:	2101      	movs	r1, #1
 8005a54:	430a      	orrs	r2, r1
 8005a56:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a58:	4a55      	ldr	r2, [pc, #340]	@ (8005bb0 <HAL_GPIO_Init+0x2e0>)
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	089b      	lsrs	r3, r3, #2
 8005a5e:	3302      	adds	r3, #2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	589b      	ldr	r3, [r3, r2]
 8005a64:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2203      	movs	r2, #3
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	220f      	movs	r2, #15
 8005a70:	409a      	lsls	r2, r3
 8005a72:	0013      	movs	r3, r2
 8005a74:	43da      	mvns	r2, r3
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	4013      	ands	r3, r2
 8005a7a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	23a0      	movs	r3, #160	@ 0xa0
 8005a80:	05db      	lsls	r3, r3, #23
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d01f      	beq.n	8005ac6 <HAL_GPIO_Init+0x1f6>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a4a      	ldr	r2, [pc, #296]	@ (8005bb4 <HAL_GPIO_Init+0x2e4>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d019      	beq.n	8005ac2 <HAL_GPIO_Init+0x1f2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a49      	ldr	r2, [pc, #292]	@ (8005bb8 <HAL_GPIO_Init+0x2e8>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d013      	beq.n	8005abe <HAL_GPIO_Init+0x1ee>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a48      	ldr	r2, [pc, #288]	@ (8005bbc <HAL_GPIO_Init+0x2ec>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d00d      	beq.n	8005aba <HAL_GPIO_Init+0x1ea>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a47      	ldr	r2, [pc, #284]	@ (8005bc0 <HAL_GPIO_Init+0x2f0>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d007      	beq.n	8005ab6 <HAL_GPIO_Init+0x1e6>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a46      	ldr	r2, [pc, #280]	@ (8005bc4 <HAL_GPIO_Init+0x2f4>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d101      	bne.n	8005ab2 <HAL_GPIO_Init+0x1e2>
 8005aae:	2305      	movs	r3, #5
 8005ab0:	e00a      	b.n	8005ac8 <HAL_GPIO_Init+0x1f8>
 8005ab2:	2306      	movs	r3, #6
 8005ab4:	e008      	b.n	8005ac8 <HAL_GPIO_Init+0x1f8>
 8005ab6:	2304      	movs	r3, #4
 8005ab8:	e006      	b.n	8005ac8 <HAL_GPIO_Init+0x1f8>
 8005aba:	2303      	movs	r3, #3
 8005abc:	e004      	b.n	8005ac8 <HAL_GPIO_Init+0x1f8>
 8005abe:	2302      	movs	r3, #2
 8005ac0:	e002      	b.n	8005ac8 <HAL_GPIO_Init+0x1f8>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e000      	b.n	8005ac8 <HAL_GPIO_Init+0x1f8>
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	2103      	movs	r1, #3
 8005acc:	400a      	ands	r2, r1
 8005ace:	0092      	lsls	r2, r2, #2
 8005ad0:	4093      	lsls	r3, r2
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ad8:	4935      	ldr	r1, [pc, #212]	@ (8005bb0 <HAL_GPIO_Init+0x2e0>)
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	089b      	lsrs	r3, r3, #2
 8005ade:	3302      	adds	r3, #2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ae6:	4b38      	ldr	r3, [pc, #224]	@ (8005bc8 <HAL_GPIO_Init+0x2f8>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	43da      	mvns	r2, r3
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	4013      	ands	r3, r2
 8005af4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	2380      	movs	r3, #128	@ 0x80
 8005afc:	035b      	lsls	r3, r3, #13
 8005afe:	4013      	ands	r3, r2
 8005b00:	d003      	beq.n	8005b0a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8005bc8 <HAL_GPIO_Init+0x2f8>)
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005b10:	4b2d      	ldr	r3, [pc, #180]	@ (8005bc8 <HAL_GPIO_Init+0x2f8>)
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	43da      	mvns	r2, r3
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	2380      	movs	r3, #128	@ 0x80
 8005b26:	039b      	lsls	r3, r3, #14
 8005b28:	4013      	ands	r3, r2
 8005b2a:	d003      	beq.n	8005b34 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005b34:	4b24      	ldr	r3, [pc, #144]	@ (8005bc8 <HAL_GPIO_Init+0x2f8>)
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8005b3a:	4b23      	ldr	r3, [pc, #140]	@ (8005bc8 <HAL_GPIO_Init+0x2f8>)
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	43da      	mvns	r2, r3
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	4013      	ands	r3, r2
 8005b48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	2380      	movs	r3, #128	@ 0x80
 8005b50:	029b      	lsls	r3, r3, #10
 8005b52:	4013      	ands	r3, r2
 8005b54:	d003      	beq.n	8005b5e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8005bc8 <HAL_GPIO_Init+0x2f8>)
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b64:	4b18      	ldr	r3, [pc, #96]	@ (8005bc8 <HAL_GPIO_Init+0x2f8>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	43da      	mvns	r2, r3
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	4013      	ands	r3, r2
 8005b72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	2380      	movs	r3, #128	@ 0x80
 8005b7a:	025b      	lsls	r3, r3, #9
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	d003      	beq.n	8005b88 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005b88:	4b0f      	ldr	r3, [pc, #60]	@ (8005bc8 <HAL_GPIO_Init+0x2f8>)
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	3301      	adds	r3, #1
 8005b92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	40da      	lsrs	r2, r3
 8005b9c:	1e13      	subs	r3, r2, #0
 8005b9e:	d000      	beq.n	8005ba2 <HAL_GPIO_Init+0x2d2>
 8005ba0:	e6a2      	b.n	80058e8 <HAL_GPIO_Init+0x18>
  }
}
 8005ba2:	46c0      	nop			@ (mov r8, r8)
 8005ba4:	46c0      	nop			@ (mov r8, r8)
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	b006      	add	sp, #24
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	40021000 	.word	0x40021000
 8005bb0:	40010000 	.word	0x40010000
 8005bb4:	50000400 	.word	0x50000400
 8005bb8:	50000800 	.word	0x50000800
 8005bbc:	50000c00 	.word	0x50000c00
 8005bc0:	50001000 	.word	0x50001000
 8005bc4:	50001c00 	.word	0x50001c00
 8005bc8:	40010400 	.word	0x40010400

08005bcc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	0008      	movs	r0, r1
 8005bd6:	0011      	movs	r1, r2
 8005bd8:	1cbb      	adds	r3, r7, #2
 8005bda:	1c02      	adds	r2, r0, #0
 8005bdc:	801a      	strh	r2, [r3, #0]
 8005bde:	1c7b      	adds	r3, r7, #1
 8005be0:	1c0a      	adds	r2, r1, #0
 8005be2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005be4:	1c7b      	adds	r3, r7, #1
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d004      	beq.n	8005bf6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005bec:	1cbb      	adds	r3, r7, #2
 8005bee:	881a      	ldrh	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005bf4:	e003      	b.n	8005bfe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8005bf6:	1cbb      	adds	r3, r7, #2
 8005bf8:	881a      	ldrh	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005bfe:	46c0      	nop			@ (mov r8, r8)
 8005c00:	46bd      	mov	sp, r7
 8005c02:	b002      	add	sp, #8
 8005c04:	bd80      	pop	{r7, pc}
	...

08005c08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e082      	b.n	8005d20 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2241      	movs	r2, #65	@ 0x41
 8005c1e:	5c9b      	ldrb	r3, [r3, r2]
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d107      	bne.n	8005c36 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2240      	movs	r2, #64	@ 0x40
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	0018      	movs	r0, r3
 8005c32:	f7ff fc35 	bl	80054a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2241      	movs	r2, #65	@ 0x41
 8005c3a:	2124      	movs	r1, #36	@ 0x24
 8005c3c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2101      	movs	r1, #1
 8005c4a:	438a      	bics	r2, r1
 8005c4c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4934      	ldr	r1, [pc, #208]	@ (8005d28 <HAL_I2C_Init+0x120>)
 8005c58:	400a      	ands	r2, r1
 8005c5a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689a      	ldr	r2, [r3, #8]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4931      	ldr	r1, [pc, #196]	@ (8005d2c <HAL_I2C_Init+0x124>)
 8005c68:	400a      	ands	r2, r1
 8005c6a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d108      	bne.n	8005c86 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2180      	movs	r1, #128	@ 0x80
 8005c7e:	0209      	lsls	r1, r1, #8
 8005c80:	430a      	orrs	r2, r1
 8005c82:	609a      	str	r2, [r3, #8]
 8005c84:	e007      	b.n	8005c96 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	689a      	ldr	r2, [r3, #8]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2184      	movs	r1, #132	@ 0x84
 8005c90:	0209      	lsls	r1, r1, #8
 8005c92:	430a      	orrs	r2, r1
 8005c94:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d104      	bne.n	8005ca8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2280      	movs	r2, #128	@ 0x80
 8005ca4:	0112      	lsls	r2, r2, #4
 8005ca6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	491f      	ldr	r1, [pc, #124]	@ (8005d30 <HAL_I2C_Init+0x128>)
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	491a      	ldr	r1, [pc, #104]	@ (8005d2c <HAL_I2C_Init+0x124>)
 8005cc4:	400a      	ands	r2, r1
 8005cc6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	691a      	ldr	r2, [r3, #16]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	69d9      	ldr	r1, [r3, #28]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a1a      	ldr	r2, [r3, #32]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2241      	movs	r2, #65	@ 0x41
 8005d0c:	2120      	movs	r1, #32
 8005d0e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2242      	movs	r2, #66	@ 0x42
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	0018      	movs	r0, r3
 8005d22:	46bd      	mov	sp, r7
 8005d24:	b002      	add	sp, #8
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	f0ffffff 	.word	0xf0ffffff
 8005d2c:	ffff7fff 	.word	0xffff7fff
 8005d30:	02008000 	.word	0x02008000

08005d34 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005d34:	b590      	push	{r4, r7, lr}
 8005d36:	b089      	sub	sp, #36	@ 0x24
 8005d38:	af02      	add	r7, sp, #8
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	0008      	movs	r0, r1
 8005d3e:	607a      	str	r2, [r7, #4]
 8005d40:	0019      	movs	r1, r3
 8005d42:	230a      	movs	r3, #10
 8005d44:	18fb      	adds	r3, r7, r3
 8005d46:	1c02      	adds	r2, r0, #0
 8005d48:	801a      	strh	r2, [r3, #0]
 8005d4a:	2308      	movs	r3, #8
 8005d4c:	18fb      	adds	r3, r7, r3
 8005d4e:	1c0a      	adds	r2, r1, #0
 8005d50:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2241      	movs	r2, #65	@ 0x41
 8005d56:	5c9b      	ldrb	r3, [r3, r2]
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b20      	cmp	r3, #32
 8005d5c:	d000      	beq.n	8005d60 <HAL_I2C_Master_Transmit+0x2c>
 8005d5e:	e0e7      	b.n	8005f30 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2240      	movs	r2, #64	@ 0x40
 8005d64:	5c9b      	ldrb	r3, [r3, r2]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d101      	bne.n	8005d6e <HAL_I2C_Master_Transmit+0x3a>
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	e0e1      	b.n	8005f32 <HAL_I2C_Master_Transmit+0x1fe>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2240      	movs	r2, #64	@ 0x40
 8005d72:	2101      	movs	r1, #1
 8005d74:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d76:	f7ff fcc9 	bl	800570c <HAL_GetTick>
 8005d7a:	0003      	movs	r3, r0
 8005d7c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d7e:	2380      	movs	r3, #128	@ 0x80
 8005d80:	0219      	lsls	r1, r3, #8
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	2319      	movs	r3, #25
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f000 fd3e 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 8005d90:	1e03      	subs	r3, r0, #0
 8005d92:	d001      	beq.n	8005d98 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e0cc      	b.n	8005f32 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2241      	movs	r2, #65	@ 0x41
 8005d9c:	2121      	movs	r1, #33	@ 0x21
 8005d9e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2242      	movs	r2, #66	@ 0x42
 8005da4:	2110      	movs	r1, #16
 8005da6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2208      	movs	r2, #8
 8005db8:	18ba      	adds	r2, r7, r2
 8005dba:	8812      	ldrh	r2, [r2, #0]
 8005dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	2bff      	cmp	r3, #255	@ 0xff
 8005dcc:	d911      	bls.n	8005df2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	22ff      	movs	r2, #255	@ 0xff
 8005dd2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	2380      	movs	r3, #128	@ 0x80
 8005ddc:	045c      	lsls	r4, r3, #17
 8005dde:	230a      	movs	r3, #10
 8005de0:	18fb      	adds	r3, r7, r3
 8005de2:	8819      	ldrh	r1, [r3, #0]
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	4b55      	ldr	r3, [pc, #340]	@ (8005f3c <HAL_I2C_Master_Transmit+0x208>)
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	0023      	movs	r3, r4
 8005dec:	f000 fede 	bl	8006bac <I2C_TransferConfig>
 8005df0:	e075      	b.n	8005ede <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e00:	b2da      	uxtb	r2, r3
 8005e02:	2380      	movs	r3, #128	@ 0x80
 8005e04:	049c      	lsls	r4, r3, #18
 8005e06:	230a      	movs	r3, #10
 8005e08:	18fb      	adds	r3, r7, r3
 8005e0a:	8819      	ldrh	r1, [r3, #0]
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	4b4b      	ldr	r3, [pc, #300]	@ (8005f3c <HAL_I2C_Master_Transmit+0x208>)
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	0023      	movs	r3, r4
 8005e14:	f000 feca 	bl	8006bac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005e18:	e061      	b.n	8005ede <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	0018      	movs	r0, r3
 8005e22:	f000 fd41 	bl	80068a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e26:	1e03      	subs	r3, r0, #0
 8005e28:	d001      	beq.n	8005e2e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e081      	b.n	8005f32 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e32:	781a      	ldrb	r2, [r3, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3e:	1c5a      	adds	r2, r3, #1
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e56:	3b01      	subs	r3, #1
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d03a      	beq.n	8005ede <HAL_I2C_Master_Transmit+0x1aa>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d136      	bne.n	8005ede <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	0013      	movs	r3, r2
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	2180      	movs	r1, #128	@ 0x80
 8005e7e:	f000 fcc5 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 8005e82:	1e03      	subs	r3, r0, #0
 8005e84:	d001      	beq.n	8005e8a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e053      	b.n	8005f32 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	2bff      	cmp	r3, #255	@ 0xff
 8005e92:	d911      	bls.n	8005eb8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	22ff      	movs	r2, #255	@ 0xff
 8005e98:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	2380      	movs	r3, #128	@ 0x80
 8005ea2:	045c      	lsls	r4, r3, #17
 8005ea4:	230a      	movs	r3, #10
 8005ea6:	18fb      	adds	r3, r7, r3
 8005ea8:	8819      	ldrh	r1, [r3, #0]
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	2300      	movs	r3, #0
 8005eae:	9300      	str	r3, [sp, #0]
 8005eb0:	0023      	movs	r3, r4
 8005eb2:	f000 fe7b 	bl	8006bac <I2C_TransferConfig>
 8005eb6:	e012      	b.n	8005ede <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ec6:	b2da      	uxtb	r2, r3
 8005ec8:	2380      	movs	r3, #128	@ 0x80
 8005eca:	049c      	lsls	r4, r3, #18
 8005ecc:	230a      	movs	r3, #10
 8005ece:	18fb      	adds	r3, r7, r3
 8005ed0:	8819      	ldrh	r1, [r3, #0]
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	0023      	movs	r3, r4
 8005eda:	f000 fe67 	bl	8006bac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d198      	bne.n	8005e1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	0018      	movs	r0, r3
 8005ef0:	f000 fd20 	bl	8006934 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ef4:	1e03      	subs	r3, r0, #0
 8005ef6:	d001      	beq.n	8005efc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e01a      	b.n	8005f32 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2220      	movs	r2, #32
 8005f02:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685a      	ldr	r2, [r3, #4]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	490c      	ldr	r1, [pc, #48]	@ (8005f40 <HAL_I2C_Master_Transmit+0x20c>)
 8005f10:	400a      	ands	r2, r1
 8005f12:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2241      	movs	r2, #65	@ 0x41
 8005f18:	2120      	movs	r1, #32
 8005f1a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2242      	movs	r2, #66	@ 0x42
 8005f20:	2100      	movs	r1, #0
 8005f22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2240      	movs	r2, #64	@ 0x40
 8005f28:	2100      	movs	r1, #0
 8005f2a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	e000      	b.n	8005f32 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8005f30:	2302      	movs	r3, #2
  }
}
 8005f32:	0018      	movs	r0, r3
 8005f34:	46bd      	mov	sp, r7
 8005f36:	b007      	add	sp, #28
 8005f38:	bd90      	pop	{r4, r7, pc}
 8005f3a:	46c0      	nop			@ (mov r8, r8)
 8005f3c:	80002000 	.word	0x80002000
 8005f40:	fe00e800 	.word	0xfe00e800

08005f44 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f44:	b590      	push	{r4, r7, lr}
 8005f46:	b089      	sub	sp, #36	@ 0x24
 8005f48:	af02      	add	r7, sp, #8
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	000c      	movs	r4, r1
 8005f4e:	0010      	movs	r0, r2
 8005f50:	0019      	movs	r1, r3
 8005f52:	230a      	movs	r3, #10
 8005f54:	18fb      	adds	r3, r7, r3
 8005f56:	1c22      	adds	r2, r4, #0
 8005f58:	801a      	strh	r2, [r3, #0]
 8005f5a:	2308      	movs	r3, #8
 8005f5c:	18fb      	adds	r3, r7, r3
 8005f5e:	1c02      	adds	r2, r0, #0
 8005f60:	801a      	strh	r2, [r3, #0]
 8005f62:	1dbb      	adds	r3, r7, #6
 8005f64:	1c0a      	adds	r2, r1, #0
 8005f66:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2241      	movs	r2, #65	@ 0x41
 8005f6c:	5c9b      	ldrb	r3, [r3, r2]
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	d000      	beq.n	8005f76 <HAL_I2C_Mem_Write+0x32>
 8005f74:	e10c      	b.n	8006190 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d004      	beq.n	8005f86 <HAL_I2C_Mem_Write+0x42>
 8005f7c:	232c      	movs	r3, #44	@ 0x2c
 8005f7e:	18fb      	adds	r3, r7, r3
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d105      	bne.n	8005f92 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2280      	movs	r2, #128	@ 0x80
 8005f8a:	0092      	lsls	r2, r2, #2
 8005f8c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e0ff      	b.n	8006192 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2240      	movs	r2, #64	@ 0x40
 8005f96:	5c9b      	ldrb	r3, [r3, r2]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d101      	bne.n	8005fa0 <HAL_I2C_Mem_Write+0x5c>
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	e0f8      	b.n	8006192 <HAL_I2C_Mem_Write+0x24e>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2240      	movs	r2, #64	@ 0x40
 8005fa4:	2101      	movs	r1, #1
 8005fa6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005fa8:	f7ff fbb0 	bl	800570c <HAL_GetTick>
 8005fac:	0003      	movs	r3, r0
 8005fae:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fb0:	2380      	movs	r3, #128	@ 0x80
 8005fb2:	0219      	lsls	r1, r3, #8
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	2319      	movs	r3, #25
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f000 fc25 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 8005fc2:	1e03      	subs	r3, r0, #0
 8005fc4:	d001      	beq.n	8005fca <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e0e3      	b.n	8006192 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2241      	movs	r2, #65	@ 0x41
 8005fce:	2121      	movs	r1, #33	@ 0x21
 8005fd0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2242      	movs	r2, #66	@ 0x42
 8005fd6:	2140      	movs	r1, #64	@ 0x40
 8005fd8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005fe4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	222c      	movs	r2, #44	@ 0x2c
 8005fea:	18ba      	adds	r2, r7, r2
 8005fec:	8812      	ldrh	r2, [r2, #0]
 8005fee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ff6:	1dbb      	adds	r3, r7, #6
 8005ff8:	881c      	ldrh	r4, [r3, #0]
 8005ffa:	2308      	movs	r3, #8
 8005ffc:	18fb      	adds	r3, r7, r3
 8005ffe:	881a      	ldrh	r2, [r3, #0]
 8006000:	230a      	movs	r3, #10
 8006002:	18fb      	adds	r3, r7, r3
 8006004:	8819      	ldrh	r1, [r3, #0]
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	9301      	str	r3, [sp, #4]
 800600c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	0023      	movs	r3, r4
 8006012:	f000 fb13 	bl	800663c <I2C_RequestMemoryWrite>
 8006016:	1e03      	subs	r3, r0, #0
 8006018:	d005      	beq.n	8006026 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2240      	movs	r2, #64	@ 0x40
 800601e:	2100      	movs	r1, #0
 8006020:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e0b5      	b.n	8006192 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800602a:	b29b      	uxth	r3, r3
 800602c:	2bff      	cmp	r3, #255	@ 0xff
 800602e:	d911      	bls.n	8006054 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	22ff      	movs	r2, #255	@ 0xff
 8006034:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800603a:	b2da      	uxtb	r2, r3
 800603c:	2380      	movs	r3, #128	@ 0x80
 800603e:	045c      	lsls	r4, r3, #17
 8006040:	230a      	movs	r3, #10
 8006042:	18fb      	adds	r3, r7, r3
 8006044:	8819      	ldrh	r1, [r3, #0]
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	2300      	movs	r3, #0
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	0023      	movs	r3, r4
 800604e:	f000 fdad 	bl	8006bac <I2C_TransferConfig>
 8006052:	e012      	b.n	800607a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006058:	b29a      	uxth	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006062:	b2da      	uxtb	r2, r3
 8006064:	2380      	movs	r3, #128	@ 0x80
 8006066:	049c      	lsls	r4, r3, #18
 8006068:	230a      	movs	r3, #10
 800606a:	18fb      	adds	r3, r7, r3
 800606c:	8819      	ldrh	r1, [r3, #0]
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	2300      	movs	r3, #0
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	0023      	movs	r3, r4
 8006076:	f000 fd99 	bl	8006bac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	0018      	movs	r0, r3
 8006082:	f000 fc11 	bl	80068a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006086:	1e03      	subs	r3, r0, #0
 8006088:	d001      	beq.n	800608e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e081      	b.n	8006192 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006092:	781a      	ldrb	r2, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609e:	1c5a      	adds	r2, r3, #1
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	3b01      	subs	r3, #1
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060b6:	3b01      	subs	r3, #1
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d03a      	beq.n	800613e <HAL_I2C_Mem_Write+0x1fa>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d136      	bne.n	800613e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	0013      	movs	r3, r2
 80060da:	2200      	movs	r2, #0
 80060dc:	2180      	movs	r1, #128	@ 0x80
 80060de:	f000 fb95 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 80060e2:	1e03      	subs	r3, r0, #0
 80060e4:	d001      	beq.n	80060ea <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e053      	b.n	8006192 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	2bff      	cmp	r3, #255	@ 0xff
 80060f2:	d911      	bls.n	8006118 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	22ff      	movs	r2, #255	@ 0xff
 80060f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060fe:	b2da      	uxtb	r2, r3
 8006100:	2380      	movs	r3, #128	@ 0x80
 8006102:	045c      	lsls	r4, r3, #17
 8006104:	230a      	movs	r3, #10
 8006106:	18fb      	adds	r3, r7, r3
 8006108:	8819      	ldrh	r1, [r3, #0]
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	2300      	movs	r3, #0
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	0023      	movs	r3, r4
 8006112:	f000 fd4b 	bl	8006bac <I2C_TransferConfig>
 8006116:	e012      	b.n	800613e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800611c:	b29a      	uxth	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006126:	b2da      	uxtb	r2, r3
 8006128:	2380      	movs	r3, #128	@ 0x80
 800612a:	049c      	lsls	r4, r3, #18
 800612c:	230a      	movs	r3, #10
 800612e:	18fb      	adds	r3, r7, r3
 8006130:	8819      	ldrh	r1, [r3, #0]
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	2300      	movs	r3, #0
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	0023      	movs	r3, r4
 800613a:	f000 fd37 	bl	8006bac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006142:	b29b      	uxth	r3, r3
 8006144:	2b00      	cmp	r3, #0
 8006146:	d198      	bne.n	800607a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	0018      	movs	r0, r3
 8006150:	f000 fbf0 	bl	8006934 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006154:	1e03      	subs	r3, r0, #0
 8006156:	d001      	beq.n	800615c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e01a      	b.n	8006192 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2220      	movs	r2, #32
 8006162:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	490b      	ldr	r1, [pc, #44]	@ (800619c <HAL_I2C_Mem_Write+0x258>)
 8006170:	400a      	ands	r2, r1
 8006172:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2241      	movs	r2, #65	@ 0x41
 8006178:	2120      	movs	r1, #32
 800617a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2242      	movs	r2, #66	@ 0x42
 8006180:	2100      	movs	r1, #0
 8006182:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2240      	movs	r2, #64	@ 0x40
 8006188:	2100      	movs	r1, #0
 800618a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800618c:	2300      	movs	r3, #0
 800618e:	e000      	b.n	8006192 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8006190:	2302      	movs	r3, #2
  }
}
 8006192:	0018      	movs	r0, r3
 8006194:	46bd      	mov	sp, r7
 8006196:	b007      	add	sp, #28
 8006198:	bd90      	pop	{r4, r7, pc}
 800619a:	46c0      	nop			@ (mov r8, r8)
 800619c:	fe00e800 	.word	0xfe00e800

080061a0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061a0:	b590      	push	{r4, r7, lr}
 80061a2:	b089      	sub	sp, #36	@ 0x24
 80061a4:	af02      	add	r7, sp, #8
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	000c      	movs	r4, r1
 80061aa:	0010      	movs	r0, r2
 80061ac:	0019      	movs	r1, r3
 80061ae:	230a      	movs	r3, #10
 80061b0:	18fb      	adds	r3, r7, r3
 80061b2:	1c22      	adds	r2, r4, #0
 80061b4:	801a      	strh	r2, [r3, #0]
 80061b6:	2308      	movs	r3, #8
 80061b8:	18fb      	adds	r3, r7, r3
 80061ba:	1c02      	adds	r2, r0, #0
 80061bc:	801a      	strh	r2, [r3, #0]
 80061be:	1dbb      	adds	r3, r7, #6
 80061c0:	1c0a      	adds	r2, r1, #0
 80061c2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2241      	movs	r2, #65	@ 0x41
 80061c8:	5c9b      	ldrb	r3, [r3, r2]
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b20      	cmp	r3, #32
 80061ce:	d000      	beq.n	80061d2 <HAL_I2C_Mem_Read+0x32>
 80061d0:	e110      	b.n	80063f4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80061d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d004      	beq.n	80061e2 <HAL_I2C_Mem_Read+0x42>
 80061d8:	232c      	movs	r3, #44	@ 0x2c
 80061da:	18fb      	adds	r3, r7, r3
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d105      	bne.n	80061ee <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2280      	movs	r2, #128	@ 0x80
 80061e6:	0092      	lsls	r2, r2, #2
 80061e8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e103      	b.n	80063f6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2240      	movs	r2, #64	@ 0x40
 80061f2:	5c9b      	ldrb	r3, [r3, r2]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d101      	bne.n	80061fc <HAL_I2C_Mem_Read+0x5c>
 80061f8:	2302      	movs	r3, #2
 80061fa:	e0fc      	b.n	80063f6 <HAL_I2C_Mem_Read+0x256>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2240      	movs	r2, #64	@ 0x40
 8006200:	2101      	movs	r1, #1
 8006202:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006204:	f7ff fa82 	bl	800570c <HAL_GetTick>
 8006208:	0003      	movs	r3, r0
 800620a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800620c:	2380      	movs	r3, #128	@ 0x80
 800620e:	0219      	lsls	r1, r3, #8
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	2319      	movs	r3, #25
 8006218:	2201      	movs	r2, #1
 800621a:	f000 faf7 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 800621e:	1e03      	subs	r3, r0, #0
 8006220:	d001      	beq.n	8006226 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e0e7      	b.n	80063f6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2241      	movs	r2, #65	@ 0x41
 800622a:	2122      	movs	r1, #34	@ 0x22
 800622c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2242      	movs	r2, #66	@ 0x42
 8006232:	2140      	movs	r1, #64	@ 0x40
 8006234:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006240:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	222c      	movs	r2, #44	@ 0x2c
 8006246:	18ba      	adds	r2, r7, r2
 8006248:	8812      	ldrh	r2, [r2, #0]
 800624a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006252:	1dbb      	adds	r3, r7, #6
 8006254:	881c      	ldrh	r4, [r3, #0]
 8006256:	2308      	movs	r3, #8
 8006258:	18fb      	adds	r3, r7, r3
 800625a:	881a      	ldrh	r2, [r3, #0]
 800625c:	230a      	movs	r3, #10
 800625e:	18fb      	adds	r3, r7, r3
 8006260:	8819      	ldrh	r1, [r3, #0]
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	9301      	str	r3, [sp, #4]
 8006268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	0023      	movs	r3, r4
 800626e:	f000 fa49 	bl	8006704 <I2C_RequestMemoryRead>
 8006272:	1e03      	subs	r3, r0, #0
 8006274:	d005      	beq.n	8006282 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2240      	movs	r2, #64	@ 0x40
 800627a:	2100      	movs	r1, #0
 800627c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e0b9      	b.n	80063f6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006286:	b29b      	uxth	r3, r3
 8006288:	2bff      	cmp	r3, #255	@ 0xff
 800628a:	d911      	bls.n	80062b0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	22ff      	movs	r2, #255	@ 0xff
 8006290:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006296:	b2da      	uxtb	r2, r3
 8006298:	2380      	movs	r3, #128	@ 0x80
 800629a:	045c      	lsls	r4, r3, #17
 800629c:	230a      	movs	r3, #10
 800629e:	18fb      	adds	r3, r7, r3
 80062a0:	8819      	ldrh	r1, [r3, #0]
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	4b56      	ldr	r3, [pc, #344]	@ (8006400 <HAL_I2C_Mem_Read+0x260>)
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	0023      	movs	r3, r4
 80062aa:	f000 fc7f 	bl	8006bac <I2C_TransferConfig>
 80062ae:	e012      	b.n	80062d6 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	2380      	movs	r3, #128	@ 0x80
 80062c2:	049c      	lsls	r4, r3, #18
 80062c4:	230a      	movs	r3, #10
 80062c6:	18fb      	adds	r3, r7, r3
 80062c8:	8819      	ldrh	r1, [r3, #0]
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	4b4c      	ldr	r3, [pc, #304]	@ (8006400 <HAL_I2C_Mem_Read+0x260>)
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	0023      	movs	r3, r4
 80062d2:	f000 fc6b 	bl	8006bac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80062d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	0013      	movs	r3, r2
 80062e0:	2200      	movs	r2, #0
 80062e2:	2104      	movs	r1, #4
 80062e4:	f000 fa92 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 80062e8:	1e03      	subs	r3, r0, #0
 80062ea:	d001      	beq.n	80062f0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e082      	b.n	80063f6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fa:	b2d2      	uxtb	r2, r2
 80062fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006302:	1c5a      	adds	r2, r3, #1
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800630c:	3b01      	subs	r3, #1
 800630e:	b29a      	uxth	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006318:	b29b      	uxth	r3, r3
 800631a:	3b01      	subs	r3, #1
 800631c:	b29a      	uxth	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006326:	b29b      	uxth	r3, r3
 8006328:	2b00      	cmp	r3, #0
 800632a:	d03a      	beq.n	80063a2 <HAL_I2C_Mem_Read+0x202>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006330:	2b00      	cmp	r3, #0
 8006332:	d136      	bne.n	80063a2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006334:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	0013      	movs	r3, r2
 800633e:	2200      	movs	r2, #0
 8006340:	2180      	movs	r1, #128	@ 0x80
 8006342:	f000 fa63 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 8006346:	1e03      	subs	r3, r0, #0
 8006348:	d001      	beq.n	800634e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e053      	b.n	80063f6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006352:	b29b      	uxth	r3, r3
 8006354:	2bff      	cmp	r3, #255	@ 0xff
 8006356:	d911      	bls.n	800637c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	22ff      	movs	r2, #255	@ 0xff
 800635c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006362:	b2da      	uxtb	r2, r3
 8006364:	2380      	movs	r3, #128	@ 0x80
 8006366:	045c      	lsls	r4, r3, #17
 8006368:	230a      	movs	r3, #10
 800636a:	18fb      	adds	r3, r7, r3
 800636c:	8819      	ldrh	r1, [r3, #0]
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	2300      	movs	r3, #0
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	0023      	movs	r3, r4
 8006376:	f000 fc19 	bl	8006bac <I2C_TransferConfig>
 800637a:	e012      	b.n	80063a2 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006380:	b29a      	uxth	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800638a:	b2da      	uxtb	r2, r3
 800638c:	2380      	movs	r3, #128	@ 0x80
 800638e:	049c      	lsls	r4, r3, #18
 8006390:	230a      	movs	r3, #10
 8006392:	18fb      	adds	r3, r7, r3
 8006394:	8819      	ldrh	r1, [r3, #0]
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	2300      	movs	r3, #0
 800639a:	9300      	str	r3, [sp, #0]
 800639c:	0023      	movs	r3, r4
 800639e:	f000 fc05 	bl	8006bac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d194      	bne.n	80062d6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	0018      	movs	r0, r3
 80063b4:	f000 fabe 	bl	8006934 <I2C_WaitOnSTOPFlagUntilTimeout>
 80063b8:	1e03      	subs	r3, r0, #0
 80063ba:	d001      	beq.n	80063c0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e01a      	b.n	80063f6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2220      	movs	r2, #32
 80063c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	490c      	ldr	r1, [pc, #48]	@ (8006404 <HAL_I2C_Mem_Read+0x264>)
 80063d4:	400a      	ands	r2, r1
 80063d6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2241      	movs	r2, #65	@ 0x41
 80063dc:	2120      	movs	r1, #32
 80063de:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2242      	movs	r2, #66	@ 0x42
 80063e4:	2100      	movs	r1, #0
 80063e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2240      	movs	r2, #64	@ 0x40
 80063ec:	2100      	movs	r1, #0
 80063ee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80063f0:	2300      	movs	r3, #0
 80063f2:	e000      	b.n	80063f6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80063f4:	2302      	movs	r3, #2
  }
}
 80063f6:	0018      	movs	r0, r3
 80063f8:	46bd      	mov	sp, r7
 80063fa:	b007      	add	sp, #28
 80063fc:	bd90      	pop	{r4, r7, pc}
 80063fe:	46c0      	nop			@ (mov r8, r8)
 8006400:	80002400 	.word	0x80002400
 8006404:	fe00e800 	.word	0xfe00e800

08006408 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b08a      	sub	sp, #40	@ 0x28
 800640c:	af02      	add	r7, sp, #8
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	607a      	str	r2, [r7, #4]
 8006412:	603b      	str	r3, [r7, #0]
 8006414:	230a      	movs	r3, #10
 8006416:	18fb      	adds	r3, r7, r3
 8006418:	1c0a      	adds	r2, r1, #0
 800641a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800641c:	2300      	movs	r3, #0
 800641e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2241      	movs	r2, #65	@ 0x41
 8006424:	5c9b      	ldrb	r3, [r3, r2]
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b20      	cmp	r3, #32
 800642a:	d000      	beq.n	800642e <HAL_I2C_IsDeviceReady+0x26>
 800642c:	e0fd      	b.n	800662a <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	699a      	ldr	r2, [r3, #24]
 8006434:	2380      	movs	r3, #128	@ 0x80
 8006436:	021b      	lsls	r3, r3, #8
 8006438:	401a      	ands	r2, r3
 800643a:	2380      	movs	r3, #128	@ 0x80
 800643c:	021b      	lsls	r3, r3, #8
 800643e:	429a      	cmp	r2, r3
 8006440:	d101      	bne.n	8006446 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8006442:	2302      	movs	r3, #2
 8006444:	e0f2      	b.n	800662c <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2240      	movs	r2, #64	@ 0x40
 800644a:	5c9b      	ldrb	r3, [r3, r2]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d101      	bne.n	8006454 <HAL_I2C_IsDeviceReady+0x4c>
 8006450:	2302      	movs	r3, #2
 8006452:	e0eb      	b.n	800662c <HAL_I2C_IsDeviceReady+0x224>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2240      	movs	r2, #64	@ 0x40
 8006458:	2101      	movs	r1, #1
 800645a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2241      	movs	r2, #65	@ 0x41
 8006460:	2124      	movs	r1, #36	@ 0x24
 8006462:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d107      	bne.n	8006482 <HAL_I2C_IsDeviceReady+0x7a>
 8006472:	230a      	movs	r3, #10
 8006474:	18fb      	adds	r3, r7, r3
 8006476:	881b      	ldrh	r3, [r3, #0]
 8006478:	059b      	lsls	r3, r3, #22
 800647a:	0d9b      	lsrs	r3, r3, #22
 800647c:	4a6d      	ldr	r2, [pc, #436]	@ (8006634 <HAL_I2C_IsDeviceReady+0x22c>)
 800647e:	431a      	orrs	r2, r3
 8006480:	e006      	b.n	8006490 <HAL_I2C_IsDeviceReady+0x88>
 8006482:	230a      	movs	r3, #10
 8006484:	18fb      	adds	r3, r7, r3
 8006486:	881b      	ldrh	r3, [r3, #0]
 8006488:	059b      	lsls	r3, r3, #22
 800648a:	0d9b      	lsrs	r3, r3, #22
 800648c:	4a6a      	ldr	r2, [pc, #424]	@ (8006638 <HAL_I2C_IsDeviceReady+0x230>)
 800648e:	431a      	orrs	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8006496:	f7ff f939 	bl	800570c <HAL_GetTick>
 800649a:	0003      	movs	r3, r0
 800649c:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	2220      	movs	r2, #32
 80064a6:	4013      	ands	r3, r2
 80064a8:	3b20      	subs	r3, #32
 80064aa:	425a      	negs	r2, r3
 80064ac:	4153      	adcs	r3, r2
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	231f      	movs	r3, #31
 80064b2:	18fb      	adds	r3, r7, r3
 80064b4:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	2210      	movs	r2, #16
 80064be:	4013      	ands	r3, r2
 80064c0:	3b10      	subs	r3, #16
 80064c2:	425a      	negs	r2, r3
 80064c4:	4153      	adcs	r3, r2
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	231e      	movs	r3, #30
 80064ca:	18fb      	adds	r3, r7, r3
 80064cc:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80064ce:	e035      	b.n	800653c <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	3301      	adds	r3, #1
 80064d4:	d01a      	beq.n	800650c <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80064d6:	f7ff f919 	bl	800570c <HAL_GetTick>
 80064da:	0002      	movs	r2, r0
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	683a      	ldr	r2, [r7, #0]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d302      	bcc.n	80064ec <HAL_I2C_IsDeviceReady+0xe4>
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10f      	bne.n	800650c <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2241      	movs	r2, #65	@ 0x41
 80064f0:	2120      	movs	r1, #32
 80064f2:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064f8:	2220      	movs	r2, #32
 80064fa:	431a      	orrs	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2240      	movs	r2, #64	@ 0x40
 8006504:	2100      	movs	r1, #0
 8006506:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e08f      	b.n	800662c <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	2220      	movs	r2, #32
 8006514:	4013      	ands	r3, r2
 8006516:	3b20      	subs	r3, #32
 8006518:	425a      	negs	r2, r3
 800651a:	4153      	adcs	r3, r2
 800651c:	b2da      	uxtb	r2, r3
 800651e:	231f      	movs	r3, #31
 8006520:	18fb      	adds	r3, r7, r3
 8006522:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	2210      	movs	r2, #16
 800652c:	4013      	ands	r3, r2
 800652e:	3b10      	subs	r3, #16
 8006530:	425a      	negs	r2, r3
 8006532:	4153      	adcs	r3, r2
 8006534:	b2da      	uxtb	r2, r3
 8006536:	231e      	movs	r3, #30
 8006538:	18fb      	adds	r3, r7, r3
 800653a:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800653c:	231f      	movs	r3, #31
 800653e:	18fb      	adds	r3, r7, r3
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d104      	bne.n	8006550 <HAL_I2C_IsDeviceReady+0x148>
 8006546:	231e      	movs	r3, #30
 8006548:	18fb      	adds	r3, r7, r3
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d0bf      	beq.n	80064d0 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	2210      	movs	r2, #16
 8006558:	4013      	ands	r3, r2
 800655a:	2b10      	cmp	r3, #16
 800655c:	d01a      	beq.n	8006594 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800655e:	683a      	ldr	r2, [r7, #0]
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	0013      	movs	r3, r2
 8006568:	2200      	movs	r2, #0
 800656a:	2120      	movs	r1, #32
 800656c:	f000 f94e 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 8006570:	1e03      	subs	r3, r0, #0
 8006572:	d001      	beq.n	8006578 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e059      	b.n	800662c <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2220      	movs	r2, #32
 800657e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2241      	movs	r2, #65	@ 0x41
 8006584:	2120      	movs	r1, #32
 8006586:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2240      	movs	r2, #64	@ 0x40
 800658c:	2100      	movs	r1, #0
 800658e:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8006590:	2300      	movs	r3, #0
 8006592:	e04b      	b.n	800662c <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	0013      	movs	r3, r2
 800659e:	2200      	movs	r2, #0
 80065a0:	2120      	movs	r1, #32
 80065a2:	f000 f933 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 80065a6:	1e03      	subs	r3, r0, #0
 80065a8:	d001      	beq.n	80065ae <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e03e      	b.n	800662c <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2210      	movs	r2, #16
 80065b4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2220      	movs	r2, #32
 80065bc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d119      	bne.n	80065fa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2180      	movs	r1, #128	@ 0x80
 80065d2:	01c9      	lsls	r1, r1, #7
 80065d4:	430a      	orrs	r2, r1
 80065d6:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80065d8:	683a      	ldr	r2, [r7, #0]
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	0013      	movs	r3, r2
 80065e2:	2200      	movs	r2, #0
 80065e4:	2120      	movs	r1, #32
 80065e6:	f000 f911 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 80065ea:	1e03      	subs	r3, r0, #0
 80065ec:	d001      	beq.n	80065f2 <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e01c      	b.n	800662c <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2220      	movs	r2, #32
 80065f8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	3301      	adds	r3, #1
 80065fe:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	429a      	cmp	r2, r3
 8006606:	d900      	bls.n	800660a <HAL_I2C_IsDeviceReady+0x202>
 8006608:	e72f      	b.n	800646a <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2241      	movs	r2, #65	@ 0x41
 800660e:	2120      	movs	r1, #32
 8006610:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006616:	2220      	movs	r2, #32
 8006618:	431a      	orrs	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2240      	movs	r2, #64	@ 0x40
 8006622:	2100      	movs	r1, #0
 8006624:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e000      	b.n	800662c <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 800662a:	2302      	movs	r3, #2
  }
}
 800662c:	0018      	movs	r0, r3
 800662e:	46bd      	mov	sp, r7
 8006630:	b008      	add	sp, #32
 8006632:	bd80      	pop	{r7, pc}
 8006634:	02002000 	.word	0x02002000
 8006638:	02002800 	.word	0x02002800

0800663c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800663c:	b5b0      	push	{r4, r5, r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af02      	add	r7, sp, #8
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	000c      	movs	r4, r1
 8006646:	0010      	movs	r0, r2
 8006648:	0019      	movs	r1, r3
 800664a:	250a      	movs	r5, #10
 800664c:	197b      	adds	r3, r7, r5
 800664e:	1c22      	adds	r2, r4, #0
 8006650:	801a      	strh	r2, [r3, #0]
 8006652:	2308      	movs	r3, #8
 8006654:	18fb      	adds	r3, r7, r3
 8006656:	1c02      	adds	r2, r0, #0
 8006658:	801a      	strh	r2, [r3, #0]
 800665a:	1dbb      	adds	r3, r7, #6
 800665c:	1c0a      	adds	r2, r1, #0
 800665e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006660:	1dbb      	adds	r3, r7, #6
 8006662:	881b      	ldrh	r3, [r3, #0]
 8006664:	b2da      	uxtb	r2, r3
 8006666:	2380      	movs	r3, #128	@ 0x80
 8006668:	045c      	lsls	r4, r3, #17
 800666a:	197b      	adds	r3, r7, r5
 800666c:	8819      	ldrh	r1, [r3, #0]
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	4b23      	ldr	r3, [pc, #140]	@ (8006700 <I2C_RequestMemoryWrite+0xc4>)
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	0023      	movs	r3, r4
 8006676:	f000 fa99 	bl	8006bac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800667a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800667c:	6a39      	ldr	r1, [r7, #32]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	0018      	movs	r0, r3
 8006682:	f000 f911 	bl	80068a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006686:	1e03      	subs	r3, r0, #0
 8006688:	d001      	beq.n	800668e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e033      	b.n	80066f6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800668e:	1dbb      	adds	r3, r7, #6
 8006690:	881b      	ldrh	r3, [r3, #0]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d107      	bne.n	80066a6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006696:	2308      	movs	r3, #8
 8006698:	18fb      	adds	r3, r7, r3
 800669a:	881b      	ldrh	r3, [r3, #0]
 800669c:	b2da      	uxtb	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80066a4:	e019      	b.n	80066da <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80066a6:	2308      	movs	r3, #8
 80066a8:	18fb      	adds	r3, r7, r3
 80066aa:	881b      	ldrh	r3, [r3, #0]
 80066ac:	0a1b      	lsrs	r3, r3, #8
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066ba:	6a39      	ldr	r1, [r7, #32]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	0018      	movs	r0, r3
 80066c0:	f000 f8f2 	bl	80068a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80066c4:	1e03      	subs	r3, r0, #0
 80066c6:	d001      	beq.n	80066cc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e014      	b.n	80066f6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066cc:	2308      	movs	r3, #8
 80066ce:	18fb      	adds	r3, r7, r3
 80066d0:	881b      	ldrh	r3, [r3, #0]
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80066da:	6a3a      	ldr	r2, [r7, #32]
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	0013      	movs	r3, r2
 80066e4:	2200      	movs	r2, #0
 80066e6:	2180      	movs	r1, #128	@ 0x80
 80066e8:	f000 f890 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 80066ec:	1e03      	subs	r3, r0, #0
 80066ee:	d001      	beq.n	80066f4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e000      	b.n	80066f6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	0018      	movs	r0, r3
 80066f8:	46bd      	mov	sp, r7
 80066fa:	b004      	add	sp, #16
 80066fc:	bdb0      	pop	{r4, r5, r7, pc}
 80066fe:	46c0      	nop			@ (mov r8, r8)
 8006700:	80002000 	.word	0x80002000

08006704 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006704:	b5b0      	push	{r4, r5, r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af02      	add	r7, sp, #8
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	000c      	movs	r4, r1
 800670e:	0010      	movs	r0, r2
 8006710:	0019      	movs	r1, r3
 8006712:	250a      	movs	r5, #10
 8006714:	197b      	adds	r3, r7, r5
 8006716:	1c22      	adds	r2, r4, #0
 8006718:	801a      	strh	r2, [r3, #0]
 800671a:	2308      	movs	r3, #8
 800671c:	18fb      	adds	r3, r7, r3
 800671e:	1c02      	adds	r2, r0, #0
 8006720:	801a      	strh	r2, [r3, #0]
 8006722:	1dbb      	adds	r3, r7, #6
 8006724:	1c0a      	adds	r2, r1, #0
 8006726:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006728:	1dbb      	adds	r3, r7, #6
 800672a:	881b      	ldrh	r3, [r3, #0]
 800672c:	b2da      	uxtb	r2, r3
 800672e:	197b      	adds	r3, r7, r5
 8006730:	8819      	ldrh	r1, [r3, #0]
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	4b23      	ldr	r3, [pc, #140]	@ (80067c4 <I2C_RequestMemoryRead+0xc0>)
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	2300      	movs	r3, #0
 800673a:	f000 fa37 	bl	8006bac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800673e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006740:	6a39      	ldr	r1, [r7, #32]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	0018      	movs	r0, r3
 8006746:	f000 f8af 	bl	80068a8 <I2C_WaitOnTXISFlagUntilTimeout>
 800674a:	1e03      	subs	r3, r0, #0
 800674c:	d001      	beq.n	8006752 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e033      	b.n	80067ba <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006752:	1dbb      	adds	r3, r7, #6
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d107      	bne.n	800676a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800675a:	2308      	movs	r3, #8
 800675c:	18fb      	adds	r3, r7, r3
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	b2da      	uxtb	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	629a      	str	r2, [r3, #40]	@ 0x28
 8006768:	e019      	b.n	800679e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800676a:	2308      	movs	r3, #8
 800676c:	18fb      	adds	r3, r7, r3
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	0a1b      	lsrs	r3, r3, #8
 8006772:	b29b      	uxth	r3, r3
 8006774:	b2da      	uxtb	r2, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800677c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800677e:	6a39      	ldr	r1, [r7, #32]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	0018      	movs	r0, r3
 8006784:	f000 f890 	bl	80068a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006788:	1e03      	subs	r3, r0, #0
 800678a:	d001      	beq.n	8006790 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e014      	b.n	80067ba <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006790:	2308      	movs	r3, #8
 8006792:	18fb      	adds	r3, r7, r3
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	b2da      	uxtb	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800679e:	6a3a      	ldr	r2, [r7, #32]
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	0013      	movs	r3, r2
 80067a8:	2200      	movs	r2, #0
 80067aa:	2140      	movs	r1, #64	@ 0x40
 80067ac:	f000 f82e 	bl	800680c <I2C_WaitOnFlagUntilTimeout>
 80067b0:	1e03      	subs	r3, r0, #0
 80067b2:	d001      	beq.n	80067b8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e000      	b.n	80067ba <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	0018      	movs	r0, r3
 80067bc:	46bd      	mov	sp, r7
 80067be:	b004      	add	sp, #16
 80067c0:	bdb0      	pop	{r4, r5, r7, pc}
 80067c2:	46c0      	nop			@ (mov r8, r8)
 80067c4:	80002000 	.word	0x80002000

080067c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	2202      	movs	r2, #2
 80067d8:	4013      	ands	r3, r2
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d103      	bne.n	80067e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2200      	movs	r2, #0
 80067e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	2201      	movs	r2, #1
 80067ee:	4013      	ands	r3, r2
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d007      	beq.n	8006804 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	699a      	ldr	r2, [r3, #24]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2101      	movs	r1, #1
 8006800:	430a      	orrs	r2, r1
 8006802:	619a      	str	r2, [r3, #24]
  }
}
 8006804:	46c0      	nop			@ (mov r8, r8)
 8006806:	46bd      	mov	sp, r7
 8006808:	b002      	add	sp, #8
 800680a:	bd80      	pop	{r7, pc}

0800680c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	603b      	str	r3, [r7, #0]
 8006818:	1dfb      	adds	r3, r7, #7
 800681a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800681c:	e030      	b.n	8006880 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	3301      	adds	r3, #1
 8006822:	d02d      	beq.n	8006880 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006824:	f7fe ff72 	bl	800570c <HAL_GetTick>
 8006828:	0002      	movs	r2, r0
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	429a      	cmp	r2, r3
 8006832:	d302      	bcc.n	800683a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d122      	bne.n	8006880 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	4013      	ands	r3, r2
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	425a      	negs	r2, r3
 800684a:	4153      	adcs	r3, r2
 800684c:	b2db      	uxtb	r3, r3
 800684e:	001a      	movs	r2, r3
 8006850:	1dfb      	adds	r3, r7, #7
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	429a      	cmp	r2, r3
 8006856:	d113      	bne.n	8006880 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800685c:	2220      	movs	r2, #32
 800685e:	431a      	orrs	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2241      	movs	r2, #65	@ 0x41
 8006868:	2120      	movs	r1, #32
 800686a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2242      	movs	r2, #66	@ 0x42
 8006870:	2100      	movs	r1, #0
 8006872:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2240      	movs	r2, #64	@ 0x40
 8006878:	2100      	movs	r1, #0
 800687a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e00f      	b.n	80068a0 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	4013      	ands	r3, r2
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	425a      	negs	r2, r3
 8006890:	4153      	adcs	r3, r2
 8006892:	b2db      	uxtb	r3, r3
 8006894:	001a      	movs	r2, r3
 8006896:	1dfb      	adds	r3, r7, #7
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	429a      	cmp	r2, r3
 800689c:	d0bf      	beq.n	800681e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	0018      	movs	r0, r3
 80068a2:	46bd      	mov	sp, r7
 80068a4:	b004      	add	sp, #16
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068b4:	e032      	b.n	800691c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	68b9      	ldr	r1, [r7, #8]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	0018      	movs	r0, r3
 80068be:	f000 f87d 	bl	80069bc <I2C_IsErrorOccurred>
 80068c2:	1e03      	subs	r3, r0, #0
 80068c4:	d001      	beq.n	80068ca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e030      	b.n	800692c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	3301      	adds	r3, #1
 80068ce:	d025      	beq.n	800691c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068d0:	f7fe ff1c 	bl	800570c <HAL_GetTick>
 80068d4:	0002      	movs	r2, r0
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d302      	bcc.n	80068e6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d11a      	bne.n	800691c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	2202      	movs	r2, #2
 80068ee:	4013      	ands	r3, r2
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d013      	beq.n	800691c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068f8:	2220      	movs	r2, #32
 80068fa:	431a      	orrs	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2241      	movs	r2, #65	@ 0x41
 8006904:	2120      	movs	r1, #32
 8006906:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2242      	movs	r2, #66	@ 0x42
 800690c:	2100      	movs	r1, #0
 800690e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2240      	movs	r2, #64	@ 0x40
 8006914:	2100      	movs	r1, #0
 8006916:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e007      	b.n	800692c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	2202      	movs	r2, #2
 8006924:	4013      	ands	r3, r2
 8006926:	2b02      	cmp	r3, #2
 8006928:	d1c5      	bne.n	80068b6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	0018      	movs	r0, r3
 800692e:	46bd      	mov	sp, r7
 8006930:	b004      	add	sp, #16
 8006932:	bd80      	pop	{r7, pc}

08006934 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006940:	e02f      	b.n	80069a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	68b9      	ldr	r1, [r7, #8]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	0018      	movs	r0, r3
 800694a:	f000 f837 	bl	80069bc <I2C_IsErrorOccurred>
 800694e:	1e03      	subs	r3, r0, #0
 8006950:	d001      	beq.n	8006956 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e02d      	b.n	80069b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006956:	f7fe fed9 	bl	800570c <HAL_GetTick>
 800695a:	0002      	movs	r2, r0
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	429a      	cmp	r2, r3
 8006964:	d302      	bcc.n	800696c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d11a      	bne.n	80069a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	2220      	movs	r2, #32
 8006974:	4013      	ands	r3, r2
 8006976:	2b20      	cmp	r3, #32
 8006978:	d013      	beq.n	80069a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800697e:	2220      	movs	r2, #32
 8006980:	431a      	orrs	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2241      	movs	r2, #65	@ 0x41
 800698a:	2120      	movs	r1, #32
 800698c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2242      	movs	r2, #66	@ 0x42
 8006992:	2100      	movs	r1, #0
 8006994:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2240      	movs	r2, #64	@ 0x40
 800699a:	2100      	movs	r1, #0
 800699c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e007      	b.n	80069b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	2220      	movs	r2, #32
 80069aa:	4013      	ands	r3, r2
 80069ac:	2b20      	cmp	r3, #32
 80069ae:	d1c8      	bne.n	8006942 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	0018      	movs	r0, r3
 80069b4:	46bd      	mov	sp, r7
 80069b6:	b004      	add	sp, #16
 80069b8:	bd80      	pop	{r7, pc}
	...

080069bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b08a      	sub	sp, #40	@ 0x28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069c8:	2327      	movs	r3, #39	@ 0x27
 80069ca:	18fb      	adds	r3, r7, r3
 80069cc:	2200      	movs	r2, #0
 80069ce:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80069d8:	2300      	movs	r3, #0
 80069da:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	2210      	movs	r2, #16
 80069e4:	4013      	ands	r3, r2
 80069e6:	d100      	bne.n	80069ea <I2C_IsErrorOccurred+0x2e>
 80069e8:	e079      	b.n	8006ade <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2210      	movs	r2, #16
 80069f0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80069f2:	e057      	b.n	8006aa4 <I2C_IsErrorOccurred+0xe8>
 80069f4:	2227      	movs	r2, #39	@ 0x27
 80069f6:	18bb      	adds	r3, r7, r2
 80069f8:	18ba      	adds	r2, r7, r2
 80069fa:	7812      	ldrb	r2, [r2, #0]
 80069fc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	3301      	adds	r3, #1
 8006a02:	d04f      	beq.n	8006aa4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006a04:	f7fe fe82 	bl	800570c <HAL_GetTick>
 8006a08:	0002      	movs	r2, r0
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d302      	bcc.n	8006a1a <I2C_IsErrorOccurred+0x5e>
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d144      	bne.n	8006aa4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	2380      	movs	r3, #128	@ 0x80
 8006a22:	01db      	lsls	r3, r3, #7
 8006a24:	4013      	ands	r3, r2
 8006a26:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006a28:	2013      	movs	r0, #19
 8006a2a:	183b      	adds	r3, r7, r0
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	2142      	movs	r1, #66	@ 0x42
 8006a30:	5c52      	ldrb	r2, [r2, r1]
 8006a32:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	699a      	ldr	r2, [r3, #24]
 8006a3a:	2380      	movs	r3, #128	@ 0x80
 8006a3c:	021b      	lsls	r3, r3, #8
 8006a3e:	401a      	ands	r2, r3
 8006a40:	2380      	movs	r3, #128	@ 0x80
 8006a42:	021b      	lsls	r3, r3, #8
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d126      	bne.n	8006a96 <I2C_IsErrorOccurred+0xda>
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	2380      	movs	r3, #128	@ 0x80
 8006a4c:	01db      	lsls	r3, r3, #7
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d021      	beq.n	8006a96 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8006a52:	183b      	adds	r3, r7, r0
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	2b20      	cmp	r3, #32
 8006a58:	d01d      	beq.n	8006a96 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2180      	movs	r1, #128	@ 0x80
 8006a66:	01c9      	lsls	r1, r1, #7
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006a6c:	f7fe fe4e 	bl	800570c <HAL_GetTick>
 8006a70:	0003      	movs	r3, r0
 8006a72:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a74:	e00f      	b.n	8006a96 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006a76:	f7fe fe49 	bl	800570c <HAL_GetTick>
 8006a7a:	0002      	movs	r2, r0
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	2b19      	cmp	r3, #25
 8006a82:	d908      	bls.n	8006a96 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006a84:	6a3b      	ldr	r3, [r7, #32]
 8006a86:	2220      	movs	r2, #32
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006a8c:	2327      	movs	r3, #39	@ 0x27
 8006a8e:	18fb      	adds	r3, r7, r3
 8006a90:	2201      	movs	r2, #1
 8006a92:	701a      	strb	r2, [r3, #0]

              break;
 8006a94:	e006      	b.n	8006aa4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	2b20      	cmp	r3, #32
 8006aa2:	d1e8      	bne.n	8006a76 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	2220      	movs	r2, #32
 8006aac:	4013      	ands	r3, r2
 8006aae:	2b20      	cmp	r3, #32
 8006ab0:	d004      	beq.n	8006abc <I2C_IsErrorOccurred+0x100>
 8006ab2:	2327      	movs	r3, #39	@ 0x27
 8006ab4:	18fb      	adds	r3, r7, r3
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d09b      	beq.n	80069f4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006abc:	2327      	movs	r3, #39	@ 0x27
 8006abe:	18fb      	adds	r3, r7, r3
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d103      	bne.n	8006ace <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2220      	movs	r2, #32
 8006acc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	2204      	movs	r2, #4
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006ad6:	2327      	movs	r3, #39	@ 0x27
 8006ad8:	18fb      	adds	r3, r7, r3
 8006ada:	2201      	movs	r2, #1
 8006adc:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	699b      	ldr	r3, [r3, #24]
 8006ae4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006ae6:	69ba      	ldr	r2, [r7, #24]
 8006ae8:	2380      	movs	r3, #128	@ 0x80
 8006aea:	005b      	lsls	r3, r3, #1
 8006aec:	4013      	ands	r3, r2
 8006aee:	d00c      	beq.n	8006b0a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	2201      	movs	r2, #1
 8006af4:	4313      	orrs	r3, r2
 8006af6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2280      	movs	r2, #128	@ 0x80
 8006afe:	0052      	lsls	r2, r2, #1
 8006b00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b02:	2327      	movs	r3, #39	@ 0x27
 8006b04:	18fb      	adds	r3, r7, r3
 8006b06:	2201      	movs	r2, #1
 8006b08:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	2380      	movs	r3, #128	@ 0x80
 8006b0e:	00db      	lsls	r3, r3, #3
 8006b10:	4013      	ands	r3, r2
 8006b12:	d00c      	beq.n	8006b2e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006b14:	6a3b      	ldr	r3, [r7, #32]
 8006b16:	2208      	movs	r2, #8
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2280      	movs	r2, #128	@ 0x80
 8006b22:	00d2      	lsls	r2, r2, #3
 8006b24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b26:	2327      	movs	r3, #39	@ 0x27
 8006b28:	18fb      	adds	r3, r7, r3
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006b2e:	69ba      	ldr	r2, [r7, #24]
 8006b30:	2380      	movs	r3, #128	@ 0x80
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4013      	ands	r3, r2
 8006b36:	d00c      	beq.n	8006b52 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006b38:	6a3b      	ldr	r3, [r7, #32]
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2280      	movs	r2, #128	@ 0x80
 8006b46:	0092      	lsls	r2, r2, #2
 8006b48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b4a:	2327      	movs	r3, #39	@ 0x27
 8006b4c:	18fb      	adds	r3, r7, r3
 8006b4e:	2201      	movs	r2, #1
 8006b50:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8006b52:	2327      	movs	r3, #39	@ 0x27
 8006b54:	18fb      	adds	r3, r7, r3
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d01d      	beq.n	8006b98 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	0018      	movs	r0, r3
 8006b60:	f7ff fe32 	bl	80067c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685a      	ldr	r2, [r3, #4]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	490e      	ldr	r1, [pc, #56]	@ (8006ba8 <I2C_IsErrorOccurred+0x1ec>)
 8006b70:	400a      	ands	r2, r1
 8006b72:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b78:	6a3b      	ldr	r3, [r7, #32]
 8006b7a:	431a      	orrs	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2241      	movs	r2, #65	@ 0x41
 8006b84:	2120      	movs	r1, #32
 8006b86:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2242      	movs	r2, #66	@ 0x42
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2240      	movs	r2, #64	@ 0x40
 8006b94:	2100      	movs	r1, #0
 8006b96:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8006b98:	2327      	movs	r3, #39	@ 0x27
 8006b9a:	18fb      	adds	r3, r7, r3
 8006b9c:	781b      	ldrb	r3, [r3, #0]
}
 8006b9e:	0018      	movs	r0, r3
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	b00a      	add	sp, #40	@ 0x28
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	46c0      	nop			@ (mov r8, r8)
 8006ba8:	fe00e800 	.word	0xfe00e800

08006bac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006bac:	b590      	push	{r4, r7, lr}
 8006bae:	b087      	sub	sp, #28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	0008      	movs	r0, r1
 8006bb6:	0011      	movs	r1, r2
 8006bb8:	607b      	str	r3, [r7, #4]
 8006bba:	240a      	movs	r4, #10
 8006bbc:	193b      	adds	r3, r7, r4
 8006bbe:	1c02      	adds	r2, r0, #0
 8006bc0:	801a      	strh	r2, [r3, #0]
 8006bc2:	2009      	movs	r0, #9
 8006bc4:	183b      	adds	r3, r7, r0
 8006bc6:	1c0a      	adds	r2, r1, #0
 8006bc8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006bca:	193b      	adds	r3, r7, r4
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	059b      	lsls	r3, r3, #22
 8006bd0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006bd2:	183b      	adds	r3, r7, r0
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	0419      	lsls	r1, r3, #16
 8006bd8:	23ff      	movs	r3, #255	@ 0xff
 8006bda:	041b      	lsls	r3, r3, #16
 8006bdc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006bde:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be6:	4313      	orrs	r3, r2
 8006be8:	005b      	lsls	r3, r3, #1
 8006bea:	085b      	lsrs	r3, r3, #1
 8006bec:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006bf6:	0d51      	lsrs	r1, r2, #21
 8006bf8:	2280      	movs	r2, #128	@ 0x80
 8006bfa:	00d2      	lsls	r2, r2, #3
 8006bfc:	400a      	ands	r2, r1
 8006bfe:	4907      	ldr	r1, [pc, #28]	@ (8006c1c <I2C_TransferConfig+0x70>)
 8006c00:	430a      	orrs	r2, r1
 8006c02:	43d2      	mvns	r2, r2
 8006c04:	401a      	ands	r2, r3
 8006c06:	0011      	movs	r1, r2
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006c12:	46c0      	nop			@ (mov r8, r8)
 8006c14:	46bd      	mov	sp, r7
 8006c16:	b007      	add	sp, #28
 8006c18:	bd90      	pop	{r4, r7, pc}
 8006c1a:	46c0      	nop			@ (mov r8, r8)
 8006c1c:	03ff63ff 	.word	0x03ff63ff

08006c20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2241      	movs	r2, #65	@ 0x41
 8006c2e:	5c9b      	ldrb	r3, [r3, r2]
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b20      	cmp	r3, #32
 8006c34:	d138      	bne.n	8006ca8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2240      	movs	r2, #64	@ 0x40
 8006c3a:	5c9b      	ldrb	r3, [r3, r2]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d101      	bne.n	8006c44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006c40:	2302      	movs	r3, #2
 8006c42:	e032      	b.n	8006caa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2240      	movs	r2, #64	@ 0x40
 8006c48:	2101      	movs	r1, #1
 8006c4a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2241      	movs	r2, #65	@ 0x41
 8006c50:	2124      	movs	r1, #36	@ 0x24
 8006c52:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2101      	movs	r1, #1
 8006c60:	438a      	bics	r2, r1
 8006c62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4911      	ldr	r1, [pc, #68]	@ (8006cb4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006c70:	400a      	ands	r2, r1
 8006c72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6819      	ldr	r1, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	430a      	orrs	r2, r1
 8006c82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2101      	movs	r1, #1
 8006c90:	430a      	orrs	r2, r1
 8006c92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2241      	movs	r2, #65	@ 0x41
 8006c98:	2120      	movs	r1, #32
 8006c9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2240      	movs	r2, #64	@ 0x40
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	e000      	b.n	8006caa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006ca8:	2302      	movs	r3, #2
  }
}
 8006caa:	0018      	movs	r0, r3
 8006cac:	46bd      	mov	sp, r7
 8006cae:	b002      	add	sp, #8
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	46c0      	nop			@ (mov r8, r8)
 8006cb4:	ffffefff 	.word	0xffffefff

08006cb8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2241      	movs	r2, #65	@ 0x41
 8006cc6:	5c9b      	ldrb	r3, [r3, r2]
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b20      	cmp	r3, #32
 8006ccc:	d139      	bne.n	8006d42 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2240      	movs	r2, #64	@ 0x40
 8006cd2:	5c9b      	ldrb	r3, [r3, r2]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d101      	bne.n	8006cdc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	e033      	b.n	8006d44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2240      	movs	r2, #64	@ 0x40
 8006ce0:	2101      	movs	r1, #1
 8006ce2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2241      	movs	r2, #65	@ 0x41
 8006ce8:	2124      	movs	r1, #36	@ 0x24
 8006cea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2101      	movs	r1, #1
 8006cf8:	438a      	bics	r2, r1
 8006cfa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	4a11      	ldr	r2, [pc, #68]	@ (8006d4c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006d08:	4013      	ands	r3, r2
 8006d0a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	021b      	lsls	r3, r3, #8
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2101      	movs	r1, #1
 8006d2a:	430a      	orrs	r2, r1
 8006d2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2241      	movs	r2, #65	@ 0x41
 8006d32:	2120      	movs	r1, #32
 8006d34:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2240      	movs	r2, #64	@ 0x40
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	e000      	b.n	8006d44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006d42:	2302      	movs	r3, #2
  }
}
 8006d44:	0018      	movs	r0, r3
 8006d46:	46bd      	mov	sp, r7
 8006d48:	b004      	add	sp, #16
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	fffff0ff 	.word	0xfffff0ff

08006d50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d50:	b5b0      	push	{r4, r5, r7, lr}
 8006d52:	b08a      	sub	sp, #40	@ 0x28
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d102      	bne.n	8006d64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	f000 fbbf 	bl	80074e2 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d64:	4bc9      	ldr	r3, [pc, #804]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	220c      	movs	r2, #12
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d6e:	4bc7      	ldr	r3, [pc, #796]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006d70:	68da      	ldr	r2, [r3, #12]
 8006d72:	2380      	movs	r3, #128	@ 0x80
 8006d74:	025b      	lsls	r3, r3, #9
 8006d76:	4013      	ands	r3, r2
 8006d78:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	4013      	ands	r3, r2
 8006d82:	d100      	bne.n	8006d86 <HAL_RCC_OscConfig+0x36>
 8006d84:	e07e      	b.n	8006e84 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	2b08      	cmp	r3, #8
 8006d8a:	d007      	beq.n	8006d9c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	2b0c      	cmp	r3, #12
 8006d90:	d112      	bne.n	8006db8 <HAL_RCC_OscConfig+0x68>
 8006d92:	69ba      	ldr	r2, [r7, #24]
 8006d94:	2380      	movs	r3, #128	@ 0x80
 8006d96:	025b      	lsls	r3, r3, #9
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d10d      	bne.n	8006db8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d9c:	4bbb      	ldr	r3, [pc, #748]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	2380      	movs	r3, #128	@ 0x80
 8006da2:	029b      	lsls	r3, r3, #10
 8006da4:	4013      	ands	r3, r2
 8006da6:	d100      	bne.n	8006daa <HAL_RCC_OscConfig+0x5a>
 8006da8:	e06b      	b.n	8006e82 <HAL_RCC_OscConfig+0x132>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d167      	bne.n	8006e82 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	f000 fb95 	bl	80074e2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	2380      	movs	r3, #128	@ 0x80
 8006dbe:	025b      	lsls	r3, r3, #9
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d107      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x84>
 8006dc4:	4bb1      	ldr	r3, [pc, #708]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	4bb0      	ldr	r3, [pc, #704]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006dca:	2180      	movs	r1, #128	@ 0x80
 8006dcc:	0249      	lsls	r1, r1, #9
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	601a      	str	r2, [r3, #0]
 8006dd2:	e027      	b.n	8006e24 <HAL_RCC_OscConfig+0xd4>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685a      	ldr	r2, [r3, #4]
 8006dd8:	23a0      	movs	r3, #160	@ 0xa0
 8006dda:	02db      	lsls	r3, r3, #11
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d10e      	bne.n	8006dfe <HAL_RCC_OscConfig+0xae>
 8006de0:	4baa      	ldr	r3, [pc, #680]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	4ba9      	ldr	r3, [pc, #676]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006de6:	2180      	movs	r1, #128	@ 0x80
 8006de8:	02c9      	lsls	r1, r1, #11
 8006dea:	430a      	orrs	r2, r1
 8006dec:	601a      	str	r2, [r3, #0]
 8006dee:	4ba7      	ldr	r3, [pc, #668]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	4ba6      	ldr	r3, [pc, #664]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006df4:	2180      	movs	r1, #128	@ 0x80
 8006df6:	0249      	lsls	r1, r1, #9
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	e012      	b.n	8006e24 <HAL_RCC_OscConfig+0xd4>
 8006dfe:	4ba3      	ldr	r3, [pc, #652]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	4ba2      	ldr	r3, [pc, #648]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006e04:	49a2      	ldr	r1, [pc, #648]	@ (8007090 <HAL_RCC_OscConfig+0x340>)
 8006e06:	400a      	ands	r2, r1
 8006e08:	601a      	str	r2, [r3, #0]
 8006e0a:	4ba0      	ldr	r3, [pc, #640]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	2380      	movs	r3, #128	@ 0x80
 8006e10:	025b      	lsls	r3, r3, #9
 8006e12:	4013      	ands	r3, r2
 8006e14:	60fb      	str	r3, [r7, #12]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	4b9c      	ldr	r3, [pc, #624]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	4b9b      	ldr	r3, [pc, #620]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006e1e:	499d      	ldr	r1, [pc, #628]	@ (8007094 <HAL_RCC_OscConfig+0x344>)
 8006e20:	400a      	ands	r2, r1
 8006e22:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d015      	beq.n	8006e58 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e2c:	f7fe fc6e 	bl	800570c <HAL_GetTick>
 8006e30:	0003      	movs	r3, r0
 8006e32:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e34:	e009      	b.n	8006e4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e36:	f7fe fc69 	bl	800570c <HAL_GetTick>
 8006e3a:	0002      	movs	r2, r0
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	2b64      	cmp	r3, #100	@ 0x64
 8006e42:	d902      	bls.n	8006e4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	f000 fb4c 	bl	80074e2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e4a:	4b90      	ldr	r3, [pc, #576]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	2380      	movs	r3, #128	@ 0x80
 8006e50:	029b      	lsls	r3, r3, #10
 8006e52:	4013      	ands	r3, r2
 8006e54:	d0ef      	beq.n	8006e36 <HAL_RCC_OscConfig+0xe6>
 8006e56:	e015      	b.n	8006e84 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e58:	f7fe fc58 	bl	800570c <HAL_GetTick>
 8006e5c:	0003      	movs	r3, r0
 8006e5e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e60:	e008      	b.n	8006e74 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e62:	f7fe fc53 	bl	800570c <HAL_GetTick>
 8006e66:	0002      	movs	r2, r0
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	2b64      	cmp	r3, #100	@ 0x64
 8006e6e:	d901      	bls.n	8006e74 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8006e70:	2303      	movs	r3, #3
 8006e72:	e336      	b.n	80074e2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e74:	4b85      	ldr	r3, [pc, #532]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	2380      	movs	r3, #128	@ 0x80
 8006e7a:	029b      	lsls	r3, r3, #10
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	d1f0      	bne.n	8006e62 <HAL_RCC_OscConfig+0x112>
 8006e80:	e000      	b.n	8006e84 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e82:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2202      	movs	r2, #2
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	d100      	bne.n	8006e90 <HAL_RCC_OscConfig+0x140>
 8006e8e:	e099      	b.n	8006fc4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8006e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e98:	2220      	movs	r2, #32
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	d009      	beq.n	8006eb2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8006e9e:	4b7b      	ldr	r3, [pc, #492]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	4b7a      	ldr	r3, [pc, #488]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006ea4:	2120      	movs	r1, #32
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eac:	2220      	movs	r2, #32
 8006eae:	4393      	bics	r3, r2
 8006eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	2b04      	cmp	r3, #4
 8006eb6:	d005      	beq.n	8006ec4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	2b0c      	cmp	r3, #12
 8006ebc:	d13e      	bne.n	8006f3c <HAL_RCC_OscConfig+0x1ec>
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d13b      	bne.n	8006f3c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8006ec4:	4b71      	ldr	r3, [pc, #452]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2204      	movs	r2, #4
 8006eca:	4013      	ands	r3, r2
 8006ecc:	d004      	beq.n	8006ed8 <HAL_RCC_OscConfig+0x188>
 8006ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e304      	b.n	80074e2 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ed8:	4b6c      	ldr	r3, [pc, #432]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	4a6e      	ldr	r2, [pc, #440]	@ (8007098 <HAL_RCC_OscConfig+0x348>)
 8006ede:	4013      	ands	r3, r2
 8006ee0:	0019      	movs	r1, r3
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	021a      	lsls	r2, r3, #8
 8006ee8:	4b68      	ldr	r3, [pc, #416]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006eea:	430a      	orrs	r2, r1
 8006eec:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006eee:	4b67      	ldr	r3, [pc, #412]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2209      	movs	r2, #9
 8006ef4:	4393      	bics	r3, r2
 8006ef6:	0019      	movs	r1, r3
 8006ef8:	4b64      	ldr	r3, [pc, #400]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006efc:	430a      	orrs	r2, r1
 8006efe:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f00:	f000 fc42 	bl	8007788 <HAL_RCC_GetSysClockFreq>
 8006f04:	0001      	movs	r1, r0
 8006f06:	4b61      	ldr	r3, [pc, #388]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	091b      	lsrs	r3, r3, #4
 8006f0c:	220f      	movs	r2, #15
 8006f0e:	4013      	ands	r3, r2
 8006f10:	4a62      	ldr	r2, [pc, #392]	@ (800709c <HAL_RCC_OscConfig+0x34c>)
 8006f12:	5cd3      	ldrb	r3, [r2, r3]
 8006f14:	000a      	movs	r2, r1
 8006f16:	40da      	lsrs	r2, r3
 8006f18:	4b61      	ldr	r3, [pc, #388]	@ (80070a0 <HAL_RCC_OscConfig+0x350>)
 8006f1a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8006f1c:	4b61      	ldr	r3, [pc, #388]	@ (80070a4 <HAL_RCC_OscConfig+0x354>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2513      	movs	r5, #19
 8006f22:	197c      	adds	r4, r7, r5
 8006f24:	0018      	movs	r0, r3
 8006f26:	f7fe fbab 	bl	8005680 <HAL_InitTick>
 8006f2a:	0003      	movs	r3, r0
 8006f2c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8006f2e:	197b      	adds	r3, r7, r5
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d046      	beq.n	8006fc4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8006f36:	197b      	adds	r3, r7, r5
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	e2d2      	b.n	80074e2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d027      	beq.n	8006f92 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006f42:	4b52      	ldr	r3, [pc, #328]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2209      	movs	r2, #9
 8006f48:	4393      	bics	r3, r2
 8006f4a:	0019      	movs	r1, r3
 8006f4c:	4b4f      	ldr	r3, [pc, #316]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f50:	430a      	orrs	r2, r1
 8006f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f54:	f7fe fbda 	bl	800570c <HAL_GetTick>
 8006f58:	0003      	movs	r3, r0
 8006f5a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f5c:	e008      	b.n	8006f70 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f5e:	f7fe fbd5 	bl	800570c <HAL_GetTick>
 8006f62:	0002      	movs	r2, r0
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d901      	bls.n	8006f70 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	e2b8      	b.n	80074e2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f70:	4b46      	ldr	r3, [pc, #280]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2204      	movs	r2, #4
 8006f76:	4013      	ands	r3, r2
 8006f78:	d0f1      	beq.n	8006f5e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f7a:	4b44      	ldr	r3, [pc, #272]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	4a46      	ldr	r2, [pc, #280]	@ (8007098 <HAL_RCC_OscConfig+0x348>)
 8006f80:	4013      	ands	r3, r2
 8006f82:	0019      	movs	r1, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	021a      	lsls	r2, r3, #8
 8006f8a:	4b40      	ldr	r3, [pc, #256]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	605a      	str	r2, [r3, #4]
 8006f90:	e018      	b.n	8006fc4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f92:	4b3e      	ldr	r3, [pc, #248]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	4b3d      	ldr	r3, [pc, #244]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006f98:	2101      	movs	r1, #1
 8006f9a:	438a      	bics	r2, r1
 8006f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f9e:	f7fe fbb5 	bl	800570c <HAL_GetTick>
 8006fa2:	0003      	movs	r3, r0
 8006fa4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006fa6:	e008      	b.n	8006fba <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006fa8:	f7fe fbb0 	bl	800570c <HAL_GetTick>
 8006fac:	0002      	movs	r2, r0
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d901      	bls.n	8006fba <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e293      	b.n	80074e2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006fba:	4b34      	ldr	r3, [pc, #208]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2204      	movs	r2, #4
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	d1f1      	bne.n	8006fa8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2210      	movs	r2, #16
 8006fca:	4013      	ands	r3, r2
 8006fcc:	d100      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x280>
 8006fce:	e0a2      	b.n	8007116 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d140      	bne.n	8007058 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006fd6:	4b2d      	ldr	r3, [pc, #180]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	2380      	movs	r3, #128	@ 0x80
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4013      	ands	r3, r2
 8006fe0:	d005      	beq.n	8006fee <HAL_RCC_OscConfig+0x29e>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	69db      	ldr	r3, [r3, #28]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d101      	bne.n	8006fee <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e279      	b.n	80074e2 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006fee:	4b27      	ldr	r3, [pc, #156]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	4a2d      	ldr	r2, [pc, #180]	@ (80070a8 <HAL_RCC_OscConfig+0x358>)
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	0019      	movs	r1, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ffc:	4b23      	ldr	r3, [pc, #140]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8006ffe:	430a      	orrs	r2, r1
 8007000:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007002:	4b22      	ldr	r3, [pc, #136]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	021b      	lsls	r3, r3, #8
 8007008:	0a19      	lsrs	r1, r3, #8
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	061a      	lsls	r2, r3, #24
 8007010:	4b1e      	ldr	r3, [pc, #120]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8007012:	430a      	orrs	r2, r1
 8007014:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800701a:	0b5b      	lsrs	r3, r3, #13
 800701c:	3301      	adds	r3, #1
 800701e:	2280      	movs	r2, #128	@ 0x80
 8007020:	0212      	lsls	r2, r2, #8
 8007022:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8007024:	4b19      	ldr	r3, [pc, #100]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	091b      	lsrs	r3, r3, #4
 800702a:	210f      	movs	r1, #15
 800702c:	400b      	ands	r3, r1
 800702e:	491b      	ldr	r1, [pc, #108]	@ (800709c <HAL_RCC_OscConfig+0x34c>)
 8007030:	5ccb      	ldrb	r3, [r1, r3]
 8007032:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007034:	4b1a      	ldr	r3, [pc, #104]	@ (80070a0 <HAL_RCC_OscConfig+0x350>)
 8007036:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8007038:	4b1a      	ldr	r3, [pc, #104]	@ (80070a4 <HAL_RCC_OscConfig+0x354>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2513      	movs	r5, #19
 800703e:	197c      	adds	r4, r7, r5
 8007040:	0018      	movs	r0, r3
 8007042:	f7fe fb1d 	bl	8005680 <HAL_InitTick>
 8007046:	0003      	movs	r3, r0
 8007048:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800704a:	197b      	adds	r3, r7, r5
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d061      	beq.n	8007116 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8007052:	197b      	adds	r3, r7, r5
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	e244      	b.n	80074e2 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	69db      	ldr	r3, [r3, #28]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d040      	beq.n	80070e2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007060:	4b0a      	ldr	r3, [pc, #40]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	4b09      	ldr	r3, [pc, #36]	@ (800708c <HAL_RCC_OscConfig+0x33c>)
 8007066:	2180      	movs	r1, #128	@ 0x80
 8007068:	0049      	lsls	r1, r1, #1
 800706a:	430a      	orrs	r2, r1
 800706c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800706e:	f7fe fb4d 	bl	800570c <HAL_GetTick>
 8007072:	0003      	movs	r3, r0
 8007074:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007076:	e019      	b.n	80070ac <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007078:	f7fe fb48 	bl	800570c <HAL_GetTick>
 800707c:	0002      	movs	r2, r0
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	2b02      	cmp	r3, #2
 8007084:	d912      	bls.n	80070ac <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e22b      	b.n	80074e2 <HAL_RCC_OscConfig+0x792>
 800708a:	46c0      	nop			@ (mov r8, r8)
 800708c:	40021000 	.word	0x40021000
 8007090:	fffeffff 	.word	0xfffeffff
 8007094:	fffbffff 	.word	0xfffbffff
 8007098:	ffffe0ff 	.word	0xffffe0ff
 800709c:	08008bb0 	.word	0x08008bb0
 80070a0:	20000000 	.word	0x20000000
 80070a4:	20000004 	.word	0x20000004
 80070a8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80070ac:	4bca      	ldr	r3, [pc, #808]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	2380      	movs	r3, #128	@ 0x80
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4013      	ands	r3, r2
 80070b6:	d0df      	beq.n	8007078 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80070b8:	4bc7      	ldr	r3, [pc, #796]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	4ac7      	ldr	r2, [pc, #796]	@ (80073dc <HAL_RCC_OscConfig+0x68c>)
 80070be:	4013      	ands	r3, r2
 80070c0:	0019      	movs	r1, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070c6:	4bc4      	ldr	r3, [pc, #784]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 80070c8:	430a      	orrs	r2, r1
 80070ca:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80070cc:	4bc2      	ldr	r3, [pc, #776]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	021b      	lsls	r3, r3, #8
 80070d2:	0a19      	lsrs	r1, r3, #8
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a1b      	ldr	r3, [r3, #32]
 80070d8:	061a      	lsls	r2, r3, #24
 80070da:	4bbf      	ldr	r3, [pc, #764]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 80070dc:	430a      	orrs	r2, r1
 80070de:	605a      	str	r2, [r3, #4]
 80070e0:	e019      	b.n	8007116 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80070e2:	4bbd      	ldr	r3, [pc, #756]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	4bbc      	ldr	r3, [pc, #752]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 80070e8:	49bd      	ldr	r1, [pc, #756]	@ (80073e0 <HAL_RCC_OscConfig+0x690>)
 80070ea:	400a      	ands	r2, r1
 80070ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070ee:	f7fe fb0d 	bl	800570c <HAL_GetTick>
 80070f2:	0003      	movs	r3, r0
 80070f4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80070f6:	e008      	b.n	800710a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80070f8:	f7fe fb08 	bl	800570c <HAL_GetTick>
 80070fc:	0002      	movs	r2, r0
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	2b02      	cmp	r3, #2
 8007104:	d901      	bls.n	800710a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e1eb      	b.n	80074e2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800710a:	4bb3      	ldr	r3, [pc, #716]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	2380      	movs	r3, #128	@ 0x80
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4013      	ands	r3, r2
 8007114:	d1f0      	bne.n	80070f8 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2208      	movs	r2, #8
 800711c:	4013      	ands	r3, r2
 800711e:	d036      	beq.n	800718e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d019      	beq.n	800715c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007128:	4bab      	ldr	r3, [pc, #684]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 800712a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800712c:	4baa      	ldr	r3, [pc, #680]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 800712e:	2101      	movs	r1, #1
 8007130:	430a      	orrs	r2, r1
 8007132:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007134:	f7fe faea 	bl	800570c <HAL_GetTick>
 8007138:	0003      	movs	r3, r0
 800713a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800713c:	e008      	b.n	8007150 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800713e:	f7fe fae5 	bl	800570c <HAL_GetTick>
 8007142:	0002      	movs	r2, r0
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	2b02      	cmp	r3, #2
 800714a:	d901      	bls.n	8007150 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e1c8      	b.n	80074e2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007150:	4ba1      	ldr	r3, [pc, #644]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 8007152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007154:	2202      	movs	r2, #2
 8007156:	4013      	ands	r3, r2
 8007158:	d0f1      	beq.n	800713e <HAL_RCC_OscConfig+0x3ee>
 800715a:	e018      	b.n	800718e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800715c:	4b9e      	ldr	r3, [pc, #632]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 800715e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007160:	4b9d      	ldr	r3, [pc, #628]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 8007162:	2101      	movs	r1, #1
 8007164:	438a      	bics	r2, r1
 8007166:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007168:	f7fe fad0 	bl	800570c <HAL_GetTick>
 800716c:	0003      	movs	r3, r0
 800716e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007170:	e008      	b.n	8007184 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007172:	f7fe facb 	bl	800570c <HAL_GetTick>
 8007176:	0002      	movs	r2, r0
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	d901      	bls.n	8007184 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e1ae      	b.n	80074e2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007184:	4b94      	ldr	r3, [pc, #592]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 8007186:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007188:	2202      	movs	r2, #2
 800718a:	4013      	ands	r3, r2
 800718c:	d1f1      	bne.n	8007172 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2204      	movs	r2, #4
 8007194:	4013      	ands	r3, r2
 8007196:	d100      	bne.n	800719a <HAL_RCC_OscConfig+0x44a>
 8007198:	e0ae      	b.n	80072f8 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800719a:	2023      	movs	r0, #35	@ 0x23
 800719c:	183b      	adds	r3, r7, r0
 800719e:	2200      	movs	r2, #0
 80071a0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071a2:	4b8d      	ldr	r3, [pc, #564]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 80071a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071a6:	2380      	movs	r3, #128	@ 0x80
 80071a8:	055b      	lsls	r3, r3, #21
 80071aa:	4013      	ands	r3, r2
 80071ac:	d109      	bne.n	80071c2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071ae:	4b8a      	ldr	r3, [pc, #552]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 80071b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071b2:	4b89      	ldr	r3, [pc, #548]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 80071b4:	2180      	movs	r1, #128	@ 0x80
 80071b6:	0549      	lsls	r1, r1, #21
 80071b8:	430a      	orrs	r2, r1
 80071ba:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80071bc:	183b      	adds	r3, r7, r0
 80071be:	2201      	movs	r2, #1
 80071c0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071c2:	4b88      	ldr	r3, [pc, #544]	@ (80073e4 <HAL_RCC_OscConfig+0x694>)
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	2380      	movs	r3, #128	@ 0x80
 80071c8:	005b      	lsls	r3, r3, #1
 80071ca:	4013      	ands	r3, r2
 80071cc:	d11a      	bne.n	8007204 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071ce:	4b85      	ldr	r3, [pc, #532]	@ (80073e4 <HAL_RCC_OscConfig+0x694>)
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	4b84      	ldr	r3, [pc, #528]	@ (80073e4 <HAL_RCC_OscConfig+0x694>)
 80071d4:	2180      	movs	r1, #128	@ 0x80
 80071d6:	0049      	lsls	r1, r1, #1
 80071d8:	430a      	orrs	r2, r1
 80071da:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071dc:	f7fe fa96 	bl	800570c <HAL_GetTick>
 80071e0:	0003      	movs	r3, r0
 80071e2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071e4:	e008      	b.n	80071f8 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071e6:	f7fe fa91 	bl	800570c <HAL_GetTick>
 80071ea:	0002      	movs	r2, r0
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	2b64      	cmp	r3, #100	@ 0x64
 80071f2:	d901      	bls.n	80071f8 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e174      	b.n	80074e2 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071f8:	4b7a      	ldr	r3, [pc, #488]	@ (80073e4 <HAL_RCC_OscConfig+0x694>)
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	2380      	movs	r3, #128	@ 0x80
 80071fe:	005b      	lsls	r3, r3, #1
 8007200:	4013      	ands	r3, r2
 8007202:	d0f0      	beq.n	80071e6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	689a      	ldr	r2, [r3, #8]
 8007208:	2380      	movs	r3, #128	@ 0x80
 800720a:	005b      	lsls	r3, r3, #1
 800720c:	429a      	cmp	r2, r3
 800720e:	d107      	bne.n	8007220 <HAL_RCC_OscConfig+0x4d0>
 8007210:	4b71      	ldr	r3, [pc, #452]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 8007212:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007214:	4b70      	ldr	r3, [pc, #448]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 8007216:	2180      	movs	r1, #128	@ 0x80
 8007218:	0049      	lsls	r1, r1, #1
 800721a:	430a      	orrs	r2, r1
 800721c:	651a      	str	r2, [r3, #80]	@ 0x50
 800721e:	e031      	b.n	8007284 <HAL_RCC_OscConfig+0x534>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10c      	bne.n	8007242 <HAL_RCC_OscConfig+0x4f2>
 8007228:	4b6b      	ldr	r3, [pc, #428]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 800722a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800722c:	4b6a      	ldr	r3, [pc, #424]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 800722e:	496c      	ldr	r1, [pc, #432]	@ (80073e0 <HAL_RCC_OscConfig+0x690>)
 8007230:	400a      	ands	r2, r1
 8007232:	651a      	str	r2, [r3, #80]	@ 0x50
 8007234:	4b68      	ldr	r3, [pc, #416]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 8007236:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007238:	4b67      	ldr	r3, [pc, #412]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 800723a:	496b      	ldr	r1, [pc, #428]	@ (80073e8 <HAL_RCC_OscConfig+0x698>)
 800723c:	400a      	ands	r2, r1
 800723e:	651a      	str	r2, [r3, #80]	@ 0x50
 8007240:	e020      	b.n	8007284 <HAL_RCC_OscConfig+0x534>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	689a      	ldr	r2, [r3, #8]
 8007246:	23a0      	movs	r3, #160	@ 0xa0
 8007248:	00db      	lsls	r3, r3, #3
 800724a:	429a      	cmp	r2, r3
 800724c:	d10e      	bne.n	800726c <HAL_RCC_OscConfig+0x51c>
 800724e:	4b62      	ldr	r3, [pc, #392]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 8007250:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007252:	4b61      	ldr	r3, [pc, #388]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 8007254:	2180      	movs	r1, #128	@ 0x80
 8007256:	00c9      	lsls	r1, r1, #3
 8007258:	430a      	orrs	r2, r1
 800725a:	651a      	str	r2, [r3, #80]	@ 0x50
 800725c:	4b5e      	ldr	r3, [pc, #376]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 800725e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007260:	4b5d      	ldr	r3, [pc, #372]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 8007262:	2180      	movs	r1, #128	@ 0x80
 8007264:	0049      	lsls	r1, r1, #1
 8007266:	430a      	orrs	r2, r1
 8007268:	651a      	str	r2, [r3, #80]	@ 0x50
 800726a:	e00b      	b.n	8007284 <HAL_RCC_OscConfig+0x534>
 800726c:	4b5a      	ldr	r3, [pc, #360]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 800726e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007270:	4b59      	ldr	r3, [pc, #356]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 8007272:	495b      	ldr	r1, [pc, #364]	@ (80073e0 <HAL_RCC_OscConfig+0x690>)
 8007274:	400a      	ands	r2, r1
 8007276:	651a      	str	r2, [r3, #80]	@ 0x50
 8007278:	4b57      	ldr	r3, [pc, #348]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 800727a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800727c:	4b56      	ldr	r3, [pc, #344]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 800727e:	495a      	ldr	r1, [pc, #360]	@ (80073e8 <HAL_RCC_OscConfig+0x698>)
 8007280:	400a      	ands	r2, r1
 8007282:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d015      	beq.n	80072b8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800728c:	f7fe fa3e 	bl	800570c <HAL_GetTick>
 8007290:	0003      	movs	r3, r0
 8007292:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007294:	e009      	b.n	80072aa <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007296:	f7fe fa39 	bl	800570c <HAL_GetTick>
 800729a:	0002      	movs	r2, r0
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	4a52      	ldr	r2, [pc, #328]	@ (80073ec <HAL_RCC_OscConfig+0x69c>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d901      	bls.n	80072aa <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e11b      	b.n	80074e2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072aa:	4b4b      	ldr	r3, [pc, #300]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 80072ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80072ae:	2380      	movs	r3, #128	@ 0x80
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	4013      	ands	r3, r2
 80072b4:	d0ef      	beq.n	8007296 <HAL_RCC_OscConfig+0x546>
 80072b6:	e014      	b.n	80072e2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072b8:	f7fe fa28 	bl	800570c <HAL_GetTick>
 80072bc:	0003      	movs	r3, r0
 80072be:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80072c0:	e009      	b.n	80072d6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072c2:	f7fe fa23 	bl	800570c <HAL_GetTick>
 80072c6:	0002      	movs	r2, r0
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	4a47      	ldr	r2, [pc, #284]	@ (80073ec <HAL_RCC_OscConfig+0x69c>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d901      	bls.n	80072d6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e105      	b.n	80074e2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80072d6:	4b40      	ldr	r3, [pc, #256]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 80072d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80072da:	2380      	movs	r3, #128	@ 0x80
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4013      	ands	r3, r2
 80072e0:	d1ef      	bne.n	80072c2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80072e2:	2323      	movs	r3, #35	@ 0x23
 80072e4:	18fb      	adds	r3, r7, r3
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d105      	bne.n	80072f8 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072ec:	4b3a      	ldr	r3, [pc, #232]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 80072ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072f0:	4b39      	ldr	r3, [pc, #228]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 80072f2:	493f      	ldr	r1, [pc, #252]	@ (80073f0 <HAL_RCC_OscConfig+0x6a0>)
 80072f4:	400a      	ands	r2, r1
 80072f6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2220      	movs	r2, #32
 80072fe:	4013      	ands	r3, r2
 8007300:	d049      	beq.n	8007396 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d026      	beq.n	8007358 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800730a:	4b33      	ldr	r3, [pc, #204]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 800730c:	689a      	ldr	r2, [r3, #8]
 800730e:	4b32      	ldr	r3, [pc, #200]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 8007310:	2101      	movs	r1, #1
 8007312:	430a      	orrs	r2, r1
 8007314:	609a      	str	r2, [r3, #8]
 8007316:	4b30      	ldr	r3, [pc, #192]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 8007318:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800731a:	4b2f      	ldr	r3, [pc, #188]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 800731c:	2101      	movs	r1, #1
 800731e:	430a      	orrs	r2, r1
 8007320:	635a      	str	r2, [r3, #52]	@ 0x34
 8007322:	4b34      	ldr	r3, [pc, #208]	@ (80073f4 <HAL_RCC_OscConfig+0x6a4>)
 8007324:	6a1a      	ldr	r2, [r3, #32]
 8007326:	4b33      	ldr	r3, [pc, #204]	@ (80073f4 <HAL_RCC_OscConfig+0x6a4>)
 8007328:	2180      	movs	r1, #128	@ 0x80
 800732a:	0189      	lsls	r1, r1, #6
 800732c:	430a      	orrs	r2, r1
 800732e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007330:	f7fe f9ec 	bl	800570c <HAL_GetTick>
 8007334:	0003      	movs	r3, r0
 8007336:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007338:	e008      	b.n	800734c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800733a:	f7fe f9e7 	bl	800570c <HAL_GetTick>
 800733e:	0002      	movs	r2, r0
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	2b02      	cmp	r3, #2
 8007346:	d901      	bls.n	800734c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e0ca      	b.n	80074e2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800734c:	4b22      	ldr	r3, [pc, #136]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	2202      	movs	r2, #2
 8007352:	4013      	ands	r3, r2
 8007354:	d0f1      	beq.n	800733a <HAL_RCC_OscConfig+0x5ea>
 8007356:	e01e      	b.n	8007396 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8007358:	4b1f      	ldr	r3, [pc, #124]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 800735a:	689a      	ldr	r2, [r3, #8]
 800735c:	4b1e      	ldr	r3, [pc, #120]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 800735e:	2101      	movs	r1, #1
 8007360:	438a      	bics	r2, r1
 8007362:	609a      	str	r2, [r3, #8]
 8007364:	4b23      	ldr	r3, [pc, #140]	@ (80073f4 <HAL_RCC_OscConfig+0x6a4>)
 8007366:	6a1a      	ldr	r2, [r3, #32]
 8007368:	4b22      	ldr	r3, [pc, #136]	@ (80073f4 <HAL_RCC_OscConfig+0x6a4>)
 800736a:	4923      	ldr	r1, [pc, #140]	@ (80073f8 <HAL_RCC_OscConfig+0x6a8>)
 800736c:	400a      	ands	r2, r1
 800736e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007370:	f7fe f9cc 	bl	800570c <HAL_GetTick>
 8007374:	0003      	movs	r3, r0
 8007376:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007378:	e008      	b.n	800738c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800737a:	f7fe f9c7 	bl	800570c <HAL_GetTick>
 800737e:	0002      	movs	r2, r0
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	2b02      	cmp	r3, #2
 8007386:	d901      	bls.n	800738c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e0aa      	b.n	80074e2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800738c:	4b12      	ldr	r3, [pc, #72]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	2202      	movs	r2, #2
 8007392:	4013      	ands	r3, r2
 8007394:	d1f1      	bne.n	800737a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800739a:	2b00      	cmp	r3, #0
 800739c:	d100      	bne.n	80073a0 <HAL_RCC_OscConfig+0x650>
 800739e:	e09f      	b.n	80074e0 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	2b0c      	cmp	r3, #12
 80073a4:	d100      	bne.n	80073a8 <HAL_RCC_OscConfig+0x658>
 80073a6:	e078      	b.n	800749a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d159      	bne.n	8007464 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073b0:	4b09      	ldr	r3, [pc, #36]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	4b08      	ldr	r3, [pc, #32]	@ (80073d8 <HAL_RCC_OscConfig+0x688>)
 80073b6:	4911      	ldr	r1, [pc, #68]	@ (80073fc <HAL_RCC_OscConfig+0x6ac>)
 80073b8:	400a      	ands	r2, r1
 80073ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073bc:	f7fe f9a6 	bl	800570c <HAL_GetTick>
 80073c0:	0003      	movs	r3, r0
 80073c2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80073c4:	e01c      	b.n	8007400 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073c6:	f7fe f9a1 	bl	800570c <HAL_GetTick>
 80073ca:	0002      	movs	r2, r0
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d915      	bls.n	8007400 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e084      	b.n	80074e2 <HAL_RCC_OscConfig+0x792>
 80073d8:	40021000 	.word	0x40021000
 80073dc:	ffff1fff 	.word	0xffff1fff
 80073e0:	fffffeff 	.word	0xfffffeff
 80073e4:	40007000 	.word	0x40007000
 80073e8:	fffffbff 	.word	0xfffffbff
 80073ec:	00001388 	.word	0x00001388
 80073f0:	efffffff 	.word	0xefffffff
 80073f4:	40010000 	.word	0x40010000
 80073f8:	ffffdfff 	.word	0xffffdfff
 80073fc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007400:	4b3a      	ldr	r3, [pc, #232]	@ (80074ec <HAL_RCC_OscConfig+0x79c>)
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	2380      	movs	r3, #128	@ 0x80
 8007406:	049b      	lsls	r3, r3, #18
 8007408:	4013      	ands	r3, r2
 800740a:	d1dc      	bne.n	80073c6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800740c:	4b37      	ldr	r3, [pc, #220]	@ (80074ec <HAL_RCC_OscConfig+0x79c>)
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	4a37      	ldr	r2, [pc, #220]	@ (80074f0 <HAL_RCC_OscConfig+0x7a0>)
 8007412:	4013      	ands	r3, r2
 8007414:	0019      	movs	r1, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800741e:	431a      	orrs	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007424:	431a      	orrs	r2, r3
 8007426:	4b31      	ldr	r3, [pc, #196]	@ (80074ec <HAL_RCC_OscConfig+0x79c>)
 8007428:	430a      	orrs	r2, r1
 800742a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800742c:	4b2f      	ldr	r3, [pc, #188]	@ (80074ec <HAL_RCC_OscConfig+0x79c>)
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	4b2e      	ldr	r3, [pc, #184]	@ (80074ec <HAL_RCC_OscConfig+0x79c>)
 8007432:	2180      	movs	r1, #128	@ 0x80
 8007434:	0449      	lsls	r1, r1, #17
 8007436:	430a      	orrs	r2, r1
 8007438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800743a:	f7fe f967 	bl	800570c <HAL_GetTick>
 800743e:	0003      	movs	r3, r0
 8007440:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8007442:	e008      	b.n	8007456 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007444:	f7fe f962 	bl	800570c <HAL_GetTick>
 8007448:	0002      	movs	r2, r0
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	2b02      	cmp	r3, #2
 8007450:	d901      	bls.n	8007456 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e045      	b.n	80074e2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8007456:	4b25      	ldr	r3, [pc, #148]	@ (80074ec <HAL_RCC_OscConfig+0x79c>)
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	2380      	movs	r3, #128	@ 0x80
 800745c:	049b      	lsls	r3, r3, #18
 800745e:	4013      	ands	r3, r2
 8007460:	d0f0      	beq.n	8007444 <HAL_RCC_OscConfig+0x6f4>
 8007462:	e03d      	b.n	80074e0 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007464:	4b21      	ldr	r3, [pc, #132]	@ (80074ec <HAL_RCC_OscConfig+0x79c>)
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	4b20      	ldr	r3, [pc, #128]	@ (80074ec <HAL_RCC_OscConfig+0x79c>)
 800746a:	4922      	ldr	r1, [pc, #136]	@ (80074f4 <HAL_RCC_OscConfig+0x7a4>)
 800746c:	400a      	ands	r2, r1
 800746e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007470:	f7fe f94c 	bl	800570c <HAL_GetTick>
 8007474:	0003      	movs	r3, r0
 8007476:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007478:	e008      	b.n	800748c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800747a:	f7fe f947 	bl	800570c <HAL_GetTick>
 800747e:	0002      	movs	r2, r0
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	2b02      	cmp	r3, #2
 8007486:	d901      	bls.n	800748c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e02a      	b.n	80074e2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800748c:	4b17      	ldr	r3, [pc, #92]	@ (80074ec <HAL_RCC_OscConfig+0x79c>)
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	2380      	movs	r3, #128	@ 0x80
 8007492:	049b      	lsls	r3, r3, #18
 8007494:	4013      	ands	r3, r2
 8007496:	d1f0      	bne.n	800747a <HAL_RCC_OscConfig+0x72a>
 8007498:	e022      	b.n	80074e0 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d101      	bne.n	80074a6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	e01d      	b.n	80074e2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80074a6:	4b11      	ldr	r3, [pc, #68]	@ (80074ec <HAL_RCC_OscConfig+0x79c>)
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074ac:	69ba      	ldr	r2, [r7, #24]
 80074ae:	2380      	movs	r3, #128	@ 0x80
 80074b0:	025b      	lsls	r3, r3, #9
 80074b2:	401a      	ands	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d10f      	bne.n	80074dc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80074bc:	69ba      	ldr	r2, [r7, #24]
 80074be:	23f0      	movs	r3, #240	@ 0xf0
 80074c0:	039b      	lsls	r3, r3, #14
 80074c2:	401a      	ands	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d107      	bne.n	80074dc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80074cc:	69ba      	ldr	r2, [r7, #24]
 80074ce:	23c0      	movs	r3, #192	@ 0xc0
 80074d0:	041b      	lsls	r3, r3, #16
 80074d2:	401a      	ands	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80074d8:	429a      	cmp	r2, r3
 80074da:	d001      	beq.n	80074e0 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e000      	b.n	80074e2 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	0018      	movs	r0, r3
 80074e4:	46bd      	mov	sp, r7
 80074e6:	b00a      	add	sp, #40	@ 0x28
 80074e8:	bdb0      	pop	{r4, r5, r7, pc}
 80074ea:	46c0      	nop			@ (mov r8, r8)
 80074ec:	40021000 	.word	0x40021000
 80074f0:	ff02ffff 	.word	0xff02ffff
 80074f4:	feffffff 	.word	0xfeffffff

080074f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074f8:	b5b0      	push	{r4, r5, r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d101      	bne.n	800750c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e128      	b.n	800775e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800750c:	4b96      	ldr	r3, [pc, #600]	@ (8007768 <HAL_RCC_ClockConfig+0x270>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2201      	movs	r2, #1
 8007512:	4013      	ands	r3, r2
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	429a      	cmp	r2, r3
 8007518:	d91e      	bls.n	8007558 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800751a:	4b93      	ldr	r3, [pc, #588]	@ (8007768 <HAL_RCC_ClockConfig+0x270>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2201      	movs	r2, #1
 8007520:	4393      	bics	r3, r2
 8007522:	0019      	movs	r1, r3
 8007524:	4b90      	ldr	r3, [pc, #576]	@ (8007768 <HAL_RCC_ClockConfig+0x270>)
 8007526:	683a      	ldr	r2, [r7, #0]
 8007528:	430a      	orrs	r2, r1
 800752a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800752c:	f7fe f8ee 	bl	800570c <HAL_GetTick>
 8007530:	0003      	movs	r3, r0
 8007532:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007534:	e009      	b.n	800754a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007536:	f7fe f8e9 	bl	800570c <HAL_GetTick>
 800753a:	0002      	movs	r2, r0
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	4a8a      	ldr	r2, [pc, #552]	@ (800776c <HAL_RCC_ClockConfig+0x274>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d901      	bls.n	800754a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e109      	b.n	800775e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800754a:	4b87      	ldr	r3, [pc, #540]	@ (8007768 <HAL_RCC_ClockConfig+0x270>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2201      	movs	r2, #1
 8007550:	4013      	ands	r3, r2
 8007552:	683a      	ldr	r2, [r7, #0]
 8007554:	429a      	cmp	r2, r3
 8007556:	d1ee      	bne.n	8007536 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2202      	movs	r2, #2
 800755e:	4013      	ands	r3, r2
 8007560:	d009      	beq.n	8007576 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007562:	4b83      	ldr	r3, [pc, #524]	@ (8007770 <HAL_RCC_ClockConfig+0x278>)
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	22f0      	movs	r2, #240	@ 0xf0
 8007568:	4393      	bics	r3, r2
 800756a:	0019      	movs	r1, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	689a      	ldr	r2, [r3, #8]
 8007570:	4b7f      	ldr	r3, [pc, #508]	@ (8007770 <HAL_RCC_ClockConfig+0x278>)
 8007572:	430a      	orrs	r2, r1
 8007574:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2201      	movs	r2, #1
 800757c:	4013      	ands	r3, r2
 800757e:	d100      	bne.n	8007582 <HAL_RCC_ClockConfig+0x8a>
 8007580:	e089      	b.n	8007696 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	2b02      	cmp	r3, #2
 8007588:	d107      	bne.n	800759a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800758a:	4b79      	ldr	r3, [pc, #484]	@ (8007770 <HAL_RCC_ClockConfig+0x278>)
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	2380      	movs	r3, #128	@ 0x80
 8007590:	029b      	lsls	r3, r3, #10
 8007592:	4013      	ands	r3, r2
 8007594:	d120      	bne.n	80075d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e0e1      	b.n	800775e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	2b03      	cmp	r3, #3
 80075a0:	d107      	bne.n	80075b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80075a2:	4b73      	ldr	r3, [pc, #460]	@ (8007770 <HAL_RCC_ClockConfig+0x278>)
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	2380      	movs	r3, #128	@ 0x80
 80075a8:	049b      	lsls	r3, r3, #18
 80075aa:	4013      	ands	r3, r2
 80075ac:	d114      	bne.n	80075d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e0d5      	b.n	800775e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d106      	bne.n	80075c8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80075ba:	4b6d      	ldr	r3, [pc, #436]	@ (8007770 <HAL_RCC_ClockConfig+0x278>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2204      	movs	r2, #4
 80075c0:	4013      	ands	r3, r2
 80075c2:	d109      	bne.n	80075d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e0ca      	b.n	800775e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80075c8:	4b69      	ldr	r3, [pc, #420]	@ (8007770 <HAL_RCC_ClockConfig+0x278>)
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	2380      	movs	r3, #128	@ 0x80
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4013      	ands	r3, r2
 80075d2:	d101      	bne.n	80075d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e0c2      	b.n	800775e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075d8:	4b65      	ldr	r3, [pc, #404]	@ (8007770 <HAL_RCC_ClockConfig+0x278>)
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	2203      	movs	r2, #3
 80075de:	4393      	bics	r3, r2
 80075e0:	0019      	movs	r1, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	685a      	ldr	r2, [r3, #4]
 80075e6:	4b62      	ldr	r3, [pc, #392]	@ (8007770 <HAL_RCC_ClockConfig+0x278>)
 80075e8:	430a      	orrs	r2, r1
 80075ea:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075ec:	f7fe f88e 	bl	800570c <HAL_GetTick>
 80075f0:	0003      	movs	r3, r0
 80075f2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d111      	bne.n	8007620 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80075fc:	e009      	b.n	8007612 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075fe:	f7fe f885 	bl	800570c <HAL_GetTick>
 8007602:	0002      	movs	r2, r0
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	4a58      	ldr	r2, [pc, #352]	@ (800776c <HAL_RCC_ClockConfig+0x274>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d901      	bls.n	8007612 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e0a5      	b.n	800775e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007612:	4b57      	ldr	r3, [pc, #348]	@ (8007770 <HAL_RCC_ClockConfig+0x278>)
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	220c      	movs	r2, #12
 8007618:	4013      	ands	r3, r2
 800761a:	2b08      	cmp	r3, #8
 800761c:	d1ef      	bne.n	80075fe <HAL_RCC_ClockConfig+0x106>
 800761e:	e03a      	b.n	8007696 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	2b03      	cmp	r3, #3
 8007626:	d111      	bne.n	800764c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007628:	e009      	b.n	800763e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800762a:	f7fe f86f 	bl	800570c <HAL_GetTick>
 800762e:	0002      	movs	r2, r0
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	4a4d      	ldr	r2, [pc, #308]	@ (800776c <HAL_RCC_ClockConfig+0x274>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d901      	bls.n	800763e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e08f      	b.n	800775e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800763e:	4b4c      	ldr	r3, [pc, #304]	@ (8007770 <HAL_RCC_ClockConfig+0x278>)
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	220c      	movs	r2, #12
 8007644:	4013      	ands	r3, r2
 8007646:	2b0c      	cmp	r3, #12
 8007648:	d1ef      	bne.n	800762a <HAL_RCC_ClockConfig+0x132>
 800764a:	e024      	b.n	8007696 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	2b01      	cmp	r3, #1
 8007652:	d11b      	bne.n	800768c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007654:	e009      	b.n	800766a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007656:	f7fe f859 	bl	800570c <HAL_GetTick>
 800765a:	0002      	movs	r2, r0
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	4a42      	ldr	r2, [pc, #264]	@ (800776c <HAL_RCC_ClockConfig+0x274>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d901      	bls.n	800766a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	e079      	b.n	800775e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800766a:	4b41      	ldr	r3, [pc, #260]	@ (8007770 <HAL_RCC_ClockConfig+0x278>)
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	220c      	movs	r2, #12
 8007670:	4013      	ands	r3, r2
 8007672:	2b04      	cmp	r3, #4
 8007674:	d1ef      	bne.n	8007656 <HAL_RCC_ClockConfig+0x15e>
 8007676:	e00e      	b.n	8007696 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007678:	f7fe f848 	bl	800570c <HAL_GetTick>
 800767c:	0002      	movs	r2, r0
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	4a3a      	ldr	r2, [pc, #232]	@ (800776c <HAL_RCC_ClockConfig+0x274>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d901      	bls.n	800768c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	e068      	b.n	800775e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800768c:	4b38      	ldr	r3, [pc, #224]	@ (8007770 <HAL_RCC_ClockConfig+0x278>)
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	220c      	movs	r2, #12
 8007692:	4013      	ands	r3, r2
 8007694:	d1f0      	bne.n	8007678 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007696:	4b34      	ldr	r3, [pc, #208]	@ (8007768 <HAL_RCC_ClockConfig+0x270>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2201      	movs	r2, #1
 800769c:	4013      	ands	r3, r2
 800769e:	683a      	ldr	r2, [r7, #0]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d21e      	bcs.n	80076e2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076a4:	4b30      	ldr	r3, [pc, #192]	@ (8007768 <HAL_RCC_ClockConfig+0x270>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2201      	movs	r2, #1
 80076aa:	4393      	bics	r3, r2
 80076ac:	0019      	movs	r1, r3
 80076ae:	4b2e      	ldr	r3, [pc, #184]	@ (8007768 <HAL_RCC_ClockConfig+0x270>)
 80076b0:	683a      	ldr	r2, [r7, #0]
 80076b2:	430a      	orrs	r2, r1
 80076b4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80076b6:	f7fe f829 	bl	800570c <HAL_GetTick>
 80076ba:	0003      	movs	r3, r0
 80076bc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076be:	e009      	b.n	80076d4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076c0:	f7fe f824 	bl	800570c <HAL_GetTick>
 80076c4:	0002      	movs	r2, r0
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	4a28      	ldr	r2, [pc, #160]	@ (800776c <HAL_RCC_ClockConfig+0x274>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d901      	bls.n	80076d4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e044      	b.n	800775e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076d4:	4b24      	ldr	r3, [pc, #144]	@ (8007768 <HAL_RCC_ClockConfig+0x270>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2201      	movs	r2, #1
 80076da:	4013      	ands	r3, r2
 80076dc:	683a      	ldr	r2, [r7, #0]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d1ee      	bne.n	80076c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2204      	movs	r2, #4
 80076e8:	4013      	ands	r3, r2
 80076ea:	d009      	beq.n	8007700 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076ec:	4b20      	ldr	r3, [pc, #128]	@ (8007770 <HAL_RCC_ClockConfig+0x278>)
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	4a20      	ldr	r2, [pc, #128]	@ (8007774 <HAL_RCC_ClockConfig+0x27c>)
 80076f2:	4013      	ands	r3, r2
 80076f4:	0019      	movs	r1, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	68da      	ldr	r2, [r3, #12]
 80076fa:	4b1d      	ldr	r3, [pc, #116]	@ (8007770 <HAL_RCC_ClockConfig+0x278>)
 80076fc:	430a      	orrs	r2, r1
 80076fe:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2208      	movs	r2, #8
 8007706:	4013      	ands	r3, r2
 8007708:	d00a      	beq.n	8007720 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800770a:	4b19      	ldr	r3, [pc, #100]	@ (8007770 <HAL_RCC_ClockConfig+0x278>)
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	4a1a      	ldr	r2, [pc, #104]	@ (8007778 <HAL_RCC_ClockConfig+0x280>)
 8007710:	4013      	ands	r3, r2
 8007712:	0019      	movs	r1, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	00da      	lsls	r2, r3, #3
 800771a:	4b15      	ldr	r3, [pc, #84]	@ (8007770 <HAL_RCC_ClockConfig+0x278>)
 800771c:	430a      	orrs	r2, r1
 800771e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007720:	f000 f832 	bl	8007788 <HAL_RCC_GetSysClockFreq>
 8007724:	0001      	movs	r1, r0
 8007726:	4b12      	ldr	r3, [pc, #72]	@ (8007770 <HAL_RCC_ClockConfig+0x278>)
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	091b      	lsrs	r3, r3, #4
 800772c:	220f      	movs	r2, #15
 800772e:	4013      	ands	r3, r2
 8007730:	4a12      	ldr	r2, [pc, #72]	@ (800777c <HAL_RCC_ClockConfig+0x284>)
 8007732:	5cd3      	ldrb	r3, [r2, r3]
 8007734:	000a      	movs	r2, r1
 8007736:	40da      	lsrs	r2, r3
 8007738:	4b11      	ldr	r3, [pc, #68]	@ (8007780 <HAL_RCC_ClockConfig+0x288>)
 800773a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800773c:	4b11      	ldr	r3, [pc, #68]	@ (8007784 <HAL_RCC_ClockConfig+0x28c>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	250b      	movs	r5, #11
 8007742:	197c      	adds	r4, r7, r5
 8007744:	0018      	movs	r0, r3
 8007746:	f7fd ff9b 	bl	8005680 <HAL_InitTick>
 800774a:	0003      	movs	r3, r0
 800774c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800774e:	197b      	adds	r3, r7, r5
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d002      	beq.n	800775c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8007756:	197b      	adds	r3, r7, r5
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	e000      	b.n	800775e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	0018      	movs	r0, r3
 8007760:	46bd      	mov	sp, r7
 8007762:	b004      	add	sp, #16
 8007764:	bdb0      	pop	{r4, r5, r7, pc}
 8007766:	46c0      	nop			@ (mov r8, r8)
 8007768:	40022000 	.word	0x40022000
 800776c:	00001388 	.word	0x00001388
 8007770:	40021000 	.word	0x40021000
 8007774:	fffff8ff 	.word	0xfffff8ff
 8007778:	ffffc7ff 	.word	0xffffc7ff
 800777c:	08008bb0 	.word	0x08008bb0
 8007780:	20000000 	.word	0x20000000
 8007784:	20000004 	.word	0x20000004

08007788 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007788:	b5b0      	push	{r4, r5, r7, lr}
 800778a:	b08e      	sub	sp, #56	@ 0x38
 800778c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800778e:	4b4c      	ldr	r3, [pc, #304]	@ (80078c0 <HAL_RCC_GetSysClockFreq+0x138>)
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007794:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007796:	230c      	movs	r3, #12
 8007798:	4013      	ands	r3, r2
 800779a:	2b0c      	cmp	r3, #12
 800779c:	d014      	beq.n	80077c8 <HAL_RCC_GetSysClockFreq+0x40>
 800779e:	d900      	bls.n	80077a2 <HAL_RCC_GetSysClockFreq+0x1a>
 80077a0:	e07b      	b.n	800789a <HAL_RCC_GetSysClockFreq+0x112>
 80077a2:	2b04      	cmp	r3, #4
 80077a4:	d002      	beq.n	80077ac <HAL_RCC_GetSysClockFreq+0x24>
 80077a6:	2b08      	cmp	r3, #8
 80077a8:	d00b      	beq.n	80077c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80077aa:	e076      	b.n	800789a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80077ac:	4b44      	ldr	r3, [pc, #272]	@ (80078c0 <HAL_RCC_GetSysClockFreq+0x138>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2210      	movs	r2, #16
 80077b2:	4013      	ands	r3, r2
 80077b4:	d002      	beq.n	80077bc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80077b6:	4b43      	ldr	r3, [pc, #268]	@ (80078c4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80077b8:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80077ba:	e07c      	b.n	80078b6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80077bc:	4b42      	ldr	r3, [pc, #264]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0x140>)
 80077be:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80077c0:	e079      	b.n	80078b6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80077c2:	4b42      	ldr	r3, [pc, #264]	@ (80078cc <HAL_RCC_GetSysClockFreq+0x144>)
 80077c4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80077c6:	e076      	b.n	80078b6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80077c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ca:	0c9a      	lsrs	r2, r3, #18
 80077cc:	230f      	movs	r3, #15
 80077ce:	401a      	ands	r2, r3
 80077d0:	4b3f      	ldr	r3, [pc, #252]	@ (80078d0 <HAL_RCC_GetSysClockFreq+0x148>)
 80077d2:	5c9b      	ldrb	r3, [r3, r2]
 80077d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80077d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077d8:	0d9a      	lsrs	r2, r3, #22
 80077da:	2303      	movs	r3, #3
 80077dc:	4013      	ands	r3, r2
 80077de:	3301      	adds	r3, #1
 80077e0:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80077e2:	4b37      	ldr	r3, [pc, #220]	@ (80078c0 <HAL_RCC_GetSysClockFreq+0x138>)
 80077e4:	68da      	ldr	r2, [r3, #12]
 80077e6:	2380      	movs	r3, #128	@ 0x80
 80077e8:	025b      	lsls	r3, r3, #9
 80077ea:	4013      	ands	r3, r2
 80077ec:	d01a      	beq.n	8007824 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80077ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077f0:	61bb      	str	r3, [r7, #24]
 80077f2:	2300      	movs	r3, #0
 80077f4:	61fb      	str	r3, [r7, #28]
 80077f6:	4a35      	ldr	r2, [pc, #212]	@ (80078cc <HAL_RCC_GetSysClockFreq+0x144>)
 80077f8:	2300      	movs	r3, #0
 80077fa:	69b8      	ldr	r0, [r7, #24]
 80077fc:	69f9      	ldr	r1, [r7, #28]
 80077fe:	f7f8 fd99 	bl	8000334 <__aeabi_lmul>
 8007802:	0002      	movs	r2, r0
 8007804:	000b      	movs	r3, r1
 8007806:	0010      	movs	r0, r2
 8007808:	0019      	movs	r1, r3
 800780a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780c:	613b      	str	r3, [r7, #16]
 800780e:	2300      	movs	r3, #0
 8007810:	617b      	str	r3, [r7, #20]
 8007812:	693a      	ldr	r2, [r7, #16]
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	f7f8 fd6d 	bl	80002f4 <__aeabi_uldivmod>
 800781a:	0002      	movs	r2, r0
 800781c:	000b      	movs	r3, r1
 800781e:	0013      	movs	r3, r2
 8007820:	637b      	str	r3, [r7, #52]	@ 0x34
 8007822:	e037      	b.n	8007894 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8007824:	4b26      	ldr	r3, [pc, #152]	@ (80078c0 <HAL_RCC_GetSysClockFreq+0x138>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2210      	movs	r2, #16
 800782a:	4013      	ands	r3, r2
 800782c:	d01a      	beq.n	8007864 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800782e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007830:	60bb      	str	r3, [r7, #8]
 8007832:	2300      	movs	r3, #0
 8007834:	60fb      	str	r3, [r7, #12]
 8007836:	4a23      	ldr	r2, [pc, #140]	@ (80078c4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007838:	2300      	movs	r3, #0
 800783a:	68b8      	ldr	r0, [r7, #8]
 800783c:	68f9      	ldr	r1, [r7, #12]
 800783e:	f7f8 fd79 	bl	8000334 <__aeabi_lmul>
 8007842:	0002      	movs	r2, r0
 8007844:	000b      	movs	r3, r1
 8007846:	0010      	movs	r0, r2
 8007848:	0019      	movs	r1, r3
 800784a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784c:	603b      	str	r3, [r7, #0]
 800784e:	2300      	movs	r3, #0
 8007850:	607b      	str	r3, [r7, #4]
 8007852:	683a      	ldr	r2, [r7, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f7f8 fd4d 	bl	80002f4 <__aeabi_uldivmod>
 800785a:	0002      	movs	r2, r0
 800785c:	000b      	movs	r3, r1
 800785e:	0013      	movs	r3, r2
 8007860:	637b      	str	r3, [r7, #52]	@ 0x34
 8007862:	e017      	b.n	8007894 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007866:	0018      	movs	r0, r3
 8007868:	2300      	movs	r3, #0
 800786a:	0019      	movs	r1, r3
 800786c:	4a16      	ldr	r2, [pc, #88]	@ (80078c8 <HAL_RCC_GetSysClockFreq+0x140>)
 800786e:	2300      	movs	r3, #0
 8007870:	f7f8 fd60 	bl	8000334 <__aeabi_lmul>
 8007874:	0002      	movs	r2, r0
 8007876:	000b      	movs	r3, r1
 8007878:	0010      	movs	r0, r2
 800787a:	0019      	movs	r1, r3
 800787c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787e:	001c      	movs	r4, r3
 8007880:	2300      	movs	r3, #0
 8007882:	001d      	movs	r5, r3
 8007884:	0022      	movs	r2, r4
 8007886:	002b      	movs	r3, r5
 8007888:	f7f8 fd34 	bl	80002f4 <__aeabi_uldivmod>
 800788c:	0002      	movs	r2, r0
 800788e:	000b      	movs	r3, r1
 8007890:	0013      	movs	r3, r2
 8007892:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8007894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007896:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8007898:	e00d      	b.n	80078b6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800789a:	4b09      	ldr	r3, [pc, #36]	@ (80078c0 <HAL_RCC_GetSysClockFreq+0x138>)
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	0b5b      	lsrs	r3, r3, #13
 80078a0:	2207      	movs	r2, #7
 80078a2:	4013      	ands	r3, r2
 80078a4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80078a6:	6a3b      	ldr	r3, [r7, #32]
 80078a8:	3301      	adds	r3, #1
 80078aa:	2280      	movs	r2, #128	@ 0x80
 80078ac:	0212      	lsls	r2, r2, #8
 80078ae:	409a      	lsls	r2, r3
 80078b0:	0013      	movs	r3, r2
 80078b2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80078b4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80078b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80078b8:	0018      	movs	r0, r3
 80078ba:	46bd      	mov	sp, r7
 80078bc:	b00e      	add	sp, #56	@ 0x38
 80078be:	bdb0      	pop	{r4, r5, r7, pc}
 80078c0:	40021000 	.word	0x40021000
 80078c4:	003d0900 	.word	0x003d0900
 80078c8:	00f42400 	.word	0x00f42400
 80078cc:	007a1200 	.word	0x007a1200
 80078d0:	08008bc8 	.word	0x08008bc8

080078d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078d8:	4b02      	ldr	r3, [pc, #8]	@ (80078e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80078da:	681b      	ldr	r3, [r3, #0]
}
 80078dc:	0018      	movs	r0, r3
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	46c0      	nop			@ (mov r8, r8)
 80078e4:	20000000 	.word	0x20000000

080078e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80078ec:	f7ff fff2 	bl	80078d4 <HAL_RCC_GetHCLKFreq>
 80078f0:	0001      	movs	r1, r0
 80078f2:	4b06      	ldr	r3, [pc, #24]	@ (800790c <HAL_RCC_GetPCLK1Freq+0x24>)
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	0a1b      	lsrs	r3, r3, #8
 80078f8:	2207      	movs	r2, #7
 80078fa:	4013      	ands	r3, r2
 80078fc:	4a04      	ldr	r2, [pc, #16]	@ (8007910 <HAL_RCC_GetPCLK1Freq+0x28>)
 80078fe:	5cd3      	ldrb	r3, [r2, r3]
 8007900:	40d9      	lsrs	r1, r3
 8007902:	000b      	movs	r3, r1
}
 8007904:	0018      	movs	r0, r3
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	46c0      	nop			@ (mov r8, r8)
 800790c:	40021000 	.word	0x40021000
 8007910:	08008bc0 	.word	0x08008bc0

08007914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007918:	f7ff ffdc 	bl	80078d4 <HAL_RCC_GetHCLKFreq>
 800791c:	0001      	movs	r1, r0
 800791e:	4b06      	ldr	r3, [pc, #24]	@ (8007938 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	0adb      	lsrs	r3, r3, #11
 8007924:	2207      	movs	r2, #7
 8007926:	4013      	ands	r3, r2
 8007928:	4a04      	ldr	r2, [pc, #16]	@ (800793c <HAL_RCC_GetPCLK2Freq+0x28>)
 800792a:	5cd3      	ldrb	r3, [r2, r3]
 800792c:	40d9      	lsrs	r1, r3
 800792e:	000b      	movs	r3, r1
}
 8007930:	0018      	movs	r0, r3
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	46c0      	nop			@ (mov r8, r8)
 8007938:	40021000 	.word	0x40021000
 800793c:	08008bc0 	.word	0x08008bc0

08007940 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8007948:	2317      	movs	r3, #23
 800794a:	18fb      	adds	r3, r7, r3
 800794c:	2200      	movs	r2, #0
 800794e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2220      	movs	r2, #32
 8007956:	4013      	ands	r3, r2
 8007958:	d106      	bne.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	2380      	movs	r3, #128	@ 0x80
 8007960:	011b      	lsls	r3, r3, #4
 8007962:	4013      	ands	r3, r2
 8007964:	d100      	bne.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8007966:	e104      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007968:	4bb9      	ldr	r3, [pc, #740]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800796a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800796c:	2380      	movs	r3, #128	@ 0x80
 800796e:	055b      	lsls	r3, r3, #21
 8007970:	4013      	ands	r3, r2
 8007972:	d10a      	bne.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007974:	4bb6      	ldr	r3, [pc, #728]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007976:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007978:	4bb5      	ldr	r3, [pc, #724]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800797a:	2180      	movs	r1, #128	@ 0x80
 800797c:	0549      	lsls	r1, r1, #21
 800797e:	430a      	orrs	r2, r1
 8007980:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8007982:	2317      	movs	r3, #23
 8007984:	18fb      	adds	r3, r7, r3
 8007986:	2201      	movs	r2, #1
 8007988:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800798a:	4bb2      	ldr	r3, [pc, #712]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	2380      	movs	r3, #128	@ 0x80
 8007990:	005b      	lsls	r3, r3, #1
 8007992:	4013      	ands	r3, r2
 8007994:	d11a      	bne.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007996:	4baf      	ldr	r3, [pc, #700]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	4bae      	ldr	r3, [pc, #696]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800799c:	2180      	movs	r1, #128	@ 0x80
 800799e:	0049      	lsls	r1, r1, #1
 80079a0:	430a      	orrs	r2, r1
 80079a2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079a4:	f7fd feb2 	bl	800570c <HAL_GetTick>
 80079a8:	0003      	movs	r3, r0
 80079aa:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079ac:	e008      	b.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079ae:	f7fd fead 	bl	800570c <HAL_GetTick>
 80079b2:	0002      	movs	r2, r0
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	2b64      	cmp	r3, #100	@ 0x64
 80079ba:	d901      	bls.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	e143      	b.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079c0:	4ba4      	ldr	r3, [pc, #656]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	2380      	movs	r3, #128	@ 0x80
 80079c6:	005b      	lsls	r3, r3, #1
 80079c8:	4013      	ands	r3, r2
 80079ca:	d0f0      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80079cc:	4ba0      	ldr	r3, [pc, #640]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	23c0      	movs	r3, #192	@ 0xc0
 80079d2:	039b      	lsls	r3, r3, #14
 80079d4:	4013      	ands	r3, r2
 80079d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	23c0      	movs	r3, #192	@ 0xc0
 80079de:	039b      	lsls	r3, r3, #14
 80079e0:	4013      	ands	r3, r2
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d107      	bne.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	689a      	ldr	r2, [r3, #8]
 80079ec:	23c0      	movs	r3, #192	@ 0xc0
 80079ee:	039b      	lsls	r3, r3, #14
 80079f0:	4013      	ands	r3, r2
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d013      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	23c0      	movs	r3, #192	@ 0xc0
 80079fe:	029b      	lsls	r3, r3, #10
 8007a00:	401a      	ands	r2, r3
 8007a02:	23c0      	movs	r3, #192	@ 0xc0
 8007a04:	029b      	lsls	r3, r3, #10
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d10a      	bne.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007a0a:	4b91      	ldr	r3, [pc, #580]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	2380      	movs	r3, #128	@ 0x80
 8007a10:	029b      	lsls	r3, r3, #10
 8007a12:	401a      	ands	r2, r3
 8007a14:	2380      	movs	r3, #128	@ 0x80
 8007a16:	029b      	lsls	r3, r3, #10
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d101      	bne.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e113      	b.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8007a20:	4b8b      	ldr	r3, [pc, #556]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007a22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a24:	23c0      	movs	r3, #192	@ 0xc0
 8007a26:	029b      	lsls	r3, r3, #10
 8007a28:	4013      	ands	r3, r2
 8007a2a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d049      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	685a      	ldr	r2, [r3, #4]
 8007a36:	23c0      	movs	r3, #192	@ 0xc0
 8007a38:	029b      	lsls	r3, r3, #10
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d004      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2220      	movs	r2, #32
 8007a48:	4013      	ands	r3, r2
 8007a4a:	d10d      	bne.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	689a      	ldr	r2, [r3, #8]
 8007a50:	23c0      	movs	r3, #192	@ 0xc0
 8007a52:	029b      	lsls	r3, r3, #10
 8007a54:	4013      	ands	r3, r2
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d034      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	2380      	movs	r3, #128	@ 0x80
 8007a62:	011b      	lsls	r3, r3, #4
 8007a64:	4013      	ands	r3, r2
 8007a66:	d02e      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8007a68:	4b79      	ldr	r3, [pc, #484]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007a6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a6c:	4a7a      	ldr	r2, [pc, #488]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8007a6e:	4013      	ands	r3, r2
 8007a70:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007a72:	4b77      	ldr	r3, [pc, #476]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007a74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a76:	4b76      	ldr	r3, [pc, #472]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007a78:	2180      	movs	r1, #128	@ 0x80
 8007a7a:	0309      	lsls	r1, r1, #12
 8007a7c:	430a      	orrs	r2, r1
 8007a7e:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007a80:	4b73      	ldr	r3, [pc, #460]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007a82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a84:	4b72      	ldr	r3, [pc, #456]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007a86:	4975      	ldr	r1, [pc, #468]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8007a88:	400a      	ands	r2, r1
 8007a8a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8007a8c:	4b70      	ldr	r3, [pc, #448]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	2380      	movs	r3, #128	@ 0x80
 8007a96:	005b      	lsls	r3, r3, #1
 8007a98:	4013      	ands	r3, r2
 8007a9a:	d014      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a9c:	f7fd fe36 	bl	800570c <HAL_GetTick>
 8007aa0:	0003      	movs	r3, r0
 8007aa2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007aa4:	e009      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007aa6:	f7fd fe31 	bl	800570c <HAL_GetTick>
 8007aaa:	0002      	movs	r2, r0
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	4a6b      	ldr	r2, [pc, #428]	@ (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d901      	bls.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e0c6      	b.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007aba:	4b65      	ldr	r3, [pc, #404]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007abc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007abe:	2380      	movs	r3, #128	@ 0x80
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	d0ef      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	2380      	movs	r3, #128	@ 0x80
 8007acc:	011b      	lsls	r3, r3, #4
 8007ace:	4013      	ands	r3, r2
 8007ad0:	d01f      	beq.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	689a      	ldr	r2, [r3, #8]
 8007ad6:	23c0      	movs	r3, #192	@ 0xc0
 8007ad8:	029b      	lsls	r3, r3, #10
 8007ada:	401a      	ands	r2, r3
 8007adc:	23c0      	movs	r3, #192	@ 0xc0
 8007ade:	029b      	lsls	r3, r3, #10
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d10c      	bne.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8007ae4:	4b5a      	ldr	r3, [pc, #360]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a5e      	ldr	r2, [pc, #376]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8007aea:	4013      	ands	r3, r2
 8007aec:	0019      	movs	r1, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	689a      	ldr	r2, [r3, #8]
 8007af2:	23c0      	movs	r3, #192	@ 0xc0
 8007af4:	039b      	lsls	r3, r3, #14
 8007af6:	401a      	ands	r2, r3
 8007af8:	4b55      	ldr	r3, [pc, #340]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007afa:	430a      	orrs	r2, r1
 8007afc:	601a      	str	r2, [r3, #0]
 8007afe:	4b54      	ldr	r3, [pc, #336]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007b00:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	689a      	ldr	r2, [r3, #8]
 8007b06:	23c0      	movs	r3, #192	@ 0xc0
 8007b08:	029b      	lsls	r3, r3, #10
 8007b0a:	401a      	ands	r2, r3
 8007b0c:	4b50      	ldr	r3, [pc, #320]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007b0e:	430a      	orrs	r2, r1
 8007b10:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2220      	movs	r2, #32
 8007b18:	4013      	ands	r3, r2
 8007b1a:	d01f      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685a      	ldr	r2, [r3, #4]
 8007b20:	23c0      	movs	r3, #192	@ 0xc0
 8007b22:	029b      	lsls	r3, r3, #10
 8007b24:	401a      	ands	r2, r3
 8007b26:	23c0      	movs	r3, #192	@ 0xc0
 8007b28:	029b      	lsls	r3, r3, #10
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d10c      	bne.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8007b2e:	4b48      	ldr	r3, [pc, #288]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a4c      	ldr	r2, [pc, #304]	@ (8007c64 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8007b34:	4013      	ands	r3, r2
 8007b36:	0019      	movs	r1, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	685a      	ldr	r2, [r3, #4]
 8007b3c:	23c0      	movs	r3, #192	@ 0xc0
 8007b3e:	039b      	lsls	r3, r3, #14
 8007b40:	401a      	ands	r2, r3
 8007b42:	4b43      	ldr	r3, [pc, #268]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007b44:	430a      	orrs	r2, r1
 8007b46:	601a      	str	r2, [r3, #0]
 8007b48:	4b41      	ldr	r3, [pc, #260]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007b4a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	685a      	ldr	r2, [r3, #4]
 8007b50:	23c0      	movs	r3, #192	@ 0xc0
 8007b52:	029b      	lsls	r3, r3, #10
 8007b54:	401a      	ands	r2, r3
 8007b56:	4b3e      	ldr	r3, [pc, #248]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007b58:	430a      	orrs	r2, r1
 8007b5a:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007b5c:	2317      	movs	r3, #23
 8007b5e:	18fb      	adds	r3, r7, r3
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d105      	bne.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b66:	4b3a      	ldr	r3, [pc, #232]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007b68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b6a:	4b39      	ldr	r3, [pc, #228]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007b6c:	493e      	ldr	r1, [pc, #248]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8007b6e:	400a      	ands	r2, r1
 8007b70:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2201      	movs	r2, #1
 8007b78:	4013      	ands	r3, r2
 8007b7a:	d009      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b7c:	4b34      	ldr	r3, [pc, #208]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b80:	2203      	movs	r2, #3
 8007b82:	4393      	bics	r3, r2
 8007b84:	0019      	movs	r1, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	68da      	ldr	r2, [r3, #12]
 8007b8a:	4b31      	ldr	r3, [pc, #196]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007b8c:	430a      	orrs	r2, r1
 8007b8e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2202      	movs	r2, #2
 8007b96:	4013      	ands	r3, r2
 8007b98:	d009      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b9a:	4b2d      	ldr	r3, [pc, #180]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b9e:	220c      	movs	r2, #12
 8007ba0:	4393      	bics	r3, r2
 8007ba2:	0019      	movs	r1, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	691a      	ldr	r2, [r3, #16]
 8007ba8:	4b29      	ldr	r3, [pc, #164]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007baa:	430a      	orrs	r2, r1
 8007bac:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2204      	movs	r2, #4
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	d009      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007bb8:	4b25      	ldr	r3, [pc, #148]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bbc:	4a2b      	ldr	r2, [pc, #172]	@ (8007c6c <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	0019      	movs	r1, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	695a      	ldr	r2, [r3, #20]
 8007bc6:	4b22      	ldr	r3, [pc, #136]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007bc8:	430a      	orrs	r2, r1
 8007bca:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2208      	movs	r2, #8
 8007bd2:	4013      	ands	r3, r2
 8007bd4:	d009      	beq.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bda:	4a25      	ldr	r2, [pc, #148]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007bdc:	4013      	ands	r3, r2
 8007bde:	0019      	movs	r1, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	699a      	ldr	r2, [r3, #24]
 8007be4:	4b1a      	ldr	r3, [pc, #104]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007be6:	430a      	orrs	r2, r1
 8007be8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	2380      	movs	r3, #128	@ 0x80
 8007bf0:	005b      	lsls	r3, r3, #1
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	d009      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007bf6:	4b16      	ldr	r3, [pc, #88]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bfa:	4a17      	ldr	r2, [pc, #92]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	0019      	movs	r1, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	69da      	ldr	r2, [r3, #28]
 8007c04:	4b12      	ldr	r3, [pc, #72]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007c06:	430a      	orrs	r2, r1
 8007c08:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2240      	movs	r2, #64	@ 0x40
 8007c10:	4013      	ands	r3, r2
 8007c12:	d009      	beq.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c14:	4b0e      	ldr	r3, [pc, #56]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c18:	4a16      	ldr	r2, [pc, #88]	@ (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	0019      	movs	r1, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c22:	4b0b      	ldr	r3, [pc, #44]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007c24:	430a      	orrs	r2, r1
 8007c26:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2280      	movs	r2, #128	@ 0x80
 8007c2e:	4013      	ands	r3, r2
 8007c30:	d009      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8007c32:	4b07      	ldr	r3, [pc, #28]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c36:	4a10      	ldr	r2, [pc, #64]	@ (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c38:	4013      	ands	r3, r2
 8007c3a:	0019      	movs	r1, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a1a      	ldr	r2, [r3, #32]
 8007c40:	4b03      	ldr	r3, [pc, #12]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007c42:	430a      	orrs	r2, r1
 8007c44:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	0018      	movs	r0, r3
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	b006      	add	sp, #24
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	40021000 	.word	0x40021000
 8007c54:	40007000 	.word	0x40007000
 8007c58:	fffcffff 	.word	0xfffcffff
 8007c5c:	fff7ffff 	.word	0xfff7ffff
 8007c60:	00001388 	.word	0x00001388
 8007c64:	ffcfffff 	.word	0xffcfffff
 8007c68:	efffffff 	.word	0xefffffff
 8007c6c:	fffff3ff 	.word	0xfffff3ff
 8007c70:	ffffcfff 	.word	0xffffcfff
 8007c74:	fbffffff 	.word	0xfbffffff
 8007c78:	fff3ffff 	.word	0xfff3ffff

08007c7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d101      	bne.n	8007c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e044      	b.n	8007d18 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d107      	bne.n	8007ca6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2278      	movs	r2, #120	@ 0x78
 8007c9a:	2100      	movs	r1, #0
 8007c9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	0018      	movs	r0, r3
 8007ca2:	f7fd fc41 	bl	8005528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2224      	movs	r2, #36	@ 0x24
 8007caa:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	438a      	bics	r2, r1
 8007cba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	0018      	movs	r0, r3
 8007cc0:	f000 f8d0 	bl	8007e64 <UART_SetConfig>
 8007cc4:	0003      	movs	r3, r0
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d101      	bne.n	8007cce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e024      	b.n	8007d18 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	0018      	movs	r0, r3
 8007cda:	f000 fb61 	bl	80083a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	490d      	ldr	r1, [pc, #52]	@ (8007d20 <HAL_UART_Init+0xa4>)
 8007cea:	400a      	ands	r2, r1
 8007cec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	689a      	ldr	r2, [r3, #8]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	212a      	movs	r1, #42	@ 0x2a
 8007cfa:	438a      	bics	r2, r1
 8007cfc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2101      	movs	r1, #1
 8007d0a:	430a      	orrs	r2, r1
 8007d0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	0018      	movs	r0, r3
 8007d12:	f000 fbf9 	bl	8008508 <UART_CheckIdleState>
 8007d16:	0003      	movs	r3, r0
}
 8007d18:	0018      	movs	r0, r3
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	b002      	add	sp, #8
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	ffffb7ff 	.word	0xffffb7ff

08007d24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b08a      	sub	sp, #40	@ 0x28
 8007d28:	af02      	add	r7, sp, #8
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	603b      	str	r3, [r7, #0]
 8007d30:	1dbb      	adds	r3, r7, #6
 8007d32:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d38:	2b20      	cmp	r3, #32
 8007d3a:	d000      	beq.n	8007d3e <HAL_UART_Transmit+0x1a>
 8007d3c:	e08c      	b.n	8007e58 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d003      	beq.n	8007d4c <HAL_UART_Transmit+0x28>
 8007d44:	1dbb      	adds	r3, r7, #6
 8007d46:	881b      	ldrh	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d101      	bne.n	8007d50 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e084      	b.n	8007e5a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	689a      	ldr	r2, [r3, #8]
 8007d54:	2380      	movs	r3, #128	@ 0x80
 8007d56:	015b      	lsls	r3, r3, #5
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d109      	bne.n	8007d70 <HAL_UART_Transmit+0x4c>
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d105      	bne.n	8007d70 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	2201      	movs	r2, #1
 8007d68:	4013      	ands	r3, r2
 8007d6a:	d001      	beq.n	8007d70 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e074      	b.n	8007e5a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2284      	movs	r2, #132	@ 0x84
 8007d74:	2100      	movs	r1, #0
 8007d76:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2221      	movs	r2, #33	@ 0x21
 8007d7c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d7e:	f7fd fcc5 	bl	800570c <HAL_GetTick>
 8007d82:	0003      	movs	r3, r0
 8007d84:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	1dba      	adds	r2, r7, #6
 8007d8a:	2150      	movs	r1, #80	@ 0x50
 8007d8c:	8812      	ldrh	r2, [r2, #0]
 8007d8e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	1dba      	adds	r2, r7, #6
 8007d94:	2152      	movs	r1, #82	@ 0x52
 8007d96:	8812      	ldrh	r2, [r2, #0]
 8007d98:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	689a      	ldr	r2, [r3, #8]
 8007d9e:	2380      	movs	r3, #128	@ 0x80
 8007da0:	015b      	lsls	r3, r3, #5
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d108      	bne.n	8007db8 <HAL_UART_Transmit+0x94>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d104      	bne.n	8007db8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8007dae:	2300      	movs	r3, #0
 8007db0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	61bb      	str	r3, [r7, #24]
 8007db6:	e003      	b.n	8007dc0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007dc0:	e02f      	b.n	8007e22 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	0013      	movs	r3, r2
 8007dcc:	2200      	movs	r2, #0
 8007dce:	2180      	movs	r1, #128	@ 0x80
 8007dd0:	f000 fc42 	bl	8008658 <UART_WaitOnFlagUntilTimeout>
 8007dd4:	1e03      	subs	r3, r0, #0
 8007dd6:	d004      	beq.n	8007de2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007dde:	2303      	movs	r3, #3
 8007de0:	e03b      	b.n	8007e5a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10b      	bne.n	8007e00 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	881b      	ldrh	r3, [r3, #0]
 8007dec:	001a      	movs	r2, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	05d2      	lsls	r2, r2, #23
 8007df4:	0dd2      	lsrs	r2, r2, #23
 8007df6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	3302      	adds	r3, #2
 8007dfc:	61bb      	str	r3, [r7, #24]
 8007dfe:	e007      	b.n	8007e10 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	781a      	ldrb	r2, [r3, #0]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2252      	movs	r2, #82	@ 0x52
 8007e14:	5a9b      	ldrh	r3, [r3, r2]
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	b299      	uxth	r1, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2252      	movs	r2, #82	@ 0x52
 8007e20:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2252      	movs	r2, #82	@ 0x52
 8007e26:	5a9b      	ldrh	r3, [r3, r2]
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1c9      	bne.n	8007dc2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	0013      	movs	r3, r2
 8007e38:	2200      	movs	r2, #0
 8007e3a:	2140      	movs	r1, #64	@ 0x40
 8007e3c:	f000 fc0c 	bl	8008658 <UART_WaitOnFlagUntilTimeout>
 8007e40:	1e03      	subs	r3, r0, #0
 8007e42:	d004      	beq.n	8007e4e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2220      	movs	r2, #32
 8007e48:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e005      	b.n	8007e5a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2220      	movs	r2, #32
 8007e52:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007e54:	2300      	movs	r3, #0
 8007e56:	e000      	b.n	8007e5a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8007e58:	2302      	movs	r3, #2
  }
}
 8007e5a:	0018      	movs	r0, r3
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	b008      	add	sp, #32
 8007e60:	bd80      	pop	{r7, pc}
	...

08007e64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e64:	b5b0      	push	{r4, r5, r7, lr}
 8007e66:	b08e      	sub	sp, #56	@ 0x38
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e6c:	231a      	movs	r3, #26
 8007e6e:	2218      	movs	r2, #24
 8007e70:	189b      	adds	r3, r3, r2
 8007e72:	19db      	adds	r3, r3, r7
 8007e74:	2200      	movs	r2, #0
 8007e76:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	689a      	ldr	r2, [r3, #8]
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	431a      	orrs	r2, r3
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	695b      	ldr	r3, [r3, #20]
 8007e86:	431a      	orrs	r2, r3
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	69db      	ldr	r3, [r3, #28]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4ac3      	ldr	r2, [pc, #780]	@ (80081a4 <UART_SetConfig+0x340>)
 8007e98:	4013      	ands	r3, r2
 8007e9a:	0019      	movs	r1, r3
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	4abe      	ldr	r2, [pc, #760]	@ (80081a8 <UART_SetConfig+0x344>)
 8007eae:	4013      	ands	r3, r2
 8007eb0:	0019      	movs	r1, r3
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	68da      	ldr	r2, [r3, #12]
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	699b      	ldr	r3, [r3, #24]
 8007ec2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4ab8      	ldr	r2, [pc, #736]	@ (80081ac <UART_SetConfig+0x348>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d004      	beq.n	8007ed8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	6a1b      	ldr	r3, [r3, #32]
 8007ed2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	4ab4      	ldr	r2, [pc, #720]	@ (80081b0 <UART_SetConfig+0x34c>)
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	0019      	movs	r1, r3
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007eea:	430a      	orrs	r2, r1
 8007eec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4ab0      	ldr	r2, [pc, #704]	@ (80081b4 <UART_SetConfig+0x350>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d131      	bne.n	8007f5c <UART_SetConfig+0xf8>
 8007ef8:	4baf      	ldr	r3, [pc, #700]	@ (80081b8 <UART_SetConfig+0x354>)
 8007efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007efc:	2203      	movs	r2, #3
 8007efe:	4013      	ands	r3, r2
 8007f00:	2b03      	cmp	r3, #3
 8007f02:	d01d      	beq.n	8007f40 <UART_SetConfig+0xdc>
 8007f04:	d823      	bhi.n	8007f4e <UART_SetConfig+0xea>
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d00c      	beq.n	8007f24 <UART_SetConfig+0xc0>
 8007f0a:	d820      	bhi.n	8007f4e <UART_SetConfig+0xea>
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d002      	beq.n	8007f16 <UART_SetConfig+0xb2>
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d00e      	beq.n	8007f32 <UART_SetConfig+0xce>
 8007f14:	e01b      	b.n	8007f4e <UART_SetConfig+0xea>
 8007f16:	231b      	movs	r3, #27
 8007f18:	2218      	movs	r2, #24
 8007f1a:	189b      	adds	r3, r3, r2
 8007f1c:	19db      	adds	r3, r3, r7
 8007f1e:	2201      	movs	r2, #1
 8007f20:	701a      	strb	r2, [r3, #0]
 8007f22:	e0b4      	b.n	800808e <UART_SetConfig+0x22a>
 8007f24:	231b      	movs	r3, #27
 8007f26:	2218      	movs	r2, #24
 8007f28:	189b      	adds	r3, r3, r2
 8007f2a:	19db      	adds	r3, r3, r7
 8007f2c:	2202      	movs	r2, #2
 8007f2e:	701a      	strb	r2, [r3, #0]
 8007f30:	e0ad      	b.n	800808e <UART_SetConfig+0x22a>
 8007f32:	231b      	movs	r3, #27
 8007f34:	2218      	movs	r2, #24
 8007f36:	189b      	adds	r3, r3, r2
 8007f38:	19db      	adds	r3, r3, r7
 8007f3a:	2204      	movs	r2, #4
 8007f3c:	701a      	strb	r2, [r3, #0]
 8007f3e:	e0a6      	b.n	800808e <UART_SetConfig+0x22a>
 8007f40:	231b      	movs	r3, #27
 8007f42:	2218      	movs	r2, #24
 8007f44:	189b      	adds	r3, r3, r2
 8007f46:	19db      	adds	r3, r3, r7
 8007f48:	2208      	movs	r2, #8
 8007f4a:	701a      	strb	r2, [r3, #0]
 8007f4c:	e09f      	b.n	800808e <UART_SetConfig+0x22a>
 8007f4e:	231b      	movs	r3, #27
 8007f50:	2218      	movs	r2, #24
 8007f52:	189b      	adds	r3, r3, r2
 8007f54:	19db      	adds	r3, r3, r7
 8007f56:	2210      	movs	r2, #16
 8007f58:	701a      	strb	r2, [r3, #0]
 8007f5a:	e098      	b.n	800808e <UART_SetConfig+0x22a>
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a96      	ldr	r2, [pc, #600]	@ (80081bc <UART_SetConfig+0x358>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d131      	bne.n	8007fca <UART_SetConfig+0x166>
 8007f66:	4b94      	ldr	r3, [pc, #592]	@ (80081b8 <UART_SetConfig+0x354>)
 8007f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f6a:	220c      	movs	r2, #12
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	2b0c      	cmp	r3, #12
 8007f70:	d01d      	beq.n	8007fae <UART_SetConfig+0x14a>
 8007f72:	d823      	bhi.n	8007fbc <UART_SetConfig+0x158>
 8007f74:	2b08      	cmp	r3, #8
 8007f76:	d00c      	beq.n	8007f92 <UART_SetConfig+0x12e>
 8007f78:	d820      	bhi.n	8007fbc <UART_SetConfig+0x158>
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d002      	beq.n	8007f84 <UART_SetConfig+0x120>
 8007f7e:	2b04      	cmp	r3, #4
 8007f80:	d00e      	beq.n	8007fa0 <UART_SetConfig+0x13c>
 8007f82:	e01b      	b.n	8007fbc <UART_SetConfig+0x158>
 8007f84:	231b      	movs	r3, #27
 8007f86:	2218      	movs	r2, #24
 8007f88:	189b      	adds	r3, r3, r2
 8007f8a:	19db      	adds	r3, r3, r7
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	701a      	strb	r2, [r3, #0]
 8007f90:	e07d      	b.n	800808e <UART_SetConfig+0x22a>
 8007f92:	231b      	movs	r3, #27
 8007f94:	2218      	movs	r2, #24
 8007f96:	189b      	adds	r3, r3, r2
 8007f98:	19db      	adds	r3, r3, r7
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	701a      	strb	r2, [r3, #0]
 8007f9e:	e076      	b.n	800808e <UART_SetConfig+0x22a>
 8007fa0:	231b      	movs	r3, #27
 8007fa2:	2218      	movs	r2, #24
 8007fa4:	189b      	adds	r3, r3, r2
 8007fa6:	19db      	adds	r3, r3, r7
 8007fa8:	2204      	movs	r2, #4
 8007faa:	701a      	strb	r2, [r3, #0]
 8007fac:	e06f      	b.n	800808e <UART_SetConfig+0x22a>
 8007fae:	231b      	movs	r3, #27
 8007fb0:	2218      	movs	r2, #24
 8007fb2:	189b      	adds	r3, r3, r2
 8007fb4:	19db      	adds	r3, r3, r7
 8007fb6:	2208      	movs	r2, #8
 8007fb8:	701a      	strb	r2, [r3, #0]
 8007fba:	e068      	b.n	800808e <UART_SetConfig+0x22a>
 8007fbc:	231b      	movs	r3, #27
 8007fbe:	2218      	movs	r2, #24
 8007fc0:	189b      	adds	r3, r3, r2
 8007fc2:	19db      	adds	r3, r3, r7
 8007fc4:	2210      	movs	r2, #16
 8007fc6:	701a      	strb	r2, [r3, #0]
 8007fc8:	e061      	b.n	800808e <UART_SetConfig+0x22a>
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a7c      	ldr	r2, [pc, #496]	@ (80081c0 <UART_SetConfig+0x35c>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d106      	bne.n	8007fe2 <UART_SetConfig+0x17e>
 8007fd4:	231b      	movs	r3, #27
 8007fd6:	2218      	movs	r2, #24
 8007fd8:	189b      	adds	r3, r3, r2
 8007fda:	19db      	adds	r3, r3, r7
 8007fdc:	2200      	movs	r2, #0
 8007fde:	701a      	strb	r2, [r3, #0]
 8007fe0:	e055      	b.n	800808e <UART_SetConfig+0x22a>
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a77      	ldr	r2, [pc, #476]	@ (80081c4 <UART_SetConfig+0x360>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d106      	bne.n	8007ffa <UART_SetConfig+0x196>
 8007fec:	231b      	movs	r3, #27
 8007fee:	2218      	movs	r2, #24
 8007ff0:	189b      	adds	r3, r3, r2
 8007ff2:	19db      	adds	r3, r3, r7
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	701a      	strb	r2, [r3, #0]
 8007ff8:	e049      	b.n	800808e <UART_SetConfig+0x22a>
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a6b      	ldr	r2, [pc, #428]	@ (80081ac <UART_SetConfig+0x348>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d13e      	bne.n	8008082 <UART_SetConfig+0x21e>
 8008004:	4b6c      	ldr	r3, [pc, #432]	@ (80081b8 <UART_SetConfig+0x354>)
 8008006:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008008:	23c0      	movs	r3, #192	@ 0xc0
 800800a:	011b      	lsls	r3, r3, #4
 800800c:	4013      	ands	r3, r2
 800800e:	22c0      	movs	r2, #192	@ 0xc0
 8008010:	0112      	lsls	r2, r2, #4
 8008012:	4293      	cmp	r3, r2
 8008014:	d027      	beq.n	8008066 <UART_SetConfig+0x202>
 8008016:	22c0      	movs	r2, #192	@ 0xc0
 8008018:	0112      	lsls	r2, r2, #4
 800801a:	4293      	cmp	r3, r2
 800801c:	d82a      	bhi.n	8008074 <UART_SetConfig+0x210>
 800801e:	2280      	movs	r2, #128	@ 0x80
 8008020:	0112      	lsls	r2, r2, #4
 8008022:	4293      	cmp	r3, r2
 8008024:	d011      	beq.n	800804a <UART_SetConfig+0x1e6>
 8008026:	2280      	movs	r2, #128	@ 0x80
 8008028:	0112      	lsls	r2, r2, #4
 800802a:	4293      	cmp	r3, r2
 800802c:	d822      	bhi.n	8008074 <UART_SetConfig+0x210>
 800802e:	2b00      	cmp	r3, #0
 8008030:	d004      	beq.n	800803c <UART_SetConfig+0x1d8>
 8008032:	2280      	movs	r2, #128	@ 0x80
 8008034:	00d2      	lsls	r2, r2, #3
 8008036:	4293      	cmp	r3, r2
 8008038:	d00e      	beq.n	8008058 <UART_SetConfig+0x1f4>
 800803a:	e01b      	b.n	8008074 <UART_SetConfig+0x210>
 800803c:	231b      	movs	r3, #27
 800803e:	2218      	movs	r2, #24
 8008040:	189b      	adds	r3, r3, r2
 8008042:	19db      	adds	r3, r3, r7
 8008044:	2200      	movs	r2, #0
 8008046:	701a      	strb	r2, [r3, #0]
 8008048:	e021      	b.n	800808e <UART_SetConfig+0x22a>
 800804a:	231b      	movs	r3, #27
 800804c:	2218      	movs	r2, #24
 800804e:	189b      	adds	r3, r3, r2
 8008050:	19db      	adds	r3, r3, r7
 8008052:	2202      	movs	r2, #2
 8008054:	701a      	strb	r2, [r3, #0]
 8008056:	e01a      	b.n	800808e <UART_SetConfig+0x22a>
 8008058:	231b      	movs	r3, #27
 800805a:	2218      	movs	r2, #24
 800805c:	189b      	adds	r3, r3, r2
 800805e:	19db      	adds	r3, r3, r7
 8008060:	2204      	movs	r2, #4
 8008062:	701a      	strb	r2, [r3, #0]
 8008064:	e013      	b.n	800808e <UART_SetConfig+0x22a>
 8008066:	231b      	movs	r3, #27
 8008068:	2218      	movs	r2, #24
 800806a:	189b      	adds	r3, r3, r2
 800806c:	19db      	adds	r3, r3, r7
 800806e:	2208      	movs	r2, #8
 8008070:	701a      	strb	r2, [r3, #0]
 8008072:	e00c      	b.n	800808e <UART_SetConfig+0x22a>
 8008074:	231b      	movs	r3, #27
 8008076:	2218      	movs	r2, #24
 8008078:	189b      	adds	r3, r3, r2
 800807a:	19db      	adds	r3, r3, r7
 800807c:	2210      	movs	r2, #16
 800807e:	701a      	strb	r2, [r3, #0]
 8008080:	e005      	b.n	800808e <UART_SetConfig+0x22a>
 8008082:	231b      	movs	r3, #27
 8008084:	2218      	movs	r2, #24
 8008086:	189b      	adds	r3, r3, r2
 8008088:	19db      	adds	r3, r3, r7
 800808a:	2210      	movs	r2, #16
 800808c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a46      	ldr	r2, [pc, #280]	@ (80081ac <UART_SetConfig+0x348>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d000      	beq.n	800809a <UART_SetConfig+0x236>
 8008098:	e09a      	b.n	80081d0 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800809a:	231b      	movs	r3, #27
 800809c:	2218      	movs	r2, #24
 800809e:	189b      	adds	r3, r3, r2
 80080a0:	19db      	adds	r3, r3, r7
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	2b08      	cmp	r3, #8
 80080a6:	d01d      	beq.n	80080e4 <UART_SetConfig+0x280>
 80080a8:	dc20      	bgt.n	80080ec <UART_SetConfig+0x288>
 80080aa:	2b04      	cmp	r3, #4
 80080ac:	d015      	beq.n	80080da <UART_SetConfig+0x276>
 80080ae:	dc1d      	bgt.n	80080ec <UART_SetConfig+0x288>
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d002      	beq.n	80080ba <UART_SetConfig+0x256>
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d005      	beq.n	80080c4 <UART_SetConfig+0x260>
 80080b8:	e018      	b.n	80080ec <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080ba:	f7ff fc15 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
 80080be:	0003      	movs	r3, r0
 80080c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80080c2:	e01c      	b.n	80080fe <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080c4:	4b3c      	ldr	r3, [pc, #240]	@ (80081b8 <UART_SetConfig+0x354>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2210      	movs	r2, #16
 80080ca:	4013      	ands	r3, r2
 80080cc:	d002      	beq.n	80080d4 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80080ce:	4b3e      	ldr	r3, [pc, #248]	@ (80081c8 <UART_SetConfig+0x364>)
 80080d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80080d2:	e014      	b.n	80080fe <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80080d4:	4b3d      	ldr	r3, [pc, #244]	@ (80081cc <UART_SetConfig+0x368>)
 80080d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80080d8:	e011      	b.n	80080fe <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080da:	f7ff fb55 	bl	8007788 <HAL_RCC_GetSysClockFreq>
 80080de:	0003      	movs	r3, r0
 80080e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80080e2:	e00c      	b.n	80080fe <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080e4:	2380      	movs	r3, #128	@ 0x80
 80080e6:	021b      	lsls	r3, r3, #8
 80080e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80080ea:	e008      	b.n	80080fe <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80080ec:	2300      	movs	r3, #0
 80080ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80080f0:	231a      	movs	r3, #26
 80080f2:	2218      	movs	r2, #24
 80080f4:	189b      	adds	r3, r3, r2
 80080f6:	19db      	adds	r3, r3, r7
 80080f8:	2201      	movs	r2, #1
 80080fa:	701a      	strb	r2, [r3, #0]
        break;
 80080fc:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80080fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008100:	2b00      	cmp	r3, #0
 8008102:	d100      	bne.n	8008106 <UART_SetConfig+0x2a2>
 8008104:	e133      	b.n	800836e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	685a      	ldr	r2, [r3, #4]
 800810a:	0013      	movs	r3, r2
 800810c:	005b      	lsls	r3, r3, #1
 800810e:	189b      	adds	r3, r3, r2
 8008110:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008112:	429a      	cmp	r2, r3
 8008114:	d305      	bcc.n	8008122 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800811c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800811e:	429a      	cmp	r2, r3
 8008120:	d906      	bls.n	8008130 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8008122:	231a      	movs	r3, #26
 8008124:	2218      	movs	r2, #24
 8008126:	189b      	adds	r3, r3, r2
 8008128:	19db      	adds	r3, r3, r7
 800812a:	2201      	movs	r2, #1
 800812c:	701a      	strb	r2, [r3, #0]
 800812e:	e11e      	b.n	800836e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008132:	613b      	str	r3, [r7, #16]
 8008134:	2300      	movs	r3, #0
 8008136:	617b      	str	r3, [r7, #20]
 8008138:	6939      	ldr	r1, [r7, #16]
 800813a:	697a      	ldr	r2, [r7, #20]
 800813c:	000b      	movs	r3, r1
 800813e:	0e1b      	lsrs	r3, r3, #24
 8008140:	0010      	movs	r0, r2
 8008142:	0205      	lsls	r5, r0, #8
 8008144:	431d      	orrs	r5, r3
 8008146:	000b      	movs	r3, r1
 8008148:	021c      	lsls	r4, r3, #8
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	085b      	lsrs	r3, r3, #1
 8008150:	60bb      	str	r3, [r7, #8]
 8008152:	2300      	movs	r3, #0
 8008154:	60fb      	str	r3, [r7, #12]
 8008156:	68b8      	ldr	r0, [r7, #8]
 8008158:	68f9      	ldr	r1, [r7, #12]
 800815a:	1900      	adds	r0, r0, r4
 800815c:	4169      	adcs	r1, r5
 800815e:	69fb      	ldr	r3, [r7, #28]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	603b      	str	r3, [r7, #0]
 8008164:	2300      	movs	r3, #0
 8008166:	607b      	str	r3, [r7, #4]
 8008168:	683a      	ldr	r2, [r7, #0]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f7f8 f8c2 	bl	80002f4 <__aeabi_uldivmod>
 8008170:	0002      	movs	r2, r0
 8008172:	000b      	movs	r3, r1
 8008174:	0013      	movs	r3, r2
 8008176:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008178:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800817a:	23c0      	movs	r3, #192	@ 0xc0
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	429a      	cmp	r2, r3
 8008180:	d309      	bcc.n	8008196 <UART_SetConfig+0x332>
 8008182:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008184:	2380      	movs	r3, #128	@ 0x80
 8008186:	035b      	lsls	r3, r3, #13
 8008188:	429a      	cmp	r2, r3
 800818a:	d204      	bcs.n	8008196 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008192:	60da      	str	r2, [r3, #12]
 8008194:	e0eb      	b.n	800836e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8008196:	231a      	movs	r3, #26
 8008198:	2218      	movs	r2, #24
 800819a:	189b      	adds	r3, r3, r2
 800819c:	19db      	adds	r3, r3, r7
 800819e:	2201      	movs	r2, #1
 80081a0:	701a      	strb	r2, [r3, #0]
 80081a2:	e0e4      	b.n	800836e <UART_SetConfig+0x50a>
 80081a4:	efff69f3 	.word	0xefff69f3
 80081a8:	ffffcfff 	.word	0xffffcfff
 80081ac:	40004800 	.word	0x40004800
 80081b0:	fffff4ff 	.word	0xfffff4ff
 80081b4:	40013800 	.word	0x40013800
 80081b8:	40021000 	.word	0x40021000
 80081bc:	40004400 	.word	0x40004400
 80081c0:	40004c00 	.word	0x40004c00
 80081c4:	40005000 	.word	0x40005000
 80081c8:	003d0900 	.word	0x003d0900
 80081cc:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	69da      	ldr	r2, [r3, #28]
 80081d4:	2380      	movs	r3, #128	@ 0x80
 80081d6:	021b      	lsls	r3, r3, #8
 80081d8:	429a      	cmp	r2, r3
 80081da:	d000      	beq.n	80081de <UART_SetConfig+0x37a>
 80081dc:	e070      	b.n	80082c0 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80081de:	231b      	movs	r3, #27
 80081e0:	2218      	movs	r2, #24
 80081e2:	189b      	adds	r3, r3, r2
 80081e4:	19db      	adds	r3, r3, r7
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	2b08      	cmp	r3, #8
 80081ea:	d822      	bhi.n	8008232 <UART_SetConfig+0x3ce>
 80081ec:	009a      	lsls	r2, r3, #2
 80081ee:	4b67      	ldr	r3, [pc, #412]	@ (800838c <UART_SetConfig+0x528>)
 80081f0:	18d3      	adds	r3, r2, r3
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081f6:	f7ff fb77 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
 80081fa:	0003      	movs	r3, r0
 80081fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80081fe:	e021      	b.n	8008244 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008200:	f7ff fb88 	bl	8007914 <HAL_RCC_GetPCLK2Freq>
 8008204:	0003      	movs	r3, r0
 8008206:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008208:	e01c      	b.n	8008244 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800820a:	4b61      	ldr	r3, [pc, #388]	@ (8008390 <UART_SetConfig+0x52c>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2210      	movs	r2, #16
 8008210:	4013      	ands	r3, r2
 8008212:	d002      	beq.n	800821a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8008214:	4b5f      	ldr	r3, [pc, #380]	@ (8008394 <UART_SetConfig+0x530>)
 8008216:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008218:	e014      	b.n	8008244 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800821a:	4b5f      	ldr	r3, [pc, #380]	@ (8008398 <UART_SetConfig+0x534>)
 800821c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800821e:	e011      	b.n	8008244 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008220:	f7ff fab2 	bl	8007788 <HAL_RCC_GetSysClockFreq>
 8008224:	0003      	movs	r3, r0
 8008226:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008228:	e00c      	b.n	8008244 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800822a:	2380      	movs	r3, #128	@ 0x80
 800822c:	021b      	lsls	r3, r3, #8
 800822e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008230:	e008      	b.n	8008244 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8008232:	2300      	movs	r3, #0
 8008234:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8008236:	231a      	movs	r3, #26
 8008238:	2218      	movs	r2, #24
 800823a:	189b      	adds	r3, r3, r2
 800823c:	19db      	adds	r3, r3, r7
 800823e:	2201      	movs	r2, #1
 8008240:	701a      	strb	r2, [r3, #0]
        break;
 8008242:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008246:	2b00      	cmp	r3, #0
 8008248:	d100      	bne.n	800824c <UART_SetConfig+0x3e8>
 800824a:	e090      	b.n	800836e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800824c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800824e:	005a      	lsls	r2, r3, #1
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	085b      	lsrs	r3, r3, #1
 8008256:	18d2      	adds	r2, r2, r3
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	0019      	movs	r1, r3
 800825e:	0010      	movs	r0, r2
 8008260:	f7f7 ff5a 	bl	8000118 <__udivsi3>
 8008264:	0003      	movs	r3, r0
 8008266:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800826a:	2b0f      	cmp	r3, #15
 800826c:	d921      	bls.n	80082b2 <UART_SetConfig+0x44e>
 800826e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008270:	2380      	movs	r3, #128	@ 0x80
 8008272:	025b      	lsls	r3, r3, #9
 8008274:	429a      	cmp	r2, r3
 8008276:	d21c      	bcs.n	80082b2 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800827a:	b29a      	uxth	r2, r3
 800827c:	200e      	movs	r0, #14
 800827e:	2418      	movs	r4, #24
 8008280:	1903      	adds	r3, r0, r4
 8008282:	19db      	adds	r3, r3, r7
 8008284:	210f      	movs	r1, #15
 8008286:	438a      	bics	r2, r1
 8008288:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800828a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800828c:	085b      	lsrs	r3, r3, #1
 800828e:	b29b      	uxth	r3, r3
 8008290:	2207      	movs	r2, #7
 8008292:	4013      	ands	r3, r2
 8008294:	b299      	uxth	r1, r3
 8008296:	1903      	adds	r3, r0, r4
 8008298:	19db      	adds	r3, r3, r7
 800829a:	1902      	adds	r2, r0, r4
 800829c:	19d2      	adds	r2, r2, r7
 800829e:	8812      	ldrh	r2, [r2, #0]
 80082a0:	430a      	orrs	r2, r1
 80082a2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	1902      	adds	r2, r0, r4
 80082aa:	19d2      	adds	r2, r2, r7
 80082ac:	8812      	ldrh	r2, [r2, #0]
 80082ae:	60da      	str	r2, [r3, #12]
 80082b0:	e05d      	b.n	800836e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80082b2:	231a      	movs	r3, #26
 80082b4:	2218      	movs	r2, #24
 80082b6:	189b      	adds	r3, r3, r2
 80082b8:	19db      	adds	r3, r3, r7
 80082ba:	2201      	movs	r2, #1
 80082bc:	701a      	strb	r2, [r3, #0]
 80082be:	e056      	b.n	800836e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80082c0:	231b      	movs	r3, #27
 80082c2:	2218      	movs	r2, #24
 80082c4:	189b      	adds	r3, r3, r2
 80082c6:	19db      	adds	r3, r3, r7
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	2b08      	cmp	r3, #8
 80082cc:	d822      	bhi.n	8008314 <UART_SetConfig+0x4b0>
 80082ce:	009a      	lsls	r2, r3, #2
 80082d0:	4b32      	ldr	r3, [pc, #200]	@ (800839c <UART_SetConfig+0x538>)
 80082d2:	18d3      	adds	r3, r2, r3
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082d8:	f7ff fb06 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
 80082dc:	0003      	movs	r3, r0
 80082de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80082e0:	e021      	b.n	8008326 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082e2:	f7ff fb17 	bl	8007914 <HAL_RCC_GetPCLK2Freq>
 80082e6:	0003      	movs	r3, r0
 80082e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80082ea:	e01c      	b.n	8008326 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082ec:	4b28      	ldr	r3, [pc, #160]	@ (8008390 <UART_SetConfig+0x52c>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2210      	movs	r2, #16
 80082f2:	4013      	ands	r3, r2
 80082f4:	d002      	beq.n	80082fc <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80082f6:	4b27      	ldr	r3, [pc, #156]	@ (8008394 <UART_SetConfig+0x530>)
 80082f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80082fa:	e014      	b.n	8008326 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80082fc:	4b26      	ldr	r3, [pc, #152]	@ (8008398 <UART_SetConfig+0x534>)
 80082fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008300:	e011      	b.n	8008326 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008302:	f7ff fa41 	bl	8007788 <HAL_RCC_GetSysClockFreq>
 8008306:	0003      	movs	r3, r0
 8008308:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800830a:	e00c      	b.n	8008326 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800830c:	2380      	movs	r3, #128	@ 0x80
 800830e:	021b      	lsls	r3, r3, #8
 8008310:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008312:	e008      	b.n	8008326 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8008314:	2300      	movs	r3, #0
 8008316:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8008318:	231a      	movs	r3, #26
 800831a:	2218      	movs	r2, #24
 800831c:	189b      	adds	r3, r3, r2
 800831e:	19db      	adds	r3, r3, r7
 8008320:	2201      	movs	r2, #1
 8008322:	701a      	strb	r2, [r3, #0]
        break;
 8008324:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8008326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008328:	2b00      	cmp	r3, #0
 800832a:	d020      	beq.n	800836e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	085a      	lsrs	r2, r3, #1
 8008332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008334:	18d2      	adds	r2, r2, r3
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	0019      	movs	r1, r3
 800833c:	0010      	movs	r0, r2
 800833e:	f7f7 feeb 	bl	8000118 <__udivsi3>
 8008342:	0003      	movs	r3, r0
 8008344:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008348:	2b0f      	cmp	r3, #15
 800834a:	d90a      	bls.n	8008362 <UART_SetConfig+0x4fe>
 800834c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800834e:	2380      	movs	r3, #128	@ 0x80
 8008350:	025b      	lsls	r3, r3, #9
 8008352:	429a      	cmp	r2, r3
 8008354:	d205      	bcs.n	8008362 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008358:	b29a      	uxth	r2, r3
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	60da      	str	r2, [r3, #12]
 8008360:	e005      	b.n	800836e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8008362:	231a      	movs	r3, #26
 8008364:	2218      	movs	r2, #24
 8008366:	189b      	adds	r3, r3, r2
 8008368:	19db      	adds	r3, r3, r7
 800836a:	2201      	movs	r2, #1
 800836c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	2200      	movs	r2, #0
 8008372:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	2200      	movs	r2, #0
 8008378:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800837a:	231a      	movs	r3, #26
 800837c:	2218      	movs	r2, #24
 800837e:	189b      	adds	r3, r3, r2
 8008380:	19db      	adds	r3, r3, r7
 8008382:	781b      	ldrb	r3, [r3, #0]
}
 8008384:	0018      	movs	r0, r3
 8008386:	46bd      	mov	sp, r7
 8008388:	b00e      	add	sp, #56	@ 0x38
 800838a:	bdb0      	pop	{r4, r5, r7, pc}
 800838c:	08008bd4 	.word	0x08008bd4
 8008390:	40021000 	.word	0x40021000
 8008394:	003d0900 	.word	0x003d0900
 8008398:	00f42400 	.word	0x00f42400
 800839c:	08008bf8 	.word	0x08008bf8

080083a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ac:	2201      	movs	r2, #1
 80083ae:	4013      	ands	r3, r2
 80083b0:	d00b      	beq.n	80083ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	4a4a      	ldr	r2, [pc, #296]	@ (80084e4 <UART_AdvFeatureConfig+0x144>)
 80083ba:	4013      	ands	r3, r2
 80083bc:	0019      	movs	r1, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	430a      	orrs	r2, r1
 80083c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ce:	2202      	movs	r2, #2
 80083d0:	4013      	ands	r3, r2
 80083d2:	d00b      	beq.n	80083ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	4a43      	ldr	r2, [pc, #268]	@ (80084e8 <UART_AdvFeatureConfig+0x148>)
 80083dc:	4013      	ands	r3, r2
 80083de:	0019      	movs	r1, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	430a      	orrs	r2, r1
 80083ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083f0:	2204      	movs	r2, #4
 80083f2:	4013      	ands	r3, r2
 80083f4:	d00b      	beq.n	800840e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	4a3b      	ldr	r2, [pc, #236]	@ (80084ec <UART_AdvFeatureConfig+0x14c>)
 80083fe:	4013      	ands	r3, r2
 8008400:	0019      	movs	r1, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	430a      	orrs	r2, r1
 800840c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008412:	2208      	movs	r2, #8
 8008414:	4013      	ands	r3, r2
 8008416:	d00b      	beq.n	8008430 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	4a34      	ldr	r2, [pc, #208]	@ (80084f0 <UART_AdvFeatureConfig+0x150>)
 8008420:	4013      	ands	r3, r2
 8008422:	0019      	movs	r1, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	430a      	orrs	r2, r1
 800842e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008434:	2210      	movs	r2, #16
 8008436:	4013      	ands	r3, r2
 8008438:	d00b      	beq.n	8008452 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	4a2c      	ldr	r2, [pc, #176]	@ (80084f4 <UART_AdvFeatureConfig+0x154>)
 8008442:	4013      	ands	r3, r2
 8008444:	0019      	movs	r1, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	430a      	orrs	r2, r1
 8008450:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008456:	2220      	movs	r2, #32
 8008458:	4013      	ands	r3, r2
 800845a:	d00b      	beq.n	8008474 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	4a25      	ldr	r2, [pc, #148]	@ (80084f8 <UART_AdvFeatureConfig+0x158>)
 8008464:	4013      	ands	r3, r2
 8008466:	0019      	movs	r1, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	430a      	orrs	r2, r1
 8008472:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008478:	2240      	movs	r2, #64	@ 0x40
 800847a:	4013      	ands	r3, r2
 800847c:	d01d      	beq.n	80084ba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	4a1d      	ldr	r2, [pc, #116]	@ (80084fc <UART_AdvFeatureConfig+0x15c>)
 8008486:	4013      	ands	r3, r2
 8008488:	0019      	movs	r1, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	430a      	orrs	r2, r1
 8008494:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800849a:	2380      	movs	r3, #128	@ 0x80
 800849c:	035b      	lsls	r3, r3, #13
 800849e:	429a      	cmp	r2, r3
 80084a0:	d10b      	bne.n	80084ba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	4a15      	ldr	r2, [pc, #84]	@ (8008500 <UART_AdvFeatureConfig+0x160>)
 80084aa:	4013      	ands	r3, r2
 80084ac:	0019      	movs	r1, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	430a      	orrs	r2, r1
 80084b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084be:	2280      	movs	r2, #128	@ 0x80
 80084c0:	4013      	ands	r3, r2
 80084c2:	d00b      	beq.n	80084dc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	4a0e      	ldr	r2, [pc, #56]	@ (8008504 <UART_AdvFeatureConfig+0x164>)
 80084cc:	4013      	ands	r3, r2
 80084ce:	0019      	movs	r1, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	430a      	orrs	r2, r1
 80084da:	605a      	str	r2, [r3, #4]
  }
}
 80084dc:	46c0      	nop			@ (mov r8, r8)
 80084de:	46bd      	mov	sp, r7
 80084e0:	b002      	add	sp, #8
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	fffdffff 	.word	0xfffdffff
 80084e8:	fffeffff 	.word	0xfffeffff
 80084ec:	fffbffff 	.word	0xfffbffff
 80084f0:	ffff7fff 	.word	0xffff7fff
 80084f4:	ffffefff 	.word	0xffffefff
 80084f8:	ffffdfff 	.word	0xffffdfff
 80084fc:	ffefffff 	.word	0xffefffff
 8008500:	ff9fffff 	.word	0xff9fffff
 8008504:	fff7ffff 	.word	0xfff7ffff

08008508 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b092      	sub	sp, #72	@ 0x48
 800850c:	af02      	add	r7, sp, #8
 800850e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2284      	movs	r2, #132	@ 0x84
 8008514:	2100      	movs	r1, #0
 8008516:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008518:	f7fd f8f8 	bl	800570c <HAL_GetTick>
 800851c:	0003      	movs	r3, r0
 800851e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2208      	movs	r2, #8
 8008528:	4013      	ands	r3, r2
 800852a:	2b08      	cmp	r3, #8
 800852c:	d12c      	bne.n	8008588 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800852e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008530:	2280      	movs	r2, #128	@ 0x80
 8008532:	0391      	lsls	r1, r2, #14
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	4a46      	ldr	r2, [pc, #280]	@ (8008650 <UART_CheckIdleState+0x148>)
 8008538:	9200      	str	r2, [sp, #0]
 800853a:	2200      	movs	r2, #0
 800853c:	f000 f88c 	bl	8008658 <UART_WaitOnFlagUntilTimeout>
 8008540:	1e03      	subs	r3, r0, #0
 8008542:	d021      	beq.n	8008588 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008544:	f3ef 8310 	mrs	r3, PRIMASK
 8008548:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800854a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800854c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800854e:	2301      	movs	r3, #1
 8008550:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008554:	f383 8810 	msr	PRIMASK, r3
}
 8008558:	46c0      	nop			@ (mov r8, r8)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2180      	movs	r1, #128	@ 0x80
 8008566:	438a      	bics	r2, r1
 8008568:	601a      	str	r2, [r3, #0]
 800856a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800856c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800856e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008570:	f383 8810 	msr	PRIMASK, r3
}
 8008574:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2220      	movs	r2, #32
 800857a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2278      	movs	r2, #120	@ 0x78
 8008580:	2100      	movs	r1, #0
 8008582:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008584:	2303      	movs	r3, #3
 8008586:	e05f      	b.n	8008648 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2204      	movs	r2, #4
 8008590:	4013      	ands	r3, r2
 8008592:	2b04      	cmp	r3, #4
 8008594:	d146      	bne.n	8008624 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008598:	2280      	movs	r2, #128	@ 0x80
 800859a:	03d1      	lsls	r1, r2, #15
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	4a2c      	ldr	r2, [pc, #176]	@ (8008650 <UART_CheckIdleState+0x148>)
 80085a0:	9200      	str	r2, [sp, #0]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f000 f858 	bl	8008658 <UART_WaitOnFlagUntilTimeout>
 80085a8:	1e03      	subs	r3, r0, #0
 80085aa:	d03b      	beq.n	8008624 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085ac:	f3ef 8310 	mrs	r3, PRIMASK
 80085b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80085b2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80085b6:	2301      	movs	r3, #1
 80085b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	f383 8810 	msr	PRIMASK, r3
}
 80085c0:	46c0      	nop			@ (mov r8, r8)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4921      	ldr	r1, [pc, #132]	@ (8008654 <UART_CheckIdleState+0x14c>)
 80085ce:	400a      	ands	r2, r1
 80085d0:	601a      	str	r2, [r3, #0]
 80085d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	f383 8810 	msr	PRIMASK, r3
}
 80085dc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085de:	f3ef 8310 	mrs	r3, PRIMASK
 80085e2:	61bb      	str	r3, [r7, #24]
  return(result);
 80085e4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80085e8:	2301      	movs	r3, #1
 80085ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	f383 8810 	msr	PRIMASK, r3
}
 80085f2:	46c0      	nop			@ (mov r8, r8)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	689a      	ldr	r2, [r3, #8]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2101      	movs	r1, #1
 8008600:	438a      	bics	r2, r1
 8008602:	609a      	str	r2, [r3, #8]
 8008604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008606:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008608:	6a3b      	ldr	r3, [r7, #32]
 800860a:	f383 8810 	msr	PRIMASK, r3
}
 800860e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2280      	movs	r2, #128	@ 0x80
 8008614:	2120      	movs	r1, #32
 8008616:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2278      	movs	r2, #120	@ 0x78
 800861c:	2100      	movs	r1, #0
 800861e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008620:	2303      	movs	r3, #3
 8008622:	e011      	b.n	8008648 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2220      	movs	r2, #32
 8008628:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2280      	movs	r2, #128	@ 0x80
 800862e:	2120      	movs	r1, #32
 8008630:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2278      	movs	r2, #120	@ 0x78
 8008642:	2100      	movs	r1, #0
 8008644:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008646:	2300      	movs	r3, #0
}
 8008648:	0018      	movs	r0, r3
 800864a:	46bd      	mov	sp, r7
 800864c:	b010      	add	sp, #64	@ 0x40
 800864e:	bd80      	pop	{r7, pc}
 8008650:	01ffffff 	.word	0x01ffffff
 8008654:	fffffedf 	.word	0xfffffedf

08008658 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	603b      	str	r3, [r7, #0]
 8008664:	1dfb      	adds	r3, r7, #7
 8008666:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008668:	e04b      	b.n	8008702 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	3301      	adds	r3, #1
 800866e:	d048      	beq.n	8008702 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008670:	f7fd f84c 	bl	800570c <HAL_GetTick>
 8008674:	0002      	movs	r2, r0
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	69ba      	ldr	r2, [r7, #24]
 800867c:	429a      	cmp	r2, r3
 800867e:	d302      	bcc.n	8008686 <UART_WaitOnFlagUntilTimeout+0x2e>
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d101      	bne.n	800868a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008686:	2303      	movs	r3, #3
 8008688:	e04b      	b.n	8008722 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2204      	movs	r2, #4
 8008692:	4013      	ands	r3, r2
 8008694:	d035      	beq.n	8008702 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	69db      	ldr	r3, [r3, #28]
 800869c:	2208      	movs	r2, #8
 800869e:	4013      	ands	r3, r2
 80086a0:	2b08      	cmp	r3, #8
 80086a2:	d111      	bne.n	80086c8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2208      	movs	r2, #8
 80086aa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	0018      	movs	r0, r3
 80086b0:	f000 f83c 	bl	800872c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2284      	movs	r2, #132	@ 0x84
 80086b8:	2108      	movs	r1, #8
 80086ba:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2278      	movs	r2, #120	@ 0x78
 80086c0:	2100      	movs	r1, #0
 80086c2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	e02c      	b.n	8008722 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	69da      	ldr	r2, [r3, #28]
 80086ce:	2380      	movs	r3, #128	@ 0x80
 80086d0:	011b      	lsls	r3, r3, #4
 80086d2:	401a      	ands	r2, r3
 80086d4:	2380      	movs	r3, #128	@ 0x80
 80086d6:	011b      	lsls	r3, r3, #4
 80086d8:	429a      	cmp	r2, r3
 80086da:	d112      	bne.n	8008702 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2280      	movs	r2, #128	@ 0x80
 80086e2:	0112      	lsls	r2, r2, #4
 80086e4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	0018      	movs	r0, r3
 80086ea:	f000 f81f 	bl	800872c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2284      	movs	r2, #132	@ 0x84
 80086f2:	2120      	movs	r1, #32
 80086f4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2278      	movs	r2, #120	@ 0x78
 80086fa:	2100      	movs	r1, #0
 80086fc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80086fe:	2303      	movs	r3, #3
 8008700:	e00f      	b.n	8008722 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	69db      	ldr	r3, [r3, #28]
 8008708:	68ba      	ldr	r2, [r7, #8]
 800870a:	4013      	ands	r3, r2
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	425a      	negs	r2, r3
 8008712:	4153      	adcs	r3, r2
 8008714:	b2db      	uxtb	r3, r3
 8008716:	001a      	movs	r2, r3
 8008718:	1dfb      	adds	r3, r7, #7
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	429a      	cmp	r2, r3
 800871e:	d0a4      	beq.n	800866a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	0018      	movs	r0, r3
 8008724:	46bd      	mov	sp, r7
 8008726:	b004      	add	sp, #16
 8008728:	bd80      	pop	{r7, pc}
	...

0800872c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b08e      	sub	sp, #56	@ 0x38
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008734:	f3ef 8310 	mrs	r3, PRIMASK
 8008738:	617b      	str	r3, [r7, #20]
  return(result);
 800873a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800873c:	637b      	str	r3, [r7, #52]	@ 0x34
 800873e:	2301      	movs	r3, #1
 8008740:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	f383 8810 	msr	PRIMASK, r3
}
 8008748:	46c0      	nop			@ (mov r8, r8)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4926      	ldr	r1, [pc, #152]	@ (80087f0 <UART_EndRxTransfer+0xc4>)
 8008756:	400a      	ands	r2, r1
 8008758:	601a      	str	r2, [r3, #0]
 800875a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800875c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	f383 8810 	msr	PRIMASK, r3
}
 8008764:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008766:	f3ef 8310 	mrs	r3, PRIMASK
 800876a:	623b      	str	r3, [r7, #32]
  return(result);
 800876c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800876e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008770:	2301      	movs	r3, #1
 8008772:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008776:	f383 8810 	msr	PRIMASK, r3
}
 800877a:	46c0      	nop			@ (mov r8, r8)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	689a      	ldr	r2, [r3, #8]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2101      	movs	r1, #1
 8008788:	438a      	bics	r2, r1
 800878a:	609a      	str	r2, [r3, #8]
 800878c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800878e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008792:	f383 8810 	msr	PRIMASK, r3
}
 8008796:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800879c:	2b01      	cmp	r3, #1
 800879e:	d118      	bne.n	80087d2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087a0:	f3ef 8310 	mrs	r3, PRIMASK
 80087a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80087a6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087aa:	2301      	movs	r3, #1
 80087ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f383 8810 	msr	PRIMASK, r3
}
 80087b4:	46c0      	nop			@ (mov r8, r8)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2110      	movs	r1, #16
 80087c2:	438a      	bics	r2, r1
 80087c4:	601a      	str	r2, [r3, #0]
 80087c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	f383 8810 	msr	PRIMASK, r3
}
 80087d0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2280      	movs	r2, #128	@ 0x80
 80087d6:	2120      	movs	r1, #32
 80087d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80087e6:	46c0      	nop			@ (mov r8, r8)
 80087e8:	46bd      	mov	sp, r7
 80087ea:	b00e      	add	sp, #56	@ 0x38
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	46c0      	nop			@ (mov r8, r8)
 80087f0:	fffffedf 	.word	0xfffffedf

080087f4 <memset>:
 80087f4:	0003      	movs	r3, r0
 80087f6:	1882      	adds	r2, r0, r2
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d100      	bne.n	80087fe <memset+0xa>
 80087fc:	4770      	bx	lr
 80087fe:	7019      	strb	r1, [r3, #0]
 8008800:	3301      	adds	r3, #1
 8008802:	e7f9      	b.n	80087f8 <memset+0x4>

08008804 <__libc_init_array>:
 8008804:	b570      	push	{r4, r5, r6, lr}
 8008806:	2600      	movs	r6, #0
 8008808:	4c0c      	ldr	r4, [pc, #48]	@ (800883c <__libc_init_array+0x38>)
 800880a:	4d0d      	ldr	r5, [pc, #52]	@ (8008840 <__libc_init_array+0x3c>)
 800880c:	1b64      	subs	r4, r4, r5
 800880e:	10a4      	asrs	r4, r4, #2
 8008810:	42a6      	cmp	r6, r4
 8008812:	d109      	bne.n	8008828 <__libc_init_array+0x24>
 8008814:	2600      	movs	r6, #0
 8008816:	f000 f823 	bl	8008860 <_init>
 800881a:	4c0a      	ldr	r4, [pc, #40]	@ (8008844 <__libc_init_array+0x40>)
 800881c:	4d0a      	ldr	r5, [pc, #40]	@ (8008848 <__libc_init_array+0x44>)
 800881e:	1b64      	subs	r4, r4, r5
 8008820:	10a4      	asrs	r4, r4, #2
 8008822:	42a6      	cmp	r6, r4
 8008824:	d105      	bne.n	8008832 <__libc_init_array+0x2e>
 8008826:	bd70      	pop	{r4, r5, r6, pc}
 8008828:	00b3      	lsls	r3, r6, #2
 800882a:	58eb      	ldr	r3, [r5, r3]
 800882c:	4798      	blx	r3
 800882e:	3601      	adds	r6, #1
 8008830:	e7ee      	b.n	8008810 <__libc_init_array+0xc>
 8008832:	00b3      	lsls	r3, r6, #2
 8008834:	58eb      	ldr	r3, [r5, r3]
 8008836:	4798      	blx	r3
 8008838:	3601      	adds	r6, #1
 800883a:	e7f2      	b.n	8008822 <__libc_init_array+0x1e>
 800883c:	08008c24 	.word	0x08008c24
 8008840:	08008c24 	.word	0x08008c24
 8008844:	08008c28 	.word	0x08008c28
 8008848:	08008c24 	.word	0x08008c24

0800884c <memcpy>:
 800884c:	2300      	movs	r3, #0
 800884e:	b510      	push	{r4, lr}
 8008850:	429a      	cmp	r2, r3
 8008852:	d100      	bne.n	8008856 <memcpy+0xa>
 8008854:	bd10      	pop	{r4, pc}
 8008856:	5ccc      	ldrb	r4, [r1, r3]
 8008858:	54c4      	strb	r4, [r0, r3]
 800885a:	3301      	adds	r3, #1
 800885c:	e7f8      	b.n	8008850 <memcpy+0x4>
	...

08008860 <_init>:
 8008860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008862:	46c0      	nop			@ (mov r8, r8)
 8008864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008866:	bc08      	pop	{r3}
 8008868:	469e      	mov	lr, r3
 800886a:	4770      	bx	lr

0800886c <_fini>:
 800886c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800886e:	46c0      	nop			@ (mov r8, r8)
 8008870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008872:	bc08      	pop	{r3}
 8008874:	469e      	mov	lr, r3
 8008876:	4770      	bx	lr
