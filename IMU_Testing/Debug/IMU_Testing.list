
IMU_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082f4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000036c  080083b8  080083b8  000093b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008724  08008724  0000a00c  2**0
                  CONTENTS
  4 .ARM          00000008  08008724  08008724  00009724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800872c  0800872c  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800872c  0800872c  0000972c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008730  08008730  00009730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08008734  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  08008740  0000a00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08008740  0000a108  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c92c  00000000  00000000  0000a034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bc9  00000000  00000000  00016960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  00018530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ac  00000000  00000000  00019038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014de4  00000000  00000000  000198e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e7d1  00000000  00000000  0002e6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f7ba  00000000  00000000  0003ce99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc653  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b6c  00000000  00000000  000bc698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000bf204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800839c 	.word	0x0800839c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800839c 	.word	0x0800839c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0010      	movs	r0, r2
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	0019      	movs	r1, r3
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f001 f915 	bl	8001460 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f001 f855 	bl	80012f0 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f001 f907 	bl	8001460 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 f8fd 	bl	8001460 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 f87f 	bl	8001378 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			@ (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 f875 	bl	8001378 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			@ (mov r8, r8)

0800029c <__aeabi_ldivmod>:
 800029c:	2b00      	cmp	r3, #0
 800029e:	d115      	bne.n	80002cc <__aeabi_ldivmod+0x30>
 80002a0:	2a00      	cmp	r2, #0
 80002a2:	d113      	bne.n	80002cc <__aeabi_ldivmod+0x30>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	db06      	blt.n	80002b6 <__aeabi_ldivmod+0x1a>
 80002a8:	dc01      	bgt.n	80002ae <__aeabi_ldivmod+0x12>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d006      	beq.n	80002bc <__aeabi_ldivmod+0x20>
 80002ae:	2000      	movs	r0, #0
 80002b0:	43c0      	mvns	r0, r0
 80002b2:	0841      	lsrs	r1, r0, #1
 80002b4:	e002      	b.n	80002bc <__aeabi_ldivmod+0x20>
 80002b6:	2180      	movs	r1, #128	@ 0x80
 80002b8:	0609      	lsls	r1, r1, #24
 80002ba:	2000      	movs	r0, #0
 80002bc:	b407      	push	{r0, r1, r2}
 80002be:	4802      	ldr	r0, [pc, #8]	@ (80002c8 <__aeabi_ldivmod+0x2c>)
 80002c0:	a101      	add	r1, pc, #4	@ (adr r1, 80002c8 <__aeabi_ldivmod+0x2c>)
 80002c2:	1840      	adds	r0, r0, r1
 80002c4:	9002      	str	r0, [sp, #8]
 80002c6:	bd03      	pop	{r0, r1, pc}
 80002c8:	ffffff55 	.word	0xffffff55
 80002cc:	b403      	push	{r0, r1}
 80002ce:	4668      	mov	r0, sp
 80002d0:	b501      	push	{r0, lr}
 80002d2:	9802      	ldr	r0, [sp, #8]
 80002d4:	f000 f970 	bl	80005b8 <__gnu_ldivmod_helper>
 80002d8:	9b01      	ldr	r3, [sp, #4]
 80002da:	469e      	mov	lr, r3
 80002dc:	b002      	add	sp, #8
 80002de:	bc0c      	pop	{r2, r3}
 80002e0:	4770      	bx	lr
 80002e2:	46c0      	nop			@ (mov r8, r8)

080002e4 <__aeabi_uldivmod>:
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d111      	bne.n	800030c <__aeabi_uldivmod+0x28>
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	d10f      	bne.n	800030c <__aeabi_uldivmod+0x28>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d100      	bne.n	80002f2 <__aeabi_uldivmod+0xe>
 80002f0:	2800      	cmp	r0, #0
 80002f2:	d002      	beq.n	80002fa <__aeabi_uldivmod+0x16>
 80002f4:	2100      	movs	r1, #0
 80002f6:	43c9      	mvns	r1, r1
 80002f8:	0008      	movs	r0, r1
 80002fa:	b407      	push	{r0, r1, r2}
 80002fc:	4802      	ldr	r0, [pc, #8]	@ (8000308 <__aeabi_uldivmod+0x24>)
 80002fe:	a102      	add	r1, pc, #8	@ (adr r1, 8000308 <__aeabi_uldivmod+0x24>)
 8000300:	1840      	adds	r0, r0, r1
 8000302:	9002      	str	r0, [sp, #8]
 8000304:	bd03      	pop	{r0, r1, pc}
 8000306:	46c0      	nop			@ (mov r8, r8)
 8000308:	ffffff15 	.word	0xffffff15
 800030c:	b403      	push	{r0, r1}
 800030e:	4668      	mov	r0, sp
 8000310:	b501      	push	{r0, lr}
 8000312:	9802      	ldr	r0, [sp, #8]
 8000314:	f000 f884 	bl	8000420 <__udivmoddi4>
 8000318:	9b01      	ldr	r3, [sp, #4]
 800031a:	469e      	mov	lr, r3
 800031c:	b002      	add	sp, #8
 800031e:	bc0c      	pop	{r2, r3}
 8000320:	4770      	bx	lr
 8000322:	46c0      	nop			@ (mov r8, r8)

08000324 <__aeabi_lmul>:
 8000324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000326:	46ce      	mov	lr, r9
 8000328:	4699      	mov	r9, r3
 800032a:	0c03      	lsrs	r3, r0, #16
 800032c:	469c      	mov	ip, r3
 800032e:	0413      	lsls	r3, r2, #16
 8000330:	4647      	mov	r7, r8
 8000332:	0c1b      	lsrs	r3, r3, #16
 8000334:	001d      	movs	r5, r3
 8000336:	000e      	movs	r6, r1
 8000338:	4661      	mov	r1, ip
 800033a:	0404      	lsls	r4, r0, #16
 800033c:	0c24      	lsrs	r4, r4, #16
 800033e:	b580      	push	{r7, lr}
 8000340:	0007      	movs	r7, r0
 8000342:	0c10      	lsrs	r0, r2, #16
 8000344:	434b      	muls	r3, r1
 8000346:	4365      	muls	r5, r4
 8000348:	4341      	muls	r1, r0
 800034a:	4360      	muls	r0, r4
 800034c:	0c2c      	lsrs	r4, r5, #16
 800034e:	18c0      	adds	r0, r0, r3
 8000350:	1824      	adds	r4, r4, r0
 8000352:	468c      	mov	ip, r1
 8000354:	42a3      	cmp	r3, r4
 8000356:	d903      	bls.n	8000360 <__aeabi_lmul+0x3c>
 8000358:	2380      	movs	r3, #128	@ 0x80
 800035a:	025b      	lsls	r3, r3, #9
 800035c:	4698      	mov	r8, r3
 800035e:	44c4      	add	ip, r8
 8000360:	4649      	mov	r1, r9
 8000362:	4379      	muls	r1, r7
 8000364:	4356      	muls	r6, r2
 8000366:	0c23      	lsrs	r3, r4, #16
 8000368:	042d      	lsls	r5, r5, #16
 800036a:	0c2d      	lsrs	r5, r5, #16
 800036c:	1989      	adds	r1, r1, r6
 800036e:	4463      	add	r3, ip
 8000370:	0424      	lsls	r4, r4, #16
 8000372:	1960      	adds	r0, r4, r5
 8000374:	18c9      	adds	r1, r1, r3
 8000376:	bcc0      	pop	{r6, r7}
 8000378:	46b9      	mov	r9, r7
 800037a:	46b0      	mov	r8, r6
 800037c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800037e:	46c0      	nop			@ (mov r8, r8)

08000380 <__aeabi_d2lz>:
 8000380:	b570      	push	{r4, r5, r6, lr}
 8000382:	2200      	movs	r2, #0
 8000384:	2300      	movs	r3, #0
 8000386:	0004      	movs	r4, r0
 8000388:	000d      	movs	r5, r1
 800038a:	f7ff ff5f 	bl	800024c <__aeabi_dcmplt>
 800038e:	2800      	cmp	r0, #0
 8000390:	d108      	bne.n	80003a4 <__aeabi_d2lz+0x24>
 8000392:	0020      	movs	r0, r4
 8000394:	0029      	movs	r1, r5
 8000396:	f000 f80f 	bl	80003b8 <__aeabi_d2ulz>
 800039a:	0002      	movs	r2, r0
 800039c:	000b      	movs	r3, r1
 800039e:	0010      	movs	r0, r2
 80003a0:	0019      	movs	r1, r3
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	2380      	movs	r3, #128	@ 0x80
 80003a6:	061b      	lsls	r3, r3, #24
 80003a8:	18e9      	adds	r1, r5, r3
 80003aa:	0020      	movs	r0, r4
 80003ac:	f000 f804 	bl	80003b8 <__aeabi_d2ulz>
 80003b0:	2300      	movs	r3, #0
 80003b2:	4242      	negs	r2, r0
 80003b4:	418b      	sbcs	r3, r1
 80003b6:	e7f2      	b.n	800039e <__aeabi_d2lz+0x1e>

080003b8 <__aeabi_d2ulz>:
 80003b8:	b570      	push	{r4, r5, r6, lr}
 80003ba:	2200      	movs	r2, #0
 80003bc:	4b0b      	ldr	r3, [pc, #44]	@ (80003ec <__aeabi_d2ulz+0x34>)
 80003be:	000d      	movs	r5, r1
 80003c0:	0004      	movs	r4, r0
 80003c2:	f001 f8bf 	bl	8001544 <__aeabi_dmul>
 80003c6:	f001 ffd9 	bl	800237c <__aeabi_d2uiz>
 80003ca:	0006      	movs	r6, r0
 80003cc:	f001 ff88 	bl	80022e0 <__aeabi_ui2d>
 80003d0:	2200      	movs	r2, #0
 80003d2:	4b07      	ldr	r3, [pc, #28]	@ (80003f0 <__aeabi_d2ulz+0x38>)
 80003d4:	f001 f8b6 	bl	8001544 <__aeabi_dmul>
 80003d8:	0002      	movs	r2, r0
 80003da:	000b      	movs	r3, r1
 80003dc:	0020      	movs	r0, r4
 80003de:	0029      	movs	r1, r5
 80003e0:	f001 fb78 	bl	8001ad4 <__aeabi_dsub>
 80003e4:	f001 ffca 	bl	800237c <__aeabi_d2uiz>
 80003e8:	0031      	movs	r1, r6
 80003ea:	bd70      	pop	{r4, r5, r6, pc}
 80003ec:	3df00000 	.word	0x3df00000
 80003f0:	41f00000 	.word	0x41f00000

080003f4 <__aeabi_l2d>:
 80003f4:	b570      	push	{r4, r5, r6, lr}
 80003f6:	0006      	movs	r6, r0
 80003f8:	0008      	movs	r0, r1
 80003fa:	f001 ff43 	bl	8002284 <__aeabi_i2d>
 80003fe:	2200      	movs	r2, #0
 8000400:	4b06      	ldr	r3, [pc, #24]	@ (800041c <__aeabi_l2d+0x28>)
 8000402:	f001 f89f 	bl	8001544 <__aeabi_dmul>
 8000406:	000d      	movs	r5, r1
 8000408:	0004      	movs	r4, r0
 800040a:	0030      	movs	r0, r6
 800040c:	f001 ff68 	bl	80022e0 <__aeabi_ui2d>
 8000410:	002b      	movs	r3, r5
 8000412:	0022      	movs	r2, r4
 8000414:	f000 f8ee 	bl	80005f4 <__aeabi_dadd>
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	46c0      	nop			@ (mov r8, r8)
 800041c:	41f00000 	.word	0x41f00000

08000420 <__udivmoddi4>:
 8000420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000422:	4657      	mov	r7, sl
 8000424:	464e      	mov	r6, r9
 8000426:	4645      	mov	r5, r8
 8000428:	46de      	mov	lr, fp
 800042a:	b5e0      	push	{r5, r6, r7, lr}
 800042c:	0004      	movs	r4, r0
 800042e:	000d      	movs	r5, r1
 8000430:	4692      	mov	sl, r2
 8000432:	4699      	mov	r9, r3
 8000434:	b083      	sub	sp, #12
 8000436:	428b      	cmp	r3, r1
 8000438:	d830      	bhi.n	800049c <__udivmoddi4+0x7c>
 800043a:	d02d      	beq.n	8000498 <__udivmoddi4+0x78>
 800043c:	4649      	mov	r1, r9
 800043e:	4650      	mov	r0, sl
 8000440:	f001 ff90 	bl	8002364 <__clzdi2>
 8000444:	0029      	movs	r1, r5
 8000446:	0006      	movs	r6, r0
 8000448:	0020      	movs	r0, r4
 800044a:	f001 ff8b 	bl	8002364 <__clzdi2>
 800044e:	1a33      	subs	r3, r6, r0
 8000450:	4698      	mov	r8, r3
 8000452:	3b20      	subs	r3, #32
 8000454:	d434      	bmi.n	80004c0 <__udivmoddi4+0xa0>
 8000456:	469b      	mov	fp, r3
 8000458:	4653      	mov	r3, sl
 800045a:	465a      	mov	r2, fp
 800045c:	4093      	lsls	r3, r2
 800045e:	4642      	mov	r2, r8
 8000460:	001f      	movs	r7, r3
 8000462:	4653      	mov	r3, sl
 8000464:	4093      	lsls	r3, r2
 8000466:	001e      	movs	r6, r3
 8000468:	42af      	cmp	r7, r5
 800046a:	d83b      	bhi.n	80004e4 <__udivmoddi4+0xc4>
 800046c:	42af      	cmp	r7, r5
 800046e:	d100      	bne.n	8000472 <__udivmoddi4+0x52>
 8000470:	e079      	b.n	8000566 <__udivmoddi4+0x146>
 8000472:	465b      	mov	r3, fp
 8000474:	1ba4      	subs	r4, r4, r6
 8000476:	41bd      	sbcs	r5, r7
 8000478:	2b00      	cmp	r3, #0
 800047a:	da00      	bge.n	800047e <__udivmoddi4+0x5e>
 800047c:	e076      	b.n	800056c <__udivmoddi4+0x14c>
 800047e:	2200      	movs	r2, #0
 8000480:	2300      	movs	r3, #0
 8000482:	9200      	str	r2, [sp, #0]
 8000484:	9301      	str	r3, [sp, #4]
 8000486:	2301      	movs	r3, #1
 8000488:	465a      	mov	r2, fp
 800048a:	4093      	lsls	r3, r2
 800048c:	9301      	str	r3, [sp, #4]
 800048e:	2301      	movs	r3, #1
 8000490:	4642      	mov	r2, r8
 8000492:	4093      	lsls	r3, r2
 8000494:	9300      	str	r3, [sp, #0]
 8000496:	e029      	b.n	80004ec <__udivmoddi4+0xcc>
 8000498:	4282      	cmp	r2, r0
 800049a:	d9cf      	bls.n	800043c <__udivmoddi4+0x1c>
 800049c:	2200      	movs	r2, #0
 800049e:	2300      	movs	r3, #0
 80004a0:	9200      	str	r2, [sp, #0]
 80004a2:	9301      	str	r3, [sp, #4]
 80004a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <__udivmoddi4+0x8e>
 80004aa:	601c      	str	r4, [r3, #0]
 80004ac:	605d      	str	r5, [r3, #4]
 80004ae:	9800      	ldr	r0, [sp, #0]
 80004b0:	9901      	ldr	r1, [sp, #4]
 80004b2:	b003      	add	sp, #12
 80004b4:	bcf0      	pop	{r4, r5, r6, r7}
 80004b6:	46bb      	mov	fp, r7
 80004b8:	46b2      	mov	sl, r6
 80004ba:	46a9      	mov	r9, r5
 80004bc:	46a0      	mov	r8, r4
 80004be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004c0:	4642      	mov	r2, r8
 80004c2:	469b      	mov	fp, r3
 80004c4:	2320      	movs	r3, #32
 80004c6:	1a9b      	subs	r3, r3, r2
 80004c8:	4652      	mov	r2, sl
 80004ca:	40da      	lsrs	r2, r3
 80004cc:	4641      	mov	r1, r8
 80004ce:	0013      	movs	r3, r2
 80004d0:	464a      	mov	r2, r9
 80004d2:	408a      	lsls	r2, r1
 80004d4:	0017      	movs	r7, r2
 80004d6:	4642      	mov	r2, r8
 80004d8:	431f      	orrs	r7, r3
 80004da:	4653      	mov	r3, sl
 80004dc:	4093      	lsls	r3, r2
 80004de:	001e      	movs	r6, r3
 80004e0:	42af      	cmp	r7, r5
 80004e2:	d9c3      	bls.n	800046c <__udivmoddi4+0x4c>
 80004e4:	2200      	movs	r2, #0
 80004e6:	2300      	movs	r3, #0
 80004e8:	9200      	str	r2, [sp, #0]
 80004ea:	9301      	str	r3, [sp, #4]
 80004ec:	4643      	mov	r3, r8
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d0d8      	beq.n	80004a4 <__udivmoddi4+0x84>
 80004f2:	07fb      	lsls	r3, r7, #31
 80004f4:	0872      	lsrs	r2, r6, #1
 80004f6:	431a      	orrs	r2, r3
 80004f8:	4646      	mov	r6, r8
 80004fa:	087b      	lsrs	r3, r7, #1
 80004fc:	e00e      	b.n	800051c <__udivmoddi4+0xfc>
 80004fe:	42ab      	cmp	r3, r5
 8000500:	d101      	bne.n	8000506 <__udivmoddi4+0xe6>
 8000502:	42a2      	cmp	r2, r4
 8000504:	d80c      	bhi.n	8000520 <__udivmoddi4+0x100>
 8000506:	1aa4      	subs	r4, r4, r2
 8000508:	419d      	sbcs	r5, r3
 800050a:	2001      	movs	r0, #1
 800050c:	1924      	adds	r4, r4, r4
 800050e:	416d      	adcs	r5, r5
 8000510:	2100      	movs	r1, #0
 8000512:	3e01      	subs	r6, #1
 8000514:	1824      	adds	r4, r4, r0
 8000516:	414d      	adcs	r5, r1
 8000518:	2e00      	cmp	r6, #0
 800051a:	d006      	beq.n	800052a <__udivmoddi4+0x10a>
 800051c:	42ab      	cmp	r3, r5
 800051e:	d9ee      	bls.n	80004fe <__udivmoddi4+0xde>
 8000520:	3e01      	subs	r6, #1
 8000522:	1924      	adds	r4, r4, r4
 8000524:	416d      	adcs	r5, r5
 8000526:	2e00      	cmp	r6, #0
 8000528:	d1f8      	bne.n	800051c <__udivmoddi4+0xfc>
 800052a:	9800      	ldr	r0, [sp, #0]
 800052c:	9901      	ldr	r1, [sp, #4]
 800052e:	465b      	mov	r3, fp
 8000530:	1900      	adds	r0, r0, r4
 8000532:	4169      	adcs	r1, r5
 8000534:	2b00      	cmp	r3, #0
 8000536:	db24      	blt.n	8000582 <__udivmoddi4+0x162>
 8000538:	002b      	movs	r3, r5
 800053a:	465a      	mov	r2, fp
 800053c:	4644      	mov	r4, r8
 800053e:	40d3      	lsrs	r3, r2
 8000540:	002a      	movs	r2, r5
 8000542:	40e2      	lsrs	r2, r4
 8000544:	001c      	movs	r4, r3
 8000546:	465b      	mov	r3, fp
 8000548:	0015      	movs	r5, r2
 800054a:	2b00      	cmp	r3, #0
 800054c:	db2a      	blt.n	80005a4 <__udivmoddi4+0x184>
 800054e:	0026      	movs	r6, r4
 8000550:	409e      	lsls	r6, r3
 8000552:	0033      	movs	r3, r6
 8000554:	0026      	movs	r6, r4
 8000556:	4647      	mov	r7, r8
 8000558:	40be      	lsls	r6, r7
 800055a:	0032      	movs	r2, r6
 800055c:	1a80      	subs	r0, r0, r2
 800055e:	4199      	sbcs	r1, r3
 8000560:	9000      	str	r0, [sp, #0]
 8000562:	9101      	str	r1, [sp, #4]
 8000564:	e79e      	b.n	80004a4 <__udivmoddi4+0x84>
 8000566:	42a3      	cmp	r3, r4
 8000568:	d8bc      	bhi.n	80004e4 <__udivmoddi4+0xc4>
 800056a:	e782      	b.n	8000472 <__udivmoddi4+0x52>
 800056c:	4642      	mov	r2, r8
 800056e:	2320      	movs	r3, #32
 8000570:	2100      	movs	r1, #0
 8000572:	1a9b      	subs	r3, r3, r2
 8000574:	2200      	movs	r2, #0
 8000576:	9100      	str	r1, [sp, #0]
 8000578:	9201      	str	r2, [sp, #4]
 800057a:	2201      	movs	r2, #1
 800057c:	40da      	lsrs	r2, r3
 800057e:	9201      	str	r2, [sp, #4]
 8000580:	e785      	b.n	800048e <__udivmoddi4+0x6e>
 8000582:	4642      	mov	r2, r8
 8000584:	2320      	movs	r3, #32
 8000586:	1a9b      	subs	r3, r3, r2
 8000588:	002a      	movs	r2, r5
 800058a:	4646      	mov	r6, r8
 800058c:	409a      	lsls	r2, r3
 800058e:	0023      	movs	r3, r4
 8000590:	40f3      	lsrs	r3, r6
 8000592:	4644      	mov	r4, r8
 8000594:	4313      	orrs	r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	40e2      	lsrs	r2, r4
 800059a:	001c      	movs	r4, r3
 800059c:	465b      	mov	r3, fp
 800059e:	0015      	movs	r5, r2
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	dad4      	bge.n	800054e <__udivmoddi4+0x12e>
 80005a4:	4642      	mov	r2, r8
 80005a6:	002f      	movs	r7, r5
 80005a8:	2320      	movs	r3, #32
 80005aa:	0026      	movs	r6, r4
 80005ac:	4097      	lsls	r7, r2
 80005ae:	1a9b      	subs	r3, r3, r2
 80005b0:	40de      	lsrs	r6, r3
 80005b2:	003b      	movs	r3, r7
 80005b4:	4333      	orrs	r3, r6
 80005b6:	e7cd      	b.n	8000554 <__udivmoddi4+0x134>

080005b8 <__gnu_ldivmod_helper>:
 80005b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ba:	46ce      	mov	lr, r9
 80005bc:	4647      	mov	r7, r8
 80005be:	b580      	push	{r7, lr}
 80005c0:	4691      	mov	r9, r2
 80005c2:	4698      	mov	r8, r3
 80005c4:	0004      	movs	r4, r0
 80005c6:	000d      	movs	r5, r1
 80005c8:	f001 fef6 	bl	80023b8 <__divdi3>
 80005cc:	0007      	movs	r7, r0
 80005ce:	000e      	movs	r6, r1
 80005d0:	0002      	movs	r2, r0
 80005d2:	000b      	movs	r3, r1
 80005d4:	4648      	mov	r0, r9
 80005d6:	4641      	mov	r1, r8
 80005d8:	f7ff fea4 	bl	8000324 <__aeabi_lmul>
 80005dc:	1a24      	subs	r4, r4, r0
 80005de:	418d      	sbcs	r5, r1
 80005e0:	9b08      	ldr	r3, [sp, #32]
 80005e2:	0038      	movs	r0, r7
 80005e4:	0031      	movs	r1, r6
 80005e6:	601c      	str	r4, [r3, #0]
 80005e8:	605d      	str	r5, [r3, #4]
 80005ea:	bcc0      	pop	{r6, r7}
 80005ec:	46b9      	mov	r9, r7
 80005ee:	46b0      	mov	r8, r6
 80005f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)

080005f4 <__aeabi_dadd>:
 80005f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005f6:	4657      	mov	r7, sl
 80005f8:	464e      	mov	r6, r9
 80005fa:	4645      	mov	r5, r8
 80005fc:	46de      	mov	lr, fp
 80005fe:	b5e0      	push	{r5, r6, r7, lr}
 8000600:	b083      	sub	sp, #12
 8000602:	9000      	str	r0, [sp, #0]
 8000604:	9101      	str	r1, [sp, #4]
 8000606:	030c      	lsls	r4, r1, #12
 8000608:	004f      	lsls	r7, r1, #1
 800060a:	0fce      	lsrs	r6, r1, #31
 800060c:	0a61      	lsrs	r1, r4, #9
 800060e:	9c00      	ldr	r4, [sp, #0]
 8000610:	031d      	lsls	r5, r3, #12
 8000612:	0f64      	lsrs	r4, r4, #29
 8000614:	430c      	orrs	r4, r1
 8000616:	9900      	ldr	r1, [sp, #0]
 8000618:	9200      	str	r2, [sp, #0]
 800061a:	9301      	str	r3, [sp, #4]
 800061c:	00c8      	lsls	r0, r1, #3
 800061e:	0059      	lsls	r1, r3, #1
 8000620:	0d4b      	lsrs	r3, r1, #21
 8000622:	4699      	mov	r9, r3
 8000624:	9a00      	ldr	r2, [sp, #0]
 8000626:	9b01      	ldr	r3, [sp, #4]
 8000628:	0a6d      	lsrs	r5, r5, #9
 800062a:	0fd9      	lsrs	r1, r3, #31
 800062c:	0f53      	lsrs	r3, r2, #29
 800062e:	432b      	orrs	r3, r5
 8000630:	469a      	mov	sl, r3
 8000632:	9b00      	ldr	r3, [sp, #0]
 8000634:	0d7f      	lsrs	r7, r7, #21
 8000636:	00da      	lsls	r2, r3, #3
 8000638:	4694      	mov	ip, r2
 800063a:	464a      	mov	r2, r9
 800063c:	46b0      	mov	r8, r6
 800063e:	1aba      	subs	r2, r7, r2
 8000640:	428e      	cmp	r6, r1
 8000642:	d100      	bne.n	8000646 <__aeabi_dadd+0x52>
 8000644:	e0b0      	b.n	80007a8 <__aeabi_dadd+0x1b4>
 8000646:	2a00      	cmp	r2, #0
 8000648:	dc00      	bgt.n	800064c <__aeabi_dadd+0x58>
 800064a:	e078      	b.n	800073e <__aeabi_dadd+0x14a>
 800064c:	4649      	mov	r1, r9
 800064e:	2900      	cmp	r1, #0
 8000650:	d100      	bne.n	8000654 <__aeabi_dadd+0x60>
 8000652:	e0e9      	b.n	8000828 <__aeabi_dadd+0x234>
 8000654:	49c9      	ldr	r1, [pc, #804]	@ (800097c <__aeabi_dadd+0x388>)
 8000656:	428f      	cmp	r7, r1
 8000658:	d100      	bne.n	800065c <__aeabi_dadd+0x68>
 800065a:	e195      	b.n	8000988 <__aeabi_dadd+0x394>
 800065c:	2501      	movs	r5, #1
 800065e:	2a38      	cmp	r2, #56	@ 0x38
 8000660:	dc16      	bgt.n	8000690 <__aeabi_dadd+0x9c>
 8000662:	2180      	movs	r1, #128	@ 0x80
 8000664:	4653      	mov	r3, sl
 8000666:	0409      	lsls	r1, r1, #16
 8000668:	430b      	orrs	r3, r1
 800066a:	469a      	mov	sl, r3
 800066c:	2a1f      	cmp	r2, #31
 800066e:	dd00      	ble.n	8000672 <__aeabi_dadd+0x7e>
 8000670:	e1e7      	b.n	8000a42 <__aeabi_dadd+0x44e>
 8000672:	2120      	movs	r1, #32
 8000674:	4655      	mov	r5, sl
 8000676:	1a8b      	subs	r3, r1, r2
 8000678:	4661      	mov	r1, ip
 800067a:	409d      	lsls	r5, r3
 800067c:	40d1      	lsrs	r1, r2
 800067e:	430d      	orrs	r5, r1
 8000680:	4661      	mov	r1, ip
 8000682:	4099      	lsls	r1, r3
 8000684:	1e4b      	subs	r3, r1, #1
 8000686:	4199      	sbcs	r1, r3
 8000688:	4653      	mov	r3, sl
 800068a:	40d3      	lsrs	r3, r2
 800068c:	430d      	orrs	r5, r1
 800068e:	1ae4      	subs	r4, r4, r3
 8000690:	1b45      	subs	r5, r0, r5
 8000692:	42a8      	cmp	r0, r5
 8000694:	4180      	sbcs	r0, r0
 8000696:	4240      	negs	r0, r0
 8000698:	1a24      	subs	r4, r4, r0
 800069a:	0223      	lsls	r3, r4, #8
 800069c:	d400      	bmi.n	80006a0 <__aeabi_dadd+0xac>
 800069e:	e10f      	b.n	80008c0 <__aeabi_dadd+0x2cc>
 80006a0:	0264      	lsls	r4, r4, #9
 80006a2:	0a64      	lsrs	r4, r4, #9
 80006a4:	2c00      	cmp	r4, #0
 80006a6:	d100      	bne.n	80006aa <__aeabi_dadd+0xb6>
 80006a8:	e139      	b.n	800091e <__aeabi_dadd+0x32a>
 80006aa:	0020      	movs	r0, r4
 80006ac:	f001 fe3c 	bl	8002328 <__clzsi2>
 80006b0:	0003      	movs	r3, r0
 80006b2:	3b08      	subs	r3, #8
 80006b4:	2120      	movs	r1, #32
 80006b6:	0028      	movs	r0, r5
 80006b8:	1aca      	subs	r2, r1, r3
 80006ba:	40d0      	lsrs	r0, r2
 80006bc:	409c      	lsls	r4, r3
 80006be:	0002      	movs	r2, r0
 80006c0:	409d      	lsls	r5, r3
 80006c2:	4322      	orrs	r2, r4
 80006c4:	429f      	cmp	r7, r3
 80006c6:	dd00      	ble.n	80006ca <__aeabi_dadd+0xd6>
 80006c8:	e173      	b.n	80009b2 <__aeabi_dadd+0x3be>
 80006ca:	1bd8      	subs	r0, r3, r7
 80006cc:	3001      	adds	r0, #1
 80006ce:	1a09      	subs	r1, r1, r0
 80006d0:	002c      	movs	r4, r5
 80006d2:	408d      	lsls	r5, r1
 80006d4:	40c4      	lsrs	r4, r0
 80006d6:	1e6b      	subs	r3, r5, #1
 80006d8:	419d      	sbcs	r5, r3
 80006da:	0013      	movs	r3, r2
 80006dc:	40c2      	lsrs	r2, r0
 80006de:	408b      	lsls	r3, r1
 80006e0:	4325      	orrs	r5, r4
 80006e2:	2700      	movs	r7, #0
 80006e4:	0014      	movs	r4, r2
 80006e6:	431d      	orrs	r5, r3
 80006e8:	076b      	lsls	r3, r5, #29
 80006ea:	d009      	beq.n	8000700 <__aeabi_dadd+0x10c>
 80006ec:	230f      	movs	r3, #15
 80006ee:	402b      	ands	r3, r5
 80006f0:	2b04      	cmp	r3, #4
 80006f2:	d005      	beq.n	8000700 <__aeabi_dadd+0x10c>
 80006f4:	1d2b      	adds	r3, r5, #4
 80006f6:	42ab      	cmp	r3, r5
 80006f8:	41ad      	sbcs	r5, r5
 80006fa:	426d      	negs	r5, r5
 80006fc:	1964      	adds	r4, r4, r5
 80006fe:	001d      	movs	r5, r3
 8000700:	0223      	lsls	r3, r4, #8
 8000702:	d400      	bmi.n	8000706 <__aeabi_dadd+0x112>
 8000704:	e12d      	b.n	8000962 <__aeabi_dadd+0x36e>
 8000706:	4a9d      	ldr	r2, [pc, #628]	@ (800097c <__aeabi_dadd+0x388>)
 8000708:	3701      	adds	r7, #1
 800070a:	4297      	cmp	r7, r2
 800070c:	d100      	bne.n	8000710 <__aeabi_dadd+0x11c>
 800070e:	e0d3      	b.n	80008b8 <__aeabi_dadd+0x2c4>
 8000710:	4646      	mov	r6, r8
 8000712:	499b      	ldr	r1, [pc, #620]	@ (8000980 <__aeabi_dadd+0x38c>)
 8000714:	08ed      	lsrs	r5, r5, #3
 8000716:	4021      	ands	r1, r4
 8000718:	074a      	lsls	r2, r1, #29
 800071a:	432a      	orrs	r2, r5
 800071c:	057c      	lsls	r4, r7, #21
 800071e:	024d      	lsls	r5, r1, #9
 8000720:	0b2d      	lsrs	r5, r5, #12
 8000722:	0d64      	lsrs	r4, r4, #21
 8000724:	0524      	lsls	r4, r4, #20
 8000726:	432c      	orrs	r4, r5
 8000728:	07f6      	lsls	r6, r6, #31
 800072a:	4334      	orrs	r4, r6
 800072c:	0010      	movs	r0, r2
 800072e:	0021      	movs	r1, r4
 8000730:	b003      	add	sp, #12
 8000732:	bcf0      	pop	{r4, r5, r6, r7}
 8000734:	46bb      	mov	fp, r7
 8000736:	46b2      	mov	sl, r6
 8000738:	46a9      	mov	r9, r5
 800073a:	46a0      	mov	r8, r4
 800073c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800073e:	2a00      	cmp	r2, #0
 8000740:	d100      	bne.n	8000744 <__aeabi_dadd+0x150>
 8000742:	e084      	b.n	800084e <__aeabi_dadd+0x25a>
 8000744:	464a      	mov	r2, r9
 8000746:	1bd2      	subs	r2, r2, r7
 8000748:	2f00      	cmp	r7, #0
 800074a:	d000      	beq.n	800074e <__aeabi_dadd+0x15a>
 800074c:	e16d      	b.n	8000a2a <__aeabi_dadd+0x436>
 800074e:	0025      	movs	r5, r4
 8000750:	4305      	orrs	r5, r0
 8000752:	d100      	bne.n	8000756 <__aeabi_dadd+0x162>
 8000754:	e127      	b.n	80009a6 <__aeabi_dadd+0x3b2>
 8000756:	1e56      	subs	r6, r2, #1
 8000758:	2a01      	cmp	r2, #1
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x16a>
 800075c:	e23b      	b.n	8000bd6 <__aeabi_dadd+0x5e2>
 800075e:	4d87      	ldr	r5, [pc, #540]	@ (800097c <__aeabi_dadd+0x388>)
 8000760:	42aa      	cmp	r2, r5
 8000762:	d100      	bne.n	8000766 <__aeabi_dadd+0x172>
 8000764:	e26a      	b.n	8000c3c <__aeabi_dadd+0x648>
 8000766:	2501      	movs	r5, #1
 8000768:	2e38      	cmp	r6, #56	@ 0x38
 800076a:	dc12      	bgt.n	8000792 <__aeabi_dadd+0x19e>
 800076c:	0032      	movs	r2, r6
 800076e:	2a1f      	cmp	r2, #31
 8000770:	dd00      	ble.n	8000774 <__aeabi_dadd+0x180>
 8000772:	e1f8      	b.n	8000b66 <__aeabi_dadd+0x572>
 8000774:	2620      	movs	r6, #32
 8000776:	0025      	movs	r5, r4
 8000778:	1ab6      	subs	r6, r6, r2
 800077a:	0007      	movs	r7, r0
 800077c:	4653      	mov	r3, sl
 800077e:	40b0      	lsls	r0, r6
 8000780:	40d4      	lsrs	r4, r2
 8000782:	40b5      	lsls	r5, r6
 8000784:	40d7      	lsrs	r7, r2
 8000786:	1e46      	subs	r6, r0, #1
 8000788:	41b0      	sbcs	r0, r6
 800078a:	1b1b      	subs	r3, r3, r4
 800078c:	469a      	mov	sl, r3
 800078e:	433d      	orrs	r5, r7
 8000790:	4305      	orrs	r5, r0
 8000792:	4662      	mov	r2, ip
 8000794:	1b55      	subs	r5, r2, r5
 8000796:	45ac      	cmp	ip, r5
 8000798:	4192      	sbcs	r2, r2
 800079a:	4653      	mov	r3, sl
 800079c:	4252      	negs	r2, r2
 800079e:	000e      	movs	r6, r1
 80007a0:	464f      	mov	r7, r9
 80007a2:	4688      	mov	r8, r1
 80007a4:	1a9c      	subs	r4, r3, r2
 80007a6:	e778      	b.n	800069a <__aeabi_dadd+0xa6>
 80007a8:	2a00      	cmp	r2, #0
 80007aa:	dc00      	bgt.n	80007ae <__aeabi_dadd+0x1ba>
 80007ac:	e08e      	b.n	80008cc <__aeabi_dadd+0x2d8>
 80007ae:	4649      	mov	r1, r9
 80007b0:	2900      	cmp	r1, #0
 80007b2:	d175      	bne.n	80008a0 <__aeabi_dadd+0x2ac>
 80007b4:	4661      	mov	r1, ip
 80007b6:	4653      	mov	r3, sl
 80007b8:	4319      	orrs	r1, r3
 80007ba:	d100      	bne.n	80007be <__aeabi_dadd+0x1ca>
 80007bc:	e0f6      	b.n	80009ac <__aeabi_dadd+0x3b8>
 80007be:	1e51      	subs	r1, r2, #1
 80007c0:	2a01      	cmp	r2, #1
 80007c2:	d100      	bne.n	80007c6 <__aeabi_dadd+0x1d2>
 80007c4:	e191      	b.n	8000aea <__aeabi_dadd+0x4f6>
 80007c6:	4d6d      	ldr	r5, [pc, #436]	@ (800097c <__aeabi_dadd+0x388>)
 80007c8:	42aa      	cmp	r2, r5
 80007ca:	d100      	bne.n	80007ce <__aeabi_dadd+0x1da>
 80007cc:	e0dc      	b.n	8000988 <__aeabi_dadd+0x394>
 80007ce:	2501      	movs	r5, #1
 80007d0:	2938      	cmp	r1, #56	@ 0x38
 80007d2:	dc14      	bgt.n	80007fe <__aeabi_dadd+0x20a>
 80007d4:	000a      	movs	r2, r1
 80007d6:	2a1f      	cmp	r2, #31
 80007d8:	dd00      	ble.n	80007dc <__aeabi_dadd+0x1e8>
 80007da:	e1a2      	b.n	8000b22 <__aeabi_dadd+0x52e>
 80007dc:	2120      	movs	r1, #32
 80007de:	4653      	mov	r3, sl
 80007e0:	1a89      	subs	r1, r1, r2
 80007e2:	408b      	lsls	r3, r1
 80007e4:	001d      	movs	r5, r3
 80007e6:	4663      	mov	r3, ip
 80007e8:	40d3      	lsrs	r3, r2
 80007ea:	431d      	orrs	r5, r3
 80007ec:	4663      	mov	r3, ip
 80007ee:	408b      	lsls	r3, r1
 80007f0:	0019      	movs	r1, r3
 80007f2:	1e4b      	subs	r3, r1, #1
 80007f4:	4199      	sbcs	r1, r3
 80007f6:	4653      	mov	r3, sl
 80007f8:	40d3      	lsrs	r3, r2
 80007fa:	430d      	orrs	r5, r1
 80007fc:	18e4      	adds	r4, r4, r3
 80007fe:	182d      	adds	r5, r5, r0
 8000800:	4285      	cmp	r5, r0
 8000802:	4180      	sbcs	r0, r0
 8000804:	4240      	negs	r0, r0
 8000806:	1824      	adds	r4, r4, r0
 8000808:	0223      	lsls	r3, r4, #8
 800080a:	d559      	bpl.n	80008c0 <__aeabi_dadd+0x2cc>
 800080c:	4b5b      	ldr	r3, [pc, #364]	@ (800097c <__aeabi_dadd+0x388>)
 800080e:	3701      	adds	r7, #1
 8000810:	429f      	cmp	r7, r3
 8000812:	d051      	beq.n	80008b8 <__aeabi_dadd+0x2c4>
 8000814:	2101      	movs	r1, #1
 8000816:	4b5a      	ldr	r3, [pc, #360]	@ (8000980 <__aeabi_dadd+0x38c>)
 8000818:	086a      	lsrs	r2, r5, #1
 800081a:	401c      	ands	r4, r3
 800081c:	4029      	ands	r1, r5
 800081e:	430a      	orrs	r2, r1
 8000820:	07e5      	lsls	r5, r4, #31
 8000822:	4315      	orrs	r5, r2
 8000824:	0864      	lsrs	r4, r4, #1
 8000826:	e75f      	b.n	80006e8 <__aeabi_dadd+0xf4>
 8000828:	4661      	mov	r1, ip
 800082a:	4653      	mov	r3, sl
 800082c:	4319      	orrs	r1, r3
 800082e:	d100      	bne.n	8000832 <__aeabi_dadd+0x23e>
 8000830:	e0bc      	b.n	80009ac <__aeabi_dadd+0x3b8>
 8000832:	1e51      	subs	r1, r2, #1
 8000834:	2a01      	cmp	r2, #1
 8000836:	d100      	bne.n	800083a <__aeabi_dadd+0x246>
 8000838:	e164      	b.n	8000b04 <__aeabi_dadd+0x510>
 800083a:	4d50      	ldr	r5, [pc, #320]	@ (800097c <__aeabi_dadd+0x388>)
 800083c:	42aa      	cmp	r2, r5
 800083e:	d100      	bne.n	8000842 <__aeabi_dadd+0x24e>
 8000840:	e16a      	b.n	8000b18 <__aeabi_dadd+0x524>
 8000842:	2501      	movs	r5, #1
 8000844:	2938      	cmp	r1, #56	@ 0x38
 8000846:	dd00      	ble.n	800084a <__aeabi_dadd+0x256>
 8000848:	e722      	b.n	8000690 <__aeabi_dadd+0x9c>
 800084a:	000a      	movs	r2, r1
 800084c:	e70e      	b.n	800066c <__aeabi_dadd+0x78>
 800084e:	4a4d      	ldr	r2, [pc, #308]	@ (8000984 <__aeabi_dadd+0x390>)
 8000850:	1c7d      	adds	r5, r7, #1
 8000852:	4215      	tst	r5, r2
 8000854:	d000      	beq.n	8000858 <__aeabi_dadd+0x264>
 8000856:	e0d0      	b.n	80009fa <__aeabi_dadd+0x406>
 8000858:	0025      	movs	r5, r4
 800085a:	4662      	mov	r2, ip
 800085c:	4653      	mov	r3, sl
 800085e:	4305      	orrs	r5, r0
 8000860:	431a      	orrs	r2, r3
 8000862:	2f00      	cmp	r7, #0
 8000864:	d000      	beq.n	8000868 <__aeabi_dadd+0x274>
 8000866:	e137      	b.n	8000ad8 <__aeabi_dadd+0x4e4>
 8000868:	2d00      	cmp	r5, #0
 800086a:	d100      	bne.n	800086e <__aeabi_dadd+0x27a>
 800086c:	e1a8      	b.n	8000bc0 <__aeabi_dadd+0x5cc>
 800086e:	2a00      	cmp	r2, #0
 8000870:	d100      	bne.n	8000874 <__aeabi_dadd+0x280>
 8000872:	e16a      	b.n	8000b4a <__aeabi_dadd+0x556>
 8000874:	4663      	mov	r3, ip
 8000876:	1ac5      	subs	r5, r0, r3
 8000878:	4653      	mov	r3, sl
 800087a:	1ae2      	subs	r2, r4, r3
 800087c:	42a8      	cmp	r0, r5
 800087e:	419b      	sbcs	r3, r3
 8000880:	425b      	negs	r3, r3
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	021a      	lsls	r2, r3, #8
 8000886:	d400      	bmi.n	800088a <__aeabi_dadd+0x296>
 8000888:	e203      	b.n	8000c92 <__aeabi_dadd+0x69e>
 800088a:	4663      	mov	r3, ip
 800088c:	1a1d      	subs	r5, r3, r0
 800088e:	45ac      	cmp	ip, r5
 8000890:	4192      	sbcs	r2, r2
 8000892:	4653      	mov	r3, sl
 8000894:	4252      	negs	r2, r2
 8000896:	1b1c      	subs	r4, r3, r4
 8000898:	000e      	movs	r6, r1
 800089a:	4688      	mov	r8, r1
 800089c:	1aa4      	subs	r4, r4, r2
 800089e:	e723      	b.n	80006e8 <__aeabi_dadd+0xf4>
 80008a0:	4936      	ldr	r1, [pc, #216]	@ (800097c <__aeabi_dadd+0x388>)
 80008a2:	428f      	cmp	r7, r1
 80008a4:	d070      	beq.n	8000988 <__aeabi_dadd+0x394>
 80008a6:	2501      	movs	r5, #1
 80008a8:	2a38      	cmp	r2, #56	@ 0x38
 80008aa:	dca8      	bgt.n	80007fe <__aeabi_dadd+0x20a>
 80008ac:	2180      	movs	r1, #128	@ 0x80
 80008ae:	4653      	mov	r3, sl
 80008b0:	0409      	lsls	r1, r1, #16
 80008b2:	430b      	orrs	r3, r1
 80008b4:	469a      	mov	sl, r3
 80008b6:	e78e      	b.n	80007d6 <__aeabi_dadd+0x1e2>
 80008b8:	003c      	movs	r4, r7
 80008ba:	2500      	movs	r5, #0
 80008bc:	2200      	movs	r2, #0
 80008be:	e731      	b.n	8000724 <__aeabi_dadd+0x130>
 80008c0:	2307      	movs	r3, #7
 80008c2:	402b      	ands	r3, r5
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d000      	beq.n	80008ca <__aeabi_dadd+0x2d6>
 80008c8:	e710      	b.n	80006ec <__aeabi_dadd+0xf8>
 80008ca:	e093      	b.n	80009f4 <__aeabi_dadd+0x400>
 80008cc:	2a00      	cmp	r2, #0
 80008ce:	d074      	beq.n	80009ba <__aeabi_dadd+0x3c6>
 80008d0:	464a      	mov	r2, r9
 80008d2:	1bd2      	subs	r2, r2, r7
 80008d4:	2f00      	cmp	r7, #0
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x2e6>
 80008d8:	e0c7      	b.n	8000a6a <__aeabi_dadd+0x476>
 80008da:	4928      	ldr	r1, [pc, #160]	@ (800097c <__aeabi_dadd+0x388>)
 80008dc:	4589      	cmp	r9, r1
 80008de:	d100      	bne.n	80008e2 <__aeabi_dadd+0x2ee>
 80008e0:	e185      	b.n	8000bee <__aeabi_dadd+0x5fa>
 80008e2:	2501      	movs	r5, #1
 80008e4:	2a38      	cmp	r2, #56	@ 0x38
 80008e6:	dc12      	bgt.n	800090e <__aeabi_dadd+0x31a>
 80008e8:	2180      	movs	r1, #128	@ 0x80
 80008ea:	0409      	lsls	r1, r1, #16
 80008ec:	430c      	orrs	r4, r1
 80008ee:	2a1f      	cmp	r2, #31
 80008f0:	dd00      	ble.n	80008f4 <__aeabi_dadd+0x300>
 80008f2:	e1ab      	b.n	8000c4c <__aeabi_dadd+0x658>
 80008f4:	2120      	movs	r1, #32
 80008f6:	0025      	movs	r5, r4
 80008f8:	1a89      	subs	r1, r1, r2
 80008fa:	0007      	movs	r7, r0
 80008fc:	4088      	lsls	r0, r1
 80008fe:	408d      	lsls	r5, r1
 8000900:	40d7      	lsrs	r7, r2
 8000902:	1e41      	subs	r1, r0, #1
 8000904:	4188      	sbcs	r0, r1
 8000906:	40d4      	lsrs	r4, r2
 8000908:	433d      	orrs	r5, r7
 800090a:	4305      	orrs	r5, r0
 800090c:	44a2      	add	sl, r4
 800090e:	4465      	add	r5, ip
 8000910:	4565      	cmp	r5, ip
 8000912:	4192      	sbcs	r2, r2
 8000914:	4252      	negs	r2, r2
 8000916:	4452      	add	r2, sl
 8000918:	0014      	movs	r4, r2
 800091a:	464f      	mov	r7, r9
 800091c:	e774      	b.n	8000808 <__aeabi_dadd+0x214>
 800091e:	0028      	movs	r0, r5
 8000920:	f001 fd02 	bl	8002328 <__clzsi2>
 8000924:	0003      	movs	r3, r0
 8000926:	3318      	adds	r3, #24
 8000928:	2b1f      	cmp	r3, #31
 800092a:	dc00      	bgt.n	800092e <__aeabi_dadd+0x33a>
 800092c:	e6c2      	b.n	80006b4 <__aeabi_dadd+0xc0>
 800092e:	002a      	movs	r2, r5
 8000930:	3808      	subs	r0, #8
 8000932:	4082      	lsls	r2, r0
 8000934:	429f      	cmp	r7, r3
 8000936:	dd00      	ble.n	800093a <__aeabi_dadd+0x346>
 8000938:	e0a9      	b.n	8000a8e <__aeabi_dadd+0x49a>
 800093a:	1bdb      	subs	r3, r3, r7
 800093c:	1c58      	adds	r0, r3, #1
 800093e:	281f      	cmp	r0, #31
 8000940:	dc00      	bgt.n	8000944 <__aeabi_dadd+0x350>
 8000942:	e1ac      	b.n	8000c9e <__aeabi_dadd+0x6aa>
 8000944:	0015      	movs	r5, r2
 8000946:	3b1f      	subs	r3, #31
 8000948:	40dd      	lsrs	r5, r3
 800094a:	2820      	cmp	r0, #32
 800094c:	d005      	beq.n	800095a <__aeabi_dadd+0x366>
 800094e:	2340      	movs	r3, #64	@ 0x40
 8000950:	1a1b      	subs	r3, r3, r0
 8000952:	409a      	lsls	r2, r3
 8000954:	1e53      	subs	r3, r2, #1
 8000956:	419a      	sbcs	r2, r3
 8000958:	4315      	orrs	r5, r2
 800095a:	2307      	movs	r3, #7
 800095c:	2700      	movs	r7, #0
 800095e:	402b      	ands	r3, r5
 8000960:	e7b0      	b.n	80008c4 <__aeabi_dadd+0x2d0>
 8000962:	08ed      	lsrs	r5, r5, #3
 8000964:	4b05      	ldr	r3, [pc, #20]	@ (800097c <__aeabi_dadd+0x388>)
 8000966:	0762      	lsls	r2, r4, #29
 8000968:	432a      	orrs	r2, r5
 800096a:	08e4      	lsrs	r4, r4, #3
 800096c:	429f      	cmp	r7, r3
 800096e:	d00f      	beq.n	8000990 <__aeabi_dadd+0x39c>
 8000970:	0324      	lsls	r4, r4, #12
 8000972:	0b25      	lsrs	r5, r4, #12
 8000974:	057c      	lsls	r4, r7, #21
 8000976:	0d64      	lsrs	r4, r4, #21
 8000978:	e6d4      	b.n	8000724 <__aeabi_dadd+0x130>
 800097a:	46c0      	nop			@ (mov r8, r8)
 800097c:	000007ff 	.word	0x000007ff
 8000980:	ff7fffff 	.word	0xff7fffff
 8000984:	000007fe 	.word	0x000007fe
 8000988:	08c0      	lsrs	r0, r0, #3
 800098a:	0762      	lsls	r2, r4, #29
 800098c:	4302      	orrs	r2, r0
 800098e:	08e4      	lsrs	r4, r4, #3
 8000990:	0013      	movs	r3, r2
 8000992:	4323      	orrs	r3, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x3a4>
 8000996:	e186      	b.n	8000ca6 <__aeabi_dadd+0x6b2>
 8000998:	2580      	movs	r5, #128	@ 0x80
 800099a:	032d      	lsls	r5, r5, #12
 800099c:	4325      	orrs	r5, r4
 800099e:	032d      	lsls	r5, r5, #12
 80009a0:	4cc3      	ldr	r4, [pc, #780]	@ (8000cb0 <__aeabi_dadd+0x6bc>)
 80009a2:	0b2d      	lsrs	r5, r5, #12
 80009a4:	e6be      	b.n	8000724 <__aeabi_dadd+0x130>
 80009a6:	4660      	mov	r0, ip
 80009a8:	4654      	mov	r4, sl
 80009aa:	000e      	movs	r6, r1
 80009ac:	0017      	movs	r7, r2
 80009ae:	08c5      	lsrs	r5, r0, #3
 80009b0:	e7d8      	b.n	8000964 <__aeabi_dadd+0x370>
 80009b2:	4cc0      	ldr	r4, [pc, #768]	@ (8000cb4 <__aeabi_dadd+0x6c0>)
 80009b4:	1aff      	subs	r7, r7, r3
 80009b6:	4014      	ands	r4, r2
 80009b8:	e696      	b.n	80006e8 <__aeabi_dadd+0xf4>
 80009ba:	4abf      	ldr	r2, [pc, #764]	@ (8000cb8 <__aeabi_dadd+0x6c4>)
 80009bc:	1c79      	adds	r1, r7, #1
 80009be:	4211      	tst	r1, r2
 80009c0:	d16b      	bne.n	8000a9a <__aeabi_dadd+0x4a6>
 80009c2:	0022      	movs	r2, r4
 80009c4:	4302      	orrs	r2, r0
 80009c6:	2f00      	cmp	r7, #0
 80009c8:	d000      	beq.n	80009cc <__aeabi_dadd+0x3d8>
 80009ca:	e0db      	b.n	8000b84 <__aeabi_dadd+0x590>
 80009cc:	2a00      	cmp	r2, #0
 80009ce:	d100      	bne.n	80009d2 <__aeabi_dadd+0x3de>
 80009d0:	e12d      	b.n	8000c2e <__aeabi_dadd+0x63a>
 80009d2:	4662      	mov	r2, ip
 80009d4:	4653      	mov	r3, sl
 80009d6:	431a      	orrs	r2, r3
 80009d8:	d100      	bne.n	80009dc <__aeabi_dadd+0x3e8>
 80009da:	e0b6      	b.n	8000b4a <__aeabi_dadd+0x556>
 80009dc:	4663      	mov	r3, ip
 80009de:	18c5      	adds	r5, r0, r3
 80009e0:	4285      	cmp	r5, r0
 80009e2:	4180      	sbcs	r0, r0
 80009e4:	4454      	add	r4, sl
 80009e6:	4240      	negs	r0, r0
 80009e8:	1824      	adds	r4, r4, r0
 80009ea:	0223      	lsls	r3, r4, #8
 80009ec:	d502      	bpl.n	80009f4 <__aeabi_dadd+0x400>
 80009ee:	000f      	movs	r7, r1
 80009f0:	4bb0      	ldr	r3, [pc, #704]	@ (8000cb4 <__aeabi_dadd+0x6c0>)
 80009f2:	401c      	ands	r4, r3
 80009f4:	003a      	movs	r2, r7
 80009f6:	0028      	movs	r0, r5
 80009f8:	e7d8      	b.n	80009ac <__aeabi_dadd+0x3b8>
 80009fa:	4662      	mov	r2, ip
 80009fc:	1a85      	subs	r5, r0, r2
 80009fe:	42a8      	cmp	r0, r5
 8000a00:	4192      	sbcs	r2, r2
 8000a02:	4653      	mov	r3, sl
 8000a04:	4252      	negs	r2, r2
 8000a06:	4691      	mov	r9, r2
 8000a08:	1ae3      	subs	r3, r4, r3
 8000a0a:	001a      	movs	r2, r3
 8000a0c:	464b      	mov	r3, r9
 8000a0e:	1ad2      	subs	r2, r2, r3
 8000a10:	0013      	movs	r3, r2
 8000a12:	4691      	mov	r9, r2
 8000a14:	021a      	lsls	r2, r3, #8
 8000a16:	d454      	bmi.n	8000ac2 <__aeabi_dadd+0x4ce>
 8000a18:	464a      	mov	r2, r9
 8000a1a:	464c      	mov	r4, r9
 8000a1c:	432a      	orrs	r2, r5
 8000a1e:	d000      	beq.n	8000a22 <__aeabi_dadd+0x42e>
 8000a20:	e640      	b.n	80006a4 <__aeabi_dadd+0xb0>
 8000a22:	2600      	movs	r6, #0
 8000a24:	2400      	movs	r4, #0
 8000a26:	2500      	movs	r5, #0
 8000a28:	e67c      	b.n	8000724 <__aeabi_dadd+0x130>
 8000a2a:	4da1      	ldr	r5, [pc, #644]	@ (8000cb0 <__aeabi_dadd+0x6bc>)
 8000a2c:	45a9      	cmp	r9, r5
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_dadd+0x43e>
 8000a30:	e090      	b.n	8000b54 <__aeabi_dadd+0x560>
 8000a32:	2501      	movs	r5, #1
 8000a34:	2a38      	cmp	r2, #56	@ 0x38
 8000a36:	dd00      	ble.n	8000a3a <__aeabi_dadd+0x446>
 8000a38:	e6ab      	b.n	8000792 <__aeabi_dadd+0x19e>
 8000a3a:	2580      	movs	r5, #128	@ 0x80
 8000a3c:	042d      	lsls	r5, r5, #16
 8000a3e:	432c      	orrs	r4, r5
 8000a40:	e695      	b.n	800076e <__aeabi_dadd+0x17a>
 8000a42:	0011      	movs	r1, r2
 8000a44:	4655      	mov	r5, sl
 8000a46:	3920      	subs	r1, #32
 8000a48:	40cd      	lsrs	r5, r1
 8000a4a:	46a9      	mov	r9, r5
 8000a4c:	2a20      	cmp	r2, #32
 8000a4e:	d006      	beq.n	8000a5e <__aeabi_dadd+0x46a>
 8000a50:	2140      	movs	r1, #64	@ 0x40
 8000a52:	4653      	mov	r3, sl
 8000a54:	1a8a      	subs	r2, r1, r2
 8000a56:	4093      	lsls	r3, r2
 8000a58:	4662      	mov	r2, ip
 8000a5a:	431a      	orrs	r2, r3
 8000a5c:	4694      	mov	ip, r2
 8000a5e:	4665      	mov	r5, ip
 8000a60:	1e6b      	subs	r3, r5, #1
 8000a62:	419d      	sbcs	r5, r3
 8000a64:	464b      	mov	r3, r9
 8000a66:	431d      	orrs	r5, r3
 8000a68:	e612      	b.n	8000690 <__aeabi_dadd+0x9c>
 8000a6a:	0021      	movs	r1, r4
 8000a6c:	4301      	orrs	r1, r0
 8000a6e:	d100      	bne.n	8000a72 <__aeabi_dadd+0x47e>
 8000a70:	e0c4      	b.n	8000bfc <__aeabi_dadd+0x608>
 8000a72:	1e51      	subs	r1, r2, #1
 8000a74:	2a01      	cmp	r2, #1
 8000a76:	d100      	bne.n	8000a7a <__aeabi_dadd+0x486>
 8000a78:	e0fb      	b.n	8000c72 <__aeabi_dadd+0x67e>
 8000a7a:	4d8d      	ldr	r5, [pc, #564]	@ (8000cb0 <__aeabi_dadd+0x6bc>)
 8000a7c:	42aa      	cmp	r2, r5
 8000a7e:	d100      	bne.n	8000a82 <__aeabi_dadd+0x48e>
 8000a80:	e0b5      	b.n	8000bee <__aeabi_dadd+0x5fa>
 8000a82:	2501      	movs	r5, #1
 8000a84:	2938      	cmp	r1, #56	@ 0x38
 8000a86:	dd00      	ble.n	8000a8a <__aeabi_dadd+0x496>
 8000a88:	e741      	b.n	800090e <__aeabi_dadd+0x31a>
 8000a8a:	000a      	movs	r2, r1
 8000a8c:	e72f      	b.n	80008ee <__aeabi_dadd+0x2fa>
 8000a8e:	4c89      	ldr	r4, [pc, #548]	@ (8000cb4 <__aeabi_dadd+0x6c0>)
 8000a90:	1aff      	subs	r7, r7, r3
 8000a92:	4014      	ands	r4, r2
 8000a94:	0762      	lsls	r2, r4, #29
 8000a96:	08e4      	lsrs	r4, r4, #3
 8000a98:	e76a      	b.n	8000970 <__aeabi_dadd+0x37c>
 8000a9a:	4a85      	ldr	r2, [pc, #532]	@ (8000cb0 <__aeabi_dadd+0x6bc>)
 8000a9c:	4291      	cmp	r1, r2
 8000a9e:	d100      	bne.n	8000aa2 <__aeabi_dadd+0x4ae>
 8000aa0:	e0e3      	b.n	8000c6a <__aeabi_dadd+0x676>
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	18c2      	adds	r2, r0, r3
 8000aa6:	4282      	cmp	r2, r0
 8000aa8:	4180      	sbcs	r0, r0
 8000aaa:	0023      	movs	r3, r4
 8000aac:	4240      	negs	r0, r0
 8000aae:	4453      	add	r3, sl
 8000ab0:	181b      	adds	r3, r3, r0
 8000ab2:	07dd      	lsls	r5, r3, #31
 8000ab4:	085c      	lsrs	r4, r3, #1
 8000ab6:	2307      	movs	r3, #7
 8000ab8:	0852      	lsrs	r2, r2, #1
 8000aba:	4315      	orrs	r5, r2
 8000abc:	000f      	movs	r7, r1
 8000abe:	402b      	ands	r3, r5
 8000ac0:	e700      	b.n	80008c4 <__aeabi_dadd+0x2d0>
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	1a1d      	subs	r5, r3, r0
 8000ac6:	45ac      	cmp	ip, r5
 8000ac8:	4192      	sbcs	r2, r2
 8000aca:	4653      	mov	r3, sl
 8000acc:	4252      	negs	r2, r2
 8000ace:	1b1c      	subs	r4, r3, r4
 8000ad0:	000e      	movs	r6, r1
 8000ad2:	4688      	mov	r8, r1
 8000ad4:	1aa4      	subs	r4, r4, r2
 8000ad6:	e5e5      	b.n	80006a4 <__aeabi_dadd+0xb0>
 8000ad8:	2d00      	cmp	r5, #0
 8000ada:	d000      	beq.n	8000ade <__aeabi_dadd+0x4ea>
 8000adc:	e091      	b.n	8000c02 <__aeabi_dadd+0x60e>
 8000ade:	2a00      	cmp	r2, #0
 8000ae0:	d138      	bne.n	8000b54 <__aeabi_dadd+0x560>
 8000ae2:	2480      	movs	r4, #128	@ 0x80
 8000ae4:	2600      	movs	r6, #0
 8000ae6:	0324      	lsls	r4, r4, #12
 8000ae8:	e756      	b.n	8000998 <__aeabi_dadd+0x3a4>
 8000aea:	4663      	mov	r3, ip
 8000aec:	18c5      	adds	r5, r0, r3
 8000aee:	4285      	cmp	r5, r0
 8000af0:	4180      	sbcs	r0, r0
 8000af2:	4454      	add	r4, sl
 8000af4:	4240      	negs	r0, r0
 8000af6:	1824      	adds	r4, r4, r0
 8000af8:	2701      	movs	r7, #1
 8000afa:	0223      	lsls	r3, r4, #8
 8000afc:	d400      	bmi.n	8000b00 <__aeabi_dadd+0x50c>
 8000afe:	e6df      	b.n	80008c0 <__aeabi_dadd+0x2cc>
 8000b00:	2702      	movs	r7, #2
 8000b02:	e687      	b.n	8000814 <__aeabi_dadd+0x220>
 8000b04:	4663      	mov	r3, ip
 8000b06:	1ac5      	subs	r5, r0, r3
 8000b08:	42a8      	cmp	r0, r5
 8000b0a:	4180      	sbcs	r0, r0
 8000b0c:	4653      	mov	r3, sl
 8000b0e:	4240      	negs	r0, r0
 8000b10:	1ae4      	subs	r4, r4, r3
 8000b12:	2701      	movs	r7, #1
 8000b14:	1a24      	subs	r4, r4, r0
 8000b16:	e5c0      	b.n	800069a <__aeabi_dadd+0xa6>
 8000b18:	0762      	lsls	r2, r4, #29
 8000b1a:	08c0      	lsrs	r0, r0, #3
 8000b1c:	4302      	orrs	r2, r0
 8000b1e:	08e4      	lsrs	r4, r4, #3
 8000b20:	e736      	b.n	8000990 <__aeabi_dadd+0x39c>
 8000b22:	0011      	movs	r1, r2
 8000b24:	4653      	mov	r3, sl
 8000b26:	3920      	subs	r1, #32
 8000b28:	40cb      	lsrs	r3, r1
 8000b2a:	4699      	mov	r9, r3
 8000b2c:	2a20      	cmp	r2, #32
 8000b2e:	d006      	beq.n	8000b3e <__aeabi_dadd+0x54a>
 8000b30:	2140      	movs	r1, #64	@ 0x40
 8000b32:	4653      	mov	r3, sl
 8000b34:	1a8a      	subs	r2, r1, r2
 8000b36:	4093      	lsls	r3, r2
 8000b38:	4662      	mov	r2, ip
 8000b3a:	431a      	orrs	r2, r3
 8000b3c:	4694      	mov	ip, r2
 8000b3e:	4665      	mov	r5, ip
 8000b40:	1e6b      	subs	r3, r5, #1
 8000b42:	419d      	sbcs	r5, r3
 8000b44:	464b      	mov	r3, r9
 8000b46:	431d      	orrs	r5, r3
 8000b48:	e659      	b.n	80007fe <__aeabi_dadd+0x20a>
 8000b4a:	0762      	lsls	r2, r4, #29
 8000b4c:	08c0      	lsrs	r0, r0, #3
 8000b4e:	4302      	orrs	r2, r0
 8000b50:	08e4      	lsrs	r4, r4, #3
 8000b52:	e70d      	b.n	8000970 <__aeabi_dadd+0x37c>
 8000b54:	4653      	mov	r3, sl
 8000b56:	075a      	lsls	r2, r3, #29
 8000b58:	4663      	mov	r3, ip
 8000b5a:	08d8      	lsrs	r0, r3, #3
 8000b5c:	4653      	mov	r3, sl
 8000b5e:	000e      	movs	r6, r1
 8000b60:	4302      	orrs	r2, r0
 8000b62:	08dc      	lsrs	r4, r3, #3
 8000b64:	e714      	b.n	8000990 <__aeabi_dadd+0x39c>
 8000b66:	0015      	movs	r5, r2
 8000b68:	0026      	movs	r6, r4
 8000b6a:	3d20      	subs	r5, #32
 8000b6c:	40ee      	lsrs	r6, r5
 8000b6e:	2a20      	cmp	r2, #32
 8000b70:	d003      	beq.n	8000b7a <__aeabi_dadd+0x586>
 8000b72:	2540      	movs	r5, #64	@ 0x40
 8000b74:	1aaa      	subs	r2, r5, r2
 8000b76:	4094      	lsls	r4, r2
 8000b78:	4320      	orrs	r0, r4
 8000b7a:	1e42      	subs	r2, r0, #1
 8000b7c:	4190      	sbcs	r0, r2
 8000b7e:	0005      	movs	r5, r0
 8000b80:	4335      	orrs	r5, r6
 8000b82:	e606      	b.n	8000792 <__aeabi_dadd+0x19e>
 8000b84:	2a00      	cmp	r2, #0
 8000b86:	d07c      	beq.n	8000c82 <__aeabi_dadd+0x68e>
 8000b88:	4662      	mov	r2, ip
 8000b8a:	4653      	mov	r3, sl
 8000b8c:	08c0      	lsrs	r0, r0, #3
 8000b8e:	431a      	orrs	r2, r3
 8000b90:	d100      	bne.n	8000b94 <__aeabi_dadd+0x5a0>
 8000b92:	e6fa      	b.n	800098a <__aeabi_dadd+0x396>
 8000b94:	0762      	lsls	r2, r4, #29
 8000b96:	4310      	orrs	r0, r2
 8000b98:	2280      	movs	r2, #128	@ 0x80
 8000b9a:	08e4      	lsrs	r4, r4, #3
 8000b9c:	0312      	lsls	r2, r2, #12
 8000b9e:	4214      	tst	r4, r2
 8000ba0:	d008      	beq.n	8000bb4 <__aeabi_dadd+0x5c0>
 8000ba2:	08d9      	lsrs	r1, r3, #3
 8000ba4:	4211      	tst	r1, r2
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_dadd+0x5c0>
 8000ba8:	4663      	mov	r3, ip
 8000baa:	08d8      	lsrs	r0, r3, #3
 8000bac:	4653      	mov	r3, sl
 8000bae:	000c      	movs	r4, r1
 8000bb0:	075b      	lsls	r3, r3, #29
 8000bb2:	4318      	orrs	r0, r3
 8000bb4:	0f42      	lsrs	r2, r0, #29
 8000bb6:	00c0      	lsls	r0, r0, #3
 8000bb8:	08c0      	lsrs	r0, r0, #3
 8000bba:	0752      	lsls	r2, r2, #29
 8000bbc:	4302      	orrs	r2, r0
 8000bbe:	e6e7      	b.n	8000990 <__aeabi_dadd+0x39c>
 8000bc0:	2a00      	cmp	r2, #0
 8000bc2:	d100      	bne.n	8000bc6 <__aeabi_dadd+0x5d2>
 8000bc4:	e72d      	b.n	8000a22 <__aeabi_dadd+0x42e>
 8000bc6:	4663      	mov	r3, ip
 8000bc8:	08d8      	lsrs	r0, r3, #3
 8000bca:	4653      	mov	r3, sl
 8000bcc:	075a      	lsls	r2, r3, #29
 8000bce:	000e      	movs	r6, r1
 8000bd0:	4302      	orrs	r2, r0
 8000bd2:	08dc      	lsrs	r4, r3, #3
 8000bd4:	e6cc      	b.n	8000970 <__aeabi_dadd+0x37c>
 8000bd6:	4663      	mov	r3, ip
 8000bd8:	1a1d      	subs	r5, r3, r0
 8000bda:	45ac      	cmp	ip, r5
 8000bdc:	4192      	sbcs	r2, r2
 8000bde:	4653      	mov	r3, sl
 8000be0:	4252      	negs	r2, r2
 8000be2:	1b1c      	subs	r4, r3, r4
 8000be4:	000e      	movs	r6, r1
 8000be6:	4688      	mov	r8, r1
 8000be8:	1aa4      	subs	r4, r4, r2
 8000bea:	3701      	adds	r7, #1
 8000bec:	e555      	b.n	800069a <__aeabi_dadd+0xa6>
 8000bee:	4663      	mov	r3, ip
 8000bf0:	08d9      	lsrs	r1, r3, #3
 8000bf2:	4653      	mov	r3, sl
 8000bf4:	075a      	lsls	r2, r3, #29
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	08dc      	lsrs	r4, r3, #3
 8000bfa:	e6c9      	b.n	8000990 <__aeabi_dadd+0x39c>
 8000bfc:	4660      	mov	r0, ip
 8000bfe:	4654      	mov	r4, sl
 8000c00:	e6d4      	b.n	80009ac <__aeabi_dadd+0x3b8>
 8000c02:	08c0      	lsrs	r0, r0, #3
 8000c04:	2a00      	cmp	r2, #0
 8000c06:	d100      	bne.n	8000c0a <__aeabi_dadd+0x616>
 8000c08:	e6bf      	b.n	800098a <__aeabi_dadd+0x396>
 8000c0a:	0762      	lsls	r2, r4, #29
 8000c0c:	4310      	orrs	r0, r2
 8000c0e:	2280      	movs	r2, #128	@ 0x80
 8000c10:	08e4      	lsrs	r4, r4, #3
 8000c12:	0312      	lsls	r2, r2, #12
 8000c14:	4214      	tst	r4, r2
 8000c16:	d0cd      	beq.n	8000bb4 <__aeabi_dadd+0x5c0>
 8000c18:	08dd      	lsrs	r5, r3, #3
 8000c1a:	4215      	tst	r5, r2
 8000c1c:	d1ca      	bne.n	8000bb4 <__aeabi_dadd+0x5c0>
 8000c1e:	4663      	mov	r3, ip
 8000c20:	08d8      	lsrs	r0, r3, #3
 8000c22:	4653      	mov	r3, sl
 8000c24:	075b      	lsls	r3, r3, #29
 8000c26:	000e      	movs	r6, r1
 8000c28:	002c      	movs	r4, r5
 8000c2a:	4318      	orrs	r0, r3
 8000c2c:	e7c2      	b.n	8000bb4 <__aeabi_dadd+0x5c0>
 8000c2e:	4663      	mov	r3, ip
 8000c30:	08d9      	lsrs	r1, r3, #3
 8000c32:	4653      	mov	r3, sl
 8000c34:	075a      	lsls	r2, r3, #29
 8000c36:	430a      	orrs	r2, r1
 8000c38:	08dc      	lsrs	r4, r3, #3
 8000c3a:	e699      	b.n	8000970 <__aeabi_dadd+0x37c>
 8000c3c:	4663      	mov	r3, ip
 8000c3e:	08d8      	lsrs	r0, r3, #3
 8000c40:	4653      	mov	r3, sl
 8000c42:	075a      	lsls	r2, r3, #29
 8000c44:	000e      	movs	r6, r1
 8000c46:	4302      	orrs	r2, r0
 8000c48:	08dc      	lsrs	r4, r3, #3
 8000c4a:	e6a1      	b.n	8000990 <__aeabi_dadd+0x39c>
 8000c4c:	0011      	movs	r1, r2
 8000c4e:	0027      	movs	r7, r4
 8000c50:	3920      	subs	r1, #32
 8000c52:	40cf      	lsrs	r7, r1
 8000c54:	2a20      	cmp	r2, #32
 8000c56:	d003      	beq.n	8000c60 <__aeabi_dadd+0x66c>
 8000c58:	2140      	movs	r1, #64	@ 0x40
 8000c5a:	1a8a      	subs	r2, r1, r2
 8000c5c:	4094      	lsls	r4, r2
 8000c5e:	4320      	orrs	r0, r4
 8000c60:	1e42      	subs	r2, r0, #1
 8000c62:	4190      	sbcs	r0, r2
 8000c64:	0005      	movs	r5, r0
 8000c66:	433d      	orrs	r5, r7
 8000c68:	e651      	b.n	800090e <__aeabi_dadd+0x31a>
 8000c6a:	000c      	movs	r4, r1
 8000c6c:	2500      	movs	r5, #0
 8000c6e:	2200      	movs	r2, #0
 8000c70:	e558      	b.n	8000724 <__aeabi_dadd+0x130>
 8000c72:	4460      	add	r0, ip
 8000c74:	4560      	cmp	r0, ip
 8000c76:	4192      	sbcs	r2, r2
 8000c78:	4454      	add	r4, sl
 8000c7a:	4252      	negs	r2, r2
 8000c7c:	0005      	movs	r5, r0
 8000c7e:	18a4      	adds	r4, r4, r2
 8000c80:	e73a      	b.n	8000af8 <__aeabi_dadd+0x504>
 8000c82:	4653      	mov	r3, sl
 8000c84:	075a      	lsls	r2, r3, #29
 8000c86:	4663      	mov	r3, ip
 8000c88:	08d9      	lsrs	r1, r3, #3
 8000c8a:	4653      	mov	r3, sl
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	08dc      	lsrs	r4, r3, #3
 8000c90:	e67e      	b.n	8000990 <__aeabi_dadd+0x39c>
 8000c92:	001a      	movs	r2, r3
 8000c94:	001c      	movs	r4, r3
 8000c96:	432a      	orrs	r2, r5
 8000c98:	d000      	beq.n	8000c9c <__aeabi_dadd+0x6a8>
 8000c9a:	e6ab      	b.n	80009f4 <__aeabi_dadd+0x400>
 8000c9c:	e6c1      	b.n	8000a22 <__aeabi_dadd+0x42e>
 8000c9e:	2120      	movs	r1, #32
 8000ca0:	2500      	movs	r5, #0
 8000ca2:	1a09      	subs	r1, r1, r0
 8000ca4:	e519      	b.n	80006da <__aeabi_dadd+0xe6>
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2500      	movs	r5, #0
 8000caa:	4c01      	ldr	r4, [pc, #4]	@ (8000cb0 <__aeabi_dadd+0x6bc>)
 8000cac:	e53a      	b.n	8000724 <__aeabi_dadd+0x130>
 8000cae:	46c0      	nop			@ (mov r8, r8)
 8000cb0:	000007ff 	.word	0x000007ff
 8000cb4:	ff7fffff 	.word	0xff7fffff
 8000cb8:	000007fe 	.word	0x000007fe

08000cbc <__aeabi_ddiv>:
 8000cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cbe:	46de      	mov	lr, fp
 8000cc0:	4645      	mov	r5, r8
 8000cc2:	4657      	mov	r7, sl
 8000cc4:	464e      	mov	r6, r9
 8000cc6:	b5e0      	push	{r5, r6, r7, lr}
 8000cc8:	b087      	sub	sp, #28
 8000cca:	9200      	str	r2, [sp, #0]
 8000ccc:	9301      	str	r3, [sp, #4]
 8000cce:	030b      	lsls	r3, r1, #12
 8000cd0:	0b1b      	lsrs	r3, r3, #12
 8000cd2:	469b      	mov	fp, r3
 8000cd4:	0fca      	lsrs	r2, r1, #31
 8000cd6:	004b      	lsls	r3, r1, #1
 8000cd8:	0004      	movs	r4, r0
 8000cda:	4680      	mov	r8, r0
 8000cdc:	0d5b      	lsrs	r3, r3, #21
 8000cde:	9202      	str	r2, [sp, #8]
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_ddiv+0x28>
 8000ce2:	e16a      	b.n	8000fba <__aeabi_ddiv+0x2fe>
 8000ce4:	4ad4      	ldr	r2, [pc, #848]	@ (8001038 <__aeabi_ddiv+0x37c>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d100      	bne.n	8000cec <__aeabi_ddiv+0x30>
 8000cea:	e18c      	b.n	8001006 <__aeabi_ddiv+0x34a>
 8000cec:	4659      	mov	r1, fp
 8000cee:	0f42      	lsrs	r2, r0, #29
 8000cf0:	00c9      	lsls	r1, r1, #3
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	2180      	movs	r1, #128	@ 0x80
 8000cf6:	0409      	lsls	r1, r1, #16
 8000cf8:	4311      	orrs	r1, r2
 8000cfa:	00c2      	lsls	r2, r0, #3
 8000cfc:	4690      	mov	r8, r2
 8000cfe:	4acf      	ldr	r2, [pc, #828]	@ (800103c <__aeabi_ddiv+0x380>)
 8000d00:	4689      	mov	r9, r1
 8000d02:	4692      	mov	sl, r2
 8000d04:	449a      	add	sl, r3
 8000d06:	2300      	movs	r3, #0
 8000d08:	2400      	movs	r4, #0
 8000d0a:	9303      	str	r3, [sp, #12]
 8000d0c:	9e00      	ldr	r6, [sp, #0]
 8000d0e:	9f01      	ldr	r7, [sp, #4]
 8000d10:	033b      	lsls	r3, r7, #12
 8000d12:	0b1b      	lsrs	r3, r3, #12
 8000d14:	469b      	mov	fp, r3
 8000d16:	007b      	lsls	r3, r7, #1
 8000d18:	0030      	movs	r0, r6
 8000d1a:	0d5b      	lsrs	r3, r3, #21
 8000d1c:	0ffd      	lsrs	r5, r7, #31
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d100      	bne.n	8000d24 <__aeabi_ddiv+0x68>
 8000d22:	e128      	b.n	8000f76 <__aeabi_ddiv+0x2ba>
 8000d24:	4ac4      	ldr	r2, [pc, #784]	@ (8001038 <__aeabi_ddiv+0x37c>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d100      	bne.n	8000d2c <__aeabi_ddiv+0x70>
 8000d2a:	e177      	b.n	800101c <__aeabi_ddiv+0x360>
 8000d2c:	4659      	mov	r1, fp
 8000d2e:	0f72      	lsrs	r2, r6, #29
 8000d30:	00c9      	lsls	r1, r1, #3
 8000d32:	430a      	orrs	r2, r1
 8000d34:	2180      	movs	r1, #128	@ 0x80
 8000d36:	0409      	lsls	r1, r1, #16
 8000d38:	4311      	orrs	r1, r2
 8000d3a:	468b      	mov	fp, r1
 8000d3c:	49bf      	ldr	r1, [pc, #764]	@ (800103c <__aeabi_ddiv+0x380>)
 8000d3e:	00f2      	lsls	r2, r6, #3
 8000d40:	468c      	mov	ip, r1
 8000d42:	4651      	mov	r1, sl
 8000d44:	4463      	add	r3, ip
 8000d46:	1acb      	subs	r3, r1, r3
 8000d48:	469a      	mov	sl, r3
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	9e02      	ldr	r6, [sp, #8]
 8000d4e:	406e      	eors	r6, r5
 8000d50:	2c0f      	cmp	r4, #15
 8000d52:	d827      	bhi.n	8000da4 <__aeabi_ddiv+0xe8>
 8000d54:	49ba      	ldr	r1, [pc, #744]	@ (8001040 <__aeabi_ddiv+0x384>)
 8000d56:	00a4      	lsls	r4, r4, #2
 8000d58:	5909      	ldr	r1, [r1, r4]
 8000d5a:	468f      	mov	pc, r1
 8000d5c:	46cb      	mov	fp, r9
 8000d5e:	4642      	mov	r2, r8
 8000d60:	9e02      	ldr	r6, [sp, #8]
 8000d62:	9b03      	ldr	r3, [sp, #12]
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d016      	beq.n	8000d96 <__aeabi_ddiv+0xda>
 8000d68:	2b03      	cmp	r3, #3
 8000d6a:	d100      	bne.n	8000d6e <__aeabi_ddiv+0xb2>
 8000d6c:	e2a6      	b.n	80012bc <__aeabi_ddiv+0x600>
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d000      	beq.n	8000d74 <__aeabi_ddiv+0xb8>
 8000d72:	e0df      	b.n	8000f34 <__aeabi_ddiv+0x278>
 8000d74:	2200      	movs	r2, #0
 8000d76:	2300      	movs	r3, #0
 8000d78:	2400      	movs	r4, #0
 8000d7a:	4690      	mov	r8, r2
 8000d7c:	051b      	lsls	r3, r3, #20
 8000d7e:	4323      	orrs	r3, r4
 8000d80:	07f6      	lsls	r6, r6, #31
 8000d82:	4333      	orrs	r3, r6
 8000d84:	4640      	mov	r0, r8
 8000d86:	0019      	movs	r1, r3
 8000d88:	b007      	add	sp, #28
 8000d8a:	bcf0      	pop	{r4, r5, r6, r7}
 8000d8c:	46bb      	mov	fp, r7
 8000d8e:	46b2      	mov	sl, r6
 8000d90:	46a9      	mov	r9, r5
 8000d92:	46a0      	mov	r8, r4
 8000d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d96:	2200      	movs	r2, #0
 8000d98:	2400      	movs	r4, #0
 8000d9a:	4690      	mov	r8, r2
 8000d9c:	4ba6      	ldr	r3, [pc, #664]	@ (8001038 <__aeabi_ddiv+0x37c>)
 8000d9e:	e7ed      	b.n	8000d7c <__aeabi_ddiv+0xc0>
 8000da0:	002e      	movs	r6, r5
 8000da2:	e7df      	b.n	8000d64 <__aeabi_ddiv+0xa8>
 8000da4:	45cb      	cmp	fp, r9
 8000da6:	d200      	bcs.n	8000daa <__aeabi_ddiv+0xee>
 8000da8:	e1d4      	b.n	8001154 <__aeabi_ddiv+0x498>
 8000daa:	d100      	bne.n	8000dae <__aeabi_ddiv+0xf2>
 8000dac:	e1cf      	b.n	800114e <__aeabi_ddiv+0x492>
 8000dae:	2301      	movs	r3, #1
 8000db0:	425b      	negs	r3, r3
 8000db2:	469c      	mov	ip, r3
 8000db4:	4644      	mov	r4, r8
 8000db6:	4648      	mov	r0, r9
 8000db8:	2700      	movs	r7, #0
 8000dba:	44e2      	add	sl, ip
 8000dbc:	465b      	mov	r3, fp
 8000dbe:	0e15      	lsrs	r5, r2, #24
 8000dc0:	021b      	lsls	r3, r3, #8
 8000dc2:	431d      	orrs	r5, r3
 8000dc4:	0c19      	lsrs	r1, r3, #16
 8000dc6:	042b      	lsls	r3, r5, #16
 8000dc8:	0212      	lsls	r2, r2, #8
 8000dca:	9500      	str	r5, [sp, #0]
 8000dcc:	0c1d      	lsrs	r5, r3, #16
 8000dce:	4691      	mov	r9, r2
 8000dd0:	9102      	str	r1, [sp, #8]
 8000dd2:	9503      	str	r5, [sp, #12]
 8000dd4:	f7ff fa1e 	bl	8000214 <__aeabi_uidivmod>
 8000dd8:	0002      	movs	r2, r0
 8000dda:	436a      	muls	r2, r5
 8000ddc:	040b      	lsls	r3, r1, #16
 8000dde:	0c21      	lsrs	r1, r4, #16
 8000de0:	4680      	mov	r8, r0
 8000de2:	4319      	orrs	r1, r3
 8000de4:	428a      	cmp	r2, r1
 8000de6:	d909      	bls.n	8000dfc <__aeabi_ddiv+0x140>
 8000de8:	9d00      	ldr	r5, [sp, #0]
 8000dea:	2301      	movs	r3, #1
 8000dec:	46ac      	mov	ip, r5
 8000dee:	425b      	negs	r3, r3
 8000df0:	4461      	add	r1, ip
 8000df2:	469c      	mov	ip, r3
 8000df4:	44e0      	add	r8, ip
 8000df6:	428d      	cmp	r5, r1
 8000df8:	d800      	bhi.n	8000dfc <__aeabi_ddiv+0x140>
 8000dfa:	e1fb      	b.n	80011f4 <__aeabi_ddiv+0x538>
 8000dfc:	1a88      	subs	r0, r1, r2
 8000dfe:	9902      	ldr	r1, [sp, #8]
 8000e00:	f7ff fa08 	bl	8000214 <__aeabi_uidivmod>
 8000e04:	9a03      	ldr	r2, [sp, #12]
 8000e06:	0424      	lsls	r4, r4, #16
 8000e08:	4342      	muls	r2, r0
 8000e0a:	0409      	lsls	r1, r1, #16
 8000e0c:	0c24      	lsrs	r4, r4, #16
 8000e0e:	0003      	movs	r3, r0
 8000e10:	430c      	orrs	r4, r1
 8000e12:	42a2      	cmp	r2, r4
 8000e14:	d906      	bls.n	8000e24 <__aeabi_ddiv+0x168>
 8000e16:	9900      	ldr	r1, [sp, #0]
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	468c      	mov	ip, r1
 8000e1c:	4464      	add	r4, ip
 8000e1e:	42a1      	cmp	r1, r4
 8000e20:	d800      	bhi.n	8000e24 <__aeabi_ddiv+0x168>
 8000e22:	e1e1      	b.n	80011e8 <__aeabi_ddiv+0x52c>
 8000e24:	1aa0      	subs	r0, r4, r2
 8000e26:	4642      	mov	r2, r8
 8000e28:	0412      	lsls	r2, r2, #16
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	4693      	mov	fp, r2
 8000e2e:	464b      	mov	r3, r9
 8000e30:	4659      	mov	r1, fp
 8000e32:	0c1b      	lsrs	r3, r3, #16
 8000e34:	001d      	movs	r5, r3
 8000e36:	9304      	str	r3, [sp, #16]
 8000e38:	040b      	lsls	r3, r1, #16
 8000e3a:	4649      	mov	r1, r9
 8000e3c:	0409      	lsls	r1, r1, #16
 8000e3e:	0c09      	lsrs	r1, r1, #16
 8000e40:	000c      	movs	r4, r1
 8000e42:	0c1b      	lsrs	r3, r3, #16
 8000e44:	435c      	muls	r4, r3
 8000e46:	0c12      	lsrs	r2, r2, #16
 8000e48:	436b      	muls	r3, r5
 8000e4a:	4688      	mov	r8, r1
 8000e4c:	4351      	muls	r1, r2
 8000e4e:	436a      	muls	r2, r5
 8000e50:	0c25      	lsrs	r5, r4, #16
 8000e52:	46ac      	mov	ip, r5
 8000e54:	185b      	adds	r3, r3, r1
 8000e56:	4463      	add	r3, ip
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	d903      	bls.n	8000e64 <__aeabi_ddiv+0x1a8>
 8000e5c:	2180      	movs	r1, #128	@ 0x80
 8000e5e:	0249      	lsls	r1, r1, #9
 8000e60:	468c      	mov	ip, r1
 8000e62:	4462      	add	r2, ip
 8000e64:	0c19      	lsrs	r1, r3, #16
 8000e66:	0424      	lsls	r4, r4, #16
 8000e68:	041b      	lsls	r3, r3, #16
 8000e6a:	0c24      	lsrs	r4, r4, #16
 8000e6c:	188a      	adds	r2, r1, r2
 8000e6e:	191c      	adds	r4, r3, r4
 8000e70:	4290      	cmp	r0, r2
 8000e72:	d302      	bcc.n	8000e7a <__aeabi_ddiv+0x1be>
 8000e74:	d116      	bne.n	8000ea4 <__aeabi_ddiv+0x1e8>
 8000e76:	42a7      	cmp	r7, r4
 8000e78:	d214      	bcs.n	8000ea4 <__aeabi_ddiv+0x1e8>
 8000e7a:	465b      	mov	r3, fp
 8000e7c:	9d00      	ldr	r5, [sp, #0]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	444f      	add	r7, r9
 8000e82:	9305      	str	r3, [sp, #20]
 8000e84:	454f      	cmp	r7, r9
 8000e86:	419b      	sbcs	r3, r3
 8000e88:	46ac      	mov	ip, r5
 8000e8a:	425b      	negs	r3, r3
 8000e8c:	4463      	add	r3, ip
 8000e8e:	18c0      	adds	r0, r0, r3
 8000e90:	4285      	cmp	r5, r0
 8000e92:	d300      	bcc.n	8000e96 <__aeabi_ddiv+0x1da>
 8000e94:	e1a1      	b.n	80011da <__aeabi_ddiv+0x51e>
 8000e96:	4282      	cmp	r2, r0
 8000e98:	d900      	bls.n	8000e9c <__aeabi_ddiv+0x1e0>
 8000e9a:	e1f6      	b.n	800128a <__aeabi_ddiv+0x5ce>
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_ddiv+0x1e4>
 8000e9e:	e1f1      	b.n	8001284 <__aeabi_ddiv+0x5c8>
 8000ea0:	9b05      	ldr	r3, [sp, #20]
 8000ea2:	469b      	mov	fp, r3
 8000ea4:	1b3c      	subs	r4, r7, r4
 8000ea6:	42a7      	cmp	r7, r4
 8000ea8:	41bf      	sbcs	r7, r7
 8000eaa:	9d00      	ldr	r5, [sp, #0]
 8000eac:	1a80      	subs	r0, r0, r2
 8000eae:	427f      	negs	r7, r7
 8000eb0:	1bc0      	subs	r0, r0, r7
 8000eb2:	4285      	cmp	r5, r0
 8000eb4:	d100      	bne.n	8000eb8 <__aeabi_ddiv+0x1fc>
 8000eb6:	e1d0      	b.n	800125a <__aeabi_ddiv+0x59e>
 8000eb8:	9902      	ldr	r1, [sp, #8]
 8000eba:	f7ff f9ab 	bl	8000214 <__aeabi_uidivmod>
 8000ebe:	9a03      	ldr	r2, [sp, #12]
 8000ec0:	040b      	lsls	r3, r1, #16
 8000ec2:	4342      	muls	r2, r0
 8000ec4:	0c21      	lsrs	r1, r4, #16
 8000ec6:	0007      	movs	r7, r0
 8000ec8:	4319      	orrs	r1, r3
 8000eca:	428a      	cmp	r2, r1
 8000ecc:	d900      	bls.n	8000ed0 <__aeabi_ddiv+0x214>
 8000ece:	e178      	b.n	80011c2 <__aeabi_ddiv+0x506>
 8000ed0:	1a88      	subs	r0, r1, r2
 8000ed2:	9902      	ldr	r1, [sp, #8]
 8000ed4:	f7ff f99e 	bl	8000214 <__aeabi_uidivmod>
 8000ed8:	9a03      	ldr	r2, [sp, #12]
 8000eda:	0424      	lsls	r4, r4, #16
 8000edc:	4342      	muls	r2, r0
 8000ede:	0409      	lsls	r1, r1, #16
 8000ee0:	0c24      	lsrs	r4, r4, #16
 8000ee2:	0003      	movs	r3, r0
 8000ee4:	430c      	orrs	r4, r1
 8000ee6:	42a2      	cmp	r2, r4
 8000ee8:	d900      	bls.n	8000eec <__aeabi_ddiv+0x230>
 8000eea:	e15d      	b.n	80011a8 <__aeabi_ddiv+0x4ec>
 8000eec:	4641      	mov	r1, r8
 8000eee:	1aa4      	subs	r4, r4, r2
 8000ef0:	043a      	lsls	r2, r7, #16
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	9d04      	ldr	r5, [sp, #16]
 8000ef6:	0413      	lsls	r3, r2, #16
 8000ef8:	0c1b      	lsrs	r3, r3, #16
 8000efa:	4359      	muls	r1, r3
 8000efc:	4647      	mov	r7, r8
 8000efe:	436b      	muls	r3, r5
 8000f00:	469c      	mov	ip, r3
 8000f02:	0c10      	lsrs	r0, r2, #16
 8000f04:	4347      	muls	r7, r0
 8000f06:	0c0b      	lsrs	r3, r1, #16
 8000f08:	44bc      	add	ip, r7
 8000f0a:	4463      	add	r3, ip
 8000f0c:	4368      	muls	r0, r5
 8000f0e:	429f      	cmp	r7, r3
 8000f10:	d903      	bls.n	8000f1a <__aeabi_ddiv+0x25e>
 8000f12:	2580      	movs	r5, #128	@ 0x80
 8000f14:	026d      	lsls	r5, r5, #9
 8000f16:	46ac      	mov	ip, r5
 8000f18:	4460      	add	r0, ip
 8000f1a:	0c1f      	lsrs	r7, r3, #16
 8000f1c:	0409      	lsls	r1, r1, #16
 8000f1e:	041b      	lsls	r3, r3, #16
 8000f20:	0c09      	lsrs	r1, r1, #16
 8000f22:	183f      	adds	r7, r7, r0
 8000f24:	185b      	adds	r3, r3, r1
 8000f26:	42bc      	cmp	r4, r7
 8000f28:	d200      	bcs.n	8000f2c <__aeabi_ddiv+0x270>
 8000f2a:	e102      	b.n	8001132 <__aeabi_ddiv+0x476>
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_ddiv+0x274>
 8000f2e:	e0fd      	b.n	800112c <__aeabi_ddiv+0x470>
 8000f30:	2301      	movs	r3, #1
 8000f32:	431a      	orrs	r2, r3
 8000f34:	4b43      	ldr	r3, [pc, #268]	@ (8001044 <__aeabi_ddiv+0x388>)
 8000f36:	4453      	add	r3, sl
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	dc00      	bgt.n	8000f3e <__aeabi_ddiv+0x282>
 8000f3c:	e0ae      	b.n	800109c <__aeabi_ddiv+0x3e0>
 8000f3e:	0751      	lsls	r1, r2, #29
 8000f40:	d000      	beq.n	8000f44 <__aeabi_ddiv+0x288>
 8000f42:	e198      	b.n	8001276 <__aeabi_ddiv+0x5ba>
 8000f44:	4659      	mov	r1, fp
 8000f46:	01c9      	lsls	r1, r1, #7
 8000f48:	d506      	bpl.n	8000f58 <__aeabi_ddiv+0x29c>
 8000f4a:	4659      	mov	r1, fp
 8000f4c:	4b3e      	ldr	r3, [pc, #248]	@ (8001048 <__aeabi_ddiv+0x38c>)
 8000f4e:	4019      	ands	r1, r3
 8000f50:	2380      	movs	r3, #128	@ 0x80
 8000f52:	468b      	mov	fp, r1
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	4453      	add	r3, sl
 8000f58:	493c      	ldr	r1, [pc, #240]	@ (800104c <__aeabi_ddiv+0x390>)
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	dd00      	ble.n	8000f60 <__aeabi_ddiv+0x2a4>
 8000f5e:	e71a      	b.n	8000d96 <__aeabi_ddiv+0xda>
 8000f60:	4659      	mov	r1, fp
 8000f62:	08d2      	lsrs	r2, r2, #3
 8000f64:	0749      	lsls	r1, r1, #29
 8000f66:	4311      	orrs	r1, r2
 8000f68:	465a      	mov	r2, fp
 8000f6a:	055b      	lsls	r3, r3, #21
 8000f6c:	0254      	lsls	r4, r2, #9
 8000f6e:	4688      	mov	r8, r1
 8000f70:	0b24      	lsrs	r4, r4, #12
 8000f72:	0d5b      	lsrs	r3, r3, #21
 8000f74:	e702      	b.n	8000d7c <__aeabi_ddiv+0xc0>
 8000f76:	465a      	mov	r2, fp
 8000f78:	9b00      	ldr	r3, [sp, #0]
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_ddiv+0x2c4>
 8000f7e:	e07e      	b.n	800107e <__aeabi_ddiv+0x3c2>
 8000f80:	465b      	mov	r3, fp
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d100      	bne.n	8000f88 <__aeabi_ddiv+0x2cc>
 8000f86:	e100      	b.n	800118a <__aeabi_ddiv+0x4ce>
 8000f88:	4658      	mov	r0, fp
 8000f8a:	f001 f9cd 	bl	8002328 <__clzsi2>
 8000f8e:	0002      	movs	r2, r0
 8000f90:	0003      	movs	r3, r0
 8000f92:	3a0b      	subs	r2, #11
 8000f94:	271d      	movs	r7, #29
 8000f96:	9e00      	ldr	r6, [sp, #0]
 8000f98:	1aba      	subs	r2, r7, r2
 8000f9a:	0019      	movs	r1, r3
 8000f9c:	4658      	mov	r0, fp
 8000f9e:	40d6      	lsrs	r6, r2
 8000fa0:	3908      	subs	r1, #8
 8000fa2:	4088      	lsls	r0, r1
 8000fa4:	0032      	movs	r2, r6
 8000fa6:	4302      	orrs	r2, r0
 8000fa8:	4693      	mov	fp, r2
 8000faa:	9a00      	ldr	r2, [sp, #0]
 8000fac:	408a      	lsls	r2, r1
 8000fae:	4928      	ldr	r1, [pc, #160]	@ (8001050 <__aeabi_ddiv+0x394>)
 8000fb0:	4453      	add	r3, sl
 8000fb2:	468a      	mov	sl, r1
 8000fb4:	449a      	add	sl, r3
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e6c8      	b.n	8000d4c <__aeabi_ddiv+0x90>
 8000fba:	465b      	mov	r3, fp
 8000fbc:	4303      	orrs	r3, r0
 8000fbe:	4699      	mov	r9, r3
 8000fc0:	d056      	beq.n	8001070 <__aeabi_ddiv+0x3b4>
 8000fc2:	465b      	mov	r3, fp
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d100      	bne.n	8000fca <__aeabi_ddiv+0x30e>
 8000fc8:	e0cd      	b.n	8001166 <__aeabi_ddiv+0x4aa>
 8000fca:	4658      	mov	r0, fp
 8000fcc:	f001 f9ac 	bl	8002328 <__clzsi2>
 8000fd0:	230b      	movs	r3, #11
 8000fd2:	425b      	negs	r3, r3
 8000fd4:	469c      	mov	ip, r3
 8000fd6:	0002      	movs	r2, r0
 8000fd8:	4484      	add	ip, r0
 8000fda:	4666      	mov	r6, ip
 8000fdc:	231d      	movs	r3, #29
 8000fde:	1b9b      	subs	r3, r3, r6
 8000fe0:	0026      	movs	r6, r4
 8000fe2:	0011      	movs	r1, r2
 8000fe4:	4658      	mov	r0, fp
 8000fe6:	40de      	lsrs	r6, r3
 8000fe8:	3908      	subs	r1, #8
 8000fea:	4088      	lsls	r0, r1
 8000fec:	0033      	movs	r3, r6
 8000fee:	4303      	orrs	r3, r0
 8000ff0:	4699      	mov	r9, r3
 8000ff2:	0023      	movs	r3, r4
 8000ff4:	408b      	lsls	r3, r1
 8000ff6:	4698      	mov	r8, r3
 8000ff8:	4b16      	ldr	r3, [pc, #88]	@ (8001054 <__aeabi_ddiv+0x398>)
 8000ffa:	2400      	movs	r4, #0
 8000ffc:	1a9b      	subs	r3, r3, r2
 8000ffe:	469a      	mov	sl, r3
 8001000:	2300      	movs	r3, #0
 8001002:	9303      	str	r3, [sp, #12]
 8001004:	e682      	b.n	8000d0c <__aeabi_ddiv+0x50>
 8001006:	465a      	mov	r2, fp
 8001008:	4302      	orrs	r2, r0
 800100a:	4691      	mov	r9, r2
 800100c:	d12a      	bne.n	8001064 <__aeabi_ddiv+0x3a8>
 800100e:	2200      	movs	r2, #0
 8001010:	469a      	mov	sl, r3
 8001012:	2302      	movs	r3, #2
 8001014:	4690      	mov	r8, r2
 8001016:	2408      	movs	r4, #8
 8001018:	9303      	str	r3, [sp, #12]
 800101a:	e677      	b.n	8000d0c <__aeabi_ddiv+0x50>
 800101c:	465a      	mov	r2, fp
 800101e:	9b00      	ldr	r3, [sp, #0]
 8001020:	431a      	orrs	r2, r3
 8001022:	4b0d      	ldr	r3, [pc, #52]	@ (8001058 <__aeabi_ddiv+0x39c>)
 8001024:	469c      	mov	ip, r3
 8001026:	44e2      	add	sl, ip
 8001028:	2a00      	cmp	r2, #0
 800102a:	d117      	bne.n	800105c <__aeabi_ddiv+0x3a0>
 800102c:	2302      	movs	r3, #2
 800102e:	431c      	orrs	r4, r3
 8001030:	2300      	movs	r3, #0
 8001032:	469b      	mov	fp, r3
 8001034:	3302      	adds	r3, #2
 8001036:	e689      	b.n	8000d4c <__aeabi_ddiv+0x90>
 8001038:	000007ff 	.word	0x000007ff
 800103c:	fffffc01 	.word	0xfffffc01
 8001040:	08008408 	.word	0x08008408
 8001044:	000003ff 	.word	0x000003ff
 8001048:	feffffff 	.word	0xfeffffff
 800104c:	000007fe 	.word	0x000007fe
 8001050:	000003f3 	.word	0x000003f3
 8001054:	fffffc0d 	.word	0xfffffc0d
 8001058:	fffff801 	.word	0xfffff801
 800105c:	2303      	movs	r3, #3
 800105e:	0032      	movs	r2, r6
 8001060:	431c      	orrs	r4, r3
 8001062:	e673      	b.n	8000d4c <__aeabi_ddiv+0x90>
 8001064:	469a      	mov	sl, r3
 8001066:	2303      	movs	r3, #3
 8001068:	46d9      	mov	r9, fp
 800106a:	240c      	movs	r4, #12
 800106c:	9303      	str	r3, [sp, #12]
 800106e:	e64d      	b.n	8000d0c <__aeabi_ddiv+0x50>
 8001070:	2300      	movs	r3, #0
 8001072:	4698      	mov	r8, r3
 8001074:	469a      	mov	sl, r3
 8001076:	3301      	adds	r3, #1
 8001078:	2404      	movs	r4, #4
 800107a:	9303      	str	r3, [sp, #12]
 800107c:	e646      	b.n	8000d0c <__aeabi_ddiv+0x50>
 800107e:	2301      	movs	r3, #1
 8001080:	431c      	orrs	r4, r3
 8001082:	2300      	movs	r3, #0
 8001084:	469b      	mov	fp, r3
 8001086:	3301      	adds	r3, #1
 8001088:	e660      	b.n	8000d4c <__aeabi_ddiv+0x90>
 800108a:	2300      	movs	r3, #0
 800108c:	2480      	movs	r4, #128	@ 0x80
 800108e:	4698      	mov	r8, r3
 8001090:	2600      	movs	r6, #0
 8001092:	4b92      	ldr	r3, [pc, #584]	@ (80012dc <__aeabi_ddiv+0x620>)
 8001094:	0324      	lsls	r4, r4, #12
 8001096:	e671      	b.n	8000d7c <__aeabi_ddiv+0xc0>
 8001098:	2201      	movs	r2, #1
 800109a:	4252      	negs	r2, r2
 800109c:	2101      	movs	r1, #1
 800109e:	1ac9      	subs	r1, r1, r3
 80010a0:	2938      	cmp	r1, #56	@ 0x38
 80010a2:	dd00      	ble.n	80010a6 <__aeabi_ddiv+0x3ea>
 80010a4:	e666      	b.n	8000d74 <__aeabi_ddiv+0xb8>
 80010a6:	291f      	cmp	r1, #31
 80010a8:	dc00      	bgt.n	80010ac <__aeabi_ddiv+0x3f0>
 80010aa:	e0ab      	b.n	8001204 <__aeabi_ddiv+0x548>
 80010ac:	201f      	movs	r0, #31
 80010ae:	4240      	negs	r0, r0
 80010b0:	1ac3      	subs	r3, r0, r3
 80010b2:	4658      	mov	r0, fp
 80010b4:	40d8      	lsrs	r0, r3
 80010b6:	0003      	movs	r3, r0
 80010b8:	2920      	cmp	r1, #32
 80010ba:	d004      	beq.n	80010c6 <__aeabi_ddiv+0x40a>
 80010bc:	4658      	mov	r0, fp
 80010be:	4988      	ldr	r1, [pc, #544]	@ (80012e0 <__aeabi_ddiv+0x624>)
 80010c0:	4451      	add	r1, sl
 80010c2:	4088      	lsls	r0, r1
 80010c4:	4302      	orrs	r2, r0
 80010c6:	1e51      	subs	r1, r2, #1
 80010c8:	418a      	sbcs	r2, r1
 80010ca:	431a      	orrs	r2, r3
 80010cc:	2307      	movs	r3, #7
 80010ce:	0019      	movs	r1, r3
 80010d0:	2400      	movs	r4, #0
 80010d2:	4011      	ands	r1, r2
 80010d4:	4213      	tst	r3, r2
 80010d6:	d00c      	beq.n	80010f2 <__aeabi_ddiv+0x436>
 80010d8:	230f      	movs	r3, #15
 80010da:	4013      	ands	r3, r2
 80010dc:	2b04      	cmp	r3, #4
 80010de:	d100      	bne.n	80010e2 <__aeabi_ddiv+0x426>
 80010e0:	e0f9      	b.n	80012d6 <__aeabi_ddiv+0x61a>
 80010e2:	1d11      	adds	r1, r2, #4
 80010e4:	4291      	cmp	r1, r2
 80010e6:	419b      	sbcs	r3, r3
 80010e8:	000a      	movs	r2, r1
 80010ea:	425b      	negs	r3, r3
 80010ec:	0759      	lsls	r1, r3, #29
 80010ee:	025b      	lsls	r3, r3, #9
 80010f0:	0b1c      	lsrs	r4, r3, #12
 80010f2:	08d2      	lsrs	r2, r2, #3
 80010f4:	430a      	orrs	r2, r1
 80010f6:	4690      	mov	r8, r2
 80010f8:	2300      	movs	r3, #0
 80010fa:	e63f      	b.n	8000d7c <__aeabi_ddiv+0xc0>
 80010fc:	2480      	movs	r4, #128	@ 0x80
 80010fe:	464b      	mov	r3, r9
 8001100:	0324      	lsls	r4, r4, #12
 8001102:	4223      	tst	r3, r4
 8001104:	d009      	beq.n	800111a <__aeabi_ddiv+0x45e>
 8001106:	465b      	mov	r3, fp
 8001108:	4223      	tst	r3, r4
 800110a:	d106      	bne.n	800111a <__aeabi_ddiv+0x45e>
 800110c:	431c      	orrs	r4, r3
 800110e:	0324      	lsls	r4, r4, #12
 8001110:	002e      	movs	r6, r5
 8001112:	4690      	mov	r8, r2
 8001114:	4b71      	ldr	r3, [pc, #452]	@ (80012dc <__aeabi_ddiv+0x620>)
 8001116:	0b24      	lsrs	r4, r4, #12
 8001118:	e630      	b.n	8000d7c <__aeabi_ddiv+0xc0>
 800111a:	2480      	movs	r4, #128	@ 0x80
 800111c:	464b      	mov	r3, r9
 800111e:	0324      	lsls	r4, r4, #12
 8001120:	431c      	orrs	r4, r3
 8001122:	0324      	lsls	r4, r4, #12
 8001124:	9e02      	ldr	r6, [sp, #8]
 8001126:	4b6d      	ldr	r3, [pc, #436]	@ (80012dc <__aeabi_ddiv+0x620>)
 8001128:	0b24      	lsrs	r4, r4, #12
 800112a:	e627      	b.n	8000d7c <__aeabi_ddiv+0xc0>
 800112c:	2b00      	cmp	r3, #0
 800112e:	d100      	bne.n	8001132 <__aeabi_ddiv+0x476>
 8001130:	e700      	b.n	8000f34 <__aeabi_ddiv+0x278>
 8001132:	9800      	ldr	r0, [sp, #0]
 8001134:	1e51      	subs	r1, r2, #1
 8001136:	4684      	mov	ip, r0
 8001138:	4464      	add	r4, ip
 800113a:	4284      	cmp	r4, r0
 800113c:	d200      	bcs.n	8001140 <__aeabi_ddiv+0x484>
 800113e:	e084      	b.n	800124a <__aeabi_ddiv+0x58e>
 8001140:	42bc      	cmp	r4, r7
 8001142:	d200      	bcs.n	8001146 <__aeabi_ddiv+0x48a>
 8001144:	e0ae      	b.n	80012a4 <__aeabi_ddiv+0x5e8>
 8001146:	d100      	bne.n	800114a <__aeabi_ddiv+0x48e>
 8001148:	e0c1      	b.n	80012ce <__aeabi_ddiv+0x612>
 800114a:	000a      	movs	r2, r1
 800114c:	e6f0      	b.n	8000f30 <__aeabi_ddiv+0x274>
 800114e:	4542      	cmp	r2, r8
 8001150:	d900      	bls.n	8001154 <__aeabi_ddiv+0x498>
 8001152:	e62c      	b.n	8000dae <__aeabi_ddiv+0xf2>
 8001154:	464b      	mov	r3, r9
 8001156:	07dc      	lsls	r4, r3, #31
 8001158:	0858      	lsrs	r0, r3, #1
 800115a:	4643      	mov	r3, r8
 800115c:	085b      	lsrs	r3, r3, #1
 800115e:	431c      	orrs	r4, r3
 8001160:	4643      	mov	r3, r8
 8001162:	07df      	lsls	r7, r3, #31
 8001164:	e62a      	b.n	8000dbc <__aeabi_ddiv+0x100>
 8001166:	f001 f8df 	bl	8002328 <__clzsi2>
 800116a:	2315      	movs	r3, #21
 800116c:	469c      	mov	ip, r3
 800116e:	4484      	add	ip, r0
 8001170:	0002      	movs	r2, r0
 8001172:	4663      	mov	r3, ip
 8001174:	3220      	adds	r2, #32
 8001176:	2b1c      	cmp	r3, #28
 8001178:	dc00      	bgt.n	800117c <__aeabi_ddiv+0x4c0>
 800117a:	e72e      	b.n	8000fda <__aeabi_ddiv+0x31e>
 800117c:	0023      	movs	r3, r4
 800117e:	3808      	subs	r0, #8
 8001180:	4083      	lsls	r3, r0
 8001182:	4699      	mov	r9, r3
 8001184:	2300      	movs	r3, #0
 8001186:	4698      	mov	r8, r3
 8001188:	e736      	b.n	8000ff8 <__aeabi_ddiv+0x33c>
 800118a:	f001 f8cd 	bl	8002328 <__clzsi2>
 800118e:	0002      	movs	r2, r0
 8001190:	0003      	movs	r3, r0
 8001192:	3215      	adds	r2, #21
 8001194:	3320      	adds	r3, #32
 8001196:	2a1c      	cmp	r2, #28
 8001198:	dc00      	bgt.n	800119c <__aeabi_ddiv+0x4e0>
 800119a:	e6fb      	b.n	8000f94 <__aeabi_ddiv+0x2d8>
 800119c:	9900      	ldr	r1, [sp, #0]
 800119e:	3808      	subs	r0, #8
 80011a0:	4081      	lsls	r1, r0
 80011a2:	2200      	movs	r2, #0
 80011a4:	468b      	mov	fp, r1
 80011a6:	e702      	b.n	8000fae <__aeabi_ddiv+0x2f2>
 80011a8:	9900      	ldr	r1, [sp, #0]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	468c      	mov	ip, r1
 80011ae:	4464      	add	r4, ip
 80011b0:	42a1      	cmp	r1, r4
 80011b2:	d900      	bls.n	80011b6 <__aeabi_ddiv+0x4fa>
 80011b4:	e69a      	b.n	8000eec <__aeabi_ddiv+0x230>
 80011b6:	42a2      	cmp	r2, r4
 80011b8:	d800      	bhi.n	80011bc <__aeabi_ddiv+0x500>
 80011ba:	e697      	b.n	8000eec <__aeabi_ddiv+0x230>
 80011bc:	1e83      	subs	r3, r0, #2
 80011be:	4464      	add	r4, ip
 80011c0:	e694      	b.n	8000eec <__aeabi_ddiv+0x230>
 80011c2:	46ac      	mov	ip, r5
 80011c4:	4461      	add	r1, ip
 80011c6:	3f01      	subs	r7, #1
 80011c8:	428d      	cmp	r5, r1
 80011ca:	d900      	bls.n	80011ce <__aeabi_ddiv+0x512>
 80011cc:	e680      	b.n	8000ed0 <__aeabi_ddiv+0x214>
 80011ce:	428a      	cmp	r2, r1
 80011d0:	d800      	bhi.n	80011d4 <__aeabi_ddiv+0x518>
 80011d2:	e67d      	b.n	8000ed0 <__aeabi_ddiv+0x214>
 80011d4:	1e87      	subs	r7, r0, #2
 80011d6:	4461      	add	r1, ip
 80011d8:	e67a      	b.n	8000ed0 <__aeabi_ddiv+0x214>
 80011da:	4285      	cmp	r5, r0
 80011dc:	d000      	beq.n	80011e0 <__aeabi_ddiv+0x524>
 80011de:	e65f      	b.n	8000ea0 <__aeabi_ddiv+0x1e4>
 80011e0:	45b9      	cmp	r9, r7
 80011e2:	d900      	bls.n	80011e6 <__aeabi_ddiv+0x52a>
 80011e4:	e65c      	b.n	8000ea0 <__aeabi_ddiv+0x1e4>
 80011e6:	e656      	b.n	8000e96 <__aeabi_ddiv+0x1da>
 80011e8:	42a2      	cmp	r2, r4
 80011ea:	d800      	bhi.n	80011ee <__aeabi_ddiv+0x532>
 80011ec:	e61a      	b.n	8000e24 <__aeabi_ddiv+0x168>
 80011ee:	1e83      	subs	r3, r0, #2
 80011f0:	4464      	add	r4, ip
 80011f2:	e617      	b.n	8000e24 <__aeabi_ddiv+0x168>
 80011f4:	428a      	cmp	r2, r1
 80011f6:	d800      	bhi.n	80011fa <__aeabi_ddiv+0x53e>
 80011f8:	e600      	b.n	8000dfc <__aeabi_ddiv+0x140>
 80011fa:	46ac      	mov	ip, r5
 80011fc:	1e83      	subs	r3, r0, #2
 80011fe:	4698      	mov	r8, r3
 8001200:	4461      	add	r1, ip
 8001202:	e5fb      	b.n	8000dfc <__aeabi_ddiv+0x140>
 8001204:	4837      	ldr	r0, [pc, #220]	@ (80012e4 <__aeabi_ddiv+0x628>)
 8001206:	0014      	movs	r4, r2
 8001208:	4450      	add	r0, sl
 800120a:	4082      	lsls	r2, r0
 800120c:	465b      	mov	r3, fp
 800120e:	0017      	movs	r7, r2
 8001210:	4083      	lsls	r3, r0
 8001212:	40cc      	lsrs	r4, r1
 8001214:	1e7a      	subs	r2, r7, #1
 8001216:	4197      	sbcs	r7, r2
 8001218:	4323      	orrs	r3, r4
 800121a:	433b      	orrs	r3, r7
 800121c:	001a      	movs	r2, r3
 800121e:	465b      	mov	r3, fp
 8001220:	40cb      	lsrs	r3, r1
 8001222:	0751      	lsls	r1, r2, #29
 8001224:	d009      	beq.n	800123a <__aeabi_ddiv+0x57e>
 8001226:	210f      	movs	r1, #15
 8001228:	4011      	ands	r1, r2
 800122a:	2904      	cmp	r1, #4
 800122c:	d005      	beq.n	800123a <__aeabi_ddiv+0x57e>
 800122e:	1d11      	adds	r1, r2, #4
 8001230:	4291      	cmp	r1, r2
 8001232:	4192      	sbcs	r2, r2
 8001234:	4252      	negs	r2, r2
 8001236:	189b      	adds	r3, r3, r2
 8001238:	000a      	movs	r2, r1
 800123a:	0219      	lsls	r1, r3, #8
 800123c:	d400      	bmi.n	8001240 <__aeabi_ddiv+0x584>
 800123e:	e755      	b.n	80010ec <__aeabi_ddiv+0x430>
 8001240:	2200      	movs	r2, #0
 8001242:	2301      	movs	r3, #1
 8001244:	2400      	movs	r4, #0
 8001246:	4690      	mov	r8, r2
 8001248:	e598      	b.n	8000d7c <__aeabi_ddiv+0xc0>
 800124a:	000a      	movs	r2, r1
 800124c:	42bc      	cmp	r4, r7
 800124e:	d000      	beq.n	8001252 <__aeabi_ddiv+0x596>
 8001250:	e66e      	b.n	8000f30 <__aeabi_ddiv+0x274>
 8001252:	454b      	cmp	r3, r9
 8001254:	d000      	beq.n	8001258 <__aeabi_ddiv+0x59c>
 8001256:	e66b      	b.n	8000f30 <__aeabi_ddiv+0x274>
 8001258:	e66c      	b.n	8000f34 <__aeabi_ddiv+0x278>
 800125a:	4b23      	ldr	r3, [pc, #140]	@ (80012e8 <__aeabi_ddiv+0x62c>)
 800125c:	4a23      	ldr	r2, [pc, #140]	@ (80012ec <__aeabi_ddiv+0x630>)
 800125e:	4453      	add	r3, sl
 8001260:	4592      	cmp	sl, r2
 8001262:	da00      	bge.n	8001266 <__aeabi_ddiv+0x5aa>
 8001264:	e718      	b.n	8001098 <__aeabi_ddiv+0x3dc>
 8001266:	2101      	movs	r1, #1
 8001268:	4249      	negs	r1, r1
 800126a:	1d0a      	adds	r2, r1, #4
 800126c:	428a      	cmp	r2, r1
 800126e:	4189      	sbcs	r1, r1
 8001270:	4249      	negs	r1, r1
 8001272:	448b      	add	fp, r1
 8001274:	e666      	b.n	8000f44 <__aeabi_ddiv+0x288>
 8001276:	210f      	movs	r1, #15
 8001278:	4011      	ands	r1, r2
 800127a:	2904      	cmp	r1, #4
 800127c:	d100      	bne.n	8001280 <__aeabi_ddiv+0x5c4>
 800127e:	e661      	b.n	8000f44 <__aeabi_ddiv+0x288>
 8001280:	0011      	movs	r1, r2
 8001282:	e7f2      	b.n	800126a <__aeabi_ddiv+0x5ae>
 8001284:	42bc      	cmp	r4, r7
 8001286:	d800      	bhi.n	800128a <__aeabi_ddiv+0x5ce>
 8001288:	e60a      	b.n	8000ea0 <__aeabi_ddiv+0x1e4>
 800128a:	2302      	movs	r3, #2
 800128c:	425b      	negs	r3, r3
 800128e:	469c      	mov	ip, r3
 8001290:	9900      	ldr	r1, [sp, #0]
 8001292:	444f      	add	r7, r9
 8001294:	454f      	cmp	r7, r9
 8001296:	419b      	sbcs	r3, r3
 8001298:	44e3      	add	fp, ip
 800129a:	468c      	mov	ip, r1
 800129c:	425b      	negs	r3, r3
 800129e:	4463      	add	r3, ip
 80012a0:	18c0      	adds	r0, r0, r3
 80012a2:	e5ff      	b.n	8000ea4 <__aeabi_ddiv+0x1e8>
 80012a4:	4649      	mov	r1, r9
 80012a6:	9d00      	ldr	r5, [sp, #0]
 80012a8:	0048      	lsls	r0, r1, #1
 80012aa:	4548      	cmp	r0, r9
 80012ac:	4189      	sbcs	r1, r1
 80012ae:	46ac      	mov	ip, r5
 80012b0:	4249      	negs	r1, r1
 80012b2:	4461      	add	r1, ip
 80012b4:	4681      	mov	r9, r0
 80012b6:	3a02      	subs	r2, #2
 80012b8:	1864      	adds	r4, r4, r1
 80012ba:	e7c7      	b.n	800124c <__aeabi_ddiv+0x590>
 80012bc:	2480      	movs	r4, #128	@ 0x80
 80012be:	465b      	mov	r3, fp
 80012c0:	0324      	lsls	r4, r4, #12
 80012c2:	431c      	orrs	r4, r3
 80012c4:	0324      	lsls	r4, r4, #12
 80012c6:	4690      	mov	r8, r2
 80012c8:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <__aeabi_ddiv+0x620>)
 80012ca:	0b24      	lsrs	r4, r4, #12
 80012cc:	e556      	b.n	8000d7c <__aeabi_ddiv+0xc0>
 80012ce:	4599      	cmp	r9, r3
 80012d0:	d3e8      	bcc.n	80012a4 <__aeabi_ddiv+0x5e8>
 80012d2:	000a      	movs	r2, r1
 80012d4:	e7bd      	b.n	8001252 <__aeabi_ddiv+0x596>
 80012d6:	2300      	movs	r3, #0
 80012d8:	e708      	b.n	80010ec <__aeabi_ddiv+0x430>
 80012da:	46c0      	nop			@ (mov r8, r8)
 80012dc:	000007ff 	.word	0x000007ff
 80012e0:	0000043e 	.word	0x0000043e
 80012e4:	0000041e 	.word	0x0000041e
 80012e8:	000003ff 	.word	0x000003ff
 80012ec:	fffffc02 	.word	0xfffffc02

080012f0 <__eqdf2>:
 80012f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012f2:	4657      	mov	r7, sl
 80012f4:	46de      	mov	lr, fp
 80012f6:	464e      	mov	r6, r9
 80012f8:	4645      	mov	r5, r8
 80012fa:	b5e0      	push	{r5, r6, r7, lr}
 80012fc:	000d      	movs	r5, r1
 80012fe:	0004      	movs	r4, r0
 8001300:	0fe8      	lsrs	r0, r5, #31
 8001302:	4683      	mov	fp, r0
 8001304:	0309      	lsls	r1, r1, #12
 8001306:	0fd8      	lsrs	r0, r3, #31
 8001308:	0b09      	lsrs	r1, r1, #12
 800130a:	4682      	mov	sl, r0
 800130c:	4819      	ldr	r0, [pc, #100]	@ (8001374 <__eqdf2+0x84>)
 800130e:	468c      	mov	ip, r1
 8001310:	031f      	lsls	r7, r3, #12
 8001312:	0069      	lsls	r1, r5, #1
 8001314:	005e      	lsls	r6, r3, #1
 8001316:	0d49      	lsrs	r1, r1, #21
 8001318:	0b3f      	lsrs	r7, r7, #12
 800131a:	0d76      	lsrs	r6, r6, #21
 800131c:	4281      	cmp	r1, r0
 800131e:	d018      	beq.n	8001352 <__eqdf2+0x62>
 8001320:	4286      	cmp	r6, r0
 8001322:	d00f      	beq.n	8001344 <__eqdf2+0x54>
 8001324:	2001      	movs	r0, #1
 8001326:	42b1      	cmp	r1, r6
 8001328:	d10d      	bne.n	8001346 <__eqdf2+0x56>
 800132a:	45bc      	cmp	ip, r7
 800132c:	d10b      	bne.n	8001346 <__eqdf2+0x56>
 800132e:	4294      	cmp	r4, r2
 8001330:	d109      	bne.n	8001346 <__eqdf2+0x56>
 8001332:	45d3      	cmp	fp, sl
 8001334:	d01c      	beq.n	8001370 <__eqdf2+0x80>
 8001336:	2900      	cmp	r1, #0
 8001338:	d105      	bne.n	8001346 <__eqdf2+0x56>
 800133a:	4660      	mov	r0, ip
 800133c:	4320      	orrs	r0, r4
 800133e:	1e43      	subs	r3, r0, #1
 8001340:	4198      	sbcs	r0, r3
 8001342:	e000      	b.n	8001346 <__eqdf2+0x56>
 8001344:	2001      	movs	r0, #1
 8001346:	bcf0      	pop	{r4, r5, r6, r7}
 8001348:	46bb      	mov	fp, r7
 800134a:	46b2      	mov	sl, r6
 800134c:	46a9      	mov	r9, r5
 800134e:	46a0      	mov	r8, r4
 8001350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001352:	2001      	movs	r0, #1
 8001354:	428e      	cmp	r6, r1
 8001356:	d1f6      	bne.n	8001346 <__eqdf2+0x56>
 8001358:	4661      	mov	r1, ip
 800135a:	4339      	orrs	r1, r7
 800135c:	000f      	movs	r7, r1
 800135e:	4317      	orrs	r7, r2
 8001360:	4327      	orrs	r7, r4
 8001362:	d1f0      	bne.n	8001346 <__eqdf2+0x56>
 8001364:	465b      	mov	r3, fp
 8001366:	4652      	mov	r2, sl
 8001368:	1a98      	subs	r0, r3, r2
 800136a:	1e43      	subs	r3, r0, #1
 800136c:	4198      	sbcs	r0, r3
 800136e:	e7ea      	b.n	8001346 <__eqdf2+0x56>
 8001370:	2000      	movs	r0, #0
 8001372:	e7e8      	b.n	8001346 <__eqdf2+0x56>
 8001374:	000007ff 	.word	0x000007ff

08001378 <__gedf2>:
 8001378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137a:	4657      	mov	r7, sl
 800137c:	464e      	mov	r6, r9
 800137e:	4645      	mov	r5, r8
 8001380:	46de      	mov	lr, fp
 8001382:	b5e0      	push	{r5, r6, r7, lr}
 8001384:	000d      	movs	r5, r1
 8001386:	030f      	lsls	r7, r1, #12
 8001388:	0b39      	lsrs	r1, r7, #12
 800138a:	b083      	sub	sp, #12
 800138c:	0004      	movs	r4, r0
 800138e:	4680      	mov	r8, r0
 8001390:	9101      	str	r1, [sp, #4]
 8001392:	0058      	lsls	r0, r3, #1
 8001394:	0fe9      	lsrs	r1, r5, #31
 8001396:	4f31      	ldr	r7, [pc, #196]	@ (800145c <__gedf2+0xe4>)
 8001398:	0d40      	lsrs	r0, r0, #21
 800139a:	468c      	mov	ip, r1
 800139c:	006e      	lsls	r6, r5, #1
 800139e:	0319      	lsls	r1, r3, #12
 80013a0:	4682      	mov	sl, r0
 80013a2:	4691      	mov	r9, r2
 80013a4:	0d76      	lsrs	r6, r6, #21
 80013a6:	0b09      	lsrs	r1, r1, #12
 80013a8:	0fd8      	lsrs	r0, r3, #31
 80013aa:	42be      	cmp	r6, r7
 80013ac:	d01f      	beq.n	80013ee <__gedf2+0x76>
 80013ae:	45ba      	cmp	sl, r7
 80013b0:	d00f      	beq.n	80013d2 <__gedf2+0x5a>
 80013b2:	2e00      	cmp	r6, #0
 80013b4:	d12f      	bne.n	8001416 <__gedf2+0x9e>
 80013b6:	4655      	mov	r5, sl
 80013b8:	9e01      	ldr	r6, [sp, #4]
 80013ba:	4334      	orrs	r4, r6
 80013bc:	2d00      	cmp	r5, #0
 80013be:	d127      	bne.n	8001410 <__gedf2+0x98>
 80013c0:	430a      	orrs	r2, r1
 80013c2:	d03a      	beq.n	800143a <__gedf2+0xc2>
 80013c4:	2c00      	cmp	r4, #0
 80013c6:	d145      	bne.n	8001454 <__gedf2+0xdc>
 80013c8:	2800      	cmp	r0, #0
 80013ca:	d11a      	bne.n	8001402 <__gedf2+0x8a>
 80013cc:	2001      	movs	r0, #1
 80013ce:	4240      	negs	r0, r0
 80013d0:	e017      	b.n	8001402 <__gedf2+0x8a>
 80013d2:	4311      	orrs	r1, r2
 80013d4:	d13b      	bne.n	800144e <__gedf2+0xd6>
 80013d6:	2e00      	cmp	r6, #0
 80013d8:	d102      	bne.n	80013e0 <__gedf2+0x68>
 80013da:	9f01      	ldr	r7, [sp, #4]
 80013dc:	4327      	orrs	r7, r4
 80013de:	d0f3      	beq.n	80013c8 <__gedf2+0x50>
 80013e0:	4584      	cmp	ip, r0
 80013e2:	d109      	bne.n	80013f8 <__gedf2+0x80>
 80013e4:	4663      	mov	r3, ip
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0f0      	beq.n	80013cc <__gedf2+0x54>
 80013ea:	4660      	mov	r0, ip
 80013ec:	e009      	b.n	8001402 <__gedf2+0x8a>
 80013ee:	9f01      	ldr	r7, [sp, #4]
 80013f0:	4327      	orrs	r7, r4
 80013f2:	d12c      	bne.n	800144e <__gedf2+0xd6>
 80013f4:	45b2      	cmp	sl, r6
 80013f6:	d024      	beq.n	8001442 <__gedf2+0xca>
 80013f8:	4663      	mov	r3, ip
 80013fa:	2002      	movs	r0, #2
 80013fc:	3b01      	subs	r3, #1
 80013fe:	4018      	ands	r0, r3
 8001400:	3801      	subs	r0, #1
 8001402:	b003      	add	sp, #12
 8001404:	bcf0      	pop	{r4, r5, r6, r7}
 8001406:	46bb      	mov	fp, r7
 8001408:	46b2      	mov	sl, r6
 800140a:	46a9      	mov	r9, r5
 800140c:	46a0      	mov	r8, r4
 800140e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001410:	2c00      	cmp	r4, #0
 8001412:	d0d9      	beq.n	80013c8 <__gedf2+0x50>
 8001414:	e7e4      	b.n	80013e0 <__gedf2+0x68>
 8001416:	4654      	mov	r4, sl
 8001418:	2c00      	cmp	r4, #0
 800141a:	d0ed      	beq.n	80013f8 <__gedf2+0x80>
 800141c:	4584      	cmp	ip, r0
 800141e:	d1eb      	bne.n	80013f8 <__gedf2+0x80>
 8001420:	4556      	cmp	r6, sl
 8001422:	dce9      	bgt.n	80013f8 <__gedf2+0x80>
 8001424:	dbde      	blt.n	80013e4 <__gedf2+0x6c>
 8001426:	9b01      	ldr	r3, [sp, #4]
 8001428:	428b      	cmp	r3, r1
 800142a:	d8e5      	bhi.n	80013f8 <__gedf2+0x80>
 800142c:	d1da      	bne.n	80013e4 <__gedf2+0x6c>
 800142e:	45c8      	cmp	r8, r9
 8001430:	d8e2      	bhi.n	80013f8 <__gedf2+0x80>
 8001432:	2000      	movs	r0, #0
 8001434:	45c8      	cmp	r8, r9
 8001436:	d2e4      	bcs.n	8001402 <__gedf2+0x8a>
 8001438:	e7d4      	b.n	80013e4 <__gedf2+0x6c>
 800143a:	2000      	movs	r0, #0
 800143c:	2c00      	cmp	r4, #0
 800143e:	d0e0      	beq.n	8001402 <__gedf2+0x8a>
 8001440:	e7da      	b.n	80013f8 <__gedf2+0x80>
 8001442:	4311      	orrs	r1, r2
 8001444:	d103      	bne.n	800144e <__gedf2+0xd6>
 8001446:	4584      	cmp	ip, r0
 8001448:	d1d6      	bne.n	80013f8 <__gedf2+0x80>
 800144a:	2000      	movs	r0, #0
 800144c:	e7d9      	b.n	8001402 <__gedf2+0x8a>
 800144e:	2002      	movs	r0, #2
 8001450:	4240      	negs	r0, r0
 8001452:	e7d6      	b.n	8001402 <__gedf2+0x8a>
 8001454:	4584      	cmp	ip, r0
 8001456:	d0e6      	beq.n	8001426 <__gedf2+0xae>
 8001458:	e7ce      	b.n	80013f8 <__gedf2+0x80>
 800145a:	46c0      	nop			@ (mov r8, r8)
 800145c:	000007ff 	.word	0x000007ff

08001460 <__ledf2>:
 8001460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001462:	4657      	mov	r7, sl
 8001464:	464e      	mov	r6, r9
 8001466:	4645      	mov	r5, r8
 8001468:	46de      	mov	lr, fp
 800146a:	b5e0      	push	{r5, r6, r7, lr}
 800146c:	000d      	movs	r5, r1
 800146e:	030f      	lsls	r7, r1, #12
 8001470:	0004      	movs	r4, r0
 8001472:	4680      	mov	r8, r0
 8001474:	0fe8      	lsrs	r0, r5, #31
 8001476:	0b39      	lsrs	r1, r7, #12
 8001478:	4684      	mov	ip, r0
 800147a:	b083      	sub	sp, #12
 800147c:	0058      	lsls	r0, r3, #1
 800147e:	4f30      	ldr	r7, [pc, #192]	@ (8001540 <__ledf2+0xe0>)
 8001480:	0d40      	lsrs	r0, r0, #21
 8001482:	9101      	str	r1, [sp, #4]
 8001484:	031e      	lsls	r6, r3, #12
 8001486:	0069      	lsls	r1, r5, #1
 8001488:	4682      	mov	sl, r0
 800148a:	4691      	mov	r9, r2
 800148c:	0d49      	lsrs	r1, r1, #21
 800148e:	0b36      	lsrs	r6, r6, #12
 8001490:	0fd8      	lsrs	r0, r3, #31
 8001492:	42b9      	cmp	r1, r7
 8001494:	d020      	beq.n	80014d8 <__ledf2+0x78>
 8001496:	45ba      	cmp	sl, r7
 8001498:	d00f      	beq.n	80014ba <__ledf2+0x5a>
 800149a:	2900      	cmp	r1, #0
 800149c:	d12b      	bne.n	80014f6 <__ledf2+0x96>
 800149e:	9901      	ldr	r1, [sp, #4]
 80014a0:	430c      	orrs	r4, r1
 80014a2:	4651      	mov	r1, sl
 80014a4:	2900      	cmp	r1, #0
 80014a6:	d137      	bne.n	8001518 <__ledf2+0xb8>
 80014a8:	4332      	orrs	r2, r6
 80014aa:	d038      	beq.n	800151e <__ledf2+0xbe>
 80014ac:	2c00      	cmp	r4, #0
 80014ae:	d144      	bne.n	800153a <__ledf2+0xda>
 80014b0:	2800      	cmp	r0, #0
 80014b2:	d119      	bne.n	80014e8 <__ledf2+0x88>
 80014b4:	2001      	movs	r0, #1
 80014b6:	4240      	negs	r0, r0
 80014b8:	e016      	b.n	80014e8 <__ledf2+0x88>
 80014ba:	4316      	orrs	r6, r2
 80014bc:	d113      	bne.n	80014e6 <__ledf2+0x86>
 80014be:	2900      	cmp	r1, #0
 80014c0:	d102      	bne.n	80014c8 <__ledf2+0x68>
 80014c2:	9f01      	ldr	r7, [sp, #4]
 80014c4:	4327      	orrs	r7, r4
 80014c6:	d0f3      	beq.n	80014b0 <__ledf2+0x50>
 80014c8:	4584      	cmp	ip, r0
 80014ca:	d020      	beq.n	800150e <__ledf2+0xae>
 80014cc:	4663      	mov	r3, ip
 80014ce:	2002      	movs	r0, #2
 80014d0:	3b01      	subs	r3, #1
 80014d2:	4018      	ands	r0, r3
 80014d4:	3801      	subs	r0, #1
 80014d6:	e007      	b.n	80014e8 <__ledf2+0x88>
 80014d8:	9f01      	ldr	r7, [sp, #4]
 80014da:	4327      	orrs	r7, r4
 80014dc:	d103      	bne.n	80014e6 <__ledf2+0x86>
 80014de:	458a      	cmp	sl, r1
 80014e0:	d1f4      	bne.n	80014cc <__ledf2+0x6c>
 80014e2:	4316      	orrs	r6, r2
 80014e4:	d01f      	beq.n	8001526 <__ledf2+0xc6>
 80014e6:	2002      	movs	r0, #2
 80014e8:	b003      	add	sp, #12
 80014ea:	bcf0      	pop	{r4, r5, r6, r7}
 80014ec:	46bb      	mov	fp, r7
 80014ee:	46b2      	mov	sl, r6
 80014f0:	46a9      	mov	r9, r5
 80014f2:	46a0      	mov	r8, r4
 80014f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014f6:	4654      	mov	r4, sl
 80014f8:	2c00      	cmp	r4, #0
 80014fa:	d0e7      	beq.n	80014cc <__ledf2+0x6c>
 80014fc:	4584      	cmp	ip, r0
 80014fe:	d1e5      	bne.n	80014cc <__ledf2+0x6c>
 8001500:	4551      	cmp	r1, sl
 8001502:	dce3      	bgt.n	80014cc <__ledf2+0x6c>
 8001504:	db03      	blt.n	800150e <__ledf2+0xae>
 8001506:	9b01      	ldr	r3, [sp, #4]
 8001508:	42b3      	cmp	r3, r6
 800150a:	d8df      	bhi.n	80014cc <__ledf2+0x6c>
 800150c:	d00f      	beq.n	800152e <__ledf2+0xce>
 800150e:	4663      	mov	r3, ip
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0cf      	beq.n	80014b4 <__ledf2+0x54>
 8001514:	4660      	mov	r0, ip
 8001516:	e7e7      	b.n	80014e8 <__ledf2+0x88>
 8001518:	2c00      	cmp	r4, #0
 800151a:	d0c9      	beq.n	80014b0 <__ledf2+0x50>
 800151c:	e7d4      	b.n	80014c8 <__ledf2+0x68>
 800151e:	2000      	movs	r0, #0
 8001520:	2c00      	cmp	r4, #0
 8001522:	d0e1      	beq.n	80014e8 <__ledf2+0x88>
 8001524:	e7d2      	b.n	80014cc <__ledf2+0x6c>
 8001526:	4584      	cmp	ip, r0
 8001528:	d1d0      	bne.n	80014cc <__ledf2+0x6c>
 800152a:	2000      	movs	r0, #0
 800152c:	e7dc      	b.n	80014e8 <__ledf2+0x88>
 800152e:	45c8      	cmp	r8, r9
 8001530:	d8cc      	bhi.n	80014cc <__ledf2+0x6c>
 8001532:	2000      	movs	r0, #0
 8001534:	45c8      	cmp	r8, r9
 8001536:	d2d7      	bcs.n	80014e8 <__ledf2+0x88>
 8001538:	e7e9      	b.n	800150e <__ledf2+0xae>
 800153a:	4584      	cmp	ip, r0
 800153c:	d0e3      	beq.n	8001506 <__ledf2+0xa6>
 800153e:	e7c5      	b.n	80014cc <__ledf2+0x6c>
 8001540:	000007ff 	.word	0x000007ff

08001544 <__aeabi_dmul>:
 8001544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001546:	4657      	mov	r7, sl
 8001548:	46de      	mov	lr, fp
 800154a:	464e      	mov	r6, r9
 800154c:	4645      	mov	r5, r8
 800154e:	b5e0      	push	{r5, r6, r7, lr}
 8001550:	001f      	movs	r7, r3
 8001552:	030b      	lsls	r3, r1, #12
 8001554:	0b1b      	lsrs	r3, r3, #12
 8001556:	0016      	movs	r6, r2
 8001558:	469a      	mov	sl, r3
 800155a:	0fca      	lsrs	r2, r1, #31
 800155c:	004b      	lsls	r3, r1, #1
 800155e:	0004      	movs	r4, r0
 8001560:	4693      	mov	fp, r2
 8001562:	b087      	sub	sp, #28
 8001564:	0d5b      	lsrs	r3, r3, #21
 8001566:	d100      	bne.n	800156a <__aeabi_dmul+0x26>
 8001568:	e0d5      	b.n	8001716 <__aeabi_dmul+0x1d2>
 800156a:	4abb      	ldr	r2, [pc, #748]	@ (8001858 <__aeabi_dmul+0x314>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d100      	bne.n	8001572 <__aeabi_dmul+0x2e>
 8001570:	e0f8      	b.n	8001764 <__aeabi_dmul+0x220>
 8001572:	4651      	mov	r1, sl
 8001574:	0f42      	lsrs	r2, r0, #29
 8001576:	00c9      	lsls	r1, r1, #3
 8001578:	430a      	orrs	r2, r1
 800157a:	2180      	movs	r1, #128	@ 0x80
 800157c:	0409      	lsls	r1, r1, #16
 800157e:	4311      	orrs	r1, r2
 8001580:	00c2      	lsls	r2, r0, #3
 8001582:	4691      	mov	r9, r2
 8001584:	4ab5      	ldr	r2, [pc, #724]	@ (800185c <__aeabi_dmul+0x318>)
 8001586:	468a      	mov	sl, r1
 8001588:	189d      	adds	r5, r3, r2
 800158a:	2300      	movs	r3, #0
 800158c:	4698      	mov	r8, r3
 800158e:	9302      	str	r3, [sp, #8]
 8001590:	033c      	lsls	r4, r7, #12
 8001592:	007b      	lsls	r3, r7, #1
 8001594:	0ffa      	lsrs	r2, r7, #31
 8001596:	0030      	movs	r0, r6
 8001598:	0b24      	lsrs	r4, r4, #12
 800159a:	0d5b      	lsrs	r3, r3, #21
 800159c:	9200      	str	r2, [sp, #0]
 800159e:	d100      	bne.n	80015a2 <__aeabi_dmul+0x5e>
 80015a0:	e096      	b.n	80016d0 <__aeabi_dmul+0x18c>
 80015a2:	4aad      	ldr	r2, [pc, #692]	@ (8001858 <__aeabi_dmul+0x314>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d031      	beq.n	800160c <__aeabi_dmul+0xc8>
 80015a8:	0f72      	lsrs	r2, r6, #29
 80015aa:	00e4      	lsls	r4, r4, #3
 80015ac:	4322      	orrs	r2, r4
 80015ae:	2480      	movs	r4, #128	@ 0x80
 80015b0:	0424      	lsls	r4, r4, #16
 80015b2:	4314      	orrs	r4, r2
 80015b4:	4aa9      	ldr	r2, [pc, #676]	@ (800185c <__aeabi_dmul+0x318>)
 80015b6:	00f0      	lsls	r0, r6, #3
 80015b8:	4694      	mov	ip, r2
 80015ba:	4463      	add	r3, ip
 80015bc:	195b      	adds	r3, r3, r5
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	9201      	str	r2, [sp, #4]
 80015c2:	4642      	mov	r2, r8
 80015c4:	2600      	movs	r6, #0
 80015c6:	2a0a      	cmp	r2, #10
 80015c8:	dc42      	bgt.n	8001650 <__aeabi_dmul+0x10c>
 80015ca:	465a      	mov	r2, fp
 80015cc:	9900      	ldr	r1, [sp, #0]
 80015ce:	404a      	eors	r2, r1
 80015d0:	4693      	mov	fp, r2
 80015d2:	4642      	mov	r2, r8
 80015d4:	2a02      	cmp	r2, #2
 80015d6:	dc32      	bgt.n	800163e <__aeabi_dmul+0xfa>
 80015d8:	3a01      	subs	r2, #1
 80015da:	2a01      	cmp	r2, #1
 80015dc:	d900      	bls.n	80015e0 <__aeabi_dmul+0x9c>
 80015de:	e149      	b.n	8001874 <__aeabi_dmul+0x330>
 80015e0:	2e02      	cmp	r6, #2
 80015e2:	d100      	bne.n	80015e6 <__aeabi_dmul+0xa2>
 80015e4:	e0ca      	b.n	800177c <__aeabi_dmul+0x238>
 80015e6:	2e01      	cmp	r6, #1
 80015e8:	d13d      	bne.n	8001666 <__aeabi_dmul+0x122>
 80015ea:	2300      	movs	r3, #0
 80015ec:	2400      	movs	r4, #0
 80015ee:	2200      	movs	r2, #0
 80015f0:	0010      	movs	r0, r2
 80015f2:	465a      	mov	r2, fp
 80015f4:	051b      	lsls	r3, r3, #20
 80015f6:	4323      	orrs	r3, r4
 80015f8:	07d2      	lsls	r2, r2, #31
 80015fa:	4313      	orrs	r3, r2
 80015fc:	0019      	movs	r1, r3
 80015fe:	b007      	add	sp, #28
 8001600:	bcf0      	pop	{r4, r5, r6, r7}
 8001602:	46bb      	mov	fp, r7
 8001604:	46b2      	mov	sl, r6
 8001606:	46a9      	mov	r9, r5
 8001608:	46a0      	mov	r8, r4
 800160a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800160c:	4b92      	ldr	r3, [pc, #584]	@ (8001858 <__aeabi_dmul+0x314>)
 800160e:	4326      	orrs	r6, r4
 8001610:	18eb      	adds	r3, r5, r3
 8001612:	2e00      	cmp	r6, #0
 8001614:	d100      	bne.n	8001618 <__aeabi_dmul+0xd4>
 8001616:	e0bb      	b.n	8001790 <__aeabi_dmul+0x24c>
 8001618:	2203      	movs	r2, #3
 800161a:	4641      	mov	r1, r8
 800161c:	4311      	orrs	r1, r2
 800161e:	465a      	mov	r2, fp
 8001620:	4688      	mov	r8, r1
 8001622:	9900      	ldr	r1, [sp, #0]
 8001624:	404a      	eors	r2, r1
 8001626:	2180      	movs	r1, #128	@ 0x80
 8001628:	0109      	lsls	r1, r1, #4
 800162a:	468c      	mov	ip, r1
 800162c:	0029      	movs	r1, r5
 800162e:	4461      	add	r1, ip
 8001630:	9101      	str	r1, [sp, #4]
 8001632:	4641      	mov	r1, r8
 8001634:	290a      	cmp	r1, #10
 8001636:	dd00      	ble.n	800163a <__aeabi_dmul+0xf6>
 8001638:	e233      	b.n	8001aa2 <__aeabi_dmul+0x55e>
 800163a:	4693      	mov	fp, r2
 800163c:	2603      	movs	r6, #3
 800163e:	4642      	mov	r2, r8
 8001640:	2701      	movs	r7, #1
 8001642:	4097      	lsls	r7, r2
 8001644:	21a6      	movs	r1, #166	@ 0xa6
 8001646:	003a      	movs	r2, r7
 8001648:	00c9      	lsls	r1, r1, #3
 800164a:	400a      	ands	r2, r1
 800164c:	420f      	tst	r7, r1
 800164e:	d031      	beq.n	80016b4 <__aeabi_dmul+0x170>
 8001650:	9e02      	ldr	r6, [sp, #8]
 8001652:	2e02      	cmp	r6, #2
 8001654:	d100      	bne.n	8001658 <__aeabi_dmul+0x114>
 8001656:	e235      	b.n	8001ac4 <__aeabi_dmul+0x580>
 8001658:	2e03      	cmp	r6, #3
 800165a:	d100      	bne.n	800165e <__aeabi_dmul+0x11a>
 800165c:	e1d2      	b.n	8001a04 <__aeabi_dmul+0x4c0>
 800165e:	4654      	mov	r4, sl
 8001660:	4648      	mov	r0, r9
 8001662:	2e01      	cmp	r6, #1
 8001664:	d0c1      	beq.n	80015ea <__aeabi_dmul+0xa6>
 8001666:	9a01      	ldr	r2, [sp, #4]
 8001668:	4b7d      	ldr	r3, [pc, #500]	@ (8001860 <__aeabi_dmul+0x31c>)
 800166a:	4694      	mov	ip, r2
 800166c:	4463      	add	r3, ip
 800166e:	2b00      	cmp	r3, #0
 8001670:	dc00      	bgt.n	8001674 <__aeabi_dmul+0x130>
 8001672:	e0c0      	b.n	80017f6 <__aeabi_dmul+0x2b2>
 8001674:	0742      	lsls	r2, r0, #29
 8001676:	d009      	beq.n	800168c <__aeabi_dmul+0x148>
 8001678:	220f      	movs	r2, #15
 800167a:	4002      	ands	r2, r0
 800167c:	2a04      	cmp	r2, #4
 800167e:	d005      	beq.n	800168c <__aeabi_dmul+0x148>
 8001680:	1d02      	adds	r2, r0, #4
 8001682:	4282      	cmp	r2, r0
 8001684:	4180      	sbcs	r0, r0
 8001686:	4240      	negs	r0, r0
 8001688:	1824      	adds	r4, r4, r0
 800168a:	0010      	movs	r0, r2
 800168c:	01e2      	lsls	r2, r4, #7
 800168e:	d506      	bpl.n	800169e <__aeabi_dmul+0x15a>
 8001690:	4b74      	ldr	r3, [pc, #464]	@ (8001864 <__aeabi_dmul+0x320>)
 8001692:	9a01      	ldr	r2, [sp, #4]
 8001694:	401c      	ands	r4, r3
 8001696:	2380      	movs	r3, #128	@ 0x80
 8001698:	4694      	mov	ip, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	4463      	add	r3, ip
 800169e:	4a72      	ldr	r2, [pc, #456]	@ (8001868 <__aeabi_dmul+0x324>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	dc6b      	bgt.n	800177c <__aeabi_dmul+0x238>
 80016a4:	0762      	lsls	r2, r4, #29
 80016a6:	08c0      	lsrs	r0, r0, #3
 80016a8:	0264      	lsls	r4, r4, #9
 80016aa:	055b      	lsls	r3, r3, #21
 80016ac:	4302      	orrs	r2, r0
 80016ae:	0b24      	lsrs	r4, r4, #12
 80016b0:	0d5b      	lsrs	r3, r3, #21
 80016b2:	e79d      	b.n	80015f0 <__aeabi_dmul+0xac>
 80016b4:	2190      	movs	r1, #144	@ 0x90
 80016b6:	0089      	lsls	r1, r1, #2
 80016b8:	420f      	tst	r7, r1
 80016ba:	d163      	bne.n	8001784 <__aeabi_dmul+0x240>
 80016bc:	2288      	movs	r2, #136	@ 0x88
 80016be:	423a      	tst	r2, r7
 80016c0:	d100      	bne.n	80016c4 <__aeabi_dmul+0x180>
 80016c2:	e0d7      	b.n	8001874 <__aeabi_dmul+0x330>
 80016c4:	9b00      	ldr	r3, [sp, #0]
 80016c6:	46a2      	mov	sl, r4
 80016c8:	469b      	mov	fp, r3
 80016ca:	4681      	mov	r9, r0
 80016cc:	9602      	str	r6, [sp, #8]
 80016ce:	e7bf      	b.n	8001650 <__aeabi_dmul+0x10c>
 80016d0:	0023      	movs	r3, r4
 80016d2:	4333      	orrs	r3, r6
 80016d4:	d100      	bne.n	80016d8 <__aeabi_dmul+0x194>
 80016d6:	e07f      	b.n	80017d8 <__aeabi_dmul+0x294>
 80016d8:	2c00      	cmp	r4, #0
 80016da:	d100      	bne.n	80016de <__aeabi_dmul+0x19a>
 80016dc:	e1ad      	b.n	8001a3a <__aeabi_dmul+0x4f6>
 80016de:	0020      	movs	r0, r4
 80016e0:	f000 fe22 	bl	8002328 <__clzsi2>
 80016e4:	0002      	movs	r2, r0
 80016e6:	0003      	movs	r3, r0
 80016e8:	3a0b      	subs	r2, #11
 80016ea:	201d      	movs	r0, #29
 80016ec:	0019      	movs	r1, r3
 80016ee:	1a82      	subs	r2, r0, r2
 80016f0:	0030      	movs	r0, r6
 80016f2:	3908      	subs	r1, #8
 80016f4:	40d0      	lsrs	r0, r2
 80016f6:	408c      	lsls	r4, r1
 80016f8:	4304      	orrs	r4, r0
 80016fa:	0030      	movs	r0, r6
 80016fc:	4088      	lsls	r0, r1
 80016fe:	4a5b      	ldr	r2, [pc, #364]	@ (800186c <__aeabi_dmul+0x328>)
 8001700:	1aeb      	subs	r3, r5, r3
 8001702:	4694      	mov	ip, r2
 8001704:	4463      	add	r3, ip
 8001706:	1c5a      	adds	r2, r3, #1
 8001708:	9201      	str	r2, [sp, #4]
 800170a:	4642      	mov	r2, r8
 800170c:	2600      	movs	r6, #0
 800170e:	2a0a      	cmp	r2, #10
 8001710:	dc00      	bgt.n	8001714 <__aeabi_dmul+0x1d0>
 8001712:	e75a      	b.n	80015ca <__aeabi_dmul+0x86>
 8001714:	e79c      	b.n	8001650 <__aeabi_dmul+0x10c>
 8001716:	4653      	mov	r3, sl
 8001718:	4303      	orrs	r3, r0
 800171a:	4699      	mov	r9, r3
 800171c:	d054      	beq.n	80017c8 <__aeabi_dmul+0x284>
 800171e:	4653      	mov	r3, sl
 8001720:	2b00      	cmp	r3, #0
 8001722:	d100      	bne.n	8001726 <__aeabi_dmul+0x1e2>
 8001724:	e177      	b.n	8001a16 <__aeabi_dmul+0x4d2>
 8001726:	4650      	mov	r0, sl
 8001728:	f000 fdfe 	bl	8002328 <__clzsi2>
 800172c:	230b      	movs	r3, #11
 800172e:	425b      	negs	r3, r3
 8001730:	469c      	mov	ip, r3
 8001732:	0002      	movs	r2, r0
 8001734:	4484      	add	ip, r0
 8001736:	0011      	movs	r1, r2
 8001738:	4650      	mov	r0, sl
 800173a:	3908      	subs	r1, #8
 800173c:	4088      	lsls	r0, r1
 800173e:	231d      	movs	r3, #29
 8001740:	4680      	mov	r8, r0
 8001742:	4660      	mov	r0, ip
 8001744:	1a1b      	subs	r3, r3, r0
 8001746:	0020      	movs	r0, r4
 8001748:	40d8      	lsrs	r0, r3
 800174a:	0003      	movs	r3, r0
 800174c:	4640      	mov	r0, r8
 800174e:	4303      	orrs	r3, r0
 8001750:	469a      	mov	sl, r3
 8001752:	0023      	movs	r3, r4
 8001754:	408b      	lsls	r3, r1
 8001756:	4699      	mov	r9, r3
 8001758:	2300      	movs	r3, #0
 800175a:	4d44      	ldr	r5, [pc, #272]	@ (800186c <__aeabi_dmul+0x328>)
 800175c:	4698      	mov	r8, r3
 800175e:	1aad      	subs	r5, r5, r2
 8001760:	9302      	str	r3, [sp, #8]
 8001762:	e715      	b.n	8001590 <__aeabi_dmul+0x4c>
 8001764:	4652      	mov	r2, sl
 8001766:	4302      	orrs	r2, r0
 8001768:	4691      	mov	r9, r2
 800176a:	d126      	bne.n	80017ba <__aeabi_dmul+0x276>
 800176c:	2200      	movs	r2, #0
 800176e:	001d      	movs	r5, r3
 8001770:	2302      	movs	r3, #2
 8001772:	4692      	mov	sl, r2
 8001774:	3208      	adds	r2, #8
 8001776:	4690      	mov	r8, r2
 8001778:	9302      	str	r3, [sp, #8]
 800177a:	e709      	b.n	8001590 <__aeabi_dmul+0x4c>
 800177c:	2400      	movs	r4, #0
 800177e:	2200      	movs	r2, #0
 8001780:	4b35      	ldr	r3, [pc, #212]	@ (8001858 <__aeabi_dmul+0x314>)
 8001782:	e735      	b.n	80015f0 <__aeabi_dmul+0xac>
 8001784:	2300      	movs	r3, #0
 8001786:	2480      	movs	r4, #128	@ 0x80
 8001788:	469b      	mov	fp, r3
 800178a:	0324      	lsls	r4, r4, #12
 800178c:	4b32      	ldr	r3, [pc, #200]	@ (8001858 <__aeabi_dmul+0x314>)
 800178e:	e72f      	b.n	80015f0 <__aeabi_dmul+0xac>
 8001790:	2202      	movs	r2, #2
 8001792:	4641      	mov	r1, r8
 8001794:	4311      	orrs	r1, r2
 8001796:	2280      	movs	r2, #128	@ 0x80
 8001798:	0112      	lsls	r2, r2, #4
 800179a:	4694      	mov	ip, r2
 800179c:	002a      	movs	r2, r5
 800179e:	4462      	add	r2, ip
 80017a0:	4688      	mov	r8, r1
 80017a2:	9201      	str	r2, [sp, #4]
 80017a4:	290a      	cmp	r1, #10
 80017a6:	dd00      	ble.n	80017aa <__aeabi_dmul+0x266>
 80017a8:	e752      	b.n	8001650 <__aeabi_dmul+0x10c>
 80017aa:	465a      	mov	r2, fp
 80017ac:	2000      	movs	r0, #0
 80017ae:	9900      	ldr	r1, [sp, #0]
 80017b0:	0004      	movs	r4, r0
 80017b2:	404a      	eors	r2, r1
 80017b4:	4693      	mov	fp, r2
 80017b6:	2602      	movs	r6, #2
 80017b8:	e70b      	b.n	80015d2 <__aeabi_dmul+0x8e>
 80017ba:	220c      	movs	r2, #12
 80017bc:	001d      	movs	r5, r3
 80017be:	2303      	movs	r3, #3
 80017c0:	4681      	mov	r9, r0
 80017c2:	4690      	mov	r8, r2
 80017c4:	9302      	str	r3, [sp, #8]
 80017c6:	e6e3      	b.n	8001590 <__aeabi_dmul+0x4c>
 80017c8:	2300      	movs	r3, #0
 80017ca:	469a      	mov	sl, r3
 80017cc:	3304      	adds	r3, #4
 80017ce:	4698      	mov	r8, r3
 80017d0:	3b03      	subs	r3, #3
 80017d2:	2500      	movs	r5, #0
 80017d4:	9302      	str	r3, [sp, #8]
 80017d6:	e6db      	b.n	8001590 <__aeabi_dmul+0x4c>
 80017d8:	4642      	mov	r2, r8
 80017da:	3301      	adds	r3, #1
 80017dc:	431a      	orrs	r2, r3
 80017de:	002b      	movs	r3, r5
 80017e0:	4690      	mov	r8, r2
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	9201      	str	r2, [sp, #4]
 80017e6:	4642      	mov	r2, r8
 80017e8:	2400      	movs	r4, #0
 80017ea:	2000      	movs	r0, #0
 80017ec:	2601      	movs	r6, #1
 80017ee:	2a0a      	cmp	r2, #10
 80017f0:	dc00      	bgt.n	80017f4 <__aeabi_dmul+0x2b0>
 80017f2:	e6ea      	b.n	80015ca <__aeabi_dmul+0x86>
 80017f4:	e72c      	b.n	8001650 <__aeabi_dmul+0x10c>
 80017f6:	2201      	movs	r2, #1
 80017f8:	1ad2      	subs	r2, r2, r3
 80017fa:	2a38      	cmp	r2, #56	@ 0x38
 80017fc:	dd00      	ble.n	8001800 <__aeabi_dmul+0x2bc>
 80017fe:	e6f4      	b.n	80015ea <__aeabi_dmul+0xa6>
 8001800:	2a1f      	cmp	r2, #31
 8001802:	dc00      	bgt.n	8001806 <__aeabi_dmul+0x2c2>
 8001804:	e12a      	b.n	8001a5c <__aeabi_dmul+0x518>
 8001806:	211f      	movs	r1, #31
 8001808:	4249      	negs	r1, r1
 800180a:	1acb      	subs	r3, r1, r3
 800180c:	0021      	movs	r1, r4
 800180e:	40d9      	lsrs	r1, r3
 8001810:	000b      	movs	r3, r1
 8001812:	2a20      	cmp	r2, #32
 8001814:	d005      	beq.n	8001822 <__aeabi_dmul+0x2de>
 8001816:	4a16      	ldr	r2, [pc, #88]	@ (8001870 <__aeabi_dmul+0x32c>)
 8001818:	9d01      	ldr	r5, [sp, #4]
 800181a:	4694      	mov	ip, r2
 800181c:	4465      	add	r5, ip
 800181e:	40ac      	lsls	r4, r5
 8001820:	4320      	orrs	r0, r4
 8001822:	1e42      	subs	r2, r0, #1
 8001824:	4190      	sbcs	r0, r2
 8001826:	4318      	orrs	r0, r3
 8001828:	2307      	movs	r3, #7
 800182a:	0019      	movs	r1, r3
 800182c:	2400      	movs	r4, #0
 800182e:	4001      	ands	r1, r0
 8001830:	4203      	tst	r3, r0
 8001832:	d00c      	beq.n	800184e <__aeabi_dmul+0x30a>
 8001834:	230f      	movs	r3, #15
 8001836:	4003      	ands	r3, r0
 8001838:	2b04      	cmp	r3, #4
 800183a:	d100      	bne.n	800183e <__aeabi_dmul+0x2fa>
 800183c:	e140      	b.n	8001ac0 <__aeabi_dmul+0x57c>
 800183e:	1d03      	adds	r3, r0, #4
 8001840:	4283      	cmp	r3, r0
 8001842:	41a4      	sbcs	r4, r4
 8001844:	0018      	movs	r0, r3
 8001846:	4264      	negs	r4, r4
 8001848:	0761      	lsls	r1, r4, #29
 800184a:	0264      	lsls	r4, r4, #9
 800184c:	0b24      	lsrs	r4, r4, #12
 800184e:	08c2      	lsrs	r2, r0, #3
 8001850:	2300      	movs	r3, #0
 8001852:	430a      	orrs	r2, r1
 8001854:	e6cc      	b.n	80015f0 <__aeabi_dmul+0xac>
 8001856:	46c0      	nop			@ (mov r8, r8)
 8001858:	000007ff 	.word	0x000007ff
 800185c:	fffffc01 	.word	0xfffffc01
 8001860:	000003ff 	.word	0x000003ff
 8001864:	feffffff 	.word	0xfeffffff
 8001868:	000007fe 	.word	0x000007fe
 800186c:	fffffc0d 	.word	0xfffffc0d
 8001870:	0000043e 	.word	0x0000043e
 8001874:	4649      	mov	r1, r9
 8001876:	464a      	mov	r2, r9
 8001878:	0409      	lsls	r1, r1, #16
 800187a:	0c09      	lsrs	r1, r1, #16
 800187c:	000d      	movs	r5, r1
 800187e:	0c16      	lsrs	r6, r2, #16
 8001880:	0c02      	lsrs	r2, r0, #16
 8001882:	0400      	lsls	r0, r0, #16
 8001884:	0c00      	lsrs	r0, r0, #16
 8001886:	4345      	muls	r5, r0
 8001888:	46ac      	mov	ip, r5
 800188a:	0005      	movs	r5, r0
 800188c:	4375      	muls	r5, r6
 800188e:	46a8      	mov	r8, r5
 8001890:	0015      	movs	r5, r2
 8001892:	000f      	movs	r7, r1
 8001894:	4375      	muls	r5, r6
 8001896:	9200      	str	r2, [sp, #0]
 8001898:	9502      	str	r5, [sp, #8]
 800189a:	002a      	movs	r2, r5
 800189c:	9d00      	ldr	r5, [sp, #0]
 800189e:	436f      	muls	r7, r5
 80018a0:	4665      	mov	r5, ip
 80018a2:	0c2d      	lsrs	r5, r5, #16
 80018a4:	46a9      	mov	r9, r5
 80018a6:	4447      	add	r7, r8
 80018a8:	444f      	add	r7, r9
 80018aa:	45b8      	cmp	r8, r7
 80018ac:	d905      	bls.n	80018ba <__aeabi_dmul+0x376>
 80018ae:	0015      	movs	r5, r2
 80018b0:	2280      	movs	r2, #128	@ 0x80
 80018b2:	0252      	lsls	r2, r2, #9
 80018b4:	4690      	mov	r8, r2
 80018b6:	4445      	add	r5, r8
 80018b8:	9502      	str	r5, [sp, #8]
 80018ba:	0c3d      	lsrs	r5, r7, #16
 80018bc:	9503      	str	r5, [sp, #12]
 80018be:	4665      	mov	r5, ip
 80018c0:	042d      	lsls	r5, r5, #16
 80018c2:	043f      	lsls	r7, r7, #16
 80018c4:	0c2d      	lsrs	r5, r5, #16
 80018c6:	46ac      	mov	ip, r5
 80018c8:	003d      	movs	r5, r7
 80018ca:	4465      	add	r5, ip
 80018cc:	9504      	str	r5, [sp, #16]
 80018ce:	0c25      	lsrs	r5, r4, #16
 80018d0:	0424      	lsls	r4, r4, #16
 80018d2:	0c24      	lsrs	r4, r4, #16
 80018d4:	46ac      	mov	ip, r5
 80018d6:	0025      	movs	r5, r4
 80018d8:	4375      	muls	r5, r6
 80018da:	46a8      	mov	r8, r5
 80018dc:	4665      	mov	r5, ip
 80018de:	000f      	movs	r7, r1
 80018e0:	4369      	muls	r1, r5
 80018e2:	4441      	add	r1, r8
 80018e4:	4689      	mov	r9, r1
 80018e6:	4367      	muls	r7, r4
 80018e8:	0c39      	lsrs	r1, r7, #16
 80018ea:	4449      	add	r1, r9
 80018ec:	436e      	muls	r6, r5
 80018ee:	4588      	cmp	r8, r1
 80018f0:	d903      	bls.n	80018fa <__aeabi_dmul+0x3b6>
 80018f2:	2280      	movs	r2, #128	@ 0x80
 80018f4:	0252      	lsls	r2, r2, #9
 80018f6:	4690      	mov	r8, r2
 80018f8:	4446      	add	r6, r8
 80018fa:	0c0d      	lsrs	r5, r1, #16
 80018fc:	46a8      	mov	r8, r5
 80018fe:	0035      	movs	r5, r6
 8001900:	4445      	add	r5, r8
 8001902:	9505      	str	r5, [sp, #20]
 8001904:	9d03      	ldr	r5, [sp, #12]
 8001906:	043f      	lsls	r7, r7, #16
 8001908:	46a8      	mov	r8, r5
 800190a:	0c3f      	lsrs	r7, r7, #16
 800190c:	0409      	lsls	r1, r1, #16
 800190e:	19c9      	adds	r1, r1, r7
 8001910:	4488      	add	r8, r1
 8001912:	4645      	mov	r5, r8
 8001914:	9503      	str	r5, [sp, #12]
 8001916:	4655      	mov	r5, sl
 8001918:	042e      	lsls	r6, r5, #16
 800191a:	0c36      	lsrs	r6, r6, #16
 800191c:	0c2f      	lsrs	r7, r5, #16
 800191e:	0035      	movs	r5, r6
 8001920:	4345      	muls	r5, r0
 8001922:	4378      	muls	r0, r7
 8001924:	4681      	mov	r9, r0
 8001926:	0038      	movs	r0, r7
 8001928:	46a8      	mov	r8, r5
 800192a:	0c2d      	lsrs	r5, r5, #16
 800192c:	46aa      	mov	sl, r5
 800192e:	9a00      	ldr	r2, [sp, #0]
 8001930:	4350      	muls	r0, r2
 8001932:	4372      	muls	r2, r6
 8001934:	444a      	add	r2, r9
 8001936:	4452      	add	r2, sl
 8001938:	4591      	cmp	r9, r2
 800193a:	d903      	bls.n	8001944 <__aeabi_dmul+0x400>
 800193c:	2580      	movs	r5, #128	@ 0x80
 800193e:	026d      	lsls	r5, r5, #9
 8001940:	46a9      	mov	r9, r5
 8001942:	4448      	add	r0, r9
 8001944:	0c15      	lsrs	r5, r2, #16
 8001946:	46a9      	mov	r9, r5
 8001948:	4645      	mov	r5, r8
 800194a:	042d      	lsls	r5, r5, #16
 800194c:	0c2d      	lsrs	r5, r5, #16
 800194e:	46a8      	mov	r8, r5
 8001950:	4665      	mov	r5, ip
 8001952:	437d      	muls	r5, r7
 8001954:	0412      	lsls	r2, r2, #16
 8001956:	4448      	add	r0, r9
 8001958:	4490      	add	r8, r2
 800195a:	46a9      	mov	r9, r5
 800195c:	0032      	movs	r2, r6
 800195e:	4665      	mov	r5, ip
 8001960:	4362      	muls	r2, r4
 8001962:	436e      	muls	r6, r5
 8001964:	437c      	muls	r4, r7
 8001966:	0c17      	lsrs	r7, r2, #16
 8001968:	1936      	adds	r6, r6, r4
 800196a:	19bf      	adds	r7, r7, r6
 800196c:	42bc      	cmp	r4, r7
 800196e:	d903      	bls.n	8001978 <__aeabi_dmul+0x434>
 8001970:	2480      	movs	r4, #128	@ 0x80
 8001972:	0264      	lsls	r4, r4, #9
 8001974:	46a4      	mov	ip, r4
 8001976:	44e1      	add	r9, ip
 8001978:	9c02      	ldr	r4, [sp, #8]
 800197a:	9e03      	ldr	r6, [sp, #12]
 800197c:	46a4      	mov	ip, r4
 800197e:	9d05      	ldr	r5, [sp, #20]
 8001980:	4466      	add	r6, ip
 8001982:	428e      	cmp	r6, r1
 8001984:	4189      	sbcs	r1, r1
 8001986:	46ac      	mov	ip, r5
 8001988:	0412      	lsls	r2, r2, #16
 800198a:	043c      	lsls	r4, r7, #16
 800198c:	0c12      	lsrs	r2, r2, #16
 800198e:	18a2      	adds	r2, r4, r2
 8001990:	4462      	add	r2, ip
 8001992:	4249      	negs	r1, r1
 8001994:	1854      	adds	r4, r2, r1
 8001996:	4446      	add	r6, r8
 8001998:	46a4      	mov	ip, r4
 800199a:	4546      	cmp	r6, r8
 800199c:	41a4      	sbcs	r4, r4
 800199e:	4682      	mov	sl, r0
 80019a0:	4264      	negs	r4, r4
 80019a2:	46a0      	mov	r8, r4
 80019a4:	42aa      	cmp	r2, r5
 80019a6:	4192      	sbcs	r2, r2
 80019a8:	458c      	cmp	ip, r1
 80019aa:	4189      	sbcs	r1, r1
 80019ac:	44e2      	add	sl, ip
 80019ae:	44d0      	add	r8, sl
 80019b0:	4249      	negs	r1, r1
 80019b2:	4252      	negs	r2, r2
 80019b4:	430a      	orrs	r2, r1
 80019b6:	45a0      	cmp	r8, r4
 80019b8:	41a4      	sbcs	r4, r4
 80019ba:	4582      	cmp	sl, r0
 80019bc:	4189      	sbcs	r1, r1
 80019be:	4264      	negs	r4, r4
 80019c0:	4249      	negs	r1, r1
 80019c2:	430c      	orrs	r4, r1
 80019c4:	4641      	mov	r1, r8
 80019c6:	0c3f      	lsrs	r7, r7, #16
 80019c8:	19d2      	adds	r2, r2, r7
 80019ca:	1912      	adds	r2, r2, r4
 80019cc:	0dcc      	lsrs	r4, r1, #23
 80019ce:	9904      	ldr	r1, [sp, #16]
 80019d0:	0270      	lsls	r0, r6, #9
 80019d2:	4308      	orrs	r0, r1
 80019d4:	1e41      	subs	r1, r0, #1
 80019d6:	4188      	sbcs	r0, r1
 80019d8:	4641      	mov	r1, r8
 80019da:	444a      	add	r2, r9
 80019dc:	0df6      	lsrs	r6, r6, #23
 80019de:	0252      	lsls	r2, r2, #9
 80019e0:	4330      	orrs	r0, r6
 80019e2:	0249      	lsls	r1, r1, #9
 80019e4:	4314      	orrs	r4, r2
 80019e6:	4308      	orrs	r0, r1
 80019e8:	01d2      	lsls	r2, r2, #7
 80019ea:	d535      	bpl.n	8001a58 <__aeabi_dmul+0x514>
 80019ec:	2201      	movs	r2, #1
 80019ee:	0843      	lsrs	r3, r0, #1
 80019f0:	4002      	ands	r2, r0
 80019f2:	4313      	orrs	r3, r2
 80019f4:	07e0      	lsls	r0, r4, #31
 80019f6:	4318      	orrs	r0, r3
 80019f8:	0864      	lsrs	r4, r4, #1
 80019fa:	e634      	b.n	8001666 <__aeabi_dmul+0x122>
 80019fc:	9b00      	ldr	r3, [sp, #0]
 80019fe:	46a2      	mov	sl, r4
 8001a00:	469b      	mov	fp, r3
 8001a02:	4681      	mov	r9, r0
 8001a04:	2480      	movs	r4, #128	@ 0x80
 8001a06:	4653      	mov	r3, sl
 8001a08:	0324      	lsls	r4, r4, #12
 8001a0a:	431c      	orrs	r4, r3
 8001a0c:	0324      	lsls	r4, r4, #12
 8001a0e:	464a      	mov	r2, r9
 8001a10:	4b2e      	ldr	r3, [pc, #184]	@ (8001acc <__aeabi_dmul+0x588>)
 8001a12:	0b24      	lsrs	r4, r4, #12
 8001a14:	e5ec      	b.n	80015f0 <__aeabi_dmul+0xac>
 8001a16:	f000 fc87 	bl	8002328 <__clzsi2>
 8001a1a:	2315      	movs	r3, #21
 8001a1c:	469c      	mov	ip, r3
 8001a1e:	4484      	add	ip, r0
 8001a20:	0002      	movs	r2, r0
 8001a22:	4663      	mov	r3, ip
 8001a24:	3220      	adds	r2, #32
 8001a26:	2b1c      	cmp	r3, #28
 8001a28:	dc00      	bgt.n	8001a2c <__aeabi_dmul+0x4e8>
 8001a2a:	e684      	b.n	8001736 <__aeabi_dmul+0x1f2>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	4699      	mov	r9, r3
 8001a30:	0023      	movs	r3, r4
 8001a32:	3808      	subs	r0, #8
 8001a34:	4083      	lsls	r3, r0
 8001a36:	469a      	mov	sl, r3
 8001a38:	e68e      	b.n	8001758 <__aeabi_dmul+0x214>
 8001a3a:	f000 fc75 	bl	8002328 <__clzsi2>
 8001a3e:	0002      	movs	r2, r0
 8001a40:	0003      	movs	r3, r0
 8001a42:	3215      	adds	r2, #21
 8001a44:	3320      	adds	r3, #32
 8001a46:	2a1c      	cmp	r2, #28
 8001a48:	dc00      	bgt.n	8001a4c <__aeabi_dmul+0x508>
 8001a4a:	e64e      	b.n	80016ea <__aeabi_dmul+0x1a6>
 8001a4c:	0002      	movs	r2, r0
 8001a4e:	0034      	movs	r4, r6
 8001a50:	3a08      	subs	r2, #8
 8001a52:	2000      	movs	r0, #0
 8001a54:	4094      	lsls	r4, r2
 8001a56:	e652      	b.n	80016fe <__aeabi_dmul+0x1ba>
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	e604      	b.n	8001666 <__aeabi_dmul+0x122>
 8001a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad0 <__aeabi_dmul+0x58c>)
 8001a5e:	0021      	movs	r1, r4
 8001a60:	469c      	mov	ip, r3
 8001a62:	0003      	movs	r3, r0
 8001a64:	9d01      	ldr	r5, [sp, #4]
 8001a66:	40d3      	lsrs	r3, r2
 8001a68:	4465      	add	r5, ip
 8001a6a:	40a9      	lsls	r1, r5
 8001a6c:	4319      	orrs	r1, r3
 8001a6e:	0003      	movs	r3, r0
 8001a70:	40ab      	lsls	r3, r5
 8001a72:	1e58      	subs	r0, r3, #1
 8001a74:	4183      	sbcs	r3, r0
 8001a76:	4319      	orrs	r1, r3
 8001a78:	0008      	movs	r0, r1
 8001a7a:	40d4      	lsrs	r4, r2
 8001a7c:	074b      	lsls	r3, r1, #29
 8001a7e:	d009      	beq.n	8001a94 <__aeabi_dmul+0x550>
 8001a80:	230f      	movs	r3, #15
 8001a82:	400b      	ands	r3, r1
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d005      	beq.n	8001a94 <__aeabi_dmul+0x550>
 8001a88:	1d0b      	adds	r3, r1, #4
 8001a8a:	428b      	cmp	r3, r1
 8001a8c:	4180      	sbcs	r0, r0
 8001a8e:	4240      	negs	r0, r0
 8001a90:	1824      	adds	r4, r4, r0
 8001a92:	0018      	movs	r0, r3
 8001a94:	0223      	lsls	r3, r4, #8
 8001a96:	d400      	bmi.n	8001a9a <__aeabi_dmul+0x556>
 8001a98:	e6d6      	b.n	8001848 <__aeabi_dmul+0x304>
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	2400      	movs	r4, #0
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	e5a6      	b.n	80015f0 <__aeabi_dmul+0xac>
 8001aa2:	290f      	cmp	r1, #15
 8001aa4:	d1aa      	bne.n	80019fc <__aeabi_dmul+0x4b8>
 8001aa6:	2380      	movs	r3, #128	@ 0x80
 8001aa8:	4652      	mov	r2, sl
 8001aaa:	031b      	lsls	r3, r3, #12
 8001aac:	421a      	tst	r2, r3
 8001aae:	d0a9      	beq.n	8001a04 <__aeabi_dmul+0x4c0>
 8001ab0:	421c      	tst	r4, r3
 8001ab2:	d1a7      	bne.n	8001a04 <__aeabi_dmul+0x4c0>
 8001ab4:	431c      	orrs	r4, r3
 8001ab6:	9b00      	ldr	r3, [sp, #0]
 8001ab8:	0002      	movs	r2, r0
 8001aba:	469b      	mov	fp, r3
 8001abc:	4b03      	ldr	r3, [pc, #12]	@ (8001acc <__aeabi_dmul+0x588>)
 8001abe:	e597      	b.n	80015f0 <__aeabi_dmul+0xac>
 8001ac0:	2400      	movs	r4, #0
 8001ac2:	e6c1      	b.n	8001848 <__aeabi_dmul+0x304>
 8001ac4:	2400      	movs	r4, #0
 8001ac6:	4b01      	ldr	r3, [pc, #4]	@ (8001acc <__aeabi_dmul+0x588>)
 8001ac8:	0022      	movs	r2, r4
 8001aca:	e591      	b.n	80015f0 <__aeabi_dmul+0xac>
 8001acc:	000007ff 	.word	0x000007ff
 8001ad0:	0000041e 	.word	0x0000041e

08001ad4 <__aeabi_dsub>:
 8001ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ad6:	464e      	mov	r6, r9
 8001ad8:	4645      	mov	r5, r8
 8001ada:	46de      	mov	lr, fp
 8001adc:	4657      	mov	r7, sl
 8001ade:	b5e0      	push	{r5, r6, r7, lr}
 8001ae0:	b085      	sub	sp, #20
 8001ae2:	9000      	str	r0, [sp, #0]
 8001ae4:	9101      	str	r1, [sp, #4]
 8001ae6:	030c      	lsls	r4, r1, #12
 8001ae8:	004f      	lsls	r7, r1, #1
 8001aea:	0fce      	lsrs	r6, r1, #31
 8001aec:	0a61      	lsrs	r1, r4, #9
 8001aee:	9c00      	ldr	r4, [sp, #0]
 8001af0:	46b0      	mov	r8, r6
 8001af2:	0f64      	lsrs	r4, r4, #29
 8001af4:	430c      	orrs	r4, r1
 8001af6:	9900      	ldr	r1, [sp, #0]
 8001af8:	0d7f      	lsrs	r7, r7, #21
 8001afa:	00c8      	lsls	r0, r1, #3
 8001afc:	0011      	movs	r1, r2
 8001afe:	001a      	movs	r2, r3
 8001b00:	031b      	lsls	r3, r3, #12
 8001b02:	469c      	mov	ip, r3
 8001b04:	9100      	str	r1, [sp, #0]
 8001b06:	9201      	str	r2, [sp, #4]
 8001b08:	0051      	lsls	r1, r2, #1
 8001b0a:	0d4b      	lsrs	r3, r1, #21
 8001b0c:	4699      	mov	r9, r3
 8001b0e:	9b01      	ldr	r3, [sp, #4]
 8001b10:	9d00      	ldr	r5, [sp, #0]
 8001b12:	0fd9      	lsrs	r1, r3, #31
 8001b14:	4663      	mov	r3, ip
 8001b16:	0f6a      	lsrs	r2, r5, #29
 8001b18:	0a5b      	lsrs	r3, r3, #9
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	00ea      	lsls	r2, r5, #3
 8001b1e:	4694      	mov	ip, r2
 8001b20:	4693      	mov	fp, r2
 8001b22:	4ac1      	ldr	r2, [pc, #772]	@ (8001e28 <__aeabi_dsub+0x354>)
 8001b24:	9003      	str	r0, [sp, #12]
 8001b26:	9302      	str	r3, [sp, #8]
 8001b28:	4591      	cmp	r9, r2
 8001b2a:	d100      	bne.n	8001b2e <__aeabi_dsub+0x5a>
 8001b2c:	e0cd      	b.n	8001cca <__aeabi_dsub+0x1f6>
 8001b2e:	2501      	movs	r5, #1
 8001b30:	4069      	eors	r1, r5
 8001b32:	464d      	mov	r5, r9
 8001b34:	1b7d      	subs	r5, r7, r5
 8001b36:	46aa      	mov	sl, r5
 8001b38:	428e      	cmp	r6, r1
 8001b3a:	d100      	bne.n	8001b3e <__aeabi_dsub+0x6a>
 8001b3c:	e080      	b.n	8001c40 <__aeabi_dsub+0x16c>
 8001b3e:	2d00      	cmp	r5, #0
 8001b40:	dc00      	bgt.n	8001b44 <__aeabi_dsub+0x70>
 8001b42:	e335      	b.n	80021b0 <__aeabi_dsub+0x6dc>
 8001b44:	4649      	mov	r1, r9
 8001b46:	2900      	cmp	r1, #0
 8001b48:	d100      	bne.n	8001b4c <__aeabi_dsub+0x78>
 8001b4a:	e0df      	b.n	8001d0c <__aeabi_dsub+0x238>
 8001b4c:	4297      	cmp	r7, r2
 8001b4e:	d100      	bne.n	8001b52 <__aeabi_dsub+0x7e>
 8001b50:	e194      	b.n	8001e7c <__aeabi_dsub+0x3a8>
 8001b52:	4652      	mov	r2, sl
 8001b54:	2501      	movs	r5, #1
 8001b56:	2a38      	cmp	r2, #56	@ 0x38
 8001b58:	dc19      	bgt.n	8001b8e <__aeabi_dsub+0xba>
 8001b5a:	2280      	movs	r2, #128	@ 0x80
 8001b5c:	9b02      	ldr	r3, [sp, #8]
 8001b5e:	0412      	lsls	r2, r2, #16
 8001b60:	4313      	orrs	r3, r2
 8001b62:	9302      	str	r3, [sp, #8]
 8001b64:	4652      	mov	r2, sl
 8001b66:	2a1f      	cmp	r2, #31
 8001b68:	dd00      	ble.n	8001b6c <__aeabi_dsub+0x98>
 8001b6a:	e1e3      	b.n	8001f34 <__aeabi_dsub+0x460>
 8001b6c:	4653      	mov	r3, sl
 8001b6e:	2220      	movs	r2, #32
 8001b70:	4661      	mov	r1, ip
 8001b72:	9d02      	ldr	r5, [sp, #8]
 8001b74:	1ad2      	subs	r2, r2, r3
 8001b76:	4095      	lsls	r5, r2
 8001b78:	40d9      	lsrs	r1, r3
 8001b7a:	430d      	orrs	r5, r1
 8001b7c:	4661      	mov	r1, ip
 8001b7e:	4091      	lsls	r1, r2
 8001b80:	000a      	movs	r2, r1
 8001b82:	1e51      	subs	r1, r2, #1
 8001b84:	418a      	sbcs	r2, r1
 8001b86:	4315      	orrs	r5, r2
 8001b88:	9a02      	ldr	r2, [sp, #8]
 8001b8a:	40da      	lsrs	r2, r3
 8001b8c:	1aa4      	subs	r4, r4, r2
 8001b8e:	1b45      	subs	r5, r0, r5
 8001b90:	42a8      	cmp	r0, r5
 8001b92:	4180      	sbcs	r0, r0
 8001b94:	4240      	negs	r0, r0
 8001b96:	1a24      	subs	r4, r4, r0
 8001b98:	0223      	lsls	r3, r4, #8
 8001b9a:	d400      	bmi.n	8001b9e <__aeabi_dsub+0xca>
 8001b9c:	e13d      	b.n	8001e1a <__aeabi_dsub+0x346>
 8001b9e:	0264      	lsls	r4, r4, #9
 8001ba0:	0a64      	lsrs	r4, r4, #9
 8001ba2:	2c00      	cmp	r4, #0
 8001ba4:	d100      	bne.n	8001ba8 <__aeabi_dsub+0xd4>
 8001ba6:	e147      	b.n	8001e38 <__aeabi_dsub+0x364>
 8001ba8:	0020      	movs	r0, r4
 8001baa:	f000 fbbd 	bl	8002328 <__clzsi2>
 8001bae:	0003      	movs	r3, r0
 8001bb0:	3b08      	subs	r3, #8
 8001bb2:	2120      	movs	r1, #32
 8001bb4:	0028      	movs	r0, r5
 8001bb6:	1aca      	subs	r2, r1, r3
 8001bb8:	40d0      	lsrs	r0, r2
 8001bba:	409c      	lsls	r4, r3
 8001bbc:	0002      	movs	r2, r0
 8001bbe:	409d      	lsls	r5, r3
 8001bc0:	4322      	orrs	r2, r4
 8001bc2:	429f      	cmp	r7, r3
 8001bc4:	dd00      	ble.n	8001bc8 <__aeabi_dsub+0xf4>
 8001bc6:	e177      	b.n	8001eb8 <__aeabi_dsub+0x3e4>
 8001bc8:	1bd8      	subs	r0, r3, r7
 8001bca:	3001      	adds	r0, #1
 8001bcc:	1a09      	subs	r1, r1, r0
 8001bce:	002c      	movs	r4, r5
 8001bd0:	408d      	lsls	r5, r1
 8001bd2:	40c4      	lsrs	r4, r0
 8001bd4:	1e6b      	subs	r3, r5, #1
 8001bd6:	419d      	sbcs	r5, r3
 8001bd8:	0013      	movs	r3, r2
 8001bda:	40c2      	lsrs	r2, r0
 8001bdc:	408b      	lsls	r3, r1
 8001bde:	4325      	orrs	r5, r4
 8001be0:	2700      	movs	r7, #0
 8001be2:	0014      	movs	r4, r2
 8001be4:	431d      	orrs	r5, r3
 8001be6:	076b      	lsls	r3, r5, #29
 8001be8:	d009      	beq.n	8001bfe <__aeabi_dsub+0x12a>
 8001bea:	230f      	movs	r3, #15
 8001bec:	402b      	ands	r3, r5
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d005      	beq.n	8001bfe <__aeabi_dsub+0x12a>
 8001bf2:	1d2b      	adds	r3, r5, #4
 8001bf4:	42ab      	cmp	r3, r5
 8001bf6:	41ad      	sbcs	r5, r5
 8001bf8:	426d      	negs	r5, r5
 8001bfa:	1964      	adds	r4, r4, r5
 8001bfc:	001d      	movs	r5, r3
 8001bfe:	0223      	lsls	r3, r4, #8
 8001c00:	d400      	bmi.n	8001c04 <__aeabi_dsub+0x130>
 8001c02:	e140      	b.n	8001e86 <__aeabi_dsub+0x3b2>
 8001c04:	4a88      	ldr	r2, [pc, #544]	@ (8001e28 <__aeabi_dsub+0x354>)
 8001c06:	3701      	adds	r7, #1
 8001c08:	4297      	cmp	r7, r2
 8001c0a:	d100      	bne.n	8001c0e <__aeabi_dsub+0x13a>
 8001c0c:	e101      	b.n	8001e12 <__aeabi_dsub+0x33e>
 8001c0e:	2601      	movs	r6, #1
 8001c10:	4643      	mov	r3, r8
 8001c12:	4986      	ldr	r1, [pc, #536]	@ (8001e2c <__aeabi_dsub+0x358>)
 8001c14:	08ed      	lsrs	r5, r5, #3
 8001c16:	4021      	ands	r1, r4
 8001c18:	074a      	lsls	r2, r1, #29
 8001c1a:	432a      	orrs	r2, r5
 8001c1c:	057c      	lsls	r4, r7, #21
 8001c1e:	024d      	lsls	r5, r1, #9
 8001c20:	0b2d      	lsrs	r5, r5, #12
 8001c22:	0d64      	lsrs	r4, r4, #21
 8001c24:	401e      	ands	r6, r3
 8001c26:	0524      	lsls	r4, r4, #20
 8001c28:	432c      	orrs	r4, r5
 8001c2a:	07f6      	lsls	r6, r6, #31
 8001c2c:	4334      	orrs	r4, r6
 8001c2e:	0010      	movs	r0, r2
 8001c30:	0021      	movs	r1, r4
 8001c32:	b005      	add	sp, #20
 8001c34:	bcf0      	pop	{r4, r5, r6, r7}
 8001c36:	46bb      	mov	fp, r7
 8001c38:	46b2      	mov	sl, r6
 8001c3a:	46a9      	mov	r9, r5
 8001c3c:	46a0      	mov	r8, r4
 8001c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c40:	2d00      	cmp	r5, #0
 8001c42:	dc00      	bgt.n	8001c46 <__aeabi_dsub+0x172>
 8001c44:	e2d0      	b.n	80021e8 <__aeabi_dsub+0x714>
 8001c46:	4649      	mov	r1, r9
 8001c48:	2900      	cmp	r1, #0
 8001c4a:	d000      	beq.n	8001c4e <__aeabi_dsub+0x17a>
 8001c4c:	e0d4      	b.n	8001df8 <__aeabi_dsub+0x324>
 8001c4e:	4661      	mov	r1, ip
 8001c50:	9b02      	ldr	r3, [sp, #8]
 8001c52:	4319      	orrs	r1, r3
 8001c54:	d100      	bne.n	8001c58 <__aeabi_dsub+0x184>
 8001c56:	e12b      	b.n	8001eb0 <__aeabi_dsub+0x3dc>
 8001c58:	1e69      	subs	r1, r5, #1
 8001c5a:	2d01      	cmp	r5, #1
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0x18c>
 8001c5e:	e1d9      	b.n	8002014 <__aeabi_dsub+0x540>
 8001c60:	4295      	cmp	r5, r2
 8001c62:	d100      	bne.n	8001c66 <__aeabi_dsub+0x192>
 8001c64:	e10a      	b.n	8001e7c <__aeabi_dsub+0x3a8>
 8001c66:	2501      	movs	r5, #1
 8001c68:	2938      	cmp	r1, #56	@ 0x38
 8001c6a:	dc17      	bgt.n	8001c9c <__aeabi_dsub+0x1c8>
 8001c6c:	468a      	mov	sl, r1
 8001c6e:	4653      	mov	r3, sl
 8001c70:	2b1f      	cmp	r3, #31
 8001c72:	dd00      	ble.n	8001c76 <__aeabi_dsub+0x1a2>
 8001c74:	e1e7      	b.n	8002046 <__aeabi_dsub+0x572>
 8001c76:	2220      	movs	r2, #32
 8001c78:	1ad2      	subs	r2, r2, r3
 8001c7a:	9b02      	ldr	r3, [sp, #8]
 8001c7c:	4661      	mov	r1, ip
 8001c7e:	4093      	lsls	r3, r2
 8001c80:	001d      	movs	r5, r3
 8001c82:	4653      	mov	r3, sl
 8001c84:	40d9      	lsrs	r1, r3
 8001c86:	4663      	mov	r3, ip
 8001c88:	4093      	lsls	r3, r2
 8001c8a:	001a      	movs	r2, r3
 8001c8c:	430d      	orrs	r5, r1
 8001c8e:	1e51      	subs	r1, r2, #1
 8001c90:	418a      	sbcs	r2, r1
 8001c92:	4653      	mov	r3, sl
 8001c94:	4315      	orrs	r5, r2
 8001c96:	9a02      	ldr	r2, [sp, #8]
 8001c98:	40da      	lsrs	r2, r3
 8001c9a:	18a4      	adds	r4, r4, r2
 8001c9c:	182d      	adds	r5, r5, r0
 8001c9e:	4285      	cmp	r5, r0
 8001ca0:	4180      	sbcs	r0, r0
 8001ca2:	4240      	negs	r0, r0
 8001ca4:	1824      	adds	r4, r4, r0
 8001ca6:	0223      	lsls	r3, r4, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0x1d8>
 8001caa:	e0b6      	b.n	8001e1a <__aeabi_dsub+0x346>
 8001cac:	4b5e      	ldr	r3, [pc, #376]	@ (8001e28 <__aeabi_dsub+0x354>)
 8001cae:	3701      	adds	r7, #1
 8001cb0:	429f      	cmp	r7, r3
 8001cb2:	d100      	bne.n	8001cb6 <__aeabi_dsub+0x1e2>
 8001cb4:	e0ad      	b.n	8001e12 <__aeabi_dsub+0x33e>
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	4b5c      	ldr	r3, [pc, #368]	@ (8001e2c <__aeabi_dsub+0x358>)
 8001cba:	086a      	lsrs	r2, r5, #1
 8001cbc:	401c      	ands	r4, r3
 8001cbe:	4029      	ands	r1, r5
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	07e5      	lsls	r5, r4, #31
 8001cc4:	4315      	orrs	r5, r2
 8001cc6:	0864      	lsrs	r4, r4, #1
 8001cc8:	e78d      	b.n	8001be6 <__aeabi_dsub+0x112>
 8001cca:	4a59      	ldr	r2, [pc, #356]	@ (8001e30 <__aeabi_dsub+0x35c>)
 8001ccc:	9b02      	ldr	r3, [sp, #8]
 8001cce:	4692      	mov	sl, r2
 8001cd0:	4662      	mov	r2, ip
 8001cd2:	44ba      	add	sl, r7
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	d02c      	beq.n	8001d32 <__aeabi_dsub+0x25e>
 8001cd8:	428e      	cmp	r6, r1
 8001cda:	d02e      	beq.n	8001d3a <__aeabi_dsub+0x266>
 8001cdc:	4652      	mov	r2, sl
 8001cde:	2a00      	cmp	r2, #0
 8001ce0:	d060      	beq.n	8001da4 <__aeabi_dsub+0x2d0>
 8001ce2:	2f00      	cmp	r7, #0
 8001ce4:	d100      	bne.n	8001ce8 <__aeabi_dsub+0x214>
 8001ce6:	e0db      	b.n	8001ea0 <__aeabi_dsub+0x3cc>
 8001ce8:	4663      	mov	r3, ip
 8001cea:	000e      	movs	r6, r1
 8001cec:	9c02      	ldr	r4, [sp, #8]
 8001cee:	08d8      	lsrs	r0, r3, #3
 8001cf0:	0762      	lsls	r2, r4, #29
 8001cf2:	4302      	orrs	r2, r0
 8001cf4:	08e4      	lsrs	r4, r4, #3
 8001cf6:	0013      	movs	r3, r2
 8001cf8:	4323      	orrs	r3, r4
 8001cfa:	d100      	bne.n	8001cfe <__aeabi_dsub+0x22a>
 8001cfc:	e254      	b.n	80021a8 <__aeabi_dsub+0x6d4>
 8001cfe:	2580      	movs	r5, #128	@ 0x80
 8001d00:	032d      	lsls	r5, r5, #12
 8001d02:	4325      	orrs	r5, r4
 8001d04:	032d      	lsls	r5, r5, #12
 8001d06:	4c48      	ldr	r4, [pc, #288]	@ (8001e28 <__aeabi_dsub+0x354>)
 8001d08:	0b2d      	lsrs	r5, r5, #12
 8001d0a:	e78c      	b.n	8001c26 <__aeabi_dsub+0x152>
 8001d0c:	4661      	mov	r1, ip
 8001d0e:	9b02      	ldr	r3, [sp, #8]
 8001d10:	4319      	orrs	r1, r3
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dsub+0x242>
 8001d14:	e0cc      	b.n	8001eb0 <__aeabi_dsub+0x3dc>
 8001d16:	0029      	movs	r1, r5
 8001d18:	3901      	subs	r1, #1
 8001d1a:	2d01      	cmp	r5, #1
 8001d1c:	d100      	bne.n	8001d20 <__aeabi_dsub+0x24c>
 8001d1e:	e188      	b.n	8002032 <__aeabi_dsub+0x55e>
 8001d20:	4295      	cmp	r5, r2
 8001d22:	d100      	bne.n	8001d26 <__aeabi_dsub+0x252>
 8001d24:	e0aa      	b.n	8001e7c <__aeabi_dsub+0x3a8>
 8001d26:	2501      	movs	r5, #1
 8001d28:	2938      	cmp	r1, #56	@ 0x38
 8001d2a:	dd00      	ble.n	8001d2e <__aeabi_dsub+0x25a>
 8001d2c:	e72f      	b.n	8001b8e <__aeabi_dsub+0xba>
 8001d2e:	468a      	mov	sl, r1
 8001d30:	e718      	b.n	8001b64 <__aeabi_dsub+0x90>
 8001d32:	2201      	movs	r2, #1
 8001d34:	4051      	eors	r1, r2
 8001d36:	428e      	cmp	r6, r1
 8001d38:	d1d0      	bne.n	8001cdc <__aeabi_dsub+0x208>
 8001d3a:	4653      	mov	r3, sl
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d100      	bne.n	8001d42 <__aeabi_dsub+0x26e>
 8001d40:	e0be      	b.n	8001ec0 <__aeabi_dsub+0x3ec>
 8001d42:	2f00      	cmp	r7, #0
 8001d44:	d000      	beq.n	8001d48 <__aeabi_dsub+0x274>
 8001d46:	e138      	b.n	8001fba <__aeabi_dsub+0x4e6>
 8001d48:	46ca      	mov	sl, r9
 8001d4a:	0022      	movs	r2, r4
 8001d4c:	4302      	orrs	r2, r0
 8001d4e:	d100      	bne.n	8001d52 <__aeabi_dsub+0x27e>
 8001d50:	e1e2      	b.n	8002118 <__aeabi_dsub+0x644>
 8001d52:	4653      	mov	r3, sl
 8001d54:	1e59      	subs	r1, r3, #1
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d100      	bne.n	8001d5c <__aeabi_dsub+0x288>
 8001d5a:	e20d      	b.n	8002178 <__aeabi_dsub+0x6a4>
 8001d5c:	4a32      	ldr	r2, [pc, #200]	@ (8001e28 <__aeabi_dsub+0x354>)
 8001d5e:	4592      	cmp	sl, r2
 8001d60:	d100      	bne.n	8001d64 <__aeabi_dsub+0x290>
 8001d62:	e1d2      	b.n	800210a <__aeabi_dsub+0x636>
 8001d64:	2701      	movs	r7, #1
 8001d66:	2938      	cmp	r1, #56	@ 0x38
 8001d68:	dc13      	bgt.n	8001d92 <__aeabi_dsub+0x2be>
 8001d6a:	291f      	cmp	r1, #31
 8001d6c:	dd00      	ble.n	8001d70 <__aeabi_dsub+0x29c>
 8001d6e:	e1ee      	b.n	800214e <__aeabi_dsub+0x67a>
 8001d70:	2220      	movs	r2, #32
 8001d72:	9b02      	ldr	r3, [sp, #8]
 8001d74:	1a52      	subs	r2, r2, r1
 8001d76:	0025      	movs	r5, r4
 8001d78:	0007      	movs	r7, r0
 8001d7a:	469a      	mov	sl, r3
 8001d7c:	40cc      	lsrs	r4, r1
 8001d7e:	4090      	lsls	r0, r2
 8001d80:	4095      	lsls	r5, r2
 8001d82:	40cf      	lsrs	r7, r1
 8001d84:	44a2      	add	sl, r4
 8001d86:	1e42      	subs	r2, r0, #1
 8001d88:	4190      	sbcs	r0, r2
 8001d8a:	4653      	mov	r3, sl
 8001d8c:	432f      	orrs	r7, r5
 8001d8e:	4307      	orrs	r7, r0
 8001d90:	9302      	str	r3, [sp, #8]
 8001d92:	003d      	movs	r5, r7
 8001d94:	4465      	add	r5, ip
 8001d96:	4565      	cmp	r5, ip
 8001d98:	4192      	sbcs	r2, r2
 8001d9a:	9b02      	ldr	r3, [sp, #8]
 8001d9c:	4252      	negs	r2, r2
 8001d9e:	464f      	mov	r7, r9
 8001da0:	18d4      	adds	r4, r2, r3
 8001da2:	e780      	b.n	8001ca6 <__aeabi_dsub+0x1d2>
 8001da4:	4a23      	ldr	r2, [pc, #140]	@ (8001e34 <__aeabi_dsub+0x360>)
 8001da6:	1c7d      	adds	r5, r7, #1
 8001da8:	4215      	tst	r5, r2
 8001daa:	d000      	beq.n	8001dae <__aeabi_dsub+0x2da>
 8001dac:	e0aa      	b.n	8001f04 <__aeabi_dsub+0x430>
 8001dae:	4662      	mov	r2, ip
 8001db0:	0025      	movs	r5, r4
 8001db2:	9b02      	ldr	r3, [sp, #8]
 8001db4:	4305      	orrs	r5, r0
 8001db6:	431a      	orrs	r2, r3
 8001db8:	2f00      	cmp	r7, #0
 8001dba:	d000      	beq.n	8001dbe <__aeabi_dsub+0x2ea>
 8001dbc:	e0f5      	b.n	8001faa <__aeabi_dsub+0x4d6>
 8001dbe:	2d00      	cmp	r5, #0
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dsub+0x2f0>
 8001dc2:	e16b      	b.n	800209c <__aeabi_dsub+0x5c8>
 8001dc4:	2a00      	cmp	r2, #0
 8001dc6:	d100      	bne.n	8001dca <__aeabi_dsub+0x2f6>
 8001dc8:	e152      	b.n	8002070 <__aeabi_dsub+0x59c>
 8001dca:	4663      	mov	r3, ip
 8001dcc:	1ac5      	subs	r5, r0, r3
 8001dce:	9b02      	ldr	r3, [sp, #8]
 8001dd0:	1ae2      	subs	r2, r4, r3
 8001dd2:	42a8      	cmp	r0, r5
 8001dd4:	419b      	sbcs	r3, r3
 8001dd6:	425b      	negs	r3, r3
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	021a      	lsls	r2, r3, #8
 8001ddc:	d400      	bmi.n	8001de0 <__aeabi_dsub+0x30c>
 8001dde:	e1d5      	b.n	800218c <__aeabi_dsub+0x6b8>
 8001de0:	4663      	mov	r3, ip
 8001de2:	1a1d      	subs	r5, r3, r0
 8001de4:	45ac      	cmp	ip, r5
 8001de6:	4192      	sbcs	r2, r2
 8001de8:	2601      	movs	r6, #1
 8001dea:	9b02      	ldr	r3, [sp, #8]
 8001dec:	4252      	negs	r2, r2
 8001dee:	1b1c      	subs	r4, r3, r4
 8001df0:	4688      	mov	r8, r1
 8001df2:	1aa4      	subs	r4, r4, r2
 8001df4:	400e      	ands	r6, r1
 8001df6:	e6f6      	b.n	8001be6 <__aeabi_dsub+0x112>
 8001df8:	4297      	cmp	r7, r2
 8001dfa:	d03f      	beq.n	8001e7c <__aeabi_dsub+0x3a8>
 8001dfc:	4652      	mov	r2, sl
 8001dfe:	2501      	movs	r5, #1
 8001e00:	2a38      	cmp	r2, #56	@ 0x38
 8001e02:	dd00      	ble.n	8001e06 <__aeabi_dsub+0x332>
 8001e04:	e74a      	b.n	8001c9c <__aeabi_dsub+0x1c8>
 8001e06:	2280      	movs	r2, #128	@ 0x80
 8001e08:	9b02      	ldr	r3, [sp, #8]
 8001e0a:	0412      	lsls	r2, r2, #16
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	9302      	str	r3, [sp, #8]
 8001e10:	e72d      	b.n	8001c6e <__aeabi_dsub+0x19a>
 8001e12:	003c      	movs	r4, r7
 8001e14:	2500      	movs	r5, #0
 8001e16:	2200      	movs	r2, #0
 8001e18:	e705      	b.n	8001c26 <__aeabi_dsub+0x152>
 8001e1a:	2307      	movs	r3, #7
 8001e1c:	402b      	ands	r3, r5
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d000      	beq.n	8001e24 <__aeabi_dsub+0x350>
 8001e22:	e6e2      	b.n	8001bea <__aeabi_dsub+0x116>
 8001e24:	e06b      	b.n	8001efe <__aeabi_dsub+0x42a>
 8001e26:	46c0      	nop			@ (mov r8, r8)
 8001e28:	000007ff 	.word	0x000007ff
 8001e2c:	ff7fffff 	.word	0xff7fffff
 8001e30:	fffff801 	.word	0xfffff801
 8001e34:	000007fe 	.word	0x000007fe
 8001e38:	0028      	movs	r0, r5
 8001e3a:	f000 fa75 	bl	8002328 <__clzsi2>
 8001e3e:	0003      	movs	r3, r0
 8001e40:	3318      	adds	r3, #24
 8001e42:	2b1f      	cmp	r3, #31
 8001e44:	dc00      	bgt.n	8001e48 <__aeabi_dsub+0x374>
 8001e46:	e6b4      	b.n	8001bb2 <__aeabi_dsub+0xde>
 8001e48:	002a      	movs	r2, r5
 8001e4a:	3808      	subs	r0, #8
 8001e4c:	4082      	lsls	r2, r0
 8001e4e:	429f      	cmp	r7, r3
 8001e50:	dd00      	ble.n	8001e54 <__aeabi_dsub+0x380>
 8001e52:	e0b9      	b.n	8001fc8 <__aeabi_dsub+0x4f4>
 8001e54:	1bdb      	subs	r3, r3, r7
 8001e56:	1c58      	adds	r0, r3, #1
 8001e58:	281f      	cmp	r0, #31
 8001e5a:	dc00      	bgt.n	8001e5e <__aeabi_dsub+0x38a>
 8001e5c:	e1a0      	b.n	80021a0 <__aeabi_dsub+0x6cc>
 8001e5e:	0015      	movs	r5, r2
 8001e60:	3b1f      	subs	r3, #31
 8001e62:	40dd      	lsrs	r5, r3
 8001e64:	2820      	cmp	r0, #32
 8001e66:	d005      	beq.n	8001e74 <__aeabi_dsub+0x3a0>
 8001e68:	2340      	movs	r3, #64	@ 0x40
 8001e6a:	1a1b      	subs	r3, r3, r0
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	1e53      	subs	r3, r2, #1
 8001e70:	419a      	sbcs	r2, r3
 8001e72:	4315      	orrs	r5, r2
 8001e74:	2307      	movs	r3, #7
 8001e76:	2700      	movs	r7, #0
 8001e78:	402b      	ands	r3, r5
 8001e7a:	e7d0      	b.n	8001e1e <__aeabi_dsub+0x34a>
 8001e7c:	08c0      	lsrs	r0, r0, #3
 8001e7e:	0762      	lsls	r2, r4, #29
 8001e80:	4302      	orrs	r2, r0
 8001e82:	08e4      	lsrs	r4, r4, #3
 8001e84:	e737      	b.n	8001cf6 <__aeabi_dsub+0x222>
 8001e86:	08ea      	lsrs	r2, r5, #3
 8001e88:	0763      	lsls	r3, r4, #29
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	4bd3      	ldr	r3, [pc, #844]	@ (80021dc <__aeabi_dsub+0x708>)
 8001e8e:	08e4      	lsrs	r4, r4, #3
 8001e90:	429f      	cmp	r7, r3
 8001e92:	d100      	bne.n	8001e96 <__aeabi_dsub+0x3c2>
 8001e94:	e72f      	b.n	8001cf6 <__aeabi_dsub+0x222>
 8001e96:	0324      	lsls	r4, r4, #12
 8001e98:	0b25      	lsrs	r5, r4, #12
 8001e9a:	057c      	lsls	r4, r7, #21
 8001e9c:	0d64      	lsrs	r4, r4, #21
 8001e9e:	e6c2      	b.n	8001c26 <__aeabi_dsub+0x152>
 8001ea0:	46ca      	mov	sl, r9
 8001ea2:	0022      	movs	r2, r4
 8001ea4:	4302      	orrs	r2, r0
 8001ea6:	d158      	bne.n	8001f5a <__aeabi_dsub+0x486>
 8001ea8:	4663      	mov	r3, ip
 8001eaa:	000e      	movs	r6, r1
 8001eac:	9c02      	ldr	r4, [sp, #8]
 8001eae:	9303      	str	r3, [sp, #12]
 8001eb0:	9b03      	ldr	r3, [sp, #12]
 8001eb2:	4657      	mov	r7, sl
 8001eb4:	08da      	lsrs	r2, r3, #3
 8001eb6:	e7e7      	b.n	8001e88 <__aeabi_dsub+0x3b4>
 8001eb8:	4cc9      	ldr	r4, [pc, #804]	@ (80021e0 <__aeabi_dsub+0x70c>)
 8001eba:	1aff      	subs	r7, r7, r3
 8001ebc:	4014      	ands	r4, r2
 8001ebe:	e692      	b.n	8001be6 <__aeabi_dsub+0x112>
 8001ec0:	4dc8      	ldr	r5, [pc, #800]	@ (80021e4 <__aeabi_dsub+0x710>)
 8001ec2:	1c7a      	adds	r2, r7, #1
 8001ec4:	422a      	tst	r2, r5
 8001ec6:	d000      	beq.n	8001eca <__aeabi_dsub+0x3f6>
 8001ec8:	e084      	b.n	8001fd4 <__aeabi_dsub+0x500>
 8001eca:	0022      	movs	r2, r4
 8001ecc:	4302      	orrs	r2, r0
 8001ece:	2f00      	cmp	r7, #0
 8001ed0:	d000      	beq.n	8001ed4 <__aeabi_dsub+0x400>
 8001ed2:	e0ef      	b.n	80020b4 <__aeabi_dsub+0x5e0>
 8001ed4:	2a00      	cmp	r2, #0
 8001ed6:	d100      	bne.n	8001eda <__aeabi_dsub+0x406>
 8001ed8:	e0e5      	b.n	80020a6 <__aeabi_dsub+0x5d2>
 8001eda:	4662      	mov	r2, ip
 8001edc:	9902      	ldr	r1, [sp, #8]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	d100      	bne.n	8001ee4 <__aeabi_dsub+0x410>
 8001ee2:	e0c5      	b.n	8002070 <__aeabi_dsub+0x59c>
 8001ee4:	4663      	mov	r3, ip
 8001ee6:	18c5      	adds	r5, r0, r3
 8001ee8:	468c      	mov	ip, r1
 8001eea:	4285      	cmp	r5, r0
 8001eec:	4180      	sbcs	r0, r0
 8001eee:	4464      	add	r4, ip
 8001ef0:	4240      	negs	r0, r0
 8001ef2:	1824      	adds	r4, r4, r0
 8001ef4:	0223      	lsls	r3, r4, #8
 8001ef6:	d502      	bpl.n	8001efe <__aeabi_dsub+0x42a>
 8001ef8:	4bb9      	ldr	r3, [pc, #740]	@ (80021e0 <__aeabi_dsub+0x70c>)
 8001efa:	3701      	adds	r7, #1
 8001efc:	401c      	ands	r4, r3
 8001efe:	46ba      	mov	sl, r7
 8001f00:	9503      	str	r5, [sp, #12]
 8001f02:	e7d5      	b.n	8001eb0 <__aeabi_dsub+0x3dc>
 8001f04:	4662      	mov	r2, ip
 8001f06:	1a85      	subs	r5, r0, r2
 8001f08:	42a8      	cmp	r0, r5
 8001f0a:	4192      	sbcs	r2, r2
 8001f0c:	4252      	negs	r2, r2
 8001f0e:	4691      	mov	r9, r2
 8001f10:	9b02      	ldr	r3, [sp, #8]
 8001f12:	1ae3      	subs	r3, r4, r3
 8001f14:	001a      	movs	r2, r3
 8001f16:	464b      	mov	r3, r9
 8001f18:	1ad2      	subs	r2, r2, r3
 8001f1a:	0013      	movs	r3, r2
 8001f1c:	4691      	mov	r9, r2
 8001f1e:	021a      	lsls	r2, r3, #8
 8001f20:	d46c      	bmi.n	8001ffc <__aeabi_dsub+0x528>
 8001f22:	464a      	mov	r2, r9
 8001f24:	464c      	mov	r4, r9
 8001f26:	432a      	orrs	r2, r5
 8001f28:	d000      	beq.n	8001f2c <__aeabi_dsub+0x458>
 8001f2a:	e63a      	b.n	8001ba2 <__aeabi_dsub+0xce>
 8001f2c:	2600      	movs	r6, #0
 8001f2e:	2400      	movs	r4, #0
 8001f30:	2500      	movs	r5, #0
 8001f32:	e678      	b.n	8001c26 <__aeabi_dsub+0x152>
 8001f34:	9902      	ldr	r1, [sp, #8]
 8001f36:	4653      	mov	r3, sl
 8001f38:	000d      	movs	r5, r1
 8001f3a:	3a20      	subs	r2, #32
 8001f3c:	40d5      	lsrs	r5, r2
 8001f3e:	2b20      	cmp	r3, #32
 8001f40:	d006      	beq.n	8001f50 <__aeabi_dsub+0x47c>
 8001f42:	2240      	movs	r2, #64	@ 0x40
 8001f44:	1ad2      	subs	r2, r2, r3
 8001f46:	000b      	movs	r3, r1
 8001f48:	4093      	lsls	r3, r2
 8001f4a:	4662      	mov	r2, ip
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	4693      	mov	fp, r2
 8001f50:	465b      	mov	r3, fp
 8001f52:	1e5a      	subs	r2, r3, #1
 8001f54:	4193      	sbcs	r3, r2
 8001f56:	431d      	orrs	r5, r3
 8001f58:	e619      	b.n	8001b8e <__aeabi_dsub+0xba>
 8001f5a:	4653      	mov	r3, sl
 8001f5c:	1e5a      	subs	r2, r3, #1
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d100      	bne.n	8001f64 <__aeabi_dsub+0x490>
 8001f62:	e0c6      	b.n	80020f2 <__aeabi_dsub+0x61e>
 8001f64:	4e9d      	ldr	r6, [pc, #628]	@ (80021dc <__aeabi_dsub+0x708>)
 8001f66:	45b2      	cmp	sl, r6
 8001f68:	d100      	bne.n	8001f6c <__aeabi_dsub+0x498>
 8001f6a:	e6bd      	b.n	8001ce8 <__aeabi_dsub+0x214>
 8001f6c:	4688      	mov	r8, r1
 8001f6e:	000e      	movs	r6, r1
 8001f70:	2501      	movs	r5, #1
 8001f72:	2a38      	cmp	r2, #56	@ 0x38
 8001f74:	dc10      	bgt.n	8001f98 <__aeabi_dsub+0x4c4>
 8001f76:	2a1f      	cmp	r2, #31
 8001f78:	dc7f      	bgt.n	800207a <__aeabi_dsub+0x5a6>
 8001f7a:	2120      	movs	r1, #32
 8001f7c:	0025      	movs	r5, r4
 8001f7e:	1a89      	subs	r1, r1, r2
 8001f80:	0007      	movs	r7, r0
 8001f82:	4088      	lsls	r0, r1
 8001f84:	408d      	lsls	r5, r1
 8001f86:	40d7      	lsrs	r7, r2
 8001f88:	40d4      	lsrs	r4, r2
 8001f8a:	1e41      	subs	r1, r0, #1
 8001f8c:	4188      	sbcs	r0, r1
 8001f8e:	9b02      	ldr	r3, [sp, #8]
 8001f90:	433d      	orrs	r5, r7
 8001f92:	1b1b      	subs	r3, r3, r4
 8001f94:	4305      	orrs	r5, r0
 8001f96:	9302      	str	r3, [sp, #8]
 8001f98:	4662      	mov	r2, ip
 8001f9a:	1b55      	subs	r5, r2, r5
 8001f9c:	45ac      	cmp	ip, r5
 8001f9e:	4192      	sbcs	r2, r2
 8001fa0:	9b02      	ldr	r3, [sp, #8]
 8001fa2:	4252      	negs	r2, r2
 8001fa4:	464f      	mov	r7, r9
 8001fa6:	1a9c      	subs	r4, r3, r2
 8001fa8:	e5f6      	b.n	8001b98 <__aeabi_dsub+0xc4>
 8001faa:	2d00      	cmp	r5, #0
 8001fac:	d000      	beq.n	8001fb0 <__aeabi_dsub+0x4dc>
 8001fae:	e0b7      	b.n	8002120 <__aeabi_dsub+0x64c>
 8001fb0:	2a00      	cmp	r2, #0
 8001fb2:	d100      	bne.n	8001fb6 <__aeabi_dsub+0x4e2>
 8001fb4:	e0f0      	b.n	8002198 <__aeabi_dsub+0x6c4>
 8001fb6:	2601      	movs	r6, #1
 8001fb8:	400e      	ands	r6, r1
 8001fba:	4663      	mov	r3, ip
 8001fbc:	9802      	ldr	r0, [sp, #8]
 8001fbe:	08d9      	lsrs	r1, r3, #3
 8001fc0:	0742      	lsls	r2, r0, #29
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	08c4      	lsrs	r4, r0, #3
 8001fc6:	e696      	b.n	8001cf6 <__aeabi_dsub+0x222>
 8001fc8:	4c85      	ldr	r4, [pc, #532]	@ (80021e0 <__aeabi_dsub+0x70c>)
 8001fca:	1aff      	subs	r7, r7, r3
 8001fcc:	4014      	ands	r4, r2
 8001fce:	0762      	lsls	r2, r4, #29
 8001fd0:	08e4      	lsrs	r4, r4, #3
 8001fd2:	e760      	b.n	8001e96 <__aeabi_dsub+0x3c2>
 8001fd4:	4981      	ldr	r1, [pc, #516]	@ (80021dc <__aeabi_dsub+0x708>)
 8001fd6:	428a      	cmp	r2, r1
 8001fd8:	d100      	bne.n	8001fdc <__aeabi_dsub+0x508>
 8001fda:	e0c9      	b.n	8002170 <__aeabi_dsub+0x69c>
 8001fdc:	4663      	mov	r3, ip
 8001fde:	18c1      	adds	r1, r0, r3
 8001fe0:	4281      	cmp	r1, r0
 8001fe2:	4180      	sbcs	r0, r0
 8001fe4:	9b02      	ldr	r3, [sp, #8]
 8001fe6:	4240      	negs	r0, r0
 8001fe8:	18e3      	adds	r3, r4, r3
 8001fea:	181b      	adds	r3, r3, r0
 8001fec:	07dd      	lsls	r5, r3, #31
 8001fee:	085c      	lsrs	r4, r3, #1
 8001ff0:	2307      	movs	r3, #7
 8001ff2:	0849      	lsrs	r1, r1, #1
 8001ff4:	430d      	orrs	r5, r1
 8001ff6:	0017      	movs	r7, r2
 8001ff8:	402b      	ands	r3, r5
 8001ffa:	e710      	b.n	8001e1e <__aeabi_dsub+0x34a>
 8001ffc:	4663      	mov	r3, ip
 8001ffe:	1a1d      	subs	r5, r3, r0
 8002000:	45ac      	cmp	ip, r5
 8002002:	4192      	sbcs	r2, r2
 8002004:	2601      	movs	r6, #1
 8002006:	9b02      	ldr	r3, [sp, #8]
 8002008:	4252      	negs	r2, r2
 800200a:	1b1c      	subs	r4, r3, r4
 800200c:	4688      	mov	r8, r1
 800200e:	1aa4      	subs	r4, r4, r2
 8002010:	400e      	ands	r6, r1
 8002012:	e5c6      	b.n	8001ba2 <__aeabi_dsub+0xce>
 8002014:	4663      	mov	r3, ip
 8002016:	18c5      	adds	r5, r0, r3
 8002018:	9b02      	ldr	r3, [sp, #8]
 800201a:	4285      	cmp	r5, r0
 800201c:	4180      	sbcs	r0, r0
 800201e:	469c      	mov	ip, r3
 8002020:	4240      	negs	r0, r0
 8002022:	4464      	add	r4, ip
 8002024:	1824      	adds	r4, r4, r0
 8002026:	2701      	movs	r7, #1
 8002028:	0223      	lsls	r3, r4, #8
 800202a:	d400      	bmi.n	800202e <__aeabi_dsub+0x55a>
 800202c:	e6f5      	b.n	8001e1a <__aeabi_dsub+0x346>
 800202e:	2702      	movs	r7, #2
 8002030:	e641      	b.n	8001cb6 <__aeabi_dsub+0x1e2>
 8002032:	4663      	mov	r3, ip
 8002034:	1ac5      	subs	r5, r0, r3
 8002036:	42a8      	cmp	r0, r5
 8002038:	4180      	sbcs	r0, r0
 800203a:	9b02      	ldr	r3, [sp, #8]
 800203c:	4240      	negs	r0, r0
 800203e:	1ae4      	subs	r4, r4, r3
 8002040:	2701      	movs	r7, #1
 8002042:	1a24      	subs	r4, r4, r0
 8002044:	e5a8      	b.n	8001b98 <__aeabi_dsub+0xc4>
 8002046:	9d02      	ldr	r5, [sp, #8]
 8002048:	4652      	mov	r2, sl
 800204a:	002b      	movs	r3, r5
 800204c:	3a20      	subs	r2, #32
 800204e:	40d3      	lsrs	r3, r2
 8002050:	0019      	movs	r1, r3
 8002052:	4653      	mov	r3, sl
 8002054:	2b20      	cmp	r3, #32
 8002056:	d006      	beq.n	8002066 <__aeabi_dsub+0x592>
 8002058:	2240      	movs	r2, #64	@ 0x40
 800205a:	1ad2      	subs	r2, r2, r3
 800205c:	002b      	movs	r3, r5
 800205e:	4093      	lsls	r3, r2
 8002060:	4662      	mov	r2, ip
 8002062:	431a      	orrs	r2, r3
 8002064:	4693      	mov	fp, r2
 8002066:	465d      	mov	r5, fp
 8002068:	1e6b      	subs	r3, r5, #1
 800206a:	419d      	sbcs	r5, r3
 800206c:	430d      	orrs	r5, r1
 800206e:	e615      	b.n	8001c9c <__aeabi_dsub+0x1c8>
 8002070:	0762      	lsls	r2, r4, #29
 8002072:	08c0      	lsrs	r0, r0, #3
 8002074:	4302      	orrs	r2, r0
 8002076:	08e4      	lsrs	r4, r4, #3
 8002078:	e70d      	b.n	8001e96 <__aeabi_dsub+0x3c2>
 800207a:	0011      	movs	r1, r2
 800207c:	0027      	movs	r7, r4
 800207e:	3920      	subs	r1, #32
 8002080:	40cf      	lsrs	r7, r1
 8002082:	2a20      	cmp	r2, #32
 8002084:	d005      	beq.n	8002092 <__aeabi_dsub+0x5be>
 8002086:	2140      	movs	r1, #64	@ 0x40
 8002088:	1a8a      	subs	r2, r1, r2
 800208a:	4094      	lsls	r4, r2
 800208c:	0025      	movs	r5, r4
 800208e:	4305      	orrs	r5, r0
 8002090:	9503      	str	r5, [sp, #12]
 8002092:	9d03      	ldr	r5, [sp, #12]
 8002094:	1e6a      	subs	r2, r5, #1
 8002096:	4195      	sbcs	r5, r2
 8002098:	433d      	orrs	r5, r7
 800209a:	e77d      	b.n	8001f98 <__aeabi_dsub+0x4c4>
 800209c:	2a00      	cmp	r2, #0
 800209e:	d100      	bne.n	80020a2 <__aeabi_dsub+0x5ce>
 80020a0:	e744      	b.n	8001f2c <__aeabi_dsub+0x458>
 80020a2:	2601      	movs	r6, #1
 80020a4:	400e      	ands	r6, r1
 80020a6:	4663      	mov	r3, ip
 80020a8:	08d9      	lsrs	r1, r3, #3
 80020aa:	9b02      	ldr	r3, [sp, #8]
 80020ac:	075a      	lsls	r2, r3, #29
 80020ae:	430a      	orrs	r2, r1
 80020b0:	08dc      	lsrs	r4, r3, #3
 80020b2:	e6f0      	b.n	8001e96 <__aeabi_dsub+0x3c2>
 80020b4:	2a00      	cmp	r2, #0
 80020b6:	d028      	beq.n	800210a <__aeabi_dsub+0x636>
 80020b8:	4662      	mov	r2, ip
 80020ba:	9f02      	ldr	r7, [sp, #8]
 80020bc:	08c0      	lsrs	r0, r0, #3
 80020be:	433a      	orrs	r2, r7
 80020c0:	d100      	bne.n	80020c4 <__aeabi_dsub+0x5f0>
 80020c2:	e6dc      	b.n	8001e7e <__aeabi_dsub+0x3aa>
 80020c4:	0762      	lsls	r2, r4, #29
 80020c6:	4310      	orrs	r0, r2
 80020c8:	2280      	movs	r2, #128	@ 0x80
 80020ca:	08e4      	lsrs	r4, r4, #3
 80020cc:	0312      	lsls	r2, r2, #12
 80020ce:	4214      	tst	r4, r2
 80020d0:	d009      	beq.n	80020e6 <__aeabi_dsub+0x612>
 80020d2:	08fd      	lsrs	r5, r7, #3
 80020d4:	4215      	tst	r5, r2
 80020d6:	d106      	bne.n	80020e6 <__aeabi_dsub+0x612>
 80020d8:	4663      	mov	r3, ip
 80020da:	2601      	movs	r6, #1
 80020dc:	002c      	movs	r4, r5
 80020de:	08d8      	lsrs	r0, r3, #3
 80020e0:	077b      	lsls	r3, r7, #29
 80020e2:	4318      	orrs	r0, r3
 80020e4:	400e      	ands	r6, r1
 80020e6:	0f42      	lsrs	r2, r0, #29
 80020e8:	00c0      	lsls	r0, r0, #3
 80020ea:	08c0      	lsrs	r0, r0, #3
 80020ec:	0752      	lsls	r2, r2, #29
 80020ee:	4302      	orrs	r2, r0
 80020f0:	e601      	b.n	8001cf6 <__aeabi_dsub+0x222>
 80020f2:	4663      	mov	r3, ip
 80020f4:	1a1d      	subs	r5, r3, r0
 80020f6:	45ac      	cmp	ip, r5
 80020f8:	4192      	sbcs	r2, r2
 80020fa:	9b02      	ldr	r3, [sp, #8]
 80020fc:	4252      	negs	r2, r2
 80020fe:	1b1c      	subs	r4, r3, r4
 8002100:	000e      	movs	r6, r1
 8002102:	4688      	mov	r8, r1
 8002104:	2701      	movs	r7, #1
 8002106:	1aa4      	subs	r4, r4, r2
 8002108:	e546      	b.n	8001b98 <__aeabi_dsub+0xc4>
 800210a:	4663      	mov	r3, ip
 800210c:	08d9      	lsrs	r1, r3, #3
 800210e:	9b02      	ldr	r3, [sp, #8]
 8002110:	075a      	lsls	r2, r3, #29
 8002112:	430a      	orrs	r2, r1
 8002114:	08dc      	lsrs	r4, r3, #3
 8002116:	e5ee      	b.n	8001cf6 <__aeabi_dsub+0x222>
 8002118:	4663      	mov	r3, ip
 800211a:	9c02      	ldr	r4, [sp, #8]
 800211c:	9303      	str	r3, [sp, #12]
 800211e:	e6c7      	b.n	8001eb0 <__aeabi_dsub+0x3dc>
 8002120:	08c0      	lsrs	r0, r0, #3
 8002122:	2a00      	cmp	r2, #0
 8002124:	d100      	bne.n	8002128 <__aeabi_dsub+0x654>
 8002126:	e6aa      	b.n	8001e7e <__aeabi_dsub+0x3aa>
 8002128:	0762      	lsls	r2, r4, #29
 800212a:	4310      	orrs	r0, r2
 800212c:	2280      	movs	r2, #128	@ 0x80
 800212e:	08e4      	lsrs	r4, r4, #3
 8002130:	0312      	lsls	r2, r2, #12
 8002132:	4214      	tst	r4, r2
 8002134:	d0d7      	beq.n	80020e6 <__aeabi_dsub+0x612>
 8002136:	9f02      	ldr	r7, [sp, #8]
 8002138:	08fd      	lsrs	r5, r7, #3
 800213a:	4215      	tst	r5, r2
 800213c:	d1d3      	bne.n	80020e6 <__aeabi_dsub+0x612>
 800213e:	4663      	mov	r3, ip
 8002140:	2601      	movs	r6, #1
 8002142:	08d8      	lsrs	r0, r3, #3
 8002144:	077b      	lsls	r3, r7, #29
 8002146:	002c      	movs	r4, r5
 8002148:	4318      	orrs	r0, r3
 800214a:	400e      	ands	r6, r1
 800214c:	e7cb      	b.n	80020e6 <__aeabi_dsub+0x612>
 800214e:	000a      	movs	r2, r1
 8002150:	0027      	movs	r7, r4
 8002152:	3a20      	subs	r2, #32
 8002154:	40d7      	lsrs	r7, r2
 8002156:	2920      	cmp	r1, #32
 8002158:	d005      	beq.n	8002166 <__aeabi_dsub+0x692>
 800215a:	2240      	movs	r2, #64	@ 0x40
 800215c:	1a52      	subs	r2, r2, r1
 800215e:	4094      	lsls	r4, r2
 8002160:	0025      	movs	r5, r4
 8002162:	4305      	orrs	r5, r0
 8002164:	9503      	str	r5, [sp, #12]
 8002166:	9d03      	ldr	r5, [sp, #12]
 8002168:	1e6a      	subs	r2, r5, #1
 800216a:	4195      	sbcs	r5, r2
 800216c:	432f      	orrs	r7, r5
 800216e:	e610      	b.n	8001d92 <__aeabi_dsub+0x2be>
 8002170:	0014      	movs	r4, r2
 8002172:	2500      	movs	r5, #0
 8002174:	2200      	movs	r2, #0
 8002176:	e556      	b.n	8001c26 <__aeabi_dsub+0x152>
 8002178:	9b02      	ldr	r3, [sp, #8]
 800217a:	4460      	add	r0, ip
 800217c:	4699      	mov	r9, r3
 800217e:	4560      	cmp	r0, ip
 8002180:	4192      	sbcs	r2, r2
 8002182:	444c      	add	r4, r9
 8002184:	4252      	negs	r2, r2
 8002186:	0005      	movs	r5, r0
 8002188:	18a4      	adds	r4, r4, r2
 800218a:	e74c      	b.n	8002026 <__aeabi_dsub+0x552>
 800218c:	001a      	movs	r2, r3
 800218e:	001c      	movs	r4, r3
 8002190:	432a      	orrs	r2, r5
 8002192:	d000      	beq.n	8002196 <__aeabi_dsub+0x6c2>
 8002194:	e6b3      	b.n	8001efe <__aeabi_dsub+0x42a>
 8002196:	e6c9      	b.n	8001f2c <__aeabi_dsub+0x458>
 8002198:	2480      	movs	r4, #128	@ 0x80
 800219a:	2600      	movs	r6, #0
 800219c:	0324      	lsls	r4, r4, #12
 800219e:	e5ae      	b.n	8001cfe <__aeabi_dsub+0x22a>
 80021a0:	2120      	movs	r1, #32
 80021a2:	2500      	movs	r5, #0
 80021a4:	1a09      	subs	r1, r1, r0
 80021a6:	e517      	b.n	8001bd8 <__aeabi_dsub+0x104>
 80021a8:	2200      	movs	r2, #0
 80021aa:	2500      	movs	r5, #0
 80021ac:	4c0b      	ldr	r4, [pc, #44]	@ (80021dc <__aeabi_dsub+0x708>)
 80021ae:	e53a      	b.n	8001c26 <__aeabi_dsub+0x152>
 80021b0:	2d00      	cmp	r5, #0
 80021b2:	d100      	bne.n	80021b6 <__aeabi_dsub+0x6e2>
 80021b4:	e5f6      	b.n	8001da4 <__aeabi_dsub+0x2d0>
 80021b6:	464b      	mov	r3, r9
 80021b8:	1bda      	subs	r2, r3, r7
 80021ba:	4692      	mov	sl, r2
 80021bc:	2f00      	cmp	r7, #0
 80021be:	d100      	bne.n	80021c2 <__aeabi_dsub+0x6ee>
 80021c0:	e66f      	b.n	8001ea2 <__aeabi_dsub+0x3ce>
 80021c2:	2a38      	cmp	r2, #56	@ 0x38
 80021c4:	dc05      	bgt.n	80021d2 <__aeabi_dsub+0x6fe>
 80021c6:	2680      	movs	r6, #128	@ 0x80
 80021c8:	0436      	lsls	r6, r6, #16
 80021ca:	4334      	orrs	r4, r6
 80021cc:	4688      	mov	r8, r1
 80021ce:	000e      	movs	r6, r1
 80021d0:	e6d1      	b.n	8001f76 <__aeabi_dsub+0x4a2>
 80021d2:	4688      	mov	r8, r1
 80021d4:	000e      	movs	r6, r1
 80021d6:	2501      	movs	r5, #1
 80021d8:	e6de      	b.n	8001f98 <__aeabi_dsub+0x4c4>
 80021da:	46c0      	nop			@ (mov r8, r8)
 80021dc:	000007ff 	.word	0x000007ff
 80021e0:	ff7fffff 	.word	0xff7fffff
 80021e4:	000007fe 	.word	0x000007fe
 80021e8:	2d00      	cmp	r5, #0
 80021ea:	d100      	bne.n	80021ee <__aeabi_dsub+0x71a>
 80021ec:	e668      	b.n	8001ec0 <__aeabi_dsub+0x3ec>
 80021ee:	464b      	mov	r3, r9
 80021f0:	1bd9      	subs	r1, r3, r7
 80021f2:	2f00      	cmp	r7, #0
 80021f4:	d101      	bne.n	80021fa <__aeabi_dsub+0x726>
 80021f6:	468a      	mov	sl, r1
 80021f8:	e5a7      	b.n	8001d4a <__aeabi_dsub+0x276>
 80021fa:	2701      	movs	r7, #1
 80021fc:	2938      	cmp	r1, #56	@ 0x38
 80021fe:	dd00      	ble.n	8002202 <__aeabi_dsub+0x72e>
 8002200:	e5c7      	b.n	8001d92 <__aeabi_dsub+0x2be>
 8002202:	2280      	movs	r2, #128	@ 0x80
 8002204:	0412      	lsls	r2, r2, #16
 8002206:	4314      	orrs	r4, r2
 8002208:	e5af      	b.n	8001d6a <__aeabi_dsub+0x296>
 800220a:	46c0      	nop			@ (mov r8, r8)

0800220c <__aeabi_d2iz>:
 800220c:	000b      	movs	r3, r1
 800220e:	0002      	movs	r2, r0
 8002210:	b570      	push	{r4, r5, r6, lr}
 8002212:	4d16      	ldr	r5, [pc, #88]	@ (800226c <__aeabi_d2iz+0x60>)
 8002214:	030c      	lsls	r4, r1, #12
 8002216:	b082      	sub	sp, #8
 8002218:	0049      	lsls	r1, r1, #1
 800221a:	2000      	movs	r0, #0
 800221c:	9200      	str	r2, [sp, #0]
 800221e:	9301      	str	r3, [sp, #4]
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	0d49      	lsrs	r1, r1, #21
 8002224:	0fde      	lsrs	r6, r3, #31
 8002226:	42a9      	cmp	r1, r5
 8002228:	dd04      	ble.n	8002234 <__aeabi_d2iz+0x28>
 800222a:	4811      	ldr	r0, [pc, #68]	@ (8002270 <__aeabi_d2iz+0x64>)
 800222c:	4281      	cmp	r1, r0
 800222e:	dd03      	ble.n	8002238 <__aeabi_d2iz+0x2c>
 8002230:	4b10      	ldr	r3, [pc, #64]	@ (8002274 <__aeabi_d2iz+0x68>)
 8002232:	18f0      	adds	r0, r6, r3
 8002234:	b002      	add	sp, #8
 8002236:	bd70      	pop	{r4, r5, r6, pc}
 8002238:	2080      	movs	r0, #128	@ 0x80
 800223a:	0340      	lsls	r0, r0, #13
 800223c:	4320      	orrs	r0, r4
 800223e:	4c0e      	ldr	r4, [pc, #56]	@ (8002278 <__aeabi_d2iz+0x6c>)
 8002240:	1a64      	subs	r4, r4, r1
 8002242:	2c1f      	cmp	r4, #31
 8002244:	dd08      	ble.n	8002258 <__aeabi_d2iz+0x4c>
 8002246:	4b0d      	ldr	r3, [pc, #52]	@ (800227c <__aeabi_d2iz+0x70>)
 8002248:	1a5b      	subs	r3, r3, r1
 800224a:	40d8      	lsrs	r0, r3
 800224c:	0003      	movs	r3, r0
 800224e:	4258      	negs	r0, r3
 8002250:	2e00      	cmp	r6, #0
 8002252:	d1ef      	bne.n	8002234 <__aeabi_d2iz+0x28>
 8002254:	0018      	movs	r0, r3
 8002256:	e7ed      	b.n	8002234 <__aeabi_d2iz+0x28>
 8002258:	4b09      	ldr	r3, [pc, #36]	@ (8002280 <__aeabi_d2iz+0x74>)
 800225a:	9a00      	ldr	r2, [sp, #0]
 800225c:	469c      	mov	ip, r3
 800225e:	0003      	movs	r3, r0
 8002260:	4461      	add	r1, ip
 8002262:	408b      	lsls	r3, r1
 8002264:	40e2      	lsrs	r2, r4
 8002266:	4313      	orrs	r3, r2
 8002268:	e7f1      	b.n	800224e <__aeabi_d2iz+0x42>
 800226a:	46c0      	nop			@ (mov r8, r8)
 800226c:	000003fe 	.word	0x000003fe
 8002270:	0000041d 	.word	0x0000041d
 8002274:	7fffffff 	.word	0x7fffffff
 8002278:	00000433 	.word	0x00000433
 800227c:	00000413 	.word	0x00000413
 8002280:	fffffbed 	.word	0xfffffbed

08002284 <__aeabi_i2d>:
 8002284:	b570      	push	{r4, r5, r6, lr}
 8002286:	2800      	cmp	r0, #0
 8002288:	d016      	beq.n	80022b8 <__aeabi_i2d+0x34>
 800228a:	17c3      	asrs	r3, r0, #31
 800228c:	18c5      	adds	r5, r0, r3
 800228e:	405d      	eors	r5, r3
 8002290:	0fc4      	lsrs	r4, r0, #31
 8002292:	0028      	movs	r0, r5
 8002294:	f000 f848 	bl	8002328 <__clzsi2>
 8002298:	4b10      	ldr	r3, [pc, #64]	@ (80022dc <__aeabi_i2d+0x58>)
 800229a:	1a1b      	subs	r3, r3, r0
 800229c:	055b      	lsls	r3, r3, #21
 800229e:	0d5b      	lsrs	r3, r3, #21
 80022a0:	280a      	cmp	r0, #10
 80022a2:	dc14      	bgt.n	80022ce <__aeabi_i2d+0x4a>
 80022a4:	0002      	movs	r2, r0
 80022a6:	002e      	movs	r6, r5
 80022a8:	3215      	adds	r2, #21
 80022aa:	4096      	lsls	r6, r2
 80022ac:	220b      	movs	r2, #11
 80022ae:	1a12      	subs	r2, r2, r0
 80022b0:	40d5      	lsrs	r5, r2
 80022b2:	032d      	lsls	r5, r5, #12
 80022b4:	0b2d      	lsrs	r5, r5, #12
 80022b6:	e003      	b.n	80022c0 <__aeabi_i2d+0x3c>
 80022b8:	2400      	movs	r4, #0
 80022ba:	2300      	movs	r3, #0
 80022bc:	2500      	movs	r5, #0
 80022be:	2600      	movs	r6, #0
 80022c0:	051b      	lsls	r3, r3, #20
 80022c2:	432b      	orrs	r3, r5
 80022c4:	07e4      	lsls	r4, r4, #31
 80022c6:	4323      	orrs	r3, r4
 80022c8:	0030      	movs	r0, r6
 80022ca:	0019      	movs	r1, r3
 80022cc:	bd70      	pop	{r4, r5, r6, pc}
 80022ce:	380b      	subs	r0, #11
 80022d0:	4085      	lsls	r5, r0
 80022d2:	032d      	lsls	r5, r5, #12
 80022d4:	2600      	movs	r6, #0
 80022d6:	0b2d      	lsrs	r5, r5, #12
 80022d8:	e7f2      	b.n	80022c0 <__aeabi_i2d+0x3c>
 80022da:	46c0      	nop			@ (mov r8, r8)
 80022dc:	0000041e 	.word	0x0000041e

080022e0 <__aeabi_ui2d>:
 80022e0:	b510      	push	{r4, lr}
 80022e2:	1e04      	subs	r4, r0, #0
 80022e4:	d010      	beq.n	8002308 <__aeabi_ui2d+0x28>
 80022e6:	f000 f81f 	bl	8002328 <__clzsi2>
 80022ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002324 <__aeabi_ui2d+0x44>)
 80022ec:	1a1b      	subs	r3, r3, r0
 80022ee:	055b      	lsls	r3, r3, #21
 80022f0:	0d5b      	lsrs	r3, r3, #21
 80022f2:	280a      	cmp	r0, #10
 80022f4:	dc0f      	bgt.n	8002316 <__aeabi_ui2d+0x36>
 80022f6:	220b      	movs	r2, #11
 80022f8:	0021      	movs	r1, r4
 80022fa:	1a12      	subs	r2, r2, r0
 80022fc:	40d1      	lsrs	r1, r2
 80022fe:	3015      	adds	r0, #21
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	4084      	lsls	r4, r0
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	e001      	b.n	800230c <__aeabi_ui2d+0x2c>
 8002308:	2300      	movs	r3, #0
 800230a:	2200      	movs	r2, #0
 800230c:	051b      	lsls	r3, r3, #20
 800230e:	4313      	orrs	r3, r2
 8002310:	0020      	movs	r0, r4
 8002312:	0019      	movs	r1, r3
 8002314:	bd10      	pop	{r4, pc}
 8002316:	0022      	movs	r2, r4
 8002318:	380b      	subs	r0, #11
 800231a:	4082      	lsls	r2, r0
 800231c:	0312      	lsls	r2, r2, #12
 800231e:	2400      	movs	r4, #0
 8002320:	0b12      	lsrs	r2, r2, #12
 8002322:	e7f3      	b.n	800230c <__aeabi_ui2d+0x2c>
 8002324:	0000041e 	.word	0x0000041e

08002328 <__clzsi2>:
 8002328:	211c      	movs	r1, #28
 800232a:	2301      	movs	r3, #1
 800232c:	041b      	lsls	r3, r3, #16
 800232e:	4298      	cmp	r0, r3
 8002330:	d301      	bcc.n	8002336 <__clzsi2+0xe>
 8002332:	0c00      	lsrs	r0, r0, #16
 8002334:	3910      	subs	r1, #16
 8002336:	0a1b      	lsrs	r3, r3, #8
 8002338:	4298      	cmp	r0, r3
 800233a:	d301      	bcc.n	8002340 <__clzsi2+0x18>
 800233c:	0a00      	lsrs	r0, r0, #8
 800233e:	3908      	subs	r1, #8
 8002340:	091b      	lsrs	r3, r3, #4
 8002342:	4298      	cmp	r0, r3
 8002344:	d301      	bcc.n	800234a <__clzsi2+0x22>
 8002346:	0900      	lsrs	r0, r0, #4
 8002348:	3904      	subs	r1, #4
 800234a:	a202      	add	r2, pc, #8	@ (adr r2, 8002354 <__clzsi2+0x2c>)
 800234c:	5c10      	ldrb	r0, [r2, r0]
 800234e:	1840      	adds	r0, r0, r1
 8002350:	4770      	bx	lr
 8002352:	46c0      	nop			@ (mov r8, r8)
 8002354:	02020304 	.word	0x02020304
 8002358:	01010101 	.word	0x01010101
	...

08002364 <__clzdi2>:
 8002364:	b510      	push	{r4, lr}
 8002366:	2900      	cmp	r1, #0
 8002368:	d103      	bne.n	8002372 <__clzdi2+0xe>
 800236a:	f7ff ffdd 	bl	8002328 <__clzsi2>
 800236e:	3020      	adds	r0, #32
 8002370:	e002      	b.n	8002378 <__clzdi2+0x14>
 8002372:	0008      	movs	r0, r1
 8002374:	f7ff ffd8 	bl	8002328 <__clzsi2>
 8002378:	bd10      	pop	{r4, pc}
 800237a:	46c0      	nop			@ (mov r8, r8)

0800237c <__aeabi_d2uiz>:
 800237c:	b570      	push	{r4, r5, r6, lr}
 800237e:	2200      	movs	r2, #0
 8002380:	4b0c      	ldr	r3, [pc, #48]	@ (80023b4 <__aeabi_d2uiz+0x38>)
 8002382:	0004      	movs	r4, r0
 8002384:	000d      	movs	r5, r1
 8002386:	f7fd ff7f 	bl	8000288 <__aeabi_dcmpge>
 800238a:	2800      	cmp	r0, #0
 800238c:	d104      	bne.n	8002398 <__aeabi_d2uiz+0x1c>
 800238e:	0020      	movs	r0, r4
 8002390:	0029      	movs	r1, r5
 8002392:	f7ff ff3b 	bl	800220c <__aeabi_d2iz>
 8002396:	bd70      	pop	{r4, r5, r6, pc}
 8002398:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <__aeabi_d2uiz+0x38>)
 800239a:	2200      	movs	r2, #0
 800239c:	0020      	movs	r0, r4
 800239e:	0029      	movs	r1, r5
 80023a0:	f7ff fb98 	bl	8001ad4 <__aeabi_dsub>
 80023a4:	f7ff ff32 	bl	800220c <__aeabi_d2iz>
 80023a8:	2380      	movs	r3, #128	@ 0x80
 80023aa:	061b      	lsls	r3, r3, #24
 80023ac:	469c      	mov	ip, r3
 80023ae:	4460      	add	r0, ip
 80023b0:	e7f1      	b.n	8002396 <__aeabi_d2uiz+0x1a>
 80023b2:	46c0      	nop			@ (mov r8, r8)
 80023b4:	41e00000 	.word	0x41e00000

080023b8 <__divdi3>:
 80023b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ba:	46d6      	mov	lr, sl
 80023bc:	464f      	mov	r7, r9
 80023be:	4646      	mov	r6, r8
 80023c0:	b5c0      	push	{r6, r7, lr}
 80023c2:	0004      	movs	r4, r0
 80023c4:	000d      	movs	r5, r1
 80023c6:	0010      	movs	r0, r2
 80023c8:	0019      	movs	r1, r3
 80023ca:	b082      	sub	sp, #8
 80023cc:	2d00      	cmp	r5, #0
 80023ce:	da00      	bge.n	80023d2 <__divdi3+0x1a>
 80023d0:	e087      	b.n	80024e2 <__divdi3+0x12a>
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	db0b      	blt.n	80023ee <__divdi3+0x36>
 80023d6:	0016      	movs	r6, r2
 80023d8:	001f      	movs	r7, r3
 80023da:	42ab      	cmp	r3, r5
 80023dc:	d919      	bls.n	8002412 <__divdi3+0x5a>
 80023de:	2000      	movs	r0, #0
 80023e0:	2100      	movs	r1, #0
 80023e2:	b002      	add	sp, #8
 80023e4:	bce0      	pop	{r5, r6, r7}
 80023e6:	46ba      	mov	sl, r7
 80023e8:	46b1      	mov	r9, r6
 80023ea:	46a8      	mov	r8, r5
 80023ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ee:	2700      	movs	r7, #0
 80023f0:	4246      	negs	r6, r0
 80023f2:	418f      	sbcs	r7, r1
 80023f4:	42af      	cmp	r7, r5
 80023f6:	d804      	bhi.n	8002402 <__divdi3+0x4a>
 80023f8:	d000      	beq.n	80023fc <__divdi3+0x44>
 80023fa:	e082      	b.n	8002502 <__divdi3+0x14a>
 80023fc:	42a6      	cmp	r6, r4
 80023fe:	d800      	bhi.n	8002402 <__divdi3+0x4a>
 8002400:	e07f      	b.n	8002502 <__divdi3+0x14a>
 8002402:	2000      	movs	r0, #0
 8002404:	2100      	movs	r1, #0
 8002406:	e08f      	b.n	8002528 <__divdi3+0x170>
 8002408:	2700      	movs	r7, #0
 800240a:	4246      	negs	r6, r0
 800240c:	418f      	sbcs	r7, r1
 800240e:	429f      	cmp	r7, r3
 8002410:	d8e5      	bhi.n	80023de <__divdi3+0x26>
 8002412:	42af      	cmp	r7, r5
 8002414:	d100      	bne.n	8002418 <__divdi3+0x60>
 8002416:	e098      	b.n	800254a <__divdi3+0x192>
 8002418:	2300      	movs	r3, #0
 800241a:	4699      	mov	r9, r3
 800241c:	0039      	movs	r1, r7
 800241e:	0030      	movs	r0, r6
 8002420:	f7ff ffa0 	bl	8002364 <__clzdi2>
 8002424:	4680      	mov	r8, r0
 8002426:	0029      	movs	r1, r5
 8002428:	0020      	movs	r0, r4
 800242a:	f7ff ff9b 	bl	8002364 <__clzdi2>
 800242e:	4643      	mov	r3, r8
 8002430:	1a1b      	subs	r3, r3, r0
 8002432:	4698      	mov	r8, r3
 8002434:	3b20      	subs	r3, #32
 8002436:	d500      	bpl.n	800243a <__divdi3+0x82>
 8002438:	e07c      	b.n	8002534 <__divdi3+0x17c>
 800243a:	0031      	movs	r1, r6
 800243c:	4099      	lsls	r1, r3
 800243e:	469a      	mov	sl, r3
 8002440:	000b      	movs	r3, r1
 8002442:	0031      	movs	r1, r6
 8002444:	4640      	mov	r0, r8
 8002446:	4081      	lsls	r1, r0
 8002448:	000a      	movs	r2, r1
 800244a:	42ab      	cmp	r3, r5
 800244c:	d85f      	bhi.n	800250e <__divdi3+0x156>
 800244e:	d05c      	beq.n	800250a <__divdi3+0x152>
 8002450:	4651      	mov	r1, sl
 8002452:	1aa4      	subs	r4, r4, r2
 8002454:	419d      	sbcs	r5, r3
 8002456:	2900      	cmp	r1, #0
 8002458:	da00      	bge.n	800245c <__divdi3+0xa4>
 800245a:	e093      	b.n	8002584 <__divdi3+0x1cc>
 800245c:	2100      	movs	r1, #0
 800245e:	2000      	movs	r0, #0
 8002460:	2601      	movs	r6, #1
 8002462:	9000      	str	r0, [sp, #0]
 8002464:	9101      	str	r1, [sp, #4]
 8002466:	4651      	mov	r1, sl
 8002468:	408e      	lsls	r6, r1
 800246a:	9601      	str	r6, [sp, #4]
 800246c:	4641      	mov	r1, r8
 800246e:	2601      	movs	r6, #1
 8002470:	408e      	lsls	r6, r1
 8002472:	4641      	mov	r1, r8
 8002474:	9600      	str	r6, [sp, #0]
 8002476:	2900      	cmp	r1, #0
 8002478:	d050      	beq.n	800251c <__divdi3+0x164>
 800247a:	07d9      	lsls	r1, r3, #31
 800247c:	0856      	lsrs	r6, r2, #1
 800247e:	430e      	orrs	r6, r1
 8002480:	085f      	lsrs	r7, r3, #1
 8002482:	4641      	mov	r1, r8
 8002484:	2201      	movs	r2, #1
 8002486:	2300      	movs	r3, #0
 8002488:	e00c      	b.n	80024a4 <__divdi3+0xec>
 800248a:	42af      	cmp	r7, r5
 800248c:	d101      	bne.n	8002492 <__divdi3+0xda>
 800248e:	42a6      	cmp	r6, r4
 8002490:	d80a      	bhi.n	80024a8 <__divdi3+0xf0>
 8002492:	1ba4      	subs	r4, r4, r6
 8002494:	41bd      	sbcs	r5, r7
 8002496:	1924      	adds	r4, r4, r4
 8002498:	416d      	adcs	r5, r5
 800249a:	3901      	subs	r1, #1
 800249c:	18a4      	adds	r4, r4, r2
 800249e:	415d      	adcs	r5, r3
 80024a0:	2900      	cmp	r1, #0
 80024a2:	d006      	beq.n	80024b2 <__divdi3+0xfa>
 80024a4:	42af      	cmp	r7, r5
 80024a6:	d9f0      	bls.n	800248a <__divdi3+0xd2>
 80024a8:	3901      	subs	r1, #1
 80024aa:	1924      	adds	r4, r4, r4
 80024ac:	416d      	adcs	r5, r5
 80024ae:	2900      	cmp	r1, #0
 80024b0:	d1f8      	bne.n	80024a4 <__divdi3+0xec>
 80024b2:	9800      	ldr	r0, [sp, #0]
 80024b4:	9901      	ldr	r1, [sp, #4]
 80024b6:	4653      	mov	r3, sl
 80024b8:	1900      	adds	r0, r0, r4
 80024ba:	4169      	adcs	r1, r5
 80024bc:	2b00      	cmp	r3, #0
 80024be:	db48      	blt.n	8002552 <__divdi3+0x19a>
 80024c0:	002e      	movs	r6, r5
 80024c2:	002c      	movs	r4, r5
 80024c4:	40de      	lsrs	r6, r3
 80024c6:	4643      	mov	r3, r8
 80024c8:	40dc      	lsrs	r4, r3
 80024ca:	4653      	mov	r3, sl
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	db50      	blt.n	8002572 <__divdi3+0x1ba>
 80024d0:	0034      	movs	r4, r6
 80024d2:	409c      	lsls	r4, r3
 80024d4:	0023      	movs	r3, r4
 80024d6:	4644      	mov	r4, r8
 80024d8:	40a6      	lsls	r6, r4
 80024da:	0032      	movs	r2, r6
 80024dc:	1a80      	subs	r0, r0, r2
 80024de:	4199      	sbcs	r1, r3
 80024e0:	e01e      	b.n	8002520 <__divdi3+0x168>
 80024e2:	2300      	movs	r3, #0
 80024e4:	4262      	negs	r2, r4
 80024e6:	41ab      	sbcs	r3, r5
 80024e8:	0014      	movs	r4, r2
 80024ea:	001d      	movs	r5, r3
 80024ec:	2900      	cmp	r1, #0
 80024ee:	db8b      	blt.n	8002408 <__divdi3+0x50>
 80024f0:	0006      	movs	r6, r0
 80024f2:	000f      	movs	r7, r1
 80024f4:	4299      	cmp	r1, r3
 80024f6:	d900      	bls.n	80024fa <__divdi3+0x142>
 80024f8:	e771      	b.n	80023de <__divdi3+0x26>
 80024fa:	d102      	bne.n	8002502 <__divdi3+0x14a>
 80024fc:	4290      	cmp	r0, r2
 80024fe:	d900      	bls.n	8002502 <__divdi3+0x14a>
 8002500:	e76d      	b.n	80023de <__divdi3+0x26>
 8002502:	2301      	movs	r3, #1
 8002504:	425b      	negs	r3, r3
 8002506:	4699      	mov	r9, r3
 8002508:	e788      	b.n	800241c <__divdi3+0x64>
 800250a:	42a1      	cmp	r1, r4
 800250c:	d9a0      	bls.n	8002450 <__divdi3+0x98>
 800250e:	2100      	movs	r1, #0
 8002510:	2000      	movs	r0, #0
 8002512:	9000      	str	r0, [sp, #0]
 8002514:	9101      	str	r1, [sp, #4]
 8002516:	4641      	mov	r1, r8
 8002518:	2900      	cmp	r1, #0
 800251a:	d1ae      	bne.n	800247a <__divdi3+0xc2>
 800251c:	9800      	ldr	r0, [sp, #0]
 800251e:	9901      	ldr	r1, [sp, #4]
 8002520:	464b      	mov	r3, r9
 8002522:	2b00      	cmp	r3, #0
 8002524:	d100      	bne.n	8002528 <__divdi3+0x170>
 8002526:	e75c      	b.n	80023e2 <__divdi3+0x2a>
 8002528:	0003      	movs	r3, r0
 800252a:	000c      	movs	r4, r1
 800252c:	2100      	movs	r1, #0
 800252e:	4258      	negs	r0, r3
 8002530:	41a1      	sbcs	r1, r4
 8002532:	e756      	b.n	80023e2 <__divdi3+0x2a>
 8002534:	4642      	mov	r2, r8
 8002536:	0038      	movs	r0, r7
 8002538:	469a      	mov	sl, r3
 800253a:	2320      	movs	r3, #32
 800253c:	0031      	movs	r1, r6
 800253e:	4090      	lsls	r0, r2
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	40d9      	lsrs	r1, r3
 8002544:	0003      	movs	r3, r0
 8002546:	430b      	orrs	r3, r1
 8002548:	e77b      	b.n	8002442 <__divdi3+0x8a>
 800254a:	42a6      	cmp	r6, r4
 800254c:	d800      	bhi.n	8002550 <__divdi3+0x198>
 800254e:	e763      	b.n	8002418 <__divdi3+0x60>
 8002550:	e745      	b.n	80023de <__divdi3+0x26>
 8002552:	4642      	mov	r2, r8
 8002554:	2320      	movs	r3, #32
 8002556:	1a9b      	subs	r3, r3, r2
 8002558:	002a      	movs	r2, r5
 800255a:	409a      	lsls	r2, r3
 800255c:	0026      	movs	r6, r4
 800255e:	0013      	movs	r3, r2
 8002560:	4642      	mov	r2, r8
 8002562:	40d6      	lsrs	r6, r2
 8002564:	002c      	movs	r4, r5
 8002566:	431e      	orrs	r6, r3
 8002568:	4643      	mov	r3, r8
 800256a:	40dc      	lsrs	r4, r3
 800256c:	4653      	mov	r3, sl
 800256e:	2b00      	cmp	r3, #0
 8002570:	daae      	bge.n	80024d0 <__divdi3+0x118>
 8002572:	4642      	mov	r2, r8
 8002574:	2320      	movs	r3, #32
 8002576:	0035      	movs	r5, r6
 8002578:	4094      	lsls	r4, r2
 800257a:	1a9b      	subs	r3, r3, r2
 800257c:	40dd      	lsrs	r5, r3
 800257e:	0023      	movs	r3, r4
 8002580:	432b      	orrs	r3, r5
 8002582:	e7a8      	b.n	80024d6 <__divdi3+0x11e>
 8002584:	4641      	mov	r1, r8
 8002586:	2620      	movs	r6, #32
 8002588:	2701      	movs	r7, #1
 800258a:	1a76      	subs	r6, r6, r1
 800258c:	2000      	movs	r0, #0
 800258e:	2100      	movs	r1, #0
 8002590:	40f7      	lsrs	r7, r6
 8002592:	9000      	str	r0, [sp, #0]
 8002594:	9101      	str	r1, [sp, #4]
 8002596:	9701      	str	r7, [sp, #4]
 8002598:	e768      	b.n	800246c <__divdi3+0xb4>
 800259a:	46c0      	nop			@ (mov r8, r8)

0800259c <LSM6DSO_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LSM6DSO_Init(void) {
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
	HAL_I2C_IsDeviceReady(&hi2c1, Accmtr_ADDR<< 1, 1, HAL_MAX_DELAY);
 80025a0:	236a      	movs	r3, #106	@ 0x6a
 80025a2:	18db      	adds	r3, r3, r3
 80025a4:	b299      	uxth	r1, r3
 80025a6:	2301      	movs	r3, #1
 80025a8:	425b      	negs	r3, r3
 80025aa:	4803      	ldr	r0, [pc, #12]	@ (80025b8 <LSM6DSO_Init+0x1c>)
 80025ac:	2201      	movs	r2, #1
 80025ae:	f003 fcc9 	bl	8005f44 <HAL_I2C_IsDeviceReady>
}
 80025b2:	46c0      	nop			@ (mov r8, r8)
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20000028 	.word	0x20000028

080025bc <LSM6DSO_Read>:

void LSM6DSO_Read(uint16_t *x, uint16_t *y, uint16_t *z) {
 80025bc:	b5b0      	push	{r4, r5, r7, lr}
 80025be:	b08c      	sub	sp, #48	@ 0x30
 80025c0:	af04      	add	r7, sp, #16
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
    uint8_t accelData[6]; // 2B for each axis
    uint8_t statusReg;
    uint8_t val1 = 0x50; // CTRL1_XL startup val
 80025c8:	2416      	movs	r4, #22
 80025ca:	193b      	adds	r3, r7, r4
 80025cc:	2250      	movs	r2, #80	@ 0x50
 80025ce:	701a      	strb	r2, [r3, #0]
    uint8_t val2 = 0x01; // INT1_CTRL startup val
 80025d0:	2515      	movs	r5, #21
 80025d2:	197b      	adds	r3, r7, r5
 80025d4:	2201      	movs	r2, #1
 80025d6:	701a      	strb	r2, [r3, #0]

    HAL_I2C_Mem_Write(&hi2c1, Accmtr_ADDR << 1, 0x10, I2C_MEMADD_SIZE_8BIT, &val1, 1, HAL_MAX_DELAY); // 50h (208Hz data rate, 00, 2g, 2g) to CTRL1_XL 10h
 80025d8:	236a      	movs	r3, #106	@ 0x6a
 80025da:	18db      	adds	r3, r3, r3
 80025dc:	b299      	uxth	r1, r3
 80025de:	4839      	ldr	r0, [pc, #228]	@ (80026c4 <LSM6DSO_Read+0x108>)
 80025e0:	2301      	movs	r3, #1
 80025e2:	425b      	negs	r3, r3
 80025e4:	9302      	str	r3, [sp, #8]
 80025e6:	2301      	movs	r3, #1
 80025e8:	9301      	str	r3, [sp, #4]
 80025ea:	193b      	adds	r3, r7, r4
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	2301      	movs	r3, #1
 80025f0:	2210      	movs	r2, #16
 80025f2:	f003 fa45 	bl	8005a80 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c1, Accmtr_ADDR << 1, 0x0D, I2C_MEMADD_SIZE_8BIT, &val2, 1, HAL_MAX_DELAY); // 01h to INT1_CTRL 0Dh
 80025f6:	236a      	movs	r3, #106	@ 0x6a
 80025f8:	18db      	adds	r3, r3, r3
 80025fa:	b299      	uxth	r1, r3
 80025fc:	4831      	ldr	r0, [pc, #196]	@ (80026c4 <LSM6DSO_Read+0x108>)
 80025fe:	2301      	movs	r3, #1
 8002600:	425b      	negs	r3, r3
 8002602:	9302      	str	r3, [sp, #8]
 8002604:	2301      	movs	r3, #1
 8002606:	9301      	str	r3, [sp, #4]
 8002608:	197b      	adds	r3, r7, r5
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	2301      	movs	r3, #1
 800260e:	220d      	movs	r2, #13
 8002610:	f003 fa36 	bl	8005a80 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(&hi2c1, Accmtr_ADDR << 1, 0x1E, I2C_MEMADD_SIZE_8BIT, &statusReg, 1, HAL_MAX_DELAY); // read status reg to obtain xdla bit and proceed
 8002614:	236a      	movs	r3, #106	@ 0x6a
 8002616:	18db      	adds	r3, r3, r3
 8002618:	b299      	uxth	r1, r3
 800261a:	482a      	ldr	r0, [pc, #168]	@ (80026c4 <LSM6DSO_Read+0x108>)
 800261c:	2301      	movs	r3, #1
 800261e:	425b      	negs	r3, r3
 8002620:	9302      	str	r3, [sp, #8]
 8002622:	2301      	movs	r3, #1
 8002624:	9301      	str	r3, [sp, #4]
 8002626:	2417      	movs	r4, #23
 8002628:	193b      	adds	r3, r7, r4
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	2301      	movs	r3, #1
 800262e:	221e      	movs	r2, #30
 8002630:	f003 fb54 	bl	8005cdc <HAL_I2C_Mem_Read>

	if (statusReg & 0x01) { //XLDA = 1 when new data present
 8002634:	193b      	adds	r3, r7, r4
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	001a      	movs	r2, r3
 800263a:	2301      	movs	r3, #1
 800263c:	4013      	ands	r3, r2
 800263e:	d035      	beq.n	80026ac <LSM6DSO_Read+0xf0>

		HAL_I2C_Mem_Read(&hi2c1, Accmtr_ADDR << 1, 0x28, 1, accelData, 6, HAL_MAX_DELAY);
 8002640:	236a      	movs	r3, #106	@ 0x6a
 8002642:	18db      	adds	r3, r3, r3
 8002644:	b299      	uxth	r1, r3
 8002646:	481f      	ldr	r0, [pc, #124]	@ (80026c4 <LSM6DSO_Read+0x108>)
 8002648:	2301      	movs	r3, #1
 800264a:	425b      	negs	r3, r3
 800264c:	9302      	str	r3, [sp, #8]
 800264e:	2306      	movs	r3, #6
 8002650:	9301      	str	r3, [sp, #4]
 8002652:	2418      	movs	r4, #24
 8002654:	193b      	adds	r3, r7, r4
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	2301      	movs	r3, #1
 800265a:	2228      	movs	r2, #40	@ 0x28
 800265c:	f003 fb3e 	bl	8005cdc <HAL_I2C_Mem_Read>

		*x = (int16_t)(accelData[1] << 8 | accelData[0]);
 8002660:	0021      	movs	r1, r4
 8002662:	187b      	adds	r3, r7, r1
 8002664:	785b      	ldrb	r3, [r3, #1]
 8002666:	021b      	lsls	r3, r3, #8
 8002668:	b21a      	sxth	r2, r3
 800266a:	187b      	adds	r3, r7, r1
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	b21b      	sxth	r3, r3
 8002670:	4313      	orrs	r3, r2
 8002672:	b21b      	sxth	r3, r3
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	801a      	strh	r2, [r3, #0]
		*y = (int16_t)(accelData[3] << 8 | accelData[2]);
 800267a:	187b      	adds	r3, r7, r1
 800267c:	78db      	ldrb	r3, [r3, #3]
 800267e:	021b      	lsls	r3, r3, #8
 8002680:	b21a      	sxth	r2, r3
 8002682:	187b      	adds	r3, r7, r1
 8002684:	789b      	ldrb	r3, [r3, #2]
 8002686:	b21b      	sxth	r3, r3
 8002688:	4313      	orrs	r3, r2
 800268a:	b21b      	sxth	r3, r3
 800268c:	b29a      	uxth	r2, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	801a      	strh	r2, [r3, #0]
		*z = (int16_t)(accelData[5] << 8 | accelData[4]);
 8002692:	187b      	adds	r3, r7, r1
 8002694:	795b      	ldrb	r3, [r3, #5]
 8002696:	021b      	lsls	r3, r3, #8
 8002698:	b21a      	sxth	r2, r3
 800269a:	187b      	adds	r3, r7, r1
 800269c:	791b      	ldrb	r3, [r3, #4]
 800269e:	b21b      	sxth	r3, r3
 80026a0:	4313      	orrs	r3, r2
 80026a2:	b21b      	sxth	r3, r3
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	801a      	strh	r2, [r3, #0]
 80026aa:	e003      	b.n	80026b4 <LSM6DSO_Read+0xf8>
	} else {
		printf_("404\n"); //no new data rn
 80026ac:	4b06      	ldr	r3, [pc, #24]	@ (80026c8 <LSM6DSO_Read+0x10c>)
 80026ae:	0018      	movs	r0, r3
 80026b0:	f002 fd46 	bl	8005140 <printf_>
	}

	HAL_Delay(10);
 80026b4:	200a      	movs	r0, #10
 80026b6:	f002 fed9 	bl	800546c <HAL_Delay>
}
 80026ba:	46c0      	nop			@ (mov r8, r8)
 80026bc:	46bd      	mov	sp, r7
 80026be:	b008      	add	sp, #32
 80026c0:	bdb0      	pop	{r4, r5, r7, pc}
 80026c2:	46c0      	nop			@ (mov r8, r8)
 80026c4:	20000028 	.word	0x20000028
 80026c8:	080083b8 	.word	0x080083b8

080026cc <print_data>:


void print_data(int16_t x, int16_t y, int16_t z) {
 80026cc:	b5b0      	push	{r4, r5, r7, lr}
 80026ce:	b09e      	sub	sp, #120	@ 0x78
 80026d0:	af02      	add	r7, sp, #8
 80026d2:	0004      	movs	r4, r0
 80026d4:	0008      	movs	r0, r1
 80026d6:	0011      	movs	r1, r2
 80026d8:	1dbb      	adds	r3, r7, #6
 80026da:	1c22      	adds	r2, r4, #0
 80026dc:	801a      	strh	r2, [r3, #0]
 80026de:	1d3b      	adds	r3, r7, #4
 80026e0:	1c02      	adds	r2, r0, #0
 80026e2:	801a      	strh	r2, [r3, #0]
 80026e4:	1cbb      	adds	r3, r7, #2
 80026e6:	1c0a      	adds	r2, r1, #0
 80026e8:	801a      	strh	r2, [r3, #0]
    char buffer[100];
    //set the values in the buffer too
    size_t len = snprintf_(buffer, 100, "X: %d, Y: %d, Z: %d\r\n", x, y, z);
 80026ea:	1dbb      	adds	r3, r7, #6
 80026ec:	2400      	movs	r4, #0
 80026ee:	5f1c      	ldrsh	r4, [r3, r4]
 80026f0:	1d3b      	adds	r3, r7, #4
 80026f2:	2200      	movs	r2, #0
 80026f4:	5e9b      	ldrsh	r3, [r3, r2]
 80026f6:	1cba      	adds	r2, r7, #2
 80026f8:	2100      	movs	r1, #0
 80026fa:	5e52      	ldrsh	r2, [r2, r1]
 80026fc:	490b      	ldr	r1, [pc, #44]	@ (800272c <print_data+0x60>)
 80026fe:	2508      	movs	r5, #8
 8002700:	1978      	adds	r0, r7, r5
 8002702:	9201      	str	r2, [sp, #4]
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	0023      	movs	r3, r4
 8002708:	000a      	movs	r2, r1
 800270a:	2164      	movs	r1, #100	@ 0x64
 800270c:	f002 fd2f 	bl	800516e <snprintf_>
 8002710:	0003      	movs	r3, r0
 8002712:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 8002714:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002716:	b29a      	uxth	r2, r3
 8002718:	2301      	movs	r3, #1
 800271a:	425b      	negs	r3, r3
 800271c:	1979      	adds	r1, r7, r5
 800271e:	4804      	ldr	r0, [pc, #16]	@ (8002730 <print_data+0x64>)
 8002720:	f005 f89e 	bl	8007860 <HAL_UART_Transmit>
}
 8002724:	46c0      	nop			@ (mov r8, r8)
 8002726:	46bd      	mov	sp, r7
 8002728:	b01c      	add	sp, #112	@ 0x70
 800272a:	bdb0      	pop	{r4, r5, r7, pc}
 800272c:	080083c0 	.word	0x080083c0
 8002730:	2000007c 	.word	0x2000007c

08002734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
	printf_("hi!!!\n");
 800273a:	4b12      	ldr	r3, [pc, #72]	@ (8002784 <main+0x50>)
 800273c:	0018      	movs	r0, r3
 800273e:	f002 fcff 	bl	8005140 <printf_>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002742:	f002 fe23 	bl	800538c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002746:	f000 f81f 	bl	8002788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800274a:	f000 f8fb 	bl	8002944 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800274e:	f000 f8c9 	bl	80028e4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002752:	f000 f887 	bl	8002864 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  LSM6DSO_Init();
 8002756:	f7ff ff21 	bl	800259c <LSM6DSO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  LSM6DSO_Read(&x,&y,&z);
 800275a:	1cba      	adds	r2, r7, #2
 800275c:	1d39      	adds	r1, r7, #4
 800275e:	1dbb      	adds	r3, r7, #6
 8002760:	0018      	movs	r0, r3
 8002762:	f7ff ff2b 	bl	80025bc <LSM6DSO_Read>
	  print_data(x,y,z);
 8002766:	1dbb      	adds	r3, r7, #6
 8002768:	2000      	movs	r0, #0
 800276a:	5e18      	ldrsh	r0, [r3, r0]
 800276c:	1d3b      	adds	r3, r7, #4
 800276e:	2100      	movs	r1, #0
 8002770:	5e59      	ldrsh	r1, [r3, r1]
 8002772:	1cbb      	adds	r3, r7, #2
 8002774:	2200      	movs	r2, #0
 8002776:	5e9b      	ldrsh	r3, [r3, r2]
 8002778:	001a      	movs	r2, r3
 800277a:	f7ff ffa7 	bl	80026cc <print_data>
	  LSM6DSO_Read(&x,&y,&z);
 800277e:	46c0      	nop			@ (mov r8, r8)
 8002780:	e7eb      	b.n	800275a <main+0x26>
 8002782:	46c0      	nop			@ (mov r8, r8)
 8002784:	080083d8 	.word	0x080083d8

08002788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002788:	b590      	push	{r4, r7, lr}
 800278a:	b09f      	sub	sp, #124	@ 0x7c
 800278c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800278e:	2440      	movs	r4, #64	@ 0x40
 8002790:	193b      	adds	r3, r7, r4
 8002792:	0018      	movs	r0, r3
 8002794:	2338      	movs	r3, #56	@ 0x38
 8002796:	001a      	movs	r2, r3
 8002798:	2100      	movs	r1, #0
 800279a:	f005 fdc9 	bl	8008330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800279e:	232c      	movs	r3, #44	@ 0x2c
 80027a0:	18fb      	adds	r3, r7, r3
 80027a2:	0018      	movs	r0, r3
 80027a4:	2314      	movs	r3, #20
 80027a6:	001a      	movs	r2, r3
 80027a8:	2100      	movs	r1, #0
 80027aa:	f005 fdc1 	bl	8008330 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027ae:	1d3b      	adds	r3, r7, #4
 80027b0:	0018      	movs	r0, r3
 80027b2:	2328      	movs	r3, #40	@ 0x28
 80027b4:	001a      	movs	r2, r3
 80027b6:	2100      	movs	r1, #0
 80027b8:	f005 fdba 	bl	8008330 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027bc:	4b27      	ldr	r3, [pc, #156]	@ (800285c <SystemClock_Config+0xd4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a27      	ldr	r2, [pc, #156]	@ (8002860 <SystemClock_Config+0xd8>)
 80027c2:	401a      	ands	r2, r3
 80027c4:	4b25      	ldr	r3, [pc, #148]	@ (800285c <SystemClock_Config+0xd4>)
 80027c6:	2180      	movs	r1, #128	@ 0x80
 80027c8:	0109      	lsls	r1, r1, #4
 80027ca:	430a      	orrs	r2, r1
 80027cc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80027ce:	0021      	movs	r1, r4
 80027d0:	187b      	adds	r3, r7, r1
 80027d2:	2210      	movs	r2, #16
 80027d4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80027d6:	187b      	adds	r3, r7, r1
 80027d8:	2201      	movs	r2, #1
 80027da:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80027dc:	187b      	adds	r3, r7, r1
 80027de:	2200      	movs	r2, #0
 80027e0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80027e2:	187b      	adds	r3, r7, r1
 80027e4:	22a0      	movs	r2, #160	@ 0xa0
 80027e6:	0212      	lsls	r2, r2, #8
 80027e8:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80027ea:	187b      	adds	r3, r7, r1
 80027ec:	2200      	movs	r2, #0
 80027ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027f0:	187b      	adds	r3, r7, r1
 80027f2:	0018      	movs	r0, r3
 80027f4:	f004 f84a 	bl	800688c <HAL_RCC_OscConfig>
 80027f8:	1e03      	subs	r3, r0, #0
 80027fa:	d001      	beq.n	8002800 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80027fc:	f000 f906 	bl	8002a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002800:	212c      	movs	r1, #44	@ 0x2c
 8002802:	187b      	adds	r3, r7, r1
 8002804:	220f      	movs	r2, #15
 8002806:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002808:	187b      	adds	r3, r7, r1
 800280a:	2200      	movs	r2, #0
 800280c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800280e:	187b      	adds	r3, r7, r1
 8002810:	2200      	movs	r2, #0
 8002812:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002814:	187b      	adds	r3, r7, r1
 8002816:	2200      	movs	r2, #0
 8002818:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800281a:	187b      	adds	r3, r7, r1
 800281c:	2200      	movs	r2, #0
 800281e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002820:	187b      	adds	r3, r7, r1
 8002822:	2100      	movs	r1, #0
 8002824:	0018      	movs	r0, r3
 8002826:	f004 fc05 	bl	8007034 <HAL_RCC_ClockConfig>
 800282a:	1e03      	subs	r3, r0, #0
 800282c:	d001      	beq.n	8002832 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800282e:	f000 f8ed 	bl	8002a0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8002832:	1d3b      	adds	r3, r7, #4
 8002834:	220a      	movs	r2, #10
 8002836:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002838:	1d3b      	adds	r3, r7, #4
 800283a:	2200      	movs	r2, #0
 800283c:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800283e:	1d3b      	adds	r3, r7, #4
 8002840:	2200      	movs	r2, #0
 8002842:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002844:	1d3b      	adds	r3, r7, #4
 8002846:	0018      	movs	r0, r3
 8002848:	f004 fe18 	bl	800747c <HAL_RCCEx_PeriphCLKConfig>
 800284c:	1e03      	subs	r3, r0, #0
 800284e:	d001      	beq.n	8002854 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002850:	f000 f8dc 	bl	8002a0c <Error_Handler>
  }
}
 8002854:	46c0      	nop			@ (mov r8, r8)
 8002856:	46bd      	mov	sp, r7
 8002858:	b01f      	add	sp, #124	@ 0x7c
 800285a:	bd90      	pop	{r4, r7, pc}
 800285c:	40007000 	.word	0x40007000
 8002860:	ffffe7ff 	.word	0xffffe7ff

08002864 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002868:	4b1c      	ldr	r3, [pc, #112]	@ (80028dc <MX_I2C1_Init+0x78>)
 800286a:	4a1d      	ldr	r2, [pc, #116]	@ (80028e0 <MX_I2C1_Init+0x7c>)
 800286c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 800286e:	4b1b      	ldr	r3, [pc, #108]	@ (80028dc <MX_I2C1_Init+0x78>)
 8002870:	22c1      	movs	r2, #193	@ 0xc1
 8002872:	00d2      	lsls	r2, r2, #3
 8002874:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002876:	4b19      	ldr	r3, [pc, #100]	@ (80028dc <MX_I2C1_Init+0x78>)
 8002878:	2200      	movs	r2, #0
 800287a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800287c:	4b17      	ldr	r3, [pc, #92]	@ (80028dc <MX_I2C1_Init+0x78>)
 800287e:	2201      	movs	r2, #1
 8002880:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002882:	4b16      	ldr	r3, [pc, #88]	@ (80028dc <MX_I2C1_Init+0x78>)
 8002884:	2200      	movs	r2, #0
 8002886:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002888:	4b14      	ldr	r3, [pc, #80]	@ (80028dc <MX_I2C1_Init+0x78>)
 800288a:	2200      	movs	r2, #0
 800288c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800288e:	4b13      	ldr	r3, [pc, #76]	@ (80028dc <MX_I2C1_Init+0x78>)
 8002890:	2200      	movs	r2, #0
 8002892:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002894:	4b11      	ldr	r3, [pc, #68]	@ (80028dc <MX_I2C1_Init+0x78>)
 8002896:	2200      	movs	r2, #0
 8002898:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800289a:	4b10      	ldr	r3, [pc, #64]	@ (80028dc <MX_I2C1_Init+0x78>)
 800289c:	2200      	movs	r2, #0
 800289e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028a0:	4b0e      	ldr	r3, [pc, #56]	@ (80028dc <MX_I2C1_Init+0x78>)
 80028a2:	0018      	movs	r0, r3
 80028a4:	f003 f856 	bl	8005954 <HAL_I2C_Init>
 80028a8:	1e03      	subs	r3, r0, #0
 80028aa:	d001      	beq.n	80028b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80028ac:	f000 f8ae 	bl	8002a0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80028b0:	4b0a      	ldr	r3, [pc, #40]	@ (80028dc <MX_I2C1_Init+0x78>)
 80028b2:	2100      	movs	r1, #0
 80028b4:	0018      	movs	r0, r3
 80028b6:	f003 ff51 	bl	800675c <HAL_I2CEx_ConfigAnalogFilter>
 80028ba:	1e03      	subs	r3, r0, #0
 80028bc:	d001      	beq.n	80028c2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80028be:	f000 f8a5 	bl	8002a0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80028c2:	4b06      	ldr	r3, [pc, #24]	@ (80028dc <MX_I2C1_Init+0x78>)
 80028c4:	2100      	movs	r1, #0
 80028c6:	0018      	movs	r0, r3
 80028c8:	f003 ff94 	bl	80067f4 <HAL_I2CEx_ConfigDigitalFilter>
 80028cc:	1e03      	subs	r3, r0, #0
 80028ce:	d001      	beq.n	80028d4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80028d0:	f000 f89c 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028d4:	46c0      	nop			@ (mov r8, r8)
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	46c0      	nop			@ (mov r8, r8)
 80028dc:	20000028 	.word	0x20000028
 80028e0:	40005400 	.word	0x40005400

080028e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80028e8:	4b14      	ldr	r3, [pc, #80]	@ (800293c <MX_USART2_UART_Init+0x58>)
 80028ea:	4a15      	ldr	r2, [pc, #84]	@ (8002940 <MX_USART2_UART_Init+0x5c>)
 80028ec:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80028ee:	4b13      	ldr	r3, [pc, #76]	@ (800293c <MX_USART2_UART_Init+0x58>)
 80028f0:	22e1      	movs	r2, #225	@ 0xe1
 80028f2:	0252      	lsls	r2, r2, #9
 80028f4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028f6:	4b11      	ldr	r3, [pc, #68]	@ (800293c <MX_USART2_UART_Init+0x58>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80028fc:	4b0f      	ldr	r3, [pc, #60]	@ (800293c <MX_USART2_UART_Init+0x58>)
 80028fe:	2200      	movs	r2, #0
 8002900:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002902:	4b0e      	ldr	r3, [pc, #56]	@ (800293c <MX_USART2_UART_Init+0x58>)
 8002904:	2200      	movs	r2, #0
 8002906:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002908:	4b0c      	ldr	r3, [pc, #48]	@ (800293c <MX_USART2_UART_Init+0x58>)
 800290a:	220c      	movs	r2, #12
 800290c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800290e:	4b0b      	ldr	r3, [pc, #44]	@ (800293c <MX_USART2_UART_Init+0x58>)
 8002910:	2200      	movs	r2, #0
 8002912:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002914:	4b09      	ldr	r3, [pc, #36]	@ (800293c <MX_USART2_UART_Init+0x58>)
 8002916:	2200      	movs	r2, #0
 8002918:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800291a:	4b08      	ldr	r3, [pc, #32]	@ (800293c <MX_USART2_UART_Init+0x58>)
 800291c:	2200      	movs	r2, #0
 800291e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002920:	4b06      	ldr	r3, [pc, #24]	@ (800293c <MX_USART2_UART_Init+0x58>)
 8002922:	2200      	movs	r2, #0
 8002924:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002926:	4b05      	ldr	r3, [pc, #20]	@ (800293c <MX_USART2_UART_Init+0x58>)
 8002928:	0018      	movs	r0, r3
 800292a:	f004 ff45 	bl	80077b8 <HAL_UART_Init>
 800292e:	1e03      	subs	r3, r0, #0
 8002930:	d001      	beq.n	8002936 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002932:	f000 f86b 	bl	8002a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002936:	46c0      	nop			@ (mov r8, r8)
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	2000007c 	.word	0x2000007c
 8002940:	40004400 	.word	0x40004400

08002944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002944:	b590      	push	{r4, r7, lr}
 8002946:	b089      	sub	sp, #36	@ 0x24
 8002948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294a:	240c      	movs	r4, #12
 800294c:	193b      	adds	r3, r7, r4
 800294e:	0018      	movs	r0, r3
 8002950:	2314      	movs	r3, #20
 8002952:	001a      	movs	r2, r3
 8002954:	2100      	movs	r1, #0
 8002956:	f005 fceb 	bl	8008330 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800295a:	4b2a      	ldr	r3, [pc, #168]	@ (8002a04 <MX_GPIO_Init+0xc0>)
 800295c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800295e:	4b29      	ldr	r3, [pc, #164]	@ (8002a04 <MX_GPIO_Init+0xc0>)
 8002960:	2104      	movs	r1, #4
 8002962:	430a      	orrs	r2, r1
 8002964:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002966:	4b27      	ldr	r3, [pc, #156]	@ (8002a04 <MX_GPIO_Init+0xc0>)
 8002968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296a:	2204      	movs	r2, #4
 800296c:	4013      	ands	r3, r2
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002972:	4b24      	ldr	r3, [pc, #144]	@ (8002a04 <MX_GPIO_Init+0xc0>)
 8002974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002976:	4b23      	ldr	r3, [pc, #140]	@ (8002a04 <MX_GPIO_Init+0xc0>)
 8002978:	2180      	movs	r1, #128	@ 0x80
 800297a:	430a      	orrs	r2, r1
 800297c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800297e:	4b21      	ldr	r3, [pc, #132]	@ (8002a04 <MX_GPIO_Init+0xc0>)
 8002980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002982:	2280      	movs	r2, #128	@ 0x80
 8002984:	4013      	ands	r3, r2
 8002986:	607b      	str	r3, [r7, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800298a:	4b1e      	ldr	r3, [pc, #120]	@ (8002a04 <MX_GPIO_Init+0xc0>)
 800298c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800298e:	4b1d      	ldr	r3, [pc, #116]	@ (8002a04 <MX_GPIO_Init+0xc0>)
 8002990:	2101      	movs	r1, #1
 8002992:	430a      	orrs	r2, r1
 8002994:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002996:	4b1b      	ldr	r3, [pc, #108]	@ (8002a04 <MX_GPIO_Init+0xc0>)
 8002998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299a:	2201      	movs	r2, #1
 800299c:	4013      	ands	r3, r2
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80029a2:	23a0      	movs	r3, #160	@ 0xa0
 80029a4:	05db      	lsls	r3, r3, #23
 80029a6:	2200      	movs	r2, #0
 80029a8:	2120      	movs	r1, #32
 80029aa:	0018      	movs	r0, r3
 80029ac:	f002 ffb4 	bl	8005918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80029b0:	193b      	adds	r3, r7, r4
 80029b2:	2280      	movs	r2, #128	@ 0x80
 80029b4:	0192      	lsls	r2, r2, #6
 80029b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80029b8:	193b      	adds	r3, r7, r4
 80029ba:	2284      	movs	r2, #132	@ 0x84
 80029bc:	0392      	lsls	r2, r2, #14
 80029be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c0:	193b      	adds	r3, r7, r4
 80029c2:	2200      	movs	r2, #0
 80029c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80029c6:	193b      	adds	r3, r7, r4
 80029c8:	4a0f      	ldr	r2, [pc, #60]	@ (8002a08 <MX_GPIO_Init+0xc4>)
 80029ca:	0019      	movs	r1, r3
 80029cc:	0010      	movs	r0, r2
 80029ce:	f002 fe25 	bl	800561c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80029d2:	0021      	movs	r1, r4
 80029d4:	187b      	adds	r3, r7, r1
 80029d6:	2220      	movs	r2, #32
 80029d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029da:	187b      	adds	r3, r7, r1
 80029dc:	2201      	movs	r2, #1
 80029de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	187b      	adds	r3, r7, r1
 80029e2:	2200      	movs	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e6:	187b      	adds	r3, r7, r1
 80029e8:	2200      	movs	r2, #0
 80029ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80029ec:	187a      	adds	r2, r7, r1
 80029ee:	23a0      	movs	r3, #160	@ 0xa0
 80029f0:	05db      	lsls	r3, r3, #23
 80029f2:	0011      	movs	r1, r2
 80029f4:	0018      	movs	r0, r3
 80029f6:	f002 fe11 	bl	800561c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80029fa:	46c0      	nop			@ (mov r8, r8)
 80029fc:	46bd      	mov	sp, r7
 80029fe:	b009      	add	sp, #36	@ 0x24
 8002a00:	bd90      	pop	{r4, r7, pc}
 8002a02:	46c0      	nop			@ (mov r8, r8)
 8002a04:	40021000 	.word	0x40021000
 8002a08:	50000800 	.word	0x50000800

08002a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a10:	b672      	cpsid	i
}
 8002a12:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a14:	46c0      	nop			@ (mov r8, r8)
 8002a16:	e7fd      	b.n	8002a14 <Error_Handler+0x8>

08002a18 <get_bit_access>:
// but:
// 1. Some compilers are finicky about this;
// 2. Some people may want to convert this to C89;
// 3. If you try to use it as C++, only C++20 supports compound literals
static inline double_with_bit_access get_bit_access(double x)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	603a      	str	r2, [r7, #0]
 8002a22:	607b      	str	r3, [r7, #4]
  double_with_bit_access dwba;
  dwba.F = x;
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	613a      	str	r2, [r7, #16]
 8002a2a:	617b      	str	r3, [r7, #20]
  return dwba;
 8002a2c:	68f9      	ldr	r1, [r7, #12]
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	600a      	str	r2, [r1, #0]
 8002a34:	604b      	str	r3, [r1, #4]
}
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	b006      	add	sp, #24
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <get_sign_bit>:

static inline int get_sign_bit(double x)
{
 8002a3e:	b5b0      	push	{r4, r5, r7, lr}
 8002a40:	b084      	sub	sp, #16
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6038      	str	r0, [r7, #0]
 8002a46:	6079      	str	r1, [r7, #4]
  // The sign is stored in the highest bit
  return (int) (get_bit_access(x).U >> (DOUBLE_SIZE_IN_BITS - 1));
 8002a48:	2308      	movs	r3, #8
 8002a4a:	18f9      	adds	r1, r7, r3
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	0008      	movs	r0, r1
 8002a52:	f7ff ffe1 	bl	8002a18 <get_bit_access>
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	0fdc      	lsrs	r4, r3, #31
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	001d      	movs	r5, r3
 8002a60:	0023      	movs	r3, r4
}
 8002a62:	0018      	movs	r0, r3
 8002a64:	46bd      	mov	sp, r7
 8002a66:	b004      	add	sp, #16
 8002a68:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002a6c <get_exp2>:

static inline int get_exp2(double_with_bit_access x)
{
 8002a6c:	b5b0      	push	{r4, r5, r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6038      	str	r0, [r7, #0]
 8002a74:	6079      	str	r1, [r7, #4]
  // The exponent in an IEEE-754 floating-point number occupies a contiguous
  // sequence of bits (e.g. 52..62 for 64-bit doubles), but with a non-trivial representation: An
  // unsigned offset from some negative value (with the extremal offset values reserved for
  // special use).
  return (int)((x.U >> DOUBLE_STORED_MANTISSA_BITS ) & DOUBLE_EXPONENT_MASK) - DOUBLE_BASE_EXPONENT;
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	0d1c      	lsrs	r4, r3, #20
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	001d      	movs	r5, r3
 8002a80:	0023      	movs	r3, r4
 8002a82:	055b      	lsls	r3, r3, #21
 8002a84:	0d5b      	lsrs	r3, r3, #21
 8002a86:	4a03      	ldr	r2, [pc, #12]	@ (8002a94 <get_exp2+0x28>)
 8002a88:	4694      	mov	ip, r2
 8002a8a:	4463      	add	r3, ip
}
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	b002      	add	sp, #8
 8002a92:	bdb0      	pop	{r4, r5, r7, pc}
 8002a94:	fffffc01 	.word	0xfffffc01

08002a98 <putchar_via_gadget>:
// Note: This function currently assumes it is not passed a '\0' c,
// or alternatively, that '\0' can be passed to the function in the output
// gadget. The former assumption holds within the printf library. It also
// assumes that the output gadget has been properly initialized.
static inline void putchar_via_gadget(output_gadget_t* gadget, char c)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	000a      	movs	r2, r1
 8002aa2:	1cfb      	adds	r3, r7, #3
 8002aa4:	701a      	strb	r2, [r3, #0]
  printf_size_t write_pos = gadget->pos++;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	1c59      	adds	r1, r3, #1
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	60d1      	str	r1, [r2, #12]
 8002ab0:	60fb      	str	r3, [r7, #12]
    // We're _always_ increasing pos, so as to count how may characters
    // _would_ have been written if not for the max_chars limitation
  if (write_pos >= gadget->max_chars) {
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d214      	bcs.n	8002ae6 <putchar_via_gadget+0x4e>
    return;
  }
  if (gadget->function != NULL) {
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <putchar_via_gadget+0x3e>
    // No check for c == '\0' .
    gadget->function(c, gadget->extra_function_arg);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6859      	ldr	r1, [r3, #4]
 8002acc:	1cfb      	adds	r3, r7, #3
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	4790      	blx	r2
 8002ad4:	e008      	b.n	8002ae8 <putchar_via_gadget+0x50>
  }
  else {
    // it must be the case that gadget->buffer != NULL , due to the constraint
    // on output_gadget_t ; and note we're relying on write_pos being non-negative.
    gadget->buffer[write_pos] = c;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	18d3      	adds	r3, r2, r3
 8002ade:	1cfa      	adds	r2, r7, #3
 8002ae0:	7812      	ldrb	r2, [r2, #0]
 8002ae2:	701a      	strb	r2, [r3, #0]
 8002ae4:	e000      	b.n	8002ae8 <putchar_via_gadget+0x50>
    return;
 8002ae6:	46c0      	nop			@ (mov r8, r8)
  }
}
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	b004      	add	sp, #16
 8002aec:	bd80      	pop	{r7, pc}

08002aee <append_termination_with_gadget>:

// Possibly-write the string-terminating '\0' character
static inline void append_termination_with_gadget(output_gadget_t* gadget)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b084      	sub	sp, #16
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  if (gadget->function != NULL || gadget->max_chars == 0) {
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d11b      	bne.n	8002b36 <append_termination_with_gadget+0x48>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d017      	beq.n	8002b36 <append_termination_with_gadget+0x48>
    return;
  }
  if (gadget->buffer == NULL) {
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d015      	beq.n	8002b3a <append_termination_with_gadget+0x4c>
    return;
  }
  printf_size_t null_char_pos = gadget->pos < gadget->max_chars ? gadget->pos : gadget->max_chars - 1;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d202      	bcs.n	8002b20 <append_termination_with_gadget+0x32>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	e002      	b.n	8002b26 <append_termination_with_gadget+0x38>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	3b01      	subs	r3, #1
 8002b26:	60fb      	str	r3, [r7, #12]
  gadget->buffer[null_char_pos] = '\0';
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	18d3      	adds	r3, r2, r3
 8002b30:	2200      	movs	r2, #0
 8002b32:	701a      	strb	r2, [r3, #0]
 8002b34:	e002      	b.n	8002b3c <append_termination_with_gadget+0x4e>
    return;
 8002b36:	46c0      	nop			@ (mov r8, r8)
 8002b38:	e000      	b.n	8002b3c <append_termination_with_gadget+0x4e>
    return;
 8002b3a:	46c0      	nop			@ (mov r8, r8)
}
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b004      	add	sp, #16
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <putchar_wrapper>:

// We can't use putchar_ as is, since our output gadget
// only takes pointers to functions with an extra argument
static inline void putchar_wrapper(char c, void* unused)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	0002      	movs	r2, r0
 8002b4a:	6039      	str	r1, [r7, #0]
 8002b4c:	1dfb      	adds	r3, r7, #7
 8002b4e:	701a      	strb	r2, [r3, #0]
  (void) unused;
  putchar_(c);
 8002b50:	1dfb      	adds	r3, r7, #7
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	0018      	movs	r0, r3
 8002b56:	f002 fb23 	bl	80051a0 <putchar_>
}
 8002b5a:	46c0      	nop			@ (mov r8, r8)
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b002      	add	sp, #8
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <discarding_gadget>:

static inline output_gadget_t discarding_gadget(void)
{
 8002b62:	b590      	push	{r4, r7, lr}
 8002b64:	b089      	sub	sp, #36	@ 0x24
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  output_gadget_t gadget;
  gadget.function = NULL;
 8002b6a:	210c      	movs	r1, #12
 8002b6c:	187b      	adds	r3, r7, r1
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
  gadget.extra_function_arg = NULL;
 8002b72:	187b      	adds	r3, r7, r1
 8002b74:	2200      	movs	r2, #0
 8002b76:	605a      	str	r2, [r3, #4]
  gadget.buffer = NULL;
 8002b78:	187b      	adds	r3, r7, r1
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	609a      	str	r2, [r3, #8]
  gadget.pos = 0;
 8002b7e:	187b      	adds	r3, r7, r1
 8002b80:	2200      	movs	r2, #0
 8002b82:	60da      	str	r2, [r3, #12]
  gadget.max_chars = 0;
 8002b84:	187b      	adds	r3, r7, r1
 8002b86:	2200      	movs	r2, #0
 8002b88:	611a      	str	r2, [r3, #16]
  return gadget;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	187a      	adds	r2, r7, r1
 8002b8e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002b90:	c313      	stmia	r3!, {r0, r1, r4}
 8002b92:	ca03      	ldmia	r2!, {r0, r1}
 8002b94:	c303      	stmia	r3!, {r0, r1}
}
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b009      	add	sp, #36	@ 0x24
 8002b9c:	bd90      	pop	{r4, r7, pc}
	...

08002ba0 <buffer_gadget>:

static inline output_gadget_t buffer_gadget(char* buffer, size_t buffer_size)
{
 8002ba0:	b590      	push	{r4, r7, lr}
 8002ba2:	b08b      	sub	sp, #44	@ 0x2c
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  printf_size_t usable_buffer_size = (buffer_size > PRINTF_MAX_POSSIBLE_BUFFER_SIZE) ?
 8002bac:	687b      	ldr	r3, [r7, #4]
    PRINTF_MAX_POSSIBLE_BUFFER_SIZE : (printf_size_t) buffer_size;
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	db01      	blt.n	8002bb6 <buffer_gadget+0x16>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	e000      	b.n	8002bb8 <buffer_gadget+0x18>
 8002bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8002bec <buffer_gadget+0x4c>)
  printf_size_t usable_buffer_size = (buffer_size > PRINTF_MAX_POSSIBLE_BUFFER_SIZE) ?
 8002bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  output_gadget_t result = discarding_gadget();
 8002bba:	2410      	movs	r4, #16
 8002bbc:	193b      	adds	r3, r7, r4
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f7ff ffcf 	bl	8002b62 <discarding_gadget>
  if (buffer != NULL) {
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d005      	beq.n	8002bd6 <buffer_gadget+0x36>
    result.buffer = buffer;
 8002bca:	193b      	adds	r3, r7, r4
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	609a      	str	r2, [r3, #8]
    result.max_chars = usable_buffer_size;
 8002bd0:	193b      	adds	r3, r7, r4
 8002bd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bd4:	611a      	str	r2, [r3, #16]
  }
  return result;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2210      	movs	r2, #16
 8002bda:	18ba      	adds	r2, r7, r2
 8002bdc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002bde:	c313      	stmia	r3!, {r0, r1, r4}
 8002be0:	ca03      	ldmia	r2!, {r0, r1}
 8002be2:	c303      	stmia	r3!, {r0, r1}
}
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	46bd      	mov	sp, r7
 8002be8:	b00b      	add	sp, #44	@ 0x2c
 8002bea:	bd90      	pop	{r4, r7, pc}
 8002bec:	7fffffff 	.word	0x7fffffff

08002bf0 <function_gadget>:

static inline output_gadget_t function_gadget(void (*function)(char, void*), void* extra_arg)
{
 8002bf0:	b590      	push	{r4, r7, lr}
 8002bf2:	b08b      	sub	sp, #44	@ 0x2c
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  output_gadget_t result = discarding_gadget();
 8002bfc:	2414      	movs	r4, #20
 8002bfe:	193b      	adds	r3, r7, r4
 8002c00:	0018      	movs	r0, r3
 8002c02:	f7ff ffae 	bl	8002b62 <discarding_gadget>
  result.function = function;
 8002c06:	0021      	movs	r1, r4
 8002c08:	187b      	adds	r3, r7, r1
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	601a      	str	r2, [r3, #0]
  result.extra_function_arg = extra_arg;
 8002c0e:	187b      	adds	r3, r7, r1
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	605a      	str	r2, [r3, #4]
  result.max_chars = PRINTF_MAX_POSSIBLE_BUFFER_SIZE;
 8002c14:	187b      	adds	r3, r7, r1
 8002c16:	4a06      	ldr	r2, [pc, #24]	@ (8002c30 <function_gadget+0x40>)
 8002c18:	611a      	str	r2, [r3, #16]
  return result;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	187a      	adds	r2, r7, r1
 8002c1e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002c20:	c313      	stmia	r3!, {r0, r1, r4}
 8002c22:	ca03      	ldmia	r2!, {r0, r1}
 8002c24:	c303      	stmia	r3!, {r0, r1}
}
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	b00b      	add	sp, #44	@ 0x2c
 8002c2c:	bd90      	pop	{r4, r7, pc}
 8002c2e:	46c0      	nop			@ (mov r8, r8)
 8002c30:	7fffffff 	.word	0x7fffffff

08002c34 <extern_putchar_gadget>:

static inline output_gadget_t extern_putchar_gadget(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  return function_gadget(putchar_wrapper, NULL);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4904      	ldr	r1, [pc, #16]	@ (8002c50 <extern_putchar_gadget+0x1c>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	0018      	movs	r0, r3
 8002c44:	f7ff ffd4 	bl	8002bf0 <function_gadget>
}
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	b002      	add	sp, #8
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	08002b43 	.word	0x08002b43

08002c54 <strnlen_s_>:
// internal secure strlen
// @return The length of the string (excluding the terminating 0) limited by 'maxsize'
// @note strlen uses size_t, but wes only use this function with printf_size_t
// variables - hence the signature.
static inline printf_size_t strnlen_s_(const char* str, printf_size_t maxsize)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	e002      	b.n	8002c6a <strnlen_s_+0x16>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	3301      	adds	r3, #1
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d004      	beq.n	8002c7c <strnlen_s_+0x28>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	1e5a      	subs	r2, r3, #1
 8002c76:	603a      	str	r2, [r7, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1f3      	bne.n	8002c64 <strnlen_s_+0x10>
  return (printf_size_t)(s - str);
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	1ad3      	subs	r3, r2, r3
}
 8002c82:	0018      	movs	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	b004      	add	sp, #16
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <is_digit_>:


// internal test if char is a digit (0-9)
// @return true if char is a digit
static inline bool is_digit_(char ch)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	0002      	movs	r2, r0
 8002c92:	1dfb      	adds	r3, r7, #7
 8002c94:	701a      	strb	r2, [r3, #0]
  return (ch >= '0') && (ch <= '9');
 8002c96:	1dfb      	adds	r3, r7, #7
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b2f      	cmp	r3, #47	@ 0x2f
 8002c9c:	d905      	bls.n	8002caa <is_digit_+0x20>
 8002c9e:	1dfb      	adds	r3, r7, #7
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b39      	cmp	r3, #57	@ 0x39
 8002ca4:	d801      	bhi.n	8002caa <is_digit_+0x20>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <is_digit_+0x22>
 8002caa:	2300      	movs	r3, #0
 8002cac:	1c1a      	adds	r2, r3, #0
 8002cae:	2301      	movs	r3, #1
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	b2db      	uxtb	r3, r3
}
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b002      	add	sp, #8
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <atou_>:


// internal ASCII string to printf_size_t conversion
static printf_size_t atou_(const char** str)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  printf_size_t i = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60fb      	str	r3, [r7, #12]
  while (is_digit_(**str)) {
 8002cc8:	e00e      	b.n	8002ce8 <atou_+0x2c>
    i = i * 10U + (printf_size_t)(*((*str)++) - '0');
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	0013      	movs	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	189b      	adds	r3, r3, r2
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	1c59      	adds	r1, r3, #1
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6011      	str	r1, [r2, #0]
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	18c3      	adds	r3, r0, r3
 8002ce4:	3b30      	subs	r3, #48	@ 0x30
 8002ce6:	60fb      	str	r3, [r7, #12]
  while (is_digit_(**str)) {
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f7ff ffcb 	bl	8002c8a <is_digit_>
 8002cf4:	1e03      	subs	r3, r0, #0
 8002cf6:	d1e8      	bne.n	8002cca <atou_+0xe>
  }
  return i;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
}
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	b004      	add	sp, #16
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <out_rev_>:


// output the specified string in reverse, taking care of any zero-padding
static void out_rev_(output_gadget_t* output, const char* buf, printf_size_t len, printf_size_t width, printf_flags_t flags)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b086      	sub	sp, #24
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	60f8      	str	r0, [r7, #12]
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	607a      	str	r2, [r7, #4]
 8002d0e:	603b      	str	r3, [r7, #0]
  const printf_size_t start_pos = output->pos;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	2202      	movs	r2, #2
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d11f      	bne.n	8002d5e <out_rev_+0x5c>
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	2201      	movs	r2, #1
 8002d22:	4013      	ands	r3, r2
 8002d24:	d11b      	bne.n	8002d5e <out_rev_+0x5c>
    for (printf_size_t i = len; i < width; i++) {
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	617b      	str	r3, [r7, #20]
 8002d2a:	e007      	b.n	8002d3c <out_rev_+0x3a>
      putchar_via_gadget(output, ' ');
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2120      	movs	r1, #32
 8002d30:	0018      	movs	r0, r3
 8002d32:	f7ff feb1 	bl	8002a98 <putchar_via_gadget>
    for (printf_size_t i = len; i < width; i++) {
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d3f3      	bcc.n	8002d2c <out_rev_+0x2a>
    }
  }

  // reverse string
  while (len) {
 8002d44:	e00b      	b.n	8002d5e <out_rev_+0x5c>
    putchar_via_gadget(output, buf[--len]);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	607b      	str	r3, [r7, #4]
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	18d3      	adds	r3, r2, r3
 8002d52:	781a      	ldrb	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	0011      	movs	r1, r2
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f7ff fe9d 	bl	8002a98 <putchar_via_gadget>
  while (len) {
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1f0      	bne.n	8002d46 <out_rev_+0x44>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	2202      	movs	r2, #2
 8002d68:	4013      	ands	r3, r2
 8002d6a:	d00c      	beq.n	8002d86 <out_rev_+0x84>
    while (output->pos - start_pos < width) {
 8002d6c:	e004      	b.n	8002d78 <out_rev_+0x76>
      putchar_via_gadget(output, ' ');
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2120      	movs	r1, #32
 8002d72:	0018      	movs	r0, r3
 8002d74:	f7ff fe90 	bl	8002a98 <putchar_via_gadget>
    while (output->pos - start_pos < width) {
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d8f3      	bhi.n	8002d6e <out_rev_+0x6c>
    }
  }
}
 8002d86:	46c0      	nop			@ (mov r8, r8)
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	b006      	add	sp, #24
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <print_integer_finalization>:


// Invoked by print_integer after the actual number has been printed, performing necessary
// work on the number's prefix (as the number is initially printed in reverse order)
static void print_integer_finalization(output_gadget_t* output, char* buf, printf_size_t len, bool negative, numeric_base_t base, printf_size_t precision, printf_size_t width, printf_flags_t flags)
{
 8002d90:	b590      	push	{r4, r7, lr}
 8002d92:	b089      	sub	sp, #36	@ 0x24
 8002d94:	af02      	add	r7, sp, #8
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	001a      	movs	r2, r3
 8002d9e:	1cfb      	adds	r3, r7, #3
 8002da0:	701a      	strb	r2, [r3, #0]
  printf_size_t unpadded_len = len;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	617b      	str	r3, [r7, #20]

  // pad with leading zeros
  {
    if (!(flags & FLAGS_LEFT)) {
 8002da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002da8:	2202      	movs	r2, #2
 8002daa:	4013      	ands	r3, r2
 8002dac:	d12c      	bne.n	8002e08 <print_integer_finalization+0x78>
      if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d016      	beq.n	8002de2 <print_integer_finalization+0x52>
 8002db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002db6:	2201      	movs	r2, #1
 8002db8:	4013      	ands	r3, r2
 8002dba:	d012      	beq.n	8002de2 <print_integer_finalization+0x52>
 8002dbc:	1cfb      	adds	r3, r7, #3
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d103      	bne.n	8002dcc <print_integer_finalization+0x3c>
 8002dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dc6:	220c      	movs	r2, #12
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d00a      	beq.n	8002de2 <print_integer_finalization+0x52>
        width--;
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002dd2:	e006      	b.n	8002de2 <print_integer_finalization+0x52>
        buf[len++] = '0';
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	1c5a      	adds	r2, r3, #1
 8002dd8:	607a      	str	r2, [r7, #4]
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	18d3      	adds	r3, r2, r3
 8002dde:	2230      	movs	r2, #48	@ 0x30
 8002de0:	701a      	strb	r2, [r3, #0]
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002de4:	2201      	movs	r2, #1
 8002de6:	4013      	ands	r3, r2
 8002de8:	d00e      	beq.n	8002e08 <print_integer_finalization+0x78>
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d20a      	bcs.n	8002e08 <print_integer_finalization+0x78>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b1f      	cmp	r3, #31
 8002df6:	d9ed      	bls.n	8002dd4 <print_integer_finalization+0x44>
      }
    }

    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002df8:	e006      	b.n	8002e08 <print_integer_finalization+0x78>
      buf[len++] = '0';
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	18d3      	adds	r3, r2, r3
 8002e04:	2230      	movs	r2, #48	@ 0x30
 8002e06:	701a      	strb	r2, [r3, #0]
    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d202      	bcs.n	8002e16 <print_integer_finalization+0x86>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b1f      	cmp	r3, #31
 8002e14:	d9f1      	bls.n	8002dfa <print_integer_finalization+0x6a>
    }

    if (base == BASE_OCTAL && (len > unpadded_len)) {
 8002e16:	2328      	movs	r3, #40	@ 0x28
 8002e18:	18fb      	adds	r3, r7, r3
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d107      	bne.n	8002e30 <print_integer_finalization+0xa0>
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d903      	bls.n	8002e30 <print_integer_finalization+0xa0>
      // Since we've written some zeros, we've satisfied the alternative format leading space requirement
      flags &= ~FLAGS_HASH;
 8002e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e2a:	2210      	movs	r2, #16
 8002e2c:	4393      	bics	r3, r2
 8002e2e:	637b      	str	r3, [r7, #52]	@ 0x34
    }
  }

  // handle hash
  if (flags & (FLAGS_HASH | FLAGS_POINTER)) {
 8002e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e32:	4a51      	ldr	r2, [pc, #324]	@ (8002f78 <print_integer_finalization+0x1e8>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	d100      	bne.n	8002e3a <print_integer_finalization+0xaa>
 8002e38:	e06a      	b.n	8002f10 <print_integer_finalization+0x180>
    if (!(flags & FLAGS_PRECISION) && len && ((len == precision) || (len == width))) {
 8002e3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e3c:	2380      	movs	r3, #128	@ 0x80
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	4013      	ands	r3, r2
 8002e42:	d124      	bne.n	8002e8e <print_integer_finalization+0xfe>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d021      	beq.n	8002e8e <print_integer_finalization+0xfe>
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d003      	beq.n	8002e5a <print_integer_finalization+0xca>
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d119      	bne.n	8002e8e <print_integer_finalization+0xfe>
      // Let's take back some padding digits to fit in what will eventually
      // be the format-specific prefix
      if (unpadded_len < len) {
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d202      	bcs.n	8002e68 <print_integer_finalization+0xd8>
        len--; // This should suffice for BASE_OCTAL
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3b01      	subs	r3, #1
 8002e66:	607b      	str	r3, [r7, #4]
      }
      if (len && (base == BASE_HEX || base == BASE_BINARY) && (unpadded_len < len)) {
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00f      	beq.n	8002e8e <print_integer_finalization+0xfe>
 8002e6e:	2228      	movs	r2, #40	@ 0x28
 8002e70:	18bb      	adds	r3, r7, r2
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b10      	cmp	r3, #16
 8002e76:	d003      	beq.n	8002e80 <print_integer_finalization+0xf0>
 8002e78:	18bb      	adds	r3, r7, r2
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d106      	bne.n	8002e8e <print_integer_finalization+0xfe>
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d202      	bcs.n	8002e8e <print_integer_finalization+0xfe>
        len--; // ... and an extra one for 0x or 0b
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	607b      	str	r3, [r7, #4]
      }
    }
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002e8e:	2328      	movs	r3, #40	@ 0x28
 8002e90:	18fb      	adds	r3, r7, r3
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b10      	cmp	r3, #16
 8002e96:	d10e      	bne.n	8002eb6 <print_integer_finalization+0x126>
 8002e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d10a      	bne.n	8002eb6 <print_integer_finalization+0x126>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b1f      	cmp	r3, #31
 8002ea4:	d807      	bhi.n	8002eb6 <print_integer_finalization+0x126>
      buf[len++] = 'x';
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	18d3      	adds	r3, r2, r3
 8002eb0:	2278      	movs	r2, #120	@ 0x78
 8002eb2:	701a      	strb	r2, [r3, #0]
 8002eb4:	e022      	b.n	8002efc <print_integer_finalization+0x16c>
    }
    else if ((base == BASE_HEX) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002eb6:	2328      	movs	r3, #40	@ 0x28
 8002eb8:	18fb      	adds	r3, r7, r3
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b10      	cmp	r3, #16
 8002ebe:	d10e      	bne.n	8002ede <print_integer_finalization+0x14e>
 8002ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d00a      	beq.n	8002ede <print_integer_finalization+0x14e>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b1f      	cmp	r3, #31
 8002ecc:	d807      	bhi.n	8002ede <print_integer_finalization+0x14e>
      buf[len++] = 'X';
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	607a      	str	r2, [r7, #4]
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	18d3      	adds	r3, r2, r3
 8002ed8:	2258      	movs	r2, #88	@ 0x58
 8002eda:	701a      	strb	r2, [r3, #0]
 8002edc:	e00e      	b.n	8002efc <print_integer_finalization+0x16c>
    }
    else if ((base == BASE_BINARY) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002ede:	2328      	movs	r3, #40	@ 0x28
 8002ee0:	18fb      	adds	r3, r7, r3
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d109      	bne.n	8002efc <print_integer_finalization+0x16c>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b1f      	cmp	r3, #31
 8002eec:	d806      	bhi.n	8002efc <print_integer_finalization+0x16c>
      buf[len++] = 'b';
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	1c5a      	adds	r2, r3, #1
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	18d3      	adds	r3, r2, r3
 8002ef8:	2262      	movs	r2, #98	@ 0x62
 8002efa:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_INTEGER_BUFFER_SIZE) {
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b1f      	cmp	r3, #31
 8002f00:	d806      	bhi.n	8002f10 <print_integer_finalization+0x180>
      buf[len++] = '0';
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	607a      	str	r2, [r7, #4]
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	18d3      	adds	r3, r2, r3
 8002f0c:	2230      	movs	r2, #48	@ 0x30
 8002f0e:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_INTEGER_BUFFER_SIZE) {
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b1f      	cmp	r3, #31
 8002f14:	d822      	bhi.n	8002f5c <print_integer_finalization+0x1cc>
    if (negative) {
 8002f16:	1cfb      	adds	r3, r7, #3
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d007      	beq.n	8002f2e <print_integer_finalization+0x19e>
      buf[len++] = '-';
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	18d3      	adds	r3, r2, r3
 8002f28:	222d      	movs	r2, #45	@ 0x2d
 8002f2a:	701a      	strb	r2, [r3, #0]
 8002f2c:	e016      	b.n	8002f5c <print_integer_finalization+0x1cc>
    }
    else if (flags & FLAGS_PLUS) {
 8002f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f30:	2204      	movs	r2, #4
 8002f32:	4013      	ands	r3, r2
 8002f34:	d007      	beq.n	8002f46 <print_integer_finalization+0x1b6>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	607a      	str	r2, [r7, #4]
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	18d3      	adds	r3, r2, r3
 8002f40:	222b      	movs	r2, #43	@ 0x2b
 8002f42:	701a      	strb	r2, [r3, #0]
 8002f44:	e00a      	b.n	8002f5c <print_integer_finalization+0x1cc>
    }
    else if (flags & FLAGS_SPACE) {
 8002f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f48:	2208      	movs	r2, #8
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	d006      	beq.n	8002f5c <print_integer_finalization+0x1cc>
      buf[len++] = ' ';
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	607a      	str	r2, [r7, #4]
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	18d3      	adds	r3, r2, r3
 8002f58:	2220      	movs	r2, #32
 8002f5a:	701a      	strb	r2, [r3, #0]
    }
  }

  out_rev_(output, buf, len, width, flags);
 8002f5c:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	68b9      	ldr	r1, [r7, #8]
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	0023      	movs	r3, r4
 8002f6a:	f7ff feca 	bl	8002d02 <out_rev_>
}
 8002f6e:	46c0      	nop			@ (mov r8, r8)
 8002f70:	46bd      	mov	sp, r7
 8002f72:	b007      	add	sp, #28
 8002f74:	bd90      	pop	{r4, r7, pc}
 8002f76:	46c0      	nop			@ (mov r8, r8)
 8002f78:	00002010 	.word	0x00002010

08002f7c <print_integer>:

// An internal itoa-like function
static void print_integer(output_gadget_t* output, printf_unsigned_value_t value, bool negative, numeric_base_t base, printf_size_t precision, printf_size_t width, printf_flags_t flags)
{
 8002f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f7e:	b095      	sub	sp, #84	@ 0x54
 8002f80:	af04      	add	r7, sp, #16
 8002f82:	6178      	str	r0, [r7, #20]
 8002f84:	60ba      	str	r2, [r7, #8]
 8002f86:	60fb      	str	r3, [r7, #12]
  char buf[PRINTF_INTEGER_BUFFER_SIZE];
  printf_size_t len = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!value) {
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	d121      	bne.n	8002fd8 <print_integer+0x5c>
    if ( !(flags & FLAGS_PRECISION) ) {
 8002f94:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002f96:	2380      	movs	r3, #128	@ 0x80
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	d10d      	bne.n	8002fba <print_integer+0x3e>
      buf[len++] = '0';
 8002f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002fa4:	2210      	movs	r2, #16
 8002fa6:	2108      	movs	r1, #8
 8002fa8:	1852      	adds	r2, r2, r1
 8002faa:	19d2      	adds	r2, r2, r7
 8002fac:	2130      	movs	r1, #48	@ 0x30
 8002fae:	54d1      	strb	r1, [r2, r3]
      flags &= ~FLAGS_HASH;
 8002fb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fb2:	2210      	movs	r2, #16
 8002fb4:	4393      	bics	r3, r2
 8002fb6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002fb8:	e06b      	b.n	8003092 <print_integer+0x116>
      // We drop this flag this since either the alternative and regular modes of the specifier
      // don't differ on 0 values, or (in the case of octal) we've already provided the special
      // handling for this mode.
    }
    else if (base == BASE_HEX) {
 8002fba:	234c      	movs	r3, #76	@ 0x4c
 8002fbc:	2208      	movs	r2, #8
 8002fbe:	189b      	adds	r3, r3, r2
 8002fc0:	2208      	movs	r2, #8
 8002fc2:	4694      	mov	ip, r2
 8002fc4:	44bc      	add	ip, r7
 8002fc6:	4463      	add	r3, ip
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b10      	cmp	r3, #16
 8002fcc:	d161      	bne.n	8003092 <print_integer+0x116>
      flags &= ~FLAGS_HASH;
 8002fce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fd0:	2210      	movs	r2, #16
 8002fd2:	4393      	bics	r3, r2
 8002fd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002fd6:	e05c      	b.n	8003092 <print_integer+0x116>
      // don't differ on 0 values
    }
  }
  else {
    do {
      const char digit = (char)(value % base);
 8002fd8:	234c      	movs	r3, #76	@ 0x4c
 8002fda:	2208      	movs	r2, #8
 8002fdc:	189b      	adds	r3, r3, r2
 8002fde:	2208      	movs	r2, #8
 8002fe0:	4694      	mov	ip, r2
 8002fe2:	44bc      	add	ip, r7
 8002fe4:	4463      	add	r3, ip
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	001c      	movs	r4, r3
 8002fec:	2300      	movs	r3, #0
 8002fee:	001d      	movs	r5, r3
 8002ff0:	68b8      	ldr	r0, [r7, #8]
 8002ff2:	68f9      	ldr	r1, [r7, #12]
 8002ff4:	0022      	movs	r2, r4
 8002ff6:	002b      	movs	r3, r5
 8002ff8:	f7fd f974 	bl	80002e4 <__aeabi_uldivmod>
 8002ffc:	0010      	movs	r0, r2
 8002ffe:	0019      	movs	r1, r3
 8003000:	2633      	movs	r6, #51	@ 0x33
 8003002:	2308      	movs	r3, #8
 8003004:	18f3      	adds	r3, r6, r3
 8003006:	19db      	adds	r3, r3, r7
 8003008:	1c02      	adds	r2, r0, #0
 800300a:	701a      	strb	r2, [r3, #0]
      buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
 800300c:	0032      	movs	r2, r6
 800300e:	2308      	movs	r3, #8
 8003010:	18d3      	adds	r3, r2, r3
 8003012:	19db      	adds	r3, r3, r7
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b09      	cmp	r3, #9
 8003018:	d806      	bhi.n	8003028 <print_integer+0xac>
 800301a:	2308      	movs	r3, #8
 800301c:	18d3      	adds	r3, r2, r3
 800301e:	19db      	adds	r3, r3, r7
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	3330      	adds	r3, #48	@ 0x30
 8003024:	b2da      	uxtb	r2, r3
 8003026:	e00f      	b.n	8003048 <print_integer+0xcc>
 8003028:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800302a:	2220      	movs	r2, #32
 800302c:	4013      	ands	r3, r2
 800302e:	d001      	beq.n	8003034 <print_integer+0xb8>
 8003030:	2341      	movs	r3, #65	@ 0x41
 8003032:	e000      	b.n	8003036 <print_integer+0xba>
 8003034:	2361      	movs	r3, #97	@ 0x61
 8003036:	2233      	movs	r2, #51	@ 0x33
 8003038:	2108      	movs	r1, #8
 800303a:	1852      	adds	r2, r2, r1
 800303c:	19d2      	adds	r2, r2, r7
 800303e:	7812      	ldrb	r2, [r2, #0]
 8003040:	189b      	adds	r3, r3, r2
 8003042:	b2db      	uxtb	r3, r3
 8003044:	3b0a      	subs	r3, #10
 8003046:	b2da      	uxtb	r2, r3
 8003048:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800304a:	1c59      	adds	r1, r3, #1
 800304c:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800304e:	2110      	movs	r1, #16
 8003050:	2008      	movs	r0, #8
 8003052:	1809      	adds	r1, r1, r0
 8003054:	19c9      	adds	r1, r1, r7
 8003056:	54ca      	strb	r2, [r1, r3]
      value /= base;
 8003058:	234c      	movs	r3, #76	@ 0x4c
 800305a:	2208      	movs	r2, #8
 800305c:	189b      	adds	r3, r3, r2
 800305e:	2208      	movs	r2, #8
 8003060:	4694      	mov	ip, r2
 8003062:	44bc      	add	ip, r7
 8003064:	4463      	add	r3, ip
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	2300      	movs	r3, #0
 800306e:	607b      	str	r3, [r7, #4]
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68b8      	ldr	r0, [r7, #8]
 8003076:	68f9      	ldr	r1, [r7, #12]
 8003078:	f7fd f934 	bl	80002e4 <__aeabi_uldivmod>
 800307c:	0002      	movs	r2, r0
 800307e:	000b      	movs	r3, r1
 8003080:	60ba      	str	r2, [r7, #8]
 8003082:	60fb      	str	r3, [r7, #12]
    } while (value && (len < PRINTF_INTEGER_BUFFER_SIZE));
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	4313      	orrs	r3, r2
 800308a:	d002      	beq.n	8003092 <print_integer+0x116>
 800308c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800308e:	2b1f      	cmp	r3, #31
 8003090:	d9a2      	bls.n	8002fd8 <print_integer+0x5c>
  }

  print_integer_finalization(output, buf, len, negative, base, precision, width, flags);
 8003092:	2348      	movs	r3, #72	@ 0x48
 8003094:	2508      	movs	r5, #8
 8003096:	195b      	adds	r3, r3, r5
 8003098:	2208      	movs	r2, #8
 800309a:	4694      	mov	ip, r2
 800309c:	44bc      	add	ip, r7
 800309e:	4463      	add	r3, ip
 80030a0:	781c      	ldrb	r4, [r3, #0]
 80030a2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80030a4:	2310      	movs	r3, #16
 80030a6:	2108      	movs	r1, #8
 80030a8:	185b      	adds	r3, r3, r1
 80030aa:	19d9      	adds	r1, r3, r7
 80030ac:	6978      	ldr	r0, [r7, #20]
 80030ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030b0:	9303      	str	r3, [sp, #12]
 80030b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030b4:	9302      	str	r3, [sp, #8]
 80030b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030b8:	9301      	str	r3, [sp, #4]
 80030ba:	234c      	movs	r3, #76	@ 0x4c
 80030bc:	195b      	adds	r3, r3, r5
 80030be:	2508      	movs	r5, #8
 80030c0:	46ac      	mov	ip, r5
 80030c2:	44bc      	add	ip, r7
 80030c4:	4463      	add	r3, ip
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	0023      	movs	r3, r4
 80030cc:	f7ff fe60 	bl	8002d90 <print_integer_finalization>
}
 80030d0:	46c0      	nop			@ (mov r8, r8)
 80030d2:	46bd      	mov	sp, r7
 80030d4:	b011      	add	sp, #68	@ 0x44
 80030d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030d8 <get_components>:

// Break up a double number - which is known to be a finite non-negative number -
// into its base-10 parts: integral - before the decimal point, and fractional - after it.
// Taken the precision into account, but does not change it even internally.
static struct double_components get_components(double number, printf_size_t precision)
{
 80030d8:	b5b0      	push	{r4, r5, r7, lr}
 80030da:	b092      	sub	sp, #72	@ 0x48
 80030dc:	af00      	add	r7, sp, #0
 80030de:	61f8      	str	r0, [r7, #28]
 80030e0:	613a      	str	r2, [r7, #16]
 80030e2:	617b      	str	r3, [r7, #20]
  struct double_components number_;
  number_.is_negative = get_sign_bit(number);
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	0010      	movs	r0, r2
 80030ea:	0019      	movs	r1, r3
 80030ec:	f7ff fca7 	bl	8002a3e <get_sign_bit>
 80030f0:	0003      	movs	r3, r0
 80030f2:	1e5a      	subs	r2, r3, #1
 80030f4:	4193      	sbcs	r3, r2
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	2110      	movs	r1, #16
 80030fa:	2010      	movs	r0, #16
 80030fc:	180b      	adds	r3, r1, r0
 80030fe:	19db      	adds	r3, r3, r7
 8003100:	741a      	strb	r2, [r3, #16]
  double abs_number = (number_.is_negative) ? -number : number;
 8003102:	180b      	adds	r3, r1, r0
 8003104:	19db      	adds	r3, r3, r7
 8003106:	7c1b      	ldrb	r3, [r3, #16]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d007      	beq.n	800311c <get_components+0x44>
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	001c      	movs	r4, r3
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	2280      	movs	r2, #128	@ 0x80
 8003114:	0612      	lsls	r2, r2, #24
 8003116:	405a      	eors	r2, r3
 8003118:	0015      	movs	r5, r2
 800311a:	e001      	b.n	8003120 <get_components+0x48>
 800311c:	693c      	ldr	r4, [r7, #16]
 800311e:	697d      	ldr	r5, [r7, #20]
 8003120:	643c      	str	r4, [r7, #64]	@ 0x40
 8003122:	647d      	str	r5, [r7, #68]	@ 0x44
  number_.integral = (int_fast64_t)abs_number;
 8003124:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8003126:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003128:	f7fd f92a 	bl	8000380 <__aeabi_d2lz>
 800312c:	0002      	movs	r2, r0
 800312e:	000b      	movs	r3, r1
 8003130:	2410      	movs	r4, #16
 8003132:	2510      	movs	r5, #16
 8003134:	1961      	adds	r1, r4, r5
 8003136:	19c9      	adds	r1, r1, r7
 8003138:	600a      	str	r2, [r1, #0]
 800313a:	604b      	str	r3, [r1, #4]
  double remainder = (abs_number - (double) number_.integral) * powers_of_10[precision];
 800313c:	1963      	adds	r3, r4, r5
 800313e:	19db      	adds	r3, r3, r7
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	0010      	movs	r0, r2
 8003146:	0019      	movs	r1, r3
 8003148:	f7fd f954 	bl	80003f4 <__aeabi_l2d>
 800314c:	0002      	movs	r2, r0
 800314e:	000b      	movs	r3, r1
 8003150:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8003152:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003154:	f7fe fcbe 	bl	8001ad4 <__aeabi_dsub>
 8003158:	0002      	movs	r2, r0
 800315a:	000b      	movs	r3, r1
 800315c:	0010      	movs	r0, r2
 800315e:	0019      	movs	r1, r3
 8003160:	4a76      	ldr	r2, [pc, #472]	@ (800333c <get_components+0x264>)
 8003162:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	18d3      	adds	r3, r2, r3
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f7fe f9ea 	bl	8001544 <__aeabi_dmul>
 8003170:	0002      	movs	r2, r0
 8003172:	000b      	movs	r3, r1
 8003174:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003176:	63fb      	str	r3, [r7, #60]	@ 0x3c
  number_.fractional = (int_fast64_t)remainder;
 8003178:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800317a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800317c:	f7fd f900 	bl	8000380 <__aeabi_d2lz>
 8003180:	0002      	movs	r2, r0
 8003182:	000b      	movs	r3, r1
 8003184:	1961      	adds	r1, r4, r5
 8003186:	19c9      	adds	r1, r1, r7
 8003188:	608a      	str	r2, [r1, #8]
 800318a:	60cb      	str	r3, [r1, #12]

  remainder -= (double) number_.fractional;
 800318c:	1963      	adds	r3, r4, r5
 800318e:	19db      	adds	r3, r3, r7
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	0010      	movs	r0, r2
 8003196:	0019      	movs	r1, r3
 8003198:	f7fd f92c 	bl	80003f4 <__aeabi_l2d>
 800319c:	0002      	movs	r2, r0
 800319e:	000b      	movs	r3, r1
 80031a0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80031a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031a4:	f7fe fc96 	bl	8001ad4 <__aeabi_dsub>
 80031a8:	0002      	movs	r2, r0
 80031aa:	000b      	movs	r3, r1
 80031ac:	63ba      	str	r2, [r7, #56]	@ 0x38
 80031ae:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (remainder > 0.5) {
 80031b0:	2200      	movs	r2, #0
 80031b2:	4b63      	ldr	r3, [pc, #396]	@ (8003340 <get_components+0x268>)
 80031b4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80031b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031b8:	f7fd f85c 	bl	8000274 <__aeabi_dcmpgt>
 80031bc:	1e03      	subs	r3, r0, #0
 80031be:	d030      	beq.n	8003222 <get_components+0x14a>
    ++number_.fractional;
 80031c0:	1963      	adds	r3, r4, r5
 80031c2:	19db      	adds	r3, r3, r7
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	2001      	movs	r0, #1
 80031ca:	2100      	movs	r1, #0
 80031cc:	1812      	adds	r2, r2, r0
 80031ce:	414b      	adcs	r3, r1
 80031d0:	1961      	adds	r1, r4, r5
 80031d2:	19c9      	adds	r1, r1, r7
 80031d4:	608a      	str	r2, [r1, #8]
 80031d6:	60cb      	str	r3, [r1, #12]
    // handle rollover, e.g. case 0.99 with precision 1 is 1.0
    if ((double) number_.fractional >= powers_of_10[precision]) {
 80031d8:	1963      	adds	r3, r4, r5
 80031da:	19db      	adds	r3, r3, r7
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	0010      	movs	r0, r2
 80031e2:	0019      	movs	r1, r3
 80031e4:	f7fd f906 	bl	80003f4 <__aeabi_l2d>
 80031e8:	4a54      	ldr	r2, [pc, #336]	@ (800333c <get_components+0x264>)
 80031ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	18d3      	adds	r3, r2, r3
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f7fd f848 	bl	8000288 <__aeabi_dcmpge>
 80031f8:	1e03      	subs	r3, r0, #0
 80031fa:	d040      	beq.n	800327e <get_components+0x1a6>
      number_.fractional = 0;
 80031fc:	1963      	adds	r3, r4, r5
 80031fe:	19d9      	adds	r1, r3, r7
 8003200:	2200      	movs	r2, #0
 8003202:	2300      	movs	r3, #0
 8003204:	608a      	str	r2, [r1, #8]
 8003206:	60cb      	str	r3, [r1, #12]
      ++number_.integral;
 8003208:	1963      	adds	r3, r4, r5
 800320a:	19db      	adds	r3, r3, r7
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2001      	movs	r0, #1
 8003212:	2100      	movs	r1, #0
 8003214:	1812      	adds	r2, r2, r0
 8003216:	414b      	adcs	r3, r1
 8003218:	1961      	adds	r1, r4, r5
 800321a:	19c9      	adds	r1, r1, r7
 800321c:	600a      	str	r2, [r1, #0]
 800321e:	604b      	str	r3, [r1, #4]
 8003220:	e02d      	b.n	800327e <get_components+0x1a6>
    }
  }
  else if ((remainder == 0.5) && ((number_.fractional == 0U) || (number_.fractional & 1U))) {
 8003222:	2200      	movs	r2, #0
 8003224:	4b46      	ldr	r3, [pc, #280]	@ (8003340 <get_components+0x268>)
 8003226:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003228:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800322a:	f7fd f809 	bl	8000240 <__aeabi_dcmpeq>
 800322e:	1e03      	subs	r3, r0, #0
 8003230:	d025      	beq.n	800327e <get_components+0x1a6>
 8003232:	2010      	movs	r0, #16
 8003234:	2410      	movs	r4, #16
 8003236:	1903      	adds	r3, r0, r4
 8003238:	19db      	adds	r3, r3, r7
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	0011      	movs	r1, r2
 8003240:	4319      	orrs	r1, r3
 8003242:	d00e      	beq.n	8003262 <get_components+0x18a>
 8003244:	1903      	adds	r3, r0, r4
 8003246:	19db      	adds	r3, r3, r7
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	2101      	movs	r1, #1
 800324e:	4011      	ands	r1, r2
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	2100      	movs	r1, #0
 8003254:	400b      	ands	r3, r1
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	000b      	movs	r3, r1
 800325e:	4313      	orrs	r3, r2
 8003260:	d00d      	beq.n	800327e <get_components+0x1a6>
    // if halfway, round up if odd OR if last digit is 0
    ++number_.fractional;
 8003262:	2410      	movs	r4, #16
 8003264:	2510      	movs	r5, #16
 8003266:	1963      	adds	r3, r4, r5
 8003268:	19db      	adds	r3, r3, r7
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	2001      	movs	r0, #1
 8003270:	2100      	movs	r1, #0
 8003272:	1812      	adds	r2, r2, r0
 8003274:	414b      	adcs	r3, r1
 8003276:	1961      	adds	r1, r4, r5
 8003278:	19c9      	adds	r1, r1, r7
 800327a:	608a      	str	r2, [r1, #8]
 800327c:	60cb      	str	r3, [r1, #12]
  }

  if (precision == 0U) {
 800327e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003280:	2b00      	cmp	r3, #0
 8003282:	d14b      	bne.n	800331c <get_components+0x244>
    remainder = abs_number - (double) number_.integral;
 8003284:	2310      	movs	r3, #16
 8003286:	2210      	movs	r2, #16
 8003288:	189b      	adds	r3, r3, r2
 800328a:	19db      	adds	r3, r3, r7
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	0010      	movs	r0, r2
 8003292:	0019      	movs	r1, r3
 8003294:	f7fd f8ae 	bl	80003f4 <__aeabi_l2d>
 8003298:	0002      	movs	r2, r0
 800329a:	000b      	movs	r3, r1
 800329c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800329e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80032a0:	f7fe fc18 	bl	8001ad4 <__aeabi_dsub>
 80032a4:	0002      	movs	r2, r0
 80032a6:	000b      	movs	r3, r1
 80032a8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80032aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if ((!(remainder < 0.5) || (remainder > 0.5)) && (number_.integral & 1)) {
 80032ac:	2301      	movs	r3, #1
 80032ae:	1c1c      	adds	r4, r3, #0
 80032b0:	2200      	movs	r2, #0
 80032b2:	4b23      	ldr	r3, [pc, #140]	@ (8003340 <get_components+0x268>)
 80032b4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80032b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80032b8:	f7fc ffc8 	bl	800024c <__aeabi_dcmplt>
 80032bc:	1e03      	subs	r3, r0, #0
 80032be:	d101      	bne.n	80032c4 <get_components+0x1ec>
 80032c0:	2300      	movs	r3, #0
 80032c2:	1c1c      	adds	r4, r3, #0
 80032c4:	b2e3      	uxtb	r3, r4
 80032c6:	2201      	movs	r2, #1
 80032c8:	4053      	eors	r3, r2
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d107      	bne.n	80032e0 <get_components+0x208>
 80032d0:	2200      	movs	r2, #0
 80032d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003340 <get_components+0x268>)
 80032d4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80032d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80032d8:	f7fc ffcc 	bl	8000274 <__aeabi_dcmpgt>
 80032dc:	1e03      	subs	r3, r0, #0
 80032de:	d01d      	beq.n	800331c <get_components+0x244>
 80032e0:	2010      	movs	r0, #16
 80032e2:	2510      	movs	r5, #16
 80032e4:	1943      	adds	r3, r0, r5
 80032e6:	19db      	adds	r3, r3, r7
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2101      	movs	r1, #1
 80032ee:	4011      	ands	r1, r2
 80032f0:	6039      	str	r1, [r7, #0]
 80032f2:	2100      	movs	r1, #0
 80032f4:	400b      	ands	r3, r1
 80032f6:	607b      	str	r3, [r7, #4]
 80032f8:	6839      	ldr	r1, [r7, #0]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	000b      	movs	r3, r1
 80032fe:	4313      	orrs	r3, r2
 8003300:	d00c      	beq.n	800331c <get_components+0x244>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++number_.integral;
 8003302:	0004      	movs	r4, r0
 8003304:	1943      	adds	r3, r0, r5
 8003306:	19db      	adds	r3, r3, r7
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2001      	movs	r0, #1
 800330e:	2100      	movs	r1, #0
 8003310:	1812      	adds	r2, r2, r0
 8003312:	414b      	adcs	r3, r1
 8003314:	1961      	adds	r1, r4, r5
 8003316:	19c9      	adds	r1, r1, r7
 8003318:	600a      	str	r2, [r1, #0]
 800331a:	604b      	str	r3, [r1, #4]
    }
  }
  return number_;
 800331c:	69fa      	ldr	r2, [r7, #28]
 800331e:	2310      	movs	r3, #16
 8003320:	2110      	movs	r1, #16
 8003322:	185b      	adds	r3, r3, r1
 8003324:	19db      	adds	r3, r3, r7
 8003326:	0010      	movs	r0, r2
 8003328:	0019      	movs	r1, r3
 800332a:	2318      	movs	r3, #24
 800332c:	001a      	movs	r2, r3
 800332e:	f005 f82b 	bl	8008388 <memcpy>
}
 8003332:	69f8      	ldr	r0, [r7, #28]
 8003334:	46bd      	mov	sp, r7
 8003336:	b012      	add	sp, #72	@ 0x48
 8003338:	bdb0      	pop	{r4, r5, r7, pc}
 800333a:	46c0      	nop			@ (mov r8, r8)
 800333c:	08008448 	.word	0x08008448
 8003340:	3fe00000 	.word	0x3fe00000

08003344 <apply_scaling>:
  double raw_factor;
  bool multiply; // if true, need to multiply by raw_factor; otherwise need to divide by it
};

static double apply_scaling(double num, struct scaling_factor normalization)
{
 8003344:	b082      	sub	sp, #8
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	6038      	str	r0, [r7, #0]
 800334e:	6079      	str	r1, [r7, #4]
 8003350:	2010      	movs	r0, #16
 8003352:	1839      	adds	r1, r7, r0
 8003354:	600a      	str	r2, [r1, #0]
 8003356:	604b      	str	r3, [r1, #4]
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 8003358:	0002      	movs	r2, r0
 800335a:	18bb      	adds	r3, r7, r2
 800335c:	7a1b      	ldrb	r3, [r3, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d009      	beq.n	8003376 <apply_scaling+0x32>
 8003362:	18bb      	adds	r3, r7, r2
 8003364:	6818      	ldr	r0, [r3, #0]
 8003366:	6859      	ldr	r1, [r3, #4]
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f7fe f8ea 	bl	8001544 <__aeabi_dmul>
 8003370:	0002      	movs	r2, r0
 8003372:	000b      	movs	r3, r1
 8003374:	e009      	b.n	800338a <apply_scaling+0x46>
 8003376:	2310      	movs	r3, #16
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	6838      	ldr	r0, [r7, #0]
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	f7fd fc9b 	bl	8000cbc <__aeabi_ddiv>
 8003386:	0002      	movs	r2, r0
 8003388:	000b      	movs	r3, r1
}
 800338a:	0010      	movs	r0, r2
 800338c:	0019      	movs	r1, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	b002      	add	sp, #8
 8003392:	bc80      	pop	{r7}
 8003394:	bc08      	pop	{r3}
 8003396:	b002      	add	sp, #8
 8003398:	4718      	bx	r3

0800339a <unapply_scaling>:

static double unapply_scaling(double normalized, struct scaling_factor normalization)
{
 800339a:	b082      	sub	sp, #8
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6038      	str	r0, [r7, #0]
 80033a4:	6079      	str	r1, [r7, #4]
 80033a6:	2010      	movs	r0, #16
 80033a8:	1839      	adds	r1, r7, r0
 80033aa:	600a      	str	r2, [r1, #0]
 80033ac:	604b      	str	r3, [r1, #4]
#ifdef __GNUC__
// accounting for a static analysis bug in GCC 6.x and earlier
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
#endif
  return normalization.multiply ? normalized / normalization.raw_factor : normalized * normalization.raw_factor;
 80033ae:	0002      	movs	r2, r0
 80033b0:	18bb      	adds	r3, r7, r2
 80033b2:	7a1b      	ldrb	r3, [r3, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d009      	beq.n	80033cc <unapply_scaling+0x32>
 80033b8:	18bb      	adds	r3, r7, r2
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	6838      	ldr	r0, [r7, #0]
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	f7fd fc7b 	bl	8000cbc <__aeabi_ddiv>
 80033c6:	0002      	movs	r2, r0
 80033c8:	000b      	movs	r3, r1
 80033ca:	e009      	b.n	80033e0 <unapply_scaling+0x46>
 80033cc:	2310      	movs	r3, #16
 80033ce:	18fb      	adds	r3, r7, r3
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	6859      	ldr	r1, [r3, #4]
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f7fe f8b4 	bl	8001544 <__aeabi_dmul>
 80033dc:	0002      	movs	r2, r0
 80033de:	000b      	movs	r3, r1
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif
}
 80033e0:	0010      	movs	r0, r2
 80033e2:	0019      	movs	r1, r3
 80033e4:	46bd      	mov	sp, r7
 80033e6:	b002      	add	sp, #8
 80033e8:	bc80      	pop	{r7}
 80033ea:	bc08      	pop	{r3}
 80033ec:	b002      	add	sp, #8
 80033ee:	4718      	bx	r3

080033f0 <update_normalization>:

static struct scaling_factor update_normalization(struct scaling_factor sf, double extra_multiplicative_factor)
{
 80033f0:	b082      	sub	sp, #8
 80033f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f4:	b08d      	sub	sp, #52	@ 0x34
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	2038      	movs	r0, #56	@ 0x38
 80033fc:	2408      	movs	r4, #8
 80033fe:	1901      	adds	r1, r0, r4
 8003400:	2508      	movs	r5, #8
 8003402:	46ac      	mov	ip, r5
 8003404:	44bc      	add	ip, r7
 8003406:	4461      	add	r1, ip
 8003408:	600a      	str	r2, [r1, #0]
 800340a:	604b      	str	r3, [r1, #4]
  struct scaling_factor result;
  if (sf.multiply) {
 800340c:	0001      	movs	r1, r0
 800340e:	0020      	movs	r0, r4
 8003410:	180b      	adds	r3, r1, r0
 8003412:	2208      	movs	r2, #8
 8003414:	4694      	mov	ip, r2
 8003416:	44bc      	add	ip, r7
 8003418:	4463      	add	r3, ip
 800341a:	7a1b      	ldrb	r3, [r3, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d014      	beq.n	800344a <update_normalization+0x5a>
    result.multiply = true;
 8003420:	2408      	movs	r4, #8
 8003422:	193b      	adds	r3, r7, r4
 8003424:	2201      	movs	r2, #1
 8003426:	721a      	strb	r2, [r3, #8]
    result.raw_factor = sf.raw_factor * extra_multiplicative_factor;
 8003428:	180b      	adds	r3, r1, r0
 800342a:	2208      	movs	r2, #8
 800342c:	4694      	mov	ip, r2
 800342e:	44bc      	add	ip, r7
 8003430:	4463      	add	r3, ip
 8003432:	6818      	ldr	r0, [r3, #0]
 8003434:	6859      	ldr	r1, [r3, #4]
 8003436:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003438:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800343a:	f7fe f883 	bl	8001544 <__aeabi_dmul>
 800343e:	0002      	movs	r2, r0
 8003440:	000b      	movs	r3, r1
 8003442:	1939      	adds	r1, r7, r4
 8003444:	600a      	str	r2, [r1, #0]
 8003446:	604b      	str	r3, [r1, #4]
 8003448:	e059      	b.n	80034fe <update_normalization+0x10e>
  }
  else {
    int factor_exp2 = get_exp2(get_bit_access(sf.raw_factor));
 800344a:	2438      	movs	r4, #56	@ 0x38
 800344c:	2608      	movs	r6, #8
 800344e:	19a3      	adds	r3, r4, r6
 8003450:	2208      	movs	r2, #8
 8003452:	4694      	mov	ip, r2
 8003454:	44bc      	add	ip, r7
 8003456:	4463      	add	r3, ip
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2118      	movs	r1, #24
 800345e:	1879      	adds	r1, r7, r1
 8003460:	0008      	movs	r0, r1
 8003462:	f7ff fad9 	bl	8002a18 <get_bit_access>
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	0010      	movs	r0, r2
 800346c:	0019      	movs	r1, r3
 800346e:	f7ff fafd 	bl	8002a6c <get_exp2>
 8003472:	0003      	movs	r3, r0
 8003474:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int extra_factor_exp2 = get_exp2(get_bit_access(extra_multiplicative_factor));
 8003476:	2320      	movs	r3, #32
 8003478:	18f9      	adds	r1, r7, r3
 800347a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800347c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800347e:	0008      	movs	r0, r1
 8003480:	f7ff faca 	bl	8002a18 <get_bit_access>
 8003484:	6a3a      	ldr	r2, [r7, #32]
 8003486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003488:	0010      	movs	r0, r2
 800348a:	0019      	movs	r1, r3
 800348c:	f7ff faee 	bl	8002a6c <get_exp2>
 8003490:	0003      	movs	r3, r0
 8003492:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Divide the larger-exponent raw raw_factor by the smaller
    if (PRINTF_ABS(factor_exp2) > PRINTF_ABS(extra_factor_exp2)) {
 8003494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003496:	17d9      	asrs	r1, r3, #31
 8003498:	185a      	adds	r2, r3, r1
 800349a:	404a      	eors	r2, r1
 800349c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800349e:	17d9      	asrs	r1, r3, #31
 80034a0:	185b      	adds	r3, r3, r1
 80034a2:	404b      	eors	r3, r1
 80034a4:	429a      	cmp	r2, r3
 80034a6:	dd14      	ble.n	80034d2 <update_normalization+0xe2>
      result.multiply = false;
 80034a8:	2508      	movs	r5, #8
 80034aa:	197b      	adds	r3, r7, r5
 80034ac:	2200      	movs	r2, #0
 80034ae:	721a      	strb	r2, [r3, #8]
      result.raw_factor = sf.raw_factor / extra_multiplicative_factor;
 80034b0:	19a3      	adds	r3, r4, r6
 80034b2:	2208      	movs	r2, #8
 80034b4:	4694      	mov	ip, r2
 80034b6:	44bc      	add	ip, r7
 80034b8:	4463      	add	r3, ip
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	6859      	ldr	r1, [r3, #4]
 80034be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034c2:	f7fd fbfb 	bl	8000cbc <__aeabi_ddiv>
 80034c6:	0002      	movs	r2, r0
 80034c8:	000b      	movs	r3, r1
 80034ca:	1979      	adds	r1, r7, r5
 80034cc:	600a      	str	r2, [r1, #0]
 80034ce:	604b      	str	r3, [r1, #4]
 80034d0:	e015      	b.n	80034fe <update_normalization+0x10e>
    }
    else {
      result.multiply = true;
 80034d2:	2408      	movs	r4, #8
 80034d4:	193b      	adds	r3, r7, r4
 80034d6:	2201      	movs	r2, #1
 80034d8:	721a      	strb	r2, [r3, #8]
      result.raw_factor = extra_multiplicative_factor / sf.raw_factor;
 80034da:	2338      	movs	r3, #56	@ 0x38
 80034dc:	2208      	movs	r2, #8
 80034de:	189b      	adds	r3, r3, r2
 80034e0:	2208      	movs	r2, #8
 80034e2:	4694      	mov	ip, r2
 80034e4:	44bc      	add	ip, r7
 80034e6:	4463      	add	r3, ip
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80034ee:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80034f0:	f7fd fbe4 	bl	8000cbc <__aeabi_ddiv>
 80034f4:	0002      	movs	r2, r0
 80034f6:	000b      	movs	r3, r1
 80034f8:	1939      	adds	r1, r7, r4
 80034fa:	600a      	str	r2, [r1, #0]
 80034fc:	604b      	str	r3, [r1, #4]
    }
  }
  return result;
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	2308      	movs	r3, #8
 8003502:	18fb      	adds	r3, r7, r3
 8003504:	0010      	movs	r0, r2
 8003506:	0019      	movs	r1, r3
 8003508:	2310      	movs	r3, #16
 800350a:	001a      	movs	r2, r3
 800350c:	f004 ff3c 	bl	8008388 <memcpy>
}
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	46bd      	mov	sp, r7
 8003514:	b00d      	add	sp, #52	@ 0x34
 8003516:	bcf0      	pop	{r4, r5, r6, r7}
 8003518:	bc08      	pop	{r3}
 800351a:	b002      	add	sp, #8
 800351c:	4718      	bx	r3
	...

08003520 <get_normalized_components>:

static struct double_components get_normalized_components(bool negative, printf_size_t precision, double non_normalized, struct scaling_factor normalization, int floored_exp10)
{
 8003520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003522:	b0a5      	sub	sp, #148	@ 0x94
 8003524:	af04      	add	r7, sp, #16
 8003526:	6278      	str	r0, [r7, #36]	@ 0x24
 8003528:	61fa      	str	r2, [r7, #28]
 800352a:	200b      	movs	r0, #11
 800352c:	2618      	movs	r6, #24
 800352e:	1983      	adds	r3, r0, r6
 8003530:	19db      	adds	r3, r3, r7
 8003532:	1c0a      	adds	r2, r1, #0
 8003534:	701a      	strb	r2, [r3, #0]
  struct double_components components;
  components.is_negative = negative;
 8003536:	2320      	movs	r3, #32
 8003538:	0031      	movs	r1, r6
 800353a:	185b      	adds	r3, r3, r1
 800353c:	19db      	adds	r3, r3, r7
 800353e:	1842      	adds	r2, r0, r1
 8003540:	19d2      	adds	r2, r2, r7
 8003542:	7812      	ldrb	r2, [r2, #0]
 8003544:	741a      	strb	r2, [r3, #16]
  double scaled = apply_scaling(non_normalized, normalization);
 8003546:	2308      	movs	r3, #8
 8003548:	2280      	movs	r2, #128	@ 0x80
 800354a:	189b      	adds	r3, r3, r2
 800354c:	1878      	adds	r0, r7, r1
 800354e:	181e      	adds	r6, r3, r0
 8003550:	1853      	adds	r3, r2, r1
 8003552:	19db      	adds	r3, r3, r7
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	603a      	str	r2, [r7, #0]
 800355a:	607b      	str	r3, [r7, #4]
 800355c:	466b      	mov	r3, sp
 800355e:	0018      	movs	r0, r3
 8003560:	0033      	movs	r3, r6
 8003562:	3308      	adds	r3, #8
 8003564:	2208      	movs	r2, #8
 8003566:	0019      	movs	r1, r3
 8003568:	f004 ff0e 	bl	8008388 <memcpy>
 800356c:	6832      	ldr	r2, [r6, #0]
 800356e:	6873      	ldr	r3, [r6, #4]
 8003570:	6838      	ldr	r0, [r7, #0]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	f7ff fee6 	bl	8003344 <apply_scaling>
 8003578:	0002      	movs	r2, r0
 800357a:	000b      	movs	r3, r1
 800357c:	67ba      	str	r2, [r7, #120]	@ 0x78
 800357e:	67fb      	str	r3, [r7, #124]	@ 0x7c

  bool close_to_representation_extremum = ( (-floored_exp10 + (int) precision) >= DBL_MAX_10_EXP - 1 );
 8003580:	69fa      	ldr	r2, [r7, #28]
 8003582:	2398      	movs	r3, #152	@ 0x98
 8003584:	2018      	movs	r0, #24
 8003586:	181b      	adds	r3, r3, r0
 8003588:	19db      	adds	r3, r3, r7
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	1ad1      	subs	r1, r2, r3
 800358e:	235f      	movs	r3, #95	@ 0x5f
 8003590:	181b      	adds	r3, r3, r0
 8003592:	19db      	adds	r3, r3, r7
 8003594:	2201      	movs	r2, #1
 8003596:	1c10      	adds	r0, r2, #0
 8003598:	2299      	movs	r2, #153	@ 0x99
 800359a:	0052      	lsls	r2, r2, #1
 800359c:	4291      	cmp	r1, r2
 800359e:	dc01      	bgt.n	80035a4 <get_normalized_components+0x84>
 80035a0:	2200      	movs	r2, #0
 80035a2:	1c10      	adds	r0, r2, #0
 80035a4:	7018      	strb	r0, [r3, #0]
  if (close_to_representation_extremum) {
 80035a6:	235f      	movs	r3, #95	@ 0x5f
 80035a8:	2218      	movs	r2, #24
 80035aa:	189b      	adds	r3, r3, r2
 80035ac:	19db      	adds	r3, r3, r7
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d018      	beq.n	80035e6 <get_normalized_components+0xc6>
    // We can't have a normalization factor which also accounts for the precision, i.e. moves
    // some decimal digits into the mantissa, since it's unrepresentable, or nearly unrepresentable.
    // So, we'll give up early on getting extra precision...
    return get_components(negative ? -scaled : scaled, precision);
 80035b4:	230b      	movs	r3, #11
 80035b6:	189b      	adds	r3, r3, r2
 80035b8:	19db      	adds	r3, r3, r7
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d007      	beq.n	80035d0 <get_normalized_components+0xb0>
 80035c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035c2:	001c      	movs	r4, r3
 80035c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035c6:	2280      	movs	r2, #128	@ 0x80
 80035c8:	0612      	lsls	r2, r2, #24
 80035ca:	405a      	eors	r2, r3
 80035cc:	0015      	movs	r5, r2
 80035ce:	e001      	b.n	80035d4 <get_normalized_components+0xb4>
 80035d0:	6fbc      	ldr	r4, [r7, #120]	@ 0x78
 80035d2:	6ffd      	ldr	r5, [r7, #124]	@ 0x7c
 80035d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	0022      	movs	r2, r4
 80035dc:	002b      	movs	r3, r5
 80035de:	0008      	movs	r0, r1
 80035e0:	f7ff fd7a 	bl	80030d8 <get_components>
 80035e4:	e0f9      	b.n	80037da <get_normalized_components+0x2ba>
  }
  components.integral = (int_fast64_t) scaled;
 80035e6:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80035e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80035ea:	f7fc fec9 	bl	8000380 <__aeabi_d2lz>
 80035ee:	0002      	movs	r2, r0
 80035f0:	000b      	movs	r3, r1
 80035f2:	2420      	movs	r4, #32
 80035f4:	2018      	movs	r0, #24
 80035f6:	1821      	adds	r1, r4, r0
 80035f8:	19c9      	adds	r1, r1, r7
 80035fa:	600a      	str	r2, [r1, #0]
 80035fc:	604b      	str	r3, [r1, #4]
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 80035fe:	1823      	adds	r3, r4, r0
 8003600:	19db      	adds	r3, r3, r7
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	0010      	movs	r0, r2
 8003608:	0019      	movs	r1, r3
 800360a:	f7fc fef3 	bl	80003f4 <__aeabi_l2d>
 800360e:	0005      	movs	r5, r0
 8003610:	000e      	movs	r6, r1
 8003612:	2308      	movs	r3, #8
 8003614:	2280      	movs	r2, #128	@ 0x80
 8003616:	189b      	adds	r3, r3, r2
 8003618:	2418      	movs	r4, #24
 800361a:	193a      	adds	r2, r7, r4
 800361c:	189c      	adds	r4, r3, r2
 800361e:	466b      	mov	r3, sp
 8003620:	0018      	movs	r0, r3
 8003622:	0023      	movs	r3, r4
 8003624:	3308      	adds	r3, #8
 8003626:	2208      	movs	r2, #8
 8003628:	0019      	movs	r1, r3
 800362a:	f004 fead 	bl	8008388 <memcpy>
 800362e:	6822      	ldr	r2, [r4, #0]
 8003630:	6863      	ldr	r3, [r4, #4]
 8003632:	0028      	movs	r0, r5
 8003634:	0031      	movs	r1, r6
 8003636:	f7ff feb0 	bl	800339a <unapply_scaling>
 800363a:	0002      	movs	r2, r0
 800363c:	000b      	movs	r3, r1
 800363e:	2680      	movs	r6, #128	@ 0x80
 8003640:	2418      	movs	r4, #24
 8003642:	1931      	adds	r1, r6, r4
 8003644:	19c9      	adds	r1, r1, r7
 8003646:	6808      	ldr	r0, [r1, #0]
 8003648:	6849      	ldr	r1, [r1, #4]
 800364a:	f7fe fa43 	bl	8001ad4 <__aeabi_dsub>
 800364e:	0002      	movs	r2, r0
 8003650:	000b      	movs	r3, r1
 8003652:	66ba      	str	r2, [r7, #104]	@ 0x68
 8003654:	66fb      	str	r3, [r7, #108]	@ 0x6c
  double prec_power_of_10 = powers_of_10[precision];
 8003656:	4a63      	ldr	r2, [pc, #396]	@ (80037e4 <get_normalized_components+0x2c4>)
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	18d3      	adds	r3, r2, r3
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	663a      	str	r2, [r7, #96]	@ 0x60
 8003664:	667b      	str	r3, [r7, #100]	@ 0x64
  struct scaling_factor account_for_precision = update_normalization(normalization, prec_power_of_10);
 8003666:	2310      	movs	r3, #16
 8003668:	191b      	adds	r3, r3, r4
 800366a:	19dd      	adds	r5, r3, r7
 800366c:	2308      	movs	r3, #8
 800366e:	199a      	adds	r2, r3, r6
 8003670:	0026      	movs	r6, r4
 8003672:	193b      	adds	r3, r7, r4
 8003674:	18d4      	adds	r4, r2, r3
 8003676:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003678:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800367a:	9202      	str	r2, [sp, #8]
 800367c:	9303      	str	r3, [sp, #12]
 800367e:	466b      	mov	r3, sp
 8003680:	0018      	movs	r0, r3
 8003682:	0022      	movs	r2, r4
 8003684:	3208      	adds	r2, #8
 8003686:	0013      	movs	r3, r2
 8003688:	2208      	movs	r2, #8
 800368a:	0019      	movs	r1, r3
 800368c:	f004 fe7c 	bl	8008388 <memcpy>
 8003690:	6822      	ldr	r2, [r4, #0]
 8003692:	6863      	ldr	r3, [r4, #4]
 8003694:	0028      	movs	r0, r5
 8003696:	f7ff feab 	bl	80033f0 <update_normalization>
  double scaled_remainder = apply_scaling(remainder, account_for_precision);
 800369a:	2310      	movs	r3, #16
 800369c:	199b      	adds	r3, r3, r6
 800369e:	19dc      	adds	r4, r3, r7
 80036a0:	6ebd      	ldr	r5, [r7, #104]	@ 0x68
 80036a2:	6efe      	ldr	r6, [r7, #108]	@ 0x6c
 80036a4:	466b      	mov	r3, sp
 80036a6:	0018      	movs	r0, r3
 80036a8:	0023      	movs	r3, r4
 80036aa:	3308      	adds	r3, #8
 80036ac:	2208      	movs	r2, #8
 80036ae:	0019      	movs	r1, r3
 80036b0:	f004 fe6a 	bl	8008388 <memcpy>
 80036b4:	6822      	ldr	r2, [r4, #0]
 80036b6:	6863      	ldr	r3, [r4, #4]
 80036b8:	0028      	movs	r0, r5
 80036ba:	0031      	movs	r1, r6
 80036bc:	f7ff fe42 	bl	8003344 <apply_scaling>
 80036c0:	0002      	movs	r2, r0
 80036c2:	000b      	movs	r3, r1
 80036c4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80036c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  double rounding_threshold = 0.5;
 80036c8:	2200      	movs	r2, #0
 80036ca:	4b47      	ldr	r3, [pc, #284]	@ (80037e8 <get_normalized_components+0x2c8>)
 80036cc:	653a      	str	r2, [r7, #80]	@ 0x50
 80036ce:	657b      	str	r3, [r7, #84]	@ 0x54

  components.fractional = (int_fast64_t) scaled_remainder; // when precision == 0, the assigned value should be 0
 80036d0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80036d2:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80036d4:	f7fc fe54 	bl	8000380 <__aeabi_d2lz>
 80036d8:	0002      	movs	r2, r0
 80036da:	000b      	movs	r3, r1
 80036dc:	2420      	movs	r4, #32
 80036de:	2518      	movs	r5, #24
 80036e0:	1961      	adds	r1, r4, r5
 80036e2:	19c9      	adds	r1, r1, r7
 80036e4:	608a      	str	r2, [r1, #8]
 80036e6:	60cb      	str	r3, [r1, #12]
  scaled_remainder -= (double) components.fractional; //when precision == 0, this will not change scaled_remainder
 80036e8:	1963      	adds	r3, r4, r5
 80036ea:	19db      	adds	r3, r3, r7
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	0010      	movs	r0, r2
 80036f2:	0019      	movs	r1, r3
 80036f4:	f7fc fe7e 	bl	80003f4 <__aeabi_l2d>
 80036f8:	0002      	movs	r2, r0
 80036fa:	000b      	movs	r3, r1
 80036fc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80036fe:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003700:	f7fe f9e8 	bl	8001ad4 <__aeabi_dsub>
 8003704:	0002      	movs	r2, r0
 8003706:	000b      	movs	r3, r1
 8003708:	65ba      	str	r2, [r7, #88]	@ 0x58
 800370a:	65fb      	str	r3, [r7, #92]	@ 0x5c

  components.fractional += (scaled_remainder >= rounding_threshold);
 800370c:	1963      	adds	r3, r4, r5
 800370e:	19db      	adds	r3, r3, r7
 8003710:	689c      	ldr	r4, [r3, #8]
 8003712:	68dd      	ldr	r5, [r3, #12]
 8003714:	2301      	movs	r3, #1
 8003716:	1c1e      	adds	r6, r3, #0
 8003718:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800371a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800371c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800371e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003720:	f7fc fdb2 	bl	8000288 <__aeabi_dcmpge>
 8003724:	1e03      	subs	r3, r0, #0
 8003726:	d101      	bne.n	800372c <get_normalized_components+0x20c>
 8003728:	2300      	movs	r3, #0
 800372a:	1c1e      	adds	r6, r3, #0
 800372c:	b2f3      	uxtb	r3, r6
 800372e:	613b      	str	r3, [r7, #16]
 8003730:	2300      	movs	r3, #0
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	1912      	adds	r2, r2, r4
 800373a:	416b      	adcs	r3, r5
 800373c:	2420      	movs	r4, #32
 800373e:	2518      	movs	r5, #24
 8003740:	1961      	adds	r1, r4, r5
 8003742:	19c9      	adds	r1, r1, r7
 8003744:	608a      	str	r2, [r1, #8]
 8003746:	60cb      	str	r3, [r1, #12]
  if (scaled_remainder == rounding_threshold) {
 8003748:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800374a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800374c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800374e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8003750:	f7fc fd76 	bl	8000240 <__aeabi_dcmpeq>
 8003754:	1e03      	subs	r3, r0, #0
 8003756:	d011      	beq.n	800377c <get_normalized_components+0x25c>
    // banker's rounding: Round towards the even number (making the mean error 0)
    components.fractional &= ~((int_fast64_t) 0x1);
 8003758:	0020      	movs	r0, r4
 800375a:	1943      	adds	r3, r0, r5
 800375c:	19db      	adds	r3, r3, r7
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	2101      	movs	r1, #1
 8003764:	0014      	movs	r4, r2
 8003766:	438c      	bics	r4, r1
 8003768:	60bc      	str	r4, [r7, #8]
 800376a:	2100      	movs	r1, #0
 800376c:	438b      	bics	r3, r1
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	1943      	adds	r3, r0, r5
 8003772:	19db      	adds	r3, r3, r7
 8003774:	68b9      	ldr	r1, [r7, #8]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	6099      	str	r1, [r3, #8]
 800377a:	60da      	str	r2, [r3, #12]
  // handle rollover, e.g. the case of 0.99 with precision 1 becoming (0,100),
  // and must then be corrected into (1, 0).
  // Note: for precision = 0, this will "translate" the rounding effect from
  // the fractional part to the integral part where it should actually be
  // felt (as prec_power_of_10 is 1)
  if ((double) components.fractional >= prec_power_of_10) {
 800377c:	2420      	movs	r4, #32
 800377e:	2518      	movs	r5, #24
 8003780:	1963      	adds	r3, r4, r5
 8003782:	19db      	adds	r3, r3, r7
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	0010      	movs	r0, r2
 800378a:	0019      	movs	r1, r3
 800378c:	f7fc fe32 	bl	80003f4 <__aeabi_l2d>
 8003790:	0002      	movs	r2, r0
 8003792:	000b      	movs	r3, r1
 8003794:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003796:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003798:	f7fc fd62 	bl	8000260 <__aeabi_dcmple>
 800379c:	1e03      	subs	r3, r0, #0
 800379e:	d011      	beq.n	80037c4 <get_normalized_components+0x2a4>
    components.fractional = 0;
 80037a0:	1963      	adds	r3, r4, r5
 80037a2:	19d9      	adds	r1, r3, r7
 80037a4:	2200      	movs	r2, #0
 80037a6:	2300      	movs	r3, #0
 80037a8:	608a      	str	r2, [r1, #8]
 80037aa:	60cb      	str	r3, [r1, #12]
    ++components.integral;
 80037ac:	1963      	adds	r3, r4, r5
 80037ae:	19db      	adds	r3, r3, r7
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2001      	movs	r0, #1
 80037b6:	2100      	movs	r1, #0
 80037b8:	1812      	adds	r2, r2, r0
 80037ba:	414b      	adcs	r3, r1
 80037bc:	1961      	adds	r1, r4, r5
 80037be:	19c9      	adds	r1, r1, r7
 80037c0:	600a      	str	r2, [r1, #0]
 80037c2:	604b      	str	r3, [r1, #4]
  }
  return components;
 80037c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037c6:	2320      	movs	r3, #32
 80037c8:	2118      	movs	r1, #24
 80037ca:	185b      	adds	r3, r3, r1
 80037cc:	19db      	adds	r3, r3, r7
 80037ce:	0010      	movs	r0, r2
 80037d0:	0019      	movs	r1, r3
 80037d2:	2318      	movs	r3, #24
 80037d4:	001a      	movs	r2, r3
 80037d6:	f004 fdd7 	bl	8008388 <memcpy>
}
 80037da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80037dc:	46bd      	mov	sp, r7
 80037de:	b021      	add	sp, #132	@ 0x84
 80037e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037e2:	46c0      	nop			@ (mov r8, r8)
 80037e4:	08008448 	.word	0x08008448
 80037e8:	3fe00000 	.word	0x3fe00000

080037ec <print_broken_up_decimal>:
#endif // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS

static void print_broken_up_decimal(
  struct double_components number_, output_gadget_t* output, printf_size_t precision,
  printf_size_t width, printf_flags_t flags, char *buf, printf_size_t len)
{
 80037ec:	b084      	sub	sp, #16
 80037ee:	b5b0      	push	{r4, r5, r7, lr}
 80037f0:	b086      	sub	sp, #24
 80037f2:	af02      	add	r7, sp, #8
 80037f4:	2520      	movs	r5, #32
 80037f6:	197c      	adds	r4, r7, r5
 80037f8:	6020      	str	r0, [r4, #0]
 80037fa:	6061      	str	r1, [r4, #4]
 80037fc:	60a2      	str	r2, [r4, #8]
 80037fe:	60e3      	str	r3, [r4, #12]
  if (precision != 0U) {
 8003800:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003802:	2b00      	cmp	r3, #0
 8003804:	d100      	bne.n	8003808 <print_broken_up_decimal+0x1c>
 8003806:	e08c      	b.n	8003922 <print_broken_up_decimal+0x136>
    // do fractional part, as an unsigned number

    printf_size_t count = precision;
 8003808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800380a:	60fb      	str	r3, [r7, #12]

    // %g/%G mandates we skip the trailing 0 digits...
    if ((flags & FLAGS_ADAPT_EXP) && !(flags & FLAGS_HASH) && (number_.fractional > 0)) {
 800380c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800380e:	2380      	movs	r3, #128	@ 0x80
 8003810:	015b      	lsls	r3, r3, #5
 8003812:	4013      	ands	r3, r2
 8003814:	d02a      	beq.n	800386c <print_broken_up_decimal+0x80>
 8003816:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003818:	2210      	movs	r2, #16
 800381a:	4013      	ands	r3, r2
 800381c:	d126      	bne.n	800386c <print_broken_up_decimal+0x80>
 800381e:	197b      	adds	r3, r7, r5
 8003820:	689a      	ldr	r2, [r3, #8]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	dc02      	bgt.n	800382e <print_broken_up_decimal+0x42>
 8003828:	d120      	bne.n	800386c <print_broken_up_decimal+0x80>
 800382a:	2a00      	cmp	r2, #0
 800382c:	d01e      	beq.n	800386c <print_broken_up_decimal+0x80>
      while(true) {
        int_fast64_t digit = number_.fractional % 10U;
 800382e:	2420      	movs	r4, #32
 8003830:	193b      	adds	r3, r7, r4
 8003832:	6898      	ldr	r0, [r3, #8]
 8003834:	68d9      	ldr	r1, [r3, #12]
 8003836:	220a      	movs	r2, #10
 8003838:	2300      	movs	r3, #0
 800383a:	f7fc fd2f 	bl	800029c <__aeabi_ldivmod>
 800383e:	603a      	str	r2, [r7, #0]
 8003840:	607b      	str	r3, [r7, #4]
        if (digit != 0) {
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	4313      	orrs	r3, r2
 8003848:	d10f      	bne.n	800386a <print_broken_up_decimal+0x7e>
          break;
        }
        --count;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	3b01      	subs	r3, #1
 800384e:	60fb      	str	r3, [r7, #12]
        number_.fractional /= 10U;
 8003850:	193b      	adds	r3, r7, r4
 8003852:	6898      	ldr	r0, [r3, #8]
 8003854:	68d9      	ldr	r1, [r3, #12]
 8003856:	220a      	movs	r2, #10
 8003858:	2300      	movs	r3, #0
 800385a:	f7fc fd1f 	bl	800029c <__aeabi_ldivmod>
 800385e:	0002      	movs	r2, r0
 8003860:	000b      	movs	r3, r1
 8003862:	1939      	adds	r1, r7, r4
 8003864:	608a      	str	r2, [r1, #8]
 8003866:	60cb      	str	r3, [r1, #12]
      while(true) {
 8003868:	e7e1      	b.n	800382e <print_broken_up_decimal+0x42>
          break;
 800386a:	46c0      	nop			@ (mov r8, r8)
      }
      // ... and even the decimal point if there are no
      // non-zero fractional part digits (see below)
    }

    if (number_.fractional > 0 || !(flags & FLAGS_ADAPT_EXP) || (flags & FLAGS_HASH) ) {
 800386c:	2320      	movs	r3, #32
 800386e:	18fb      	adds	r3, r7, r3
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	2b00      	cmp	r3, #0
 8003876:	dc33      	bgt.n	80038e0 <print_broken_up_decimal+0xf4>
 8003878:	d101      	bne.n	800387e <print_broken_up_decimal+0x92>
 800387a:	2a00      	cmp	r2, #0
 800387c:	d130      	bne.n	80038e0 <print_broken_up_decimal+0xf4>
 800387e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003880:	2380      	movs	r3, #128	@ 0x80
 8003882:	015b      	lsls	r3, r3, #5
 8003884:	4013      	ands	r3, r2
 8003886:	d02b      	beq.n	80038e0 <print_broken_up_decimal+0xf4>
 8003888:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800388a:	2210      	movs	r2, #16
 800388c:	4013      	ands	r3, r2
 800388e:	d100      	bne.n	8003892 <print_broken_up_decimal+0xa6>
 8003890:	e079      	b.n	8003986 <print_broken_up_decimal+0x19a>
      while (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8003892:	e025      	b.n	80038e0 <print_broken_up_decimal+0xf4>
        --count;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	3b01      	subs	r3, #1
 8003898:	60fb      	str	r3, [r7, #12]
        buf[len++] = (char)('0' + number_.fractional % 10U);
 800389a:	2420      	movs	r4, #32
 800389c:	193b      	adds	r3, r7, r4
 800389e:	6898      	ldr	r0, [r3, #8]
 80038a0:	68d9      	ldr	r1, [r3, #12]
 80038a2:	220a      	movs	r2, #10
 80038a4:	2300      	movs	r3, #0
 80038a6:	f7fc fcf9 	bl	800029c <__aeabi_ldivmod>
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038ae:	1c59      	adds	r1, r3, #1
 80038b0:	64f9      	str	r1, [r7, #76]	@ 0x4c
 80038b2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80038b4:	18cb      	adds	r3, r1, r3
 80038b6:	3230      	adds	r2, #48	@ 0x30
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	701a      	strb	r2, [r3, #0]
        if (!(number_.fractional /= 10U)) {
 80038bc:	193b      	adds	r3, r7, r4
 80038be:	6898      	ldr	r0, [r3, #8]
 80038c0:	68d9      	ldr	r1, [r3, #12]
 80038c2:	220a      	movs	r2, #10
 80038c4:	2300      	movs	r3, #0
 80038c6:	f7fc fce9 	bl	800029c <__aeabi_ldivmod>
 80038ca:	0002      	movs	r2, r0
 80038cc:	000b      	movs	r3, r1
 80038ce:	1939      	adds	r1, r7, r4
 80038d0:	608a      	str	r2, [r1, #8]
 80038d2:	60cb      	str	r3, [r1, #12]
 80038d4:	193b      	adds	r3, r7, r4
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	0011      	movs	r1, r2
 80038dc:	4319      	orrs	r1, r3
 80038de:	d003      	beq.n	80038e8 <print_broken_up_decimal+0xfc>
      while (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 80038e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038e2:	2b1f      	cmp	r3, #31
 80038e4:	d9d6      	bls.n	8003894 <print_broken_up_decimal+0xa8>
 80038e6:	e00b      	b.n	8003900 <print_broken_up_decimal+0x114>
          break;
 80038e8:	46c0      	nop			@ (mov r8, r8)
        }
      }
      // add extra 0s
      while ((len < PRINTF_DECIMAL_BUFFER_SIZE) && (count > 0U)) {
 80038ea:	e009      	b.n	8003900 <print_broken_up_decimal+0x114>
        buf[len++] = '0';
 80038ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80038f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038f4:	18d3      	adds	r3, r2, r3
 80038f6:	2230      	movs	r2, #48	@ 0x30
 80038f8:	701a      	strb	r2, [r3, #0]
        --count;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	3b01      	subs	r3, #1
 80038fe:	60fb      	str	r3, [r7, #12]
      while ((len < PRINTF_DECIMAL_BUFFER_SIZE) && (count > 0U)) {
 8003900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003902:	2b1f      	cmp	r3, #31
 8003904:	d802      	bhi.n	800390c <print_broken_up_decimal+0x120>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1ef      	bne.n	80038ec <print_broken_up_decimal+0x100>
      }
      if (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 800390c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800390e:	2b1f      	cmp	r3, #31
 8003910:	d839      	bhi.n	8003986 <print_broken_up_decimal+0x19a>
        buf[len++] = '.';
 8003912:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003918:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800391a:	18d3      	adds	r3, r2, r3
 800391c:	222e      	movs	r2, #46	@ 0x2e
 800391e:	701a      	strb	r2, [r3, #0]
 8003920:	e031      	b.n	8003986 <print_broken_up_decimal+0x19a>
      }
    }
  }
  else {
    if ((flags & FLAGS_HASH) && (len < PRINTF_DECIMAL_BUFFER_SIZE)) {
 8003922:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003924:	2210      	movs	r2, #16
 8003926:	4013      	ands	r3, r2
 8003928:	d02d      	beq.n	8003986 <print_broken_up_decimal+0x19a>
 800392a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800392c:	2b1f      	cmp	r3, #31
 800392e:	d82a      	bhi.n	8003986 <print_broken_up_decimal+0x19a>
      buf[len++] = '.';
 8003930:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003932:	1c5a      	adds	r2, r3, #1
 8003934:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003936:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003938:	18d3      	adds	r3, r2, r3
 800393a:	222e      	movs	r2, #46	@ 0x2e
 800393c:	701a      	strb	r2, [r3, #0]
    }
  }

  // Write the integer part of the number (it comes after the fractional
  // since the character order is reversed)
  while (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 800393e:	e022      	b.n	8003986 <print_broken_up_decimal+0x19a>
    buf[len++] = (char)('0' + (number_.integral % 10));
 8003940:	2420      	movs	r4, #32
 8003942:	193b      	adds	r3, r7, r4
 8003944:	6818      	ldr	r0, [r3, #0]
 8003946:	6859      	ldr	r1, [r3, #4]
 8003948:	220a      	movs	r2, #10
 800394a:	2300      	movs	r3, #0
 800394c:	f7fc fca6 	bl	800029c <__aeabi_ldivmod>
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003954:	1c59      	adds	r1, r3, #1
 8003956:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8003958:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800395a:	18cb      	adds	r3, r1, r3
 800395c:	3230      	adds	r2, #48	@ 0x30
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	701a      	strb	r2, [r3, #0]
    if (!(number_.integral /= 10)) {
 8003962:	193b      	adds	r3, r7, r4
 8003964:	6818      	ldr	r0, [r3, #0]
 8003966:	6859      	ldr	r1, [r3, #4]
 8003968:	220a      	movs	r2, #10
 800396a:	2300      	movs	r3, #0
 800396c:	f7fc fc96 	bl	800029c <__aeabi_ldivmod>
 8003970:	0002      	movs	r2, r0
 8003972:	000b      	movs	r3, r1
 8003974:	1939      	adds	r1, r7, r4
 8003976:	600a      	str	r2, [r1, #0]
 8003978:	604b      	str	r3, [r1, #4]
 800397a:	193b      	adds	r3, r7, r4
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	0011      	movs	r1, r2
 8003982:	4319      	orrs	r1, r3
 8003984:	d003      	beq.n	800398e <print_broken_up_decimal+0x1a2>
  while (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 8003986:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003988:	2b1f      	cmp	r3, #31
 800398a:	d9d9      	bls.n	8003940 <print_broken_up_decimal+0x154>
 800398c:	e000      	b.n	8003990 <print_broken_up_decimal+0x1a4>
      break;
 800398e:	46c0      	nop			@ (mov r8, r8)
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8003990:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003992:	2202      	movs	r2, #2
 8003994:	4013      	ands	r3, r2
 8003996:	d121      	bne.n	80039dc <print_broken_up_decimal+0x1f0>
 8003998:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800399a:	2201      	movs	r2, #1
 800399c:	4013      	ands	r3, r2
 800399e:	d01d      	beq.n	80039dc <print_broken_up_decimal+0x1f0>
    if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80039a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d013      	beq.n	80039ce <print_broken_up_decimal+0x1e2>
 80039a6:	2320      	movs	r3, #32
 80039a8:	18fb      	adds	r3, r7, r3
 80039aa:	7c1b      	ldrb	r3, [r3, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d103      	bne.n	80039b8 <print_broken_up_decimal+0x1cc>
 80039b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039b2:	220c      	movs	r2, #12
 80039b4:	4013      	ands	r3, r2
 80039b6:	d00a      	beq.n	80039ce <print_broken_up_decimal+0x1e2>
      width--;
 80039b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039ba:	3b01      	subs	r3, #1
 80039bc:	643b      	str	r3, [r7, #64]	@ 0x40
    }
    while ((len < width) && (len < PRINTF_DECIMAL_BUFFER_SIZE)) {
 80039be:	e006      	b.n	80039ce <print_broken_up_decimal+0x1e2>
      buf[len++] = '0';
 80039c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039c2:	1c5a      	adds	r2, r3, #1
 80039c4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80039c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039c8:	18d3      	adds	r3, r2, r3
 80039ca:	2230      	movs	r2, #48	@ 0x30
 80039cc:	701a      	strb	r2, [r3, #0]
    while ((len < width) && (len < PRINTF_DECIMAL_BUFFER_SIZE)) {
 80039ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d202      	bcs.n	80039dc <print_broken_up_decimal+0x1f0>
 80039d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039d8:	2b1f      	cmp	r3, #31
 80039da:	d9f1      	bls.n	80039c0 <print_broken_up_decimal+0x1d4>
    }
  }

  if (len < PRINTF_DECIMAL_BUFFER_SIZE) {
 80039dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039de:	2b1f      	cmp	r3, #31
 80039e0:	d823      	bhi.n	8003a2a <print_broken_up_decimal+0x23e>
    if (number_.is_negative) {
 80039e2:	2320      	movs	r3, #32
 80039e4:	18fb      	adds	r3, r7, r3
 80039e6:	7c1b      	ldrb	r3, [r3, #16]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d007      	beq.n	80039fc <print_broken_up_decimal+0x210>
      buf[len++] = '-';
 80039ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80039f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039f4:	18d3      	adds	r3, r2, r3
 80039f6:	222d      	movs	r2, #45	@ 0x2d
 80039f8:	701a      	strb	r2, [r3, #0]
 80039fa:	e016      	b.n	8003a2a <print_broken_up_decimal+0x23e>
    }
    else if (flags & FLAGS_PLUS) {
 80039fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039fe:	2204      	movs	r2, #4
 8003a00:	4013      	ands	r3, r2
 8003a02:	d007      	beq.n	8003a14 <print_broken_up_decimal+0x228>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003a04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003a0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a0c:	18d3      	adds	r3, r2, r3
 8003a0e:	222b      	movs	r2, #43	@ 0x2b
 8003a10:	701a      	strb	r2, [r3, #0]
 8003a12:	e00a      	b.n	8003a2a <print_broken_up_decimal+0x23e>
    }
    else if (flags & FLAGS_SPACE) {
 8003a14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a16:	2208      	movs	r2, #8
 8003a18:	4013      	ands	r3, r2
 8003a1a:	d006      	beq.n	8003a2a <print_broken_up_decimal+0x23e>
      buf[len++] = ' ';
 8003a1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003a22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a24:	18d3      	adds	r3, r2, r3
 8003a26:	2220      	movs	r2, #32
 8003a28:	701a      	strb	r2, [r3, #0]
    }
  }

  out_rev_(output, buf, len, width, flags);
 8003a2a:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8003a2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a2e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003a30:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003a32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	0023      	movs	r3, r4
 8003a38:	f7ff f963 	bl	8002d02 <out_rev_>
}
 8003a3c:	46c0      	nop			@ (mov r8, r8)
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	b004      	add	sp, #16
 8003a42:	bcb0      	pop	{r4, r5, r7}
 8003a44:	bc08      	pop	{r3}
 8003a46:	b004      	add	sp, #16
 8003a48:	4718      	bx	r3

08003a4a <print_decimal_number>:

      // internal ftoa for fixed decimal floating point
static void print_decimal_number(output_gadget_t* output, double number, printf_size_t precision, printf_size_t width, printf_flags_t flags, char* buf, printf_size_t len)
{
 8003a4a:	b590      	push	{r4, r7, lr}
 8003a4c:	b093      	sub	sp, #76	@ 0x4c
 8003a4e:	af08      	add	r7, sp, #32
 8003a50:	60f8      	str	r0, [r7, #12]
 8003a52:	603a      	str	r2, [r7, #0]
 8003a54:	607b      	str	r3, [r7, #4]
  struct double_components value_ = get_components(number, precision);
 8003a56:	2410      	movs	r4, #16
 8003a58:	1938      	adds	r0, r7, r4
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a60:	9100      	str	r1, [sp, #0]
 8003a62:	f7ff fb39 	bl	80030d8 <get_components>
  print_broken_up_decimal(value_, output, precision, width, flags, buf, len);
 8003a66:	193c      	adds	r4, r7, r4
 8003a68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a6a:	9307      	str	r3, [sp, #28]
 8003a6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a6e:	9306      	str	r3, [sp, #24]
 8003a70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a72:	9305      	str	r3, [sp, #20]
 8003a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a76:	9304      	str	r3, [sp, #16]
 8003a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a7a:	9303      	str	r3, [sp, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	9302      	str	r3, [sp, #8]
 8003a80:	466b      	mov	r3, sp
 8003a82:	0018      	movs	r0, r3
 8003a84:	0023      	movs	r3, r4
 8003a86:	3310      	adds	r3, #16
 8003a88:	2208      	movs	r2, #8
 8003a8a:	0019      	movs	r1, r3
 8003a8c:	f004 fc7c 	bl	8008388 <memcpy>
 8003a90:	6820      	ldr	r0, [r4, #0]
 8003a92:	6861      	ldr	r1, [r4, #4]
 8003a94:	68a2      	ldr	r2, [r4, #8]
 8003a96:	68e3      	ldr	r3, [r4, #12]
 8003a98:	f7ff fea8 	bl	80037ec <print_broken_up_decimal>
}
 8003a9c:	46c0      	nop			@ (mov r8, r8)
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	b00b      	add	sp, #44	@ 0x2c
 8003aa2:	bd90      	pop	{r4, r7, pc}

08003aa4 <bastardized_floor>:
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS

// A floor function - but one which only works for numbers whose
// floor value is representable by an int.
static int bastardized_floor(double x)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6038      	str	r0, [r7, #0]
 8003aac:	6079      	str	r1, [r7, #4]
  if (x >= 0) { return (int) x; }
 8003aae:	2200      	movs	r2, #0
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	6838      	ldr	r0, [r7, #0]
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	f7fc fbe7 	bl	8000288 <__aeabi_dcmpge>
 8003aba:	1e03      	subs	r3, r0, #0
 8003abc:	d005      	beq.n	8003aca <bastardized_floor+0x26>
 8003abe:	6838      	ldr	r0, [r7, #0]
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	f7fe fba3 	bl	800220c <__aeabi_d2iz>
 8003ac6:	0003      	movs	r3, r0
 8003ac8:	e014      	b.n	8003af4 <bastardized_floor+0x50>
  int n = (int) x;
 8003aca:	6838      	ldr	r0, [r7, #0]
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	f7fe fb9d 	bl	800220c <__aeabi_d2iz>
 8003ad2:	0003      	movs	r3, r0
 8003ad4:	60fb      	str	r3, [r7, #12]
  return ( ((double) n) == x ) ? n : n-1;
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f7fe fbd4 	bl	8002284 <__aeabi_i2d>
 8003adc:	0002      	movs	r2, r0
 8003ade:	000b      	movs	r3, r1
 8003ae0:	6838      	ldr	r0, [r7, #0]
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	f7fc fbac 	bl	8000240 <__aeabi_dcmpeq>
 8003ae8:	1e03      	subs	r3, r0, #0
 8003aea:	d102      	bne.n	8003af2 <bastardized_floor+0x4e>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	e000      	b.n	8003af4 <bastardized_floor+0x50>
 8003af2:	68fb      	ldr	r3, [r7, #12]
}
 8003af4:	0018      	movs	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	b004      	add	sp, #16
 8003afa:	bd80      	pop	{r7, pc}

08003afc <log10_of_positive>:

// Computes the base-10 logarithm of the input number - which must be an actual
// positive number (not infinity or NaN, nor a sub-normal)
static double log10_of_positive(double positive_number)
{
 8003afc:	b5b0      	push	{r4, r5, r7, lr}
 8003afe:	b08a      	sub	sp, #40	@ 0x28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60b8      	str	r0, [r7, #8]
 8003b04:	60f9      	str	r1, [r7, #12]
  // our input number, and need only solve log_10(M) for M between 1 and 2 (as
  // the base-2 mantissa is always 1-point-something). In that limited range, a
  // Taylor series expansion of log10(x) should serve us well enough; and we'll
  // take the mid-point, 1.5, as the point of expansion.

  double_with_bit_access dwba = get_bit_access(positive_number);
 8003b06:	2308      	movs	r3, #8
 8003b08:	2208      	movs	r2, #8
 8003b0a:	189b      	adds	r3, r3, r2
 8003b0c:	19d9      	adds	r1, r3, r7
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	0008      	movs	r0, r1
 8003b14:	f7fe ff80 	bl	8002a18 <get_bit_access>
  // based on the algorithm by David Gay (https://www.ampl.com/netlib/fp/dtoa.c)
  int exp2 = get_exp2(dwba);
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	0010      	movs	r0, r2
 8003b1e:	0019      	movs	r1, r3
 8003b20:	f7fe ffa4 	bl	8002a6c <get_exp2>
 8003b24:	0003      	movs	r3, r0
 8003b26:	627b      	str	r3, [r7, #36]	@ 0x24
  // drop the exponent, so dwba.F comes into the range [1,2)
  dwba.U = (dwba.U & (((double_uint_t) (1) << DOUBLE_STORED_MANTISSA_BITS) - 1U)) |
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	0010      	movs	r0, r2
 8003b30:	4388      	bics	r0, r1
 8003b32:	0004      	movs	r4, r0
 8003b34:	031b      	lsls	r3, r3, #12
 8003b36:	0b1d      	lsrs	r5, r3, #12
 8003b38:	2300      	movs	r3, #0
 8003b3a:	4323      	orrs	r3, r4
 8003b3c:	603b      	str	r3, [r7, #0]
 8003b3e:	4b37      	ldr	r3, [pc, #220]	@ (8003c1c <log10_of_positive+0x120>)
 8003b40:	432b      	orrs	r3, r5
 8003b42:	607b      	str	r3, [r7, #4]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	687c      	ldr	r4, [r7, #4]
 8003b48:	613b      	str	r3, [r7, #16]
 8003b4a:	617c      	str	r4, [r7, #20]
           ((double_uint_t) DOUBLE_BASE_EXPONENT << DOUBLE_STORED_MANTISSA_BITS);
  double z = (dwba.F - 1.5);
 8003b4c:	6938      	ldr	r0, [r7, #16]
 8003b4e:	6979      	ldr	r1, [r7, #20]
 8003b50:	2200      	movs	r2, #0
 8003b52:	4b33      	ldr	r3, [pc, #204]	@ (8003c20 <log10_of_positive+0x124>)
 8003b54:	f7fd ffbe 	bl	8001ad4 <__aeabi_dsub>
 8003b58:	0002      	movs	r2, r0
 8003b5a:	000b      	movs	r3, r1
 8003b5c:	61ba      	str	r2, [r7, #24]
 8003b5e:	61fb      	str	r3, [r7, #28]
  return (
    // Taylor expansion around 1.5:
    0.1760912590556812420           // Expansion term 0: ln(1.5)            / ln(10)
    + z     * 0.2895296546021678851 // Expansion term 1: (M - 1.5)   * 2/3  / ln(10)
 8003b60:	4a30      	ldr	r2, [pc, #192]	@ (8003c24 <log10_of_positive+0x128>)
 8003b62:	4b31      	ldr	r3, [pc, #196]	@ (8003c28 <log10_of_positive+0x12c>)
 8003b64:	69b8      	ldr	r0, [r7, #24]
 8003b66:	69f9      	ldr	r1, [r7, #28]
 8003b68:	f7fd fcec 	bl	8001544 <__aeabi_dmul>
 8003b6c:	0002      	movs	r2, r0
 8003b6e:	000b      	movs	r3, r1
 8003b70:	0010      	movs	r0, r2
 8003b72:	0019      	movs	r1, r3
 8003b74:	4a2d      	ldr	r2, [pc, #180]	@ (8003c2c <log10_of_positive+0x130>)
 8003b76:	4b2e      	ldr	r3, [pc, #184]	@ (8003c30 <log10_of_positive+0x134>)
 8003b78:	f7fc fd3c 	bl	80005f4 <__aeabi_dadd>
 8003b7c:	0002      	movs	r2, r0
 8003b7e:	000b      	movs	r3, r1
 8003b80:	0014      	movs	r4, r2
 8003b82:	001d      	movs	r5, r3
#if PRINTF_LOG10_TAYLOR_TERMS > 2
    - z*z   * 0.0965098848673892950 // Expansion term 2: (M - 1.5)^2 * 2/9  / ln(10)
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	69b8      	ldr	r0, [r7, #24]
 8003b8a:	69f9      	ldr	r1, [r7, #28]
 8003b8c:	f7fd fcda 	bl	8001544 <__aeabi_dmul>
 8003b90:	0002      	movs	r2, r0
 8003b92:	000b      	movs	r3, r1
 8003b94:	0010      	movs	r0, r2
 8003b96:	0019      	movs	r1, r3
 8003b98:	4a26      	ldr	r2, [pc, #152]	@ (8003c34 <log10_of_positive+0x138>)
 8003b9a:	4b27      	ldr	r3, [pc, #156]	@ (8003c38 <log10_of_positive+0x13c>)
 8003b9c:	f7fd fcd2 	bl	8001544 <__aeabi_dmul>
 8003ba0:	0002      	movs	r2, r0
 8003ba2:	000b      	movs	r3, r1
 8003ba4:	0020      	movs	r0, r4
 8003ba6:	0029      	movs	r1, r5
 8003ba8:	f7fd ff94 	bl	8001ad4 <__aeabi_dsub>
 8003bac:	0002      	movs	r2, r0
 8003bae:	000b      	movs	r3, r1
 8003bb0:	0014      	movs	r4, r2
 8003bb2:	001d      	movs	r5, r3
#if PRINTF_LOG10_TAYLOR_TERMS > 3
    + z*z*z * 0.0428932821632841311 // Expansion term 2: (M - 1.5)^3 * 8/81 / ln(10)
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	69b8      	ldr	r0, [r7, #24]
 8003bba:	69f9      	ldr	r1, [r7, #28]
 8003bbc:	f7fd fcc2 	bl	8001544 <__aeabi_dmul>
 8003bc0:	0002      	movs	r2, r0
 8003bc2:	000b      	movs	r3, r1
 8003bc4:	0010      	movs	r0, r2
 8003bc6:	0019      	movs	r1, r3
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	f7fd fcba 	bl	8001544 <__aeabi_dmul>
 8003bd0:	0002      	movs	r2, r0
 8003bd2:	000b      	movs	r3, r1
 8003bd4:	0010      	movs	r0, r2
 8003bd6:	0019      	movs	r1, r3
 8003bd8:	4a18      	ldr	r2, [pc, #96]	@ (8003c3c <log10_of_positive+0x140>)
 8003bda:	4b19      	ldr	r3, [pc, #100]	@ (8003c40 <log10_of_positive+0x144>)
 8003bdc:	f7fd fcb2 	bl	8001544 <__aeabi_dmul>
 8003be0:	0002      	movs	r2, r0
 8003be2:	000b      	movs	r3, r1
 8003be4:	0020      	movs	r0, r4
 8003be6:	0029      	movs	r1, r5
 8003be8:	f7fc fd04 	bl	80005f4 <__aeabi_dadd>
 8003bec:	0002      	movs	r2, r0
 8003bee:	000b      	movs	r3, r1
 8003bf0:	0014      	movs	r4, r2
 8003bf2:	001d      	movs	r5, r3
#endif
#endif
    // exact log_2 of the exponent x, with logarithm base change
    + exp2 * 0.30102999566398119521 // = exp2 * log_10(2) = exp2 * ln(2)/ln(10)
 8003bf4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003bf6:	f7fe fb45 	bl	8002284 <__aeabi_i2d>
 8003bfa:	4a12      	ldr	r2, [pc, #72]	@ (8003c44 <log10_of_positive+0x148>)
 8003bfc:	4b12      	ldr	r3, [pc, #72]	@ (8003c48 <log10_of_positive+0x14c>)
 8003bfe:	f7fd fca1 	bl	8001544 <__aeabi_dmul>
 8003c02:	0002      	movs	r2, r0
 8003c04:	000b      	movs	r3, r1
 8003c06:	0020      	movs	r0, r4
 8003c08:	0029      	movs	r1, r5
 8003c0a:	f7fc fcf3 	bl	80005f4 <__aeabi_dadd>
 8003c0e:	0002      	movs	r2, r0
 8003c10:	000b      	movs	r3, r1
  );
}
 8003c12:	0010      	movs	r0, r2
 8003c14:	0019      	movs	r1, r3
 8003c16:	46bd      	mov	sp, r7
 8003c18:	b00a      	add	sp, #40	@ 0x28
 8003c1a:	bdb0      	pop	{r4, r5, r7, pc}
 8003c1c:	3ff00000 	.word	0x3ff00000
 8003c20:	3ff80000 	.word	0x3ff80000
 8003c24:	636f435f 	.word	0x636f435f
 8003c28:	3fd287a7 	.word	0x3fd287a7
 8003c2c:	8b60b7fc 	.word	0x8b60b7fc
 8003c30:	3fc68a28 	.word	0x3fc68a28
 8003c34:	2f3f047e 	.word	0x2f3f047e
 8003c38:	3fb8b4df 	.word	0x3fb8b4df
 8003c3c:	b83803ff 	.word	0xb83803ff
 8003c40:	3fa5f61b 	.word	0x3fa5f61b
 8003c44:	509f79ff 	.word	0x509f79ff
 8003c48:	3fd34413 	.word	0x3fd34413

08003c4c <pow10_of_int>:


static double pow10_of_int(int floored_exp10)
{
 8003c4c:	b5b0      	push	{r4, r5, r7, lr}
 8003c4e:	b08e      	sub	sp, #56	@ 0x38
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6178      	str	r0, [r7, #20]
  // A crude hack for avoiding undesired behavior with barely-normal or slightly-subnormal values.
  if (floored_exp10 == DOUBLE_MAX_SUBNORMAL_EXPONENT_OF_10) {
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	4a59      	ldr	r2, [pc, #356]	@ (8003dbc <pow10_of_int+0x170>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d102      	bne.n	8003c62 <pow10_of_int+0x16>
    return DOUBLE_MAX_SUBNORMAL_POWER_OF_10;
 8003c5c:	4a58      	ldr	r2, [pc, #352]	@ (8003dc0 <pow10_of_int+0x174>)
 8003c5e:	4b59      	ldr	r3, [pc, #356]	@ (8003dc4 <pow10_of_int+0x178>)
 8003c60:	e0a6      	b.n	8003db0 <pow10_of_int+0x164>
  }
  // Compute 10^(floored_exp10) but (try to) make sure that doesn't overflow
  double_with_bit_access dwba;
  int exp2 = bastardized_floor(floored_exp10 * 3.321928094887362 + 0.5);
 8003c62:	6978      	ldr	r0, [r7, #20]
 8003c64:	f7fe fb0e 	bl	8002284 <__aeabi_i2d>
 8003c68:	4a57      	ldr	r2, [pc, #348]	@ (8003dc8 <pow10_of_int+0x17c>)
 8003c6a:	4b58      	ldr	r3, [pc, #352]	@ (8003dcc <pow10_of_int+0x180>)
 8003c6c:	f7fd fc6a 	bl	8001544 <__aeabi_dmul>
 8003c70:	0002      	movs	r2, r0
 8003c72:	000b      	movs	r3, r1
 8003c74:	0010      	movs	r0, r2
 8003c76:	0019      	movs	r1, r3
 8003c78:	2200      	movs	r2, #0
 8003c7a:	4b55      	ldr	r3, [pc, #340]	@ (8003dd0 <pow10_of_int+0x184>)
 8003c7c:	f7fc fcba 	bl	80005f4 <__aeabi_dadd>
 8003c80:	0002      	movs	r2, r0
 8003c82:	000b      	movs	r3, r1
 8003c84:	0010      	movs	r0, r2
 8003c86:	0019      	movs	r1, r3
 8003c88:	f7ff ff0c 	bl	8003aa4 <bastardized_floor>
 8003c8c:	0003      	movs	r3, r0
 8003c8e:	637b      	str	r3, [r7, #52]	@ 0x34
  const double z  = floored_exp10 * 2.302585092994046 - exp2 * 0.6931471805599453;
 8003c90:	6978      	ldr	r0, [r7, #20]
 8003c92:	f7fe faf7 	bl	8002284 <__aeabi_i2d>
 8003c96:	4a4f      	ldr	r2, [pc, #316]	@ (8003dd4 <pow10_of_int+0x188>)
 8003c98:	4b4f      	ldr	r3, [pc, #316]	@ (8003dd8 <pow10_of_int+0x18c>)
 8003c9a:	f7fd fc53 	bl	8001544 <__aeabi_dmul>
 8003c9e:	0002      	movs	r2, r0
 8003ca0:	000b      	movs	r3, r1
 8003ca2:	603a      	str	r2, [r7, #0]
 8003ca4:	607b      	str	r3, [r7, #4]
 8003ca6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003ca8:	f7fe faec 	bl	8002284 <__aeabi_i2d>
 8003cac:	4a4b      	ldr	r2, [pc, #300]	@ (8003ddc <pow10_of_int+0x190>)
 8003cae:	4b4c      	ldr	r3, [pc, #304]	@ (8003de0 <pow10_of_int+0x194>)
 8003cb0:	f7fd fc48 	bl	8001544 <__aeabi_dmul>
 8003cb4:	0002      	movs	r2, r0
 8003cb6:	000b      	movs	r3, r1
 8003cb8:	6838      	ldr	r0, [r7, #0]
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	f7fd ff0a 	bl	8001ad4 <__aeabi_dsub>
 8003cc0:	0002      	movs	r2, r0
 8003cc2:	000b      	movs	r3, r1
 8003cc4:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const double z2 = z * z;
 8003cc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ccc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003cce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cd0:	f7fd fc38 	bl	8001544 <__aeabi_dmul>
 8003cd4:	0002      	movs	r2, r0
 8003cd6:	000b      	movs	r3, r1
 8003cd8:	623a      	str	r2, [r7, #32]
 8003cda:	627b      	str	r3, [r7, #36]	@ 0x24
  dwba.U = ((double_uint_t)(exp2) + DOUBLE_BASE_EXPONENT) << DOUBLE_STORED_MANTISSA_BITS;
 8003cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cde:	60bb      	str	r3, [r7, #8]
 8003ce0:	17db      	asrs	r3, r3, #31
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	4a3f      	ldr	r2, [pc, #252]	@ (8003de4 <pow10_of_int+0x198>)
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	68b8      	ldr	r0, [r7, #8]
 8003cea:	68f9      	ldr	r1, [r7, #12]
 8003cec:	1880      	adds	r0, r0, r2
 8003cee:	4159      	adcs	r1, r3
 8003cf0:	0002      	movs	r2, r0
 8003cf2:	000b      	movs	r3, r1
 8003cf4:	0515      	lsls	r5, r2, #20
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	001c      	movs	r4, r3
 8003cfa:	61bc      	str	r4, [r7, #24]
 8003cfc:	61fd      	str	r5, [r7, #28]
  // compute exp(z) using continued fractions,
  // see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  dwba.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8003cfe:	69bc      	ldr	r4, [r7, #24]
 8003d00:	69fd      	ldr	r5, [r7, #28]
 8003d02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d06:	0002      	movs	r2, r0
 8003d08:	000b      	movs	r3, r1
 8003d0a:	f7fc fc73 	bl	80005f4 <__aeabi_dadd>
 8003d0e:	0002      	movs	r2, r0
 8003d10:	000b      	movs	r3, r1
 8003d12:	60ba      	str	r2, [r7, #8]
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d1a:	2000      	movs	r0, #0
 8003d1c:	2180      	movs	r1, #128	@ 0x80
 8003d1e:	05c9      	lsls	r1, r1, #23
 8003d20:	f7fd fed8 	bl	8001ad4 <__aeabi_dsub>
 8003d24:	0002      	movs	r2, r0
 8003d26:	000b      	movs	r3, r1
 8003d28:	603a      	str	r2, [r7, #0]
 8003d2a:	607b      	str	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	4b2e      	ldr	r3, [pc, #184]	@ (8003de8 <pow10_of_int+0x19c>)
 8003d30:	6a38      	ldr	r0, [r7, #32]
 8003d32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d34:	f7fc ffc2 	bl	8000cbc <__aeabi_ddiv>
 8003d38:	0002      	movs	r2, r0
 8003d3a:	000b      	movs	r3, r1
 8003d3c:	0010      	movs	r0, r2
 8003d3e:	0019      	movs	r1, r3
 8003d40:	2200      	movs	r2, #0
 8003d42:	4b2a      	ldr	r3, [pc, #168]	@ (8003dec <pow10_of_int+0x1a0>)
 8003d44:	f7fc fc56 	bl	80005f4 <__aeabi_dadd>
 8003d48:	0002      	movs	r2, r0
 8003d4a:	000b      	movs	r3, r1
 8003d4c:	6a38      	ldr	r0, [r7, #32]
 8003d4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d50:	f7fc ffb4 	bl	8000cbc <__aeabi_ddiv>
 8003d54:	0002      	movs	r2, r0
 8003d56:	000b      	movs	r3, r1
 8003d58:	0010      	movs	r0, r2
 8003d5a:	0019      	movs	r1, r3
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	4b24      	ldr	r3, [pc, #144]	@ (8003df0 <pow10_of_int+0x1a4>)
 8003d60:	f7fc fc48 	bl	80005f4 <__aeabi_dadd>
 8003d64:	0002      	movs	r2, r0
 8003d66:	000b      	movs	r3, r1
 8003d68:	6a38      	ldr	r0, [r7, #32]
 8003d6a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d6c:	f7fc ffa6 	bl	8000cbc <__aeabi_ddiv>
 8003d70:	0002      	movs	r2, r0
 8003d72:	000b      	movs	r3, r1
 8003d74:	6838      	ldr	r0, [r7, #0]
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	f7fc fc3c 	bl	80005f4 <__aeabi_dadd>
 8003d7c:	0002      	movs	r2, r0
 8003d7e:	000b      	movs	r3, r1
 8003d80:	68b8      	ldr	r0, [r7, #8]
 8003d82:	68f9      	ldr	r1, [r7, #12]
 8003d84:	f7fc ff9a 	bl	8000cbc <__aeabi_ddiv>
 8003d88:	0002      	movs	r2, r0
 8003d8a:	000b      	movs	r3, r1
 8003d8c:	0010      	movs	r0, r2
 8003d8e:	0019      	movs	r1, r3
 8003d90:	2200      	movs	r2, #0
 8003d92:	4b18      	ldr	r3, [pc, #96]	@ (8003df4 <pow10_of_int+0x1a8>)
 8003d94:	f7fc fc2e 	bl	80005f4 <__aeabi_dadd>
 8003d98:	0002      	movs	r2, r0
 8003d9a:	000b      	movs	r3, r1
 8003d9c:	0020      	movs	r0, r4
 8003d9e:	0029      	movs	r1, r5
 8003da0:	f7fd fbd0 	bl	8001544 <__aeabi_dmul>
 8003da4:	0002      	movs	r2, r0
 8003da6:	000b      	movs	r3, r1
 8003da8:	61ba      	str	r2, [r7, #24]
 8003daa:	61fb      	str	r3, [r7, #28]
  return dwba.F;
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	69fb      	ldr	r3, [r7, #28]
}
 8003db0:	0010      	movs	r0, r2
 8003db2:	0019      	movs	r1, r3
 8003db4:	46bd      	mov	sp, r7
 8003db6:	b00e      	add	sp, #56	@ 0x38
 8003db8:	bdb0      	pop	{r4, r5, r7, pc}
 8003dba:	46c0      	nop			@ (mov r8, r8)
 8003dbc:	fffffecc 	.word	0xfffffecc
 8003dc0:	7819e8d2 	.word	0x7819e8d2
 8003dc4:	000730d6 	.word	0x000730d6
 8003dc8:	0979a371 	.word	0x0979a371
 8003dcc:	400a934f 	.word	0x400a934f
 8003dd0:	3fe00000 	.word	0x3fe00000
 8003dd4:	bbb55516 	.word	0xbbb55516
 8003dd8:	40026bb1 	.word	0x40026bb1
 8003ddc:	fefa39ef 	.word	0xfefa39ef
 8003de0:	3fe62e42 	.word	0x3fe62e42
 8003de4:	000003ff 	.word	0x000003ff
 8003de8:	402c0000 	.word	0x402c0000
 8003dec:	40240000 	.word	0x40240000
 8003df0:	40180000 	.word	0x40180000
 8003df4:	3ff00000 	.word	0x3ff00000

08003df8 <print_exponential_number>:

static void print_exponential_number(output_gadget_t* output, double number, printf_size_t precision, printf_size_t width, printf_flags_t flags, char* buf, printf_size_t len)
{
 8003df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dfa:	b0ad      	sub	sp, #180	@ 0xb4
 8003dfc:	af08      	add	r7, sp, #32
 8003dfe:	6278      	str	r0, [r7, #36]	@ 0x24
 8003e00:	61ba      	str	r2, [r7, #24]
 8003e02:	61fb      	str	r3, [r7, #28]
  const bool negative = get_sign_bit(number);
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	0010      	movs	r0, r2
 8003e0a:	0019      	movs	r1, r3
 8003e0c:	f7fe fe17 	bl	8002a3e <get_sign_bit>
 8003e10:	0002      	movs	r2, r0
 8003e12:	2066      	movs	r0, #102	@ 0x66
 8003e14:	2618      	movs	r6, #24
 8003e16:	1983      	adds	r3, r0, r6
 8003e18:	19db      	adds	r3, r3, r7
 8003e1a:	1e51      	subs	r1, r2, #1
 8003e1c:	418a      	sbcs	r2, r1
 8003e1e:	701a      	strb	r2, [r3, #0]
  // This number will decrease gradually (by factors of 10) as we "extract" the exponent out of it
  double abs_number =  negative ? -number : number;
 8003e20:	1983      	adds	r3, r0, r6
 8003e22:	19db      	adds	r3, r3, r7
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d007      	beq.n	8003e3a <print_exponential_number+0x42>
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	001c      	movs	r4, r3
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	2280      	movs	r2, #128	@ 0x80
 8003e32:	0612      	lsls	r2, r2, #24
 8003e34:	405a      	eors	r2, r3
 8003e36:	0015      	movs	r5, r2
 8003e38:	e001      	b.n	8003e3e <print_exponential_number+0x46>
 8003e3a:	69bc      	ldr	r4, [r7, #24]
 8003e3c:	69fd      	ldr	r5, [r7, #28]
 8003e3e:	673c      	str	r4, [r7, #112]	@ 0x70
 8003e40:	677d      	str	r5, [r7, #116]	@ 0x74
  bool abs_exp10_covered_by_powers_table;
  struct scaling_factor normalization;


  // Determine the decimal exponent
  if (abs_number == 0.0) {
 8003e42:	2200      	movs	r2, #0
 8003e44:	2300      	movs	r3, #0
 8003e46:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003e48:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003e4a:	f7fc f9f9 	bl	8000240 <__aeabi_dcmpeq>
 8003e4e:	1e03      	subs	r3, r0, #0
 8003e50:	d004      	beq.n	8003e5c <print_exponential_number+0x64>
    // TODO: This is a special-case for 0.0 (and -0.0); but proper handling is required for denormals more generally.
    floored_exp10 = 0; // ... and no need to set a normalization factor or check the powers table
 8003e52:	2300      	movs	r3, #0
 8003e54:	228c      	movs	r2, #140	@ 0x8c
 8003e56:	18ba      	adds	r2, r7, r2
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	e068      	b.n	8003f2e <print_exponential_number+0x136>
  }
  else  {
    double exp10 = log10_of_positive(abs_number);
 8003e5c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003e5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e60:	0010      	movs	r0, r2
 8003e62:	0019      	movs	r1, r3
 8003e64:	f7ff fe4a 	bl	8003afc <log10_of_positive>
 8003e68:	0002      	movs	r2, r0
 8003e6a:	000b      	movs	r3, r1
 8003e6c:	66ba      	str	r2, [r7, #104]	@ 0x68
 8003e6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    floored_exp10 = bastardized_floor(exp10);
 8003e70:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003e72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e74:	0010      	movs	r0, r2
 8003e76:	0019      	movs	r1, r3
 8003e78:	f7ff fe14 	bl	8003aa4 <bastardized_floor>
 8003e7c:	0003      	movs	r3, r0
 8003e7e:	258c      	movs	r5, #140	@ 0x8c
 8003e80:	197a      	adds	r2, r7, r5
 8003e82:	6013      	str	r3, [r2, #0]
    double p10 = pow10_of_int(floored_exp10);
 8003e84:	197b      	adds	r3, r7, r5
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	0018      	movs	r0, r3
 8003e8a:	f7ff fedf 	bl	8003c4c <pow10_of_int>
 8003e8e:	0002      	movs	r2, r0
 8003e90:	000b      	movs	r3, r1
 8003e92:	2480      	movs	r4, #128	@ 0x80
 8003e94:	1939      	adds	r1, r7, r4
 8003e96:	600a      	str	r2, [r1, #0]
 8003e98:	604b      	str	r3, [r1, #4]
    // correct for rounding errors
    if (abs_number < p10) {
 8003e9a:	193b      	adds	r3, r7, r4
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8003ea2:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003ea4:	f7fc f9d2 	bl	800024c <__aeabi_dcmplt>
 8003ea8:	1e03      	subs	r3, r0, #0
 8003eaa:	d010      	beq.n	8003ece <print_exponential_number+0xd6>
      floored_exp10--;
 8003eac:	197b      	adds	r3, r7, r5
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	197a      	adds	r2, r7, r5
 8003eb4:	6013      	str	r3, [r2, #0]
      p10 /= 10;
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	4bc9      	ldr	r3, [pc, #804]	@ (80041e0 <print_exponential_number+0x3e8>)
 8003eba:	1939      	adds	r1, r7, r4
 8003ebc:	6808      	ldr	r0, [r1, #0]
 8003ebe:	6849      	ldr	r1, [r1, #4]
 8003ec0:	f7fc fefc 	bl	8000cbc <__aeabi_ddiv>
 8003ec4:	0002      	movs	r2, r0
 8003ec6:	000b      	movs	r3, r1
 8003ec8:	1939      	adds	r1, r7, r4
 8003eca:	600a      	str	r2, [r1, #0]
 8003ecc:	604b      	str	r3, [r1, #4]
    }
    abs_exp10_covered_by_powers_table = PRINTF_ABS(floored_exp10) < PRINTF_MAX_PRECOMPUTED_POWER_OF_10;
 8003ece:	228c      	movs	r2, #140	@ 0x8c
 8003ed0:	18bb      	adds	r3, r7, r2
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3311      	adds	r3, #17
 8003ed6:	db05      	blt.n	8003ee4 <print_exponential_number+0xec>
 8003ed8:	18bb      	adds	r3, r7, r2
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b11      	cmp	r3, #17
 8003ede:	dc01      	bgt.n	8003ee4 <print_exponential_number+0xec>
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	e000      	b.n	8003ee6 <print_exponential_number+0xee>
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2073      	movs	r0, #115	@ 0x73
 8003ee8:	2418      	movs	r4, #24
 8003eea:	1903      	adds	r3, r0, r4
 8003eec:	19db      	adds	r3, r3, r7
 8003eee:	701a      	strb	r2, [r3, #0]
 8003ef0:	781a      	ldrb	r2, [r3, #0]
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	400a      	ands	r2, r1
 8003ef6:	701a      	strb	r2, [r3, #0]
    normalization.raw_factor = abs_exp10_covered_by_powers_table ? powers_of_10[PRINTF_ABS(floored_exp10)] : p10;
 8003ef8:	1903      	adds	r3, r0, r4
 8003efa:	19db      	adds	r3, r3, r7
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00b      	beq.n	8003f1a <print_exponential_number+0x122>
 8003f02:	238c      	movs	r3, #140	@ 0x8c
 8003f04:	18fb      	adds	r3, r7, r3
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	17da      	asrs	r2, r3, #31
 8003f0a:	189b      	adds	r3, r3, r2
 8003f0c:	4053      	eors	r3, r2
 8003f0e:	4ab5      	ldr	r2, [pc, #724]	@ (80041e4 <print_exponential_number+0x3ec>)
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	18d3      	adds	r3, r2, r3
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	e003      	b.n	8003f22 <print_exponential_number+0x12a>
 8003f1a:	2380      	movs	r3, #128	@ 0x80
 8003f1c:	18fb      	adds	r3, r7, r3
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2128      	movs	r1, #40	@ 0x28
 8003f24:	2018      	movs	r0, #24
 8003f26:	1809      	adds	r1, r1, r0
 8003f28:	19c9      	adds	r1, r1, r7
 8003f2a:	600a      	str	r2, [r1, #0]
 8003f2c:	604b      	str	r3, [r1, #4]
  // the decimal part after decimal exponent extraction, and the base-10 exponent part.
  // For both of these, the value of 0 has a special meaning, but not the same one:
  // a 0 exponent-part width means "don't print the exponent"; a 0 decimal-part width
  // means "use as many characters as necessary".

  bool fall_back_to_decimal_only_mode = false;
 8003f2e:	2367      	movs	r3, #103	@ 0x67
 8003f30:	2118      	movs	r1, #24
 8003f32:	185b      	adds	r3, r3, r1
 8003f34:	19db      	adds	r3, r3, r7
 8003f36:	2200      	movs	r2, #0
 8003f38:	701a      	strb	r2, [r3, #0]
  if (flags & FLAGS_ADAPT_EXP) {
 8003f3a:	2398      	movs	r3, #152	@ 0x98
 8003f3c:	185b      	adds	r3, r3, r1
 8003f3e:	19db      	adds	r3, r3, r7
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	2380      	movs	r3, #128	@ 0x80
 8003f44:	015b      	lsls	r3, r3, #5
 8003f46:	4013      	ands	r3, r2
 8003f48:	d04a      	beq.n	8003fe0 <print_exponential_number+0x1e8>
    int required_significant_digits = (precision == 0) ? 1 : (int) precision;
 8003f4a:	2290      	movs	r2, #144	@ 0x90
 8003f4c:	1853      	adds	r3, r2, r1
 8003f4e:	19db      	adds	r3, r3, r7
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <print_exponential_number+0x166>
 8003f56:	1853      	adds	r3, r2, r1
 8003f58:	19db      	adds	r3, r3, r7
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	e000      	b.n	8003f60 <print_exponential_number+0x168>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	667b      	str	r3, [r7, #100]	@ 0x64
    // Should we want to fall-back to "%f" mode, and only print the decimal part?
    fall_back_to_decimal_only_mode = (floored_exp10 >= -4 && floored_exp10 < required_significant_digits);
 8003f62:	228c      	movs	r2, #140	@ 0x8c
 8003f64:	18bb      	adds	r3, r7, r2
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	db06      	blt.n	8003f7a <print_exponential_number+0x182>
 8003f6c:	18bb      	adds	r3, r7, r2
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f72:	429a      	cmp	r2, r3
 8003f74:	da01      	bge.n	8003f7a <print_exponential_number+0x182>
 8003f76:	2201      	movs	r2, #1
 8003f78:	e000      	b.n	8003f7c <print_exponential_number+0x184>
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2067      	movs	r0, #103	@ 0x67
 8003f7e:	2418      	movs	r4, #24
 8003f80:	1903      	adds	r3, r0, r4
 8003f82:	19db      	adds	r3, r3, r7
 8003f84:	701a      	strb	r2, [r3, #0]
 8003f86:	781a      	ldrb	r2, [r3, #0]
 8003f88:	2101      	movs	r1, #1
 8003f8a:	400a      	ands	r2, r1
 8003f8c:	701a      	strb	r2, [r3, #0]
    // Now, let's adjust the precision
    // This also decided how we adjust the precision value - as in "%g" mode,
    // "precision" is the number of _significant digits_, and this is when we "translate"
    // the precision value to an actual number of decimal digits.
    int precision_ = fall_back_to_decimal_only_mode ?
                     (int) precision - 1 - floored_exp10 :
 8003f8e:	1903      	adds	r3, r0, r4
 8003f90:	19db      	adds	r3, r3, r7
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d009      	beq.n	8003fac <print_exponential_number+0x1b4>
 8003f98:	2390      	movs	r3, #144	@ 0x90
 8003f9a:	191b      	adds	r3, r3, r4
 8003f9c:	19db      	adds	r3, r3, r7
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	1e5a      	subs	r2, r3, #1
 8003fa2:	238c      	movs	r3, #140	@ 0x8c
 8003fa4:	18fb      	adds	r3, r7, r3
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	e005      	b.n	8003fb8 <print_exponential_number+0x1c0>
        (int) precision - 1; // the presence of the exponent ensures only one significant digit comes before the decimal point
 8003fac:	2390      	movs	r3, #144	@ 0x90
 8003fae:	2218      	movs	r2, #24
 8003fb0:	189b      	adds	r3, r3, r2
 8003fb2:	19db      	adds	r3, r3, r7
 8003fb4:	681b      	ldr	r3, [r3, #0]
                     (int) precision - 1 - floored_exp10 :
 8003fb6:	3b01      	subs	r3, #1
    int precision_ = fall_back_to_decimal_only_mode ?
 8003fb8:	663b      	str	r3, [r7, #96]	@ 0x60
    precision = (precision_ > 0 ? (unsigned) precision_ : 0U);
 8003fba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	da00      	bge.n	8003fc2 <print_exponential_number+0x1ca>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	2290      	movs	r2, #144	@ 0x90
 8003fc4:	2018      	movs	r0, #24
 8003fc6:	1812      	adds	r2, r2, r0
 8003fc8:	19d2      	adds	r2, r2, r7
 8003fca:	6013      	str	r3, [r2, #0]
    flags |= FLAGS_PRECISION;   // make sure print_broken_up_decimal respects our choice above
 8003fcc:	2198      	movs	r1, #152	@ 0x98
 8003fce:	180b      	adds	r3, r1, r0
 8003fd0:	19db      	adds	r3, r3, r7
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2280      	movs	r2, #128	@ 0x80
 8003fd6:	0112      	lsls	r2, r2, #4
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	180a      	adds	r2, r1, r0
 8003fdc:	19d2      	adds	r2, r2, r7
 8003fde:	6013      	str	r3, [r2, #0]
  }

  normalization.multiply = (floored_exp10 < 0 && abs_exp10_covered_by_powers_table);
 8003fe0:	238c      	movs	r3, #140	@ 0x8c
 8003fe2:	18fb      	adds	r3, r7, r3
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	da08      	bge.n	8003ffc <print_exponential_number+0x204>
 8003fea:	2373      	movs	r3, #115	@ 0x73
 8003fec:	2218      	movs	r2, #24
 8003fee:	189b      	adds	r3, r3, r2
 8003ff0:	19db      	adds	r3, r3, r7
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <print_exponential_number+0x204>
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e000      	b.n	8003ffe <print_exponential_number+0x206>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	1c1a      	adds	r2, r3, #0
 8004000:	2301      	movs	r3, #1
 8004002:	4013      	ands	r3, r2
 8004004:	b2da      	uxtb	r2, r3
 8004006:	2328      	movs	r3, #40	@ 0x28
 8004008:	2118      	movs	r1, #24
 800400a:	185b      	adds	r3, r3, r1
 800400c:	19db      	adds	r3, r3, r7
 800400e:	721a      	strb	r2, [r3, #8]
  bool should_skip_normalization = (fall_back_to_decimal_only_mode || floored_exp10 == 0);
 8004010:	2367      	movs	r3, #103	@ 0x67
 8004012:	185b      	adds	r3, r3, r1
 8004014:	19db      	adds	r3, r3, r7
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d104      	bne.n	8004026 <print_exponential_number+0x22e>
 800401c:	238c      	movs	r3, #140	@ 0x8c
 800401e:	18fb      	adds	r3, r7, r3
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <print_exponential_number+0x232>
 8004026:	2201      	movs	r2, #1
 8004028:	e000      	b.n	800402c <print_exponential_number+0x234>
 800402a:	2200      	movs	r2, #0
 800402c:	2047      	movs	r0, #71	@ 0x47
 800402e:	2418      	movs	r4, #24
 8004030:	1903      	adds	r3, r0, r4
 8004032:	19db      	adds	r3, r3, r7
 8004034:	701a      	strb	r2, [r3, #0]
 8004036:	781a      	ldrb	r2, [r3, #0]
 8004038:	2101      	movs	r1, #1
 800403a:	400a      	ands	r2, r1
 800403c:	701a      	strb	r2, [r3, #0]
  struct double_components decimal_part_components =
    should_skip_normalization ?
    get_components(negative ? -abs_number : abs_number, precision) :
 800403e:	1903      	adds	r3, r0, r4
 8004040:	19db      	adds	r3, r3, r7
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d020      	beq.n	800408a <print_exponential_number+0x292>
 8004048:	2366      	movs	r3, #102	@ 0x66
 800404a:	191b      	adds	r3, r3, r4
 800404c:	19db      	adds	r3, r3, r7
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d007      	beq.n	8004064 <print_exponential_number+0x26c>
 8004054:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004056:	613b      	str	r3, [r7, #16]
 8004058:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800405a:	2280      	movs	r2, #128	@ 0x80
 800405c:	0612      	lsls	r2, r2, #24
 800405e:	405a      	eors	r2, r3
 8004060:	617a      	str	r2, [r7, #20]
 8004062:	e003      	b.n	800406c <print_exponential_number+0x274>
 8004064:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004066:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	617c      	str	r4, [r7, #20]
 800406c:	2310      	movs	r3, #16
 800406e:	2218      	movs	r2, #24
 8004070:	189b      	adds	r3, r3, r2
 8004072:	19d9      	adds	r1, r3, r7
 8004074:	2390      	movs	r3, #144	@ 0x90
 8004076:	189b      	adds	r3, r3, r2
 8004078:	19db      	adds	r3, r3, r7
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	0008      	movs	r0, r1
 8004084:	f7ff f828 	bl	80030d8 <get_components>
 8004088:	e023      	b.n	80040d2 <print_exponential_number+0x2da>
    get_normalized_components(negative, precision, abs_number, normalization, floored_exp10);
 800408a:	2310      	movs	r3, #16
 800408c:	2218      	movs	r2, #24
 800408e:	189b      	adds	r3, r3, r2
 8004090:	19dc      	adds	r4, r3, r7
 8004092:	2390      	movs	r3, #144	@ 0x90
 8004094:	189b      	adds	r3, r3, r2
 8004096:	19db      	adds	r3, r3, r7
 8004098:	681e      	ldr	r6, [r3, #0]
 800409a:	2366      	movs	r3, #102	@ 0x66
 800409c:	189b      	adds	r3, r3, r2
 800409e:	19db      	adds	r3, r3, r7
 80040a0:	781d      	ldrb	r5, [r3, #0]
 80040a2:	238c      	movs	r3, #140	@ 0x8c
 80040a4:	18fb      	adds	r3, r7, r3
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	9306      	str	r3, [sp, #24]
 80040aa:	2328      	movs	r3, #40	@ 0x28
 80040ac:	189b      	adds	r3, r3, r2
 80040ae:	19da      	adds	r2, r3, r7
 80040b0:	2308      	movs	r3, #8
 80040b2:	446b      	add	r3, sp
 80040b4:	0018      	movs	r0, r3
 80040b6:	0011      	movs	r1, r2
 80040b8:	2310      	movs	r3, #16
 80040ba:	001a      	movs	r2, r3
 80040bc:	f004 f964 	bl	8008388 <memcpy>
 80040c0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80040c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040c4:	9200      	str	r2, [sp, #0]
 80040c6:	9301      	str	r3, [sp, #4]
 80040c8:	0032      	movs	r2, r6
 80040ca:	0029      	movs	r1, r5
 80040cc:	0020      	movs	r0, r4
 80040ce:	f7ff fa27 	bl	8003520 <get_normalized_components>

  // Account for roll-over, e.g. rounding from 9.99 to 100.0 - which effects
  // the exponent and may require additional tweaking of the parts
  if (fall_back_to_decimal_only_mode) {
 80040d2:	2367      	movs	r3, #103	@ 0x67
 80040d4:	2418      	movs	r4, #24
 80040d6:	191b      	adds	r3, r3, r4
 80040d8:	19db      	adds	r3, r3, r7
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d02f      	beq.n	8004140 <print_exponential_number+0x348>
    if ((flags & FLAGS_ADAPT_EXP) && floored_exp10 >= -1 && decimal_part_components.integral == powers_of_10[floored_exp10 + 1]) {
 80040e0:	2398      	movs	r3, #152	@ 0x98
 80040e2:	191b      	adds	r3, r3, r4
 80040e4:	19db      	adds	r3, r3, r7
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	2380      	movs	r3, #128	@ 0x80
 80040ea:	015b      	lsls	r3, r3, #5
 80040ec:	4013      	ands	r3, r2
 80040ee:	d046      	beq.n	800417e <print_exponential_number+0x386>
 80040f0:	258c      	movs	r5, #140	@ 0x8c
 80040f2:	197b      	adds	r3, r7, r5
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	3301      	adds	r3, #1
 80040f8:	db41      	blt.n	800417e <print_exponential_number+0x386>
 80040fa:	2310      	movs	r3, #16
 80040fc:	191b      	adds	r3, r3, r4
 80040fe:	19db      	adds	r3, r3, r7
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	0010      	movs	r0, r2
 8004106:	0019      	movs	r1, r3
 8004108:	f7fc f974 	bl	80003f4 <__aeabi_l2d>
 800410c:	197b      	adds	r3, r7, r5
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	3301      	adds	r3, #1
 8004112:	4a34      	ldr	r2, [pc, #208]	@ (80041e4 <print_exponential_number+0x3ec>)
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	18d3      	adds	r3, r2, r3
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f7fc f890 	bl	8000240 <__aeabi_dcmpeq>
 8004120:	1e03      	subs	r3, r0, #0
 8004122:	d02c      	beq.n	800417e <print_exponential_number+0x386>
      floored_exp10++; // Not strictly necessary, since floored_exp10 is no longer really used
 8004124:	197b      	adds	r3, r7, r5
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	3301      	adds	r3, #1
 800412a:	197a      	adds	r2, r7, r5
 800412c:	6013      	str	r3, [r2, #0]
      precision--;
 800412e:	2290      	movs	r2, #144	@ 0x90
 8004130:	1913      	adds	r3, r2, r4
 8004132:	19db      	adds	r3, r3, r7
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3b01      	subs	r3, #1
 8004138:	1912      	adds	r2, r2, r4
 800413a:	19d2      	adds	r2, r2, r7
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	e01e      	b.n	800417e <print_exponential_number+0x386>
      // ... and it should already be the case that decimal_part_components.fractional == 0
    }
    // TODO: What about rollover strictly within the fractional part?
  }
  else {
    if (decimal_part_components.integral >= 10) {
 8004140:	2310      	movs	r3, #16
 8004142:	2218      	movs	r2, #24
 8004144:	189b      	adds	r3, r3, r2
 8004146:	19db      	adds	r3, r3, r7
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	dc02      	bgt.n	8004156 <print_exponential_number+0x35e>
 8004150:	d115      	bne.n	800417e <print_exponential_number+0x386>
 8004152:	2a09      	cmp	r2, #9
 8004154:	d913      	bls.n	800417e <print_exponential_number+0x386>
      floored_exp10++;
 8004156:	228c      	movs	r2, #140	@ 0x8c
 8004158:	18bb      	adds	r3, r7, r2
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	3301      	adds	r3, #1
 800415e:	18ba      	adds	r2, r7, r2
 8004160:	6013      	str	r3, [r2, #0]
      decimal_part_components.integral = 1;
 8004162:	2010      	movs	r0, #16
 8004164:	2418      	movs	r4, #24
 8004166:	1903      	adds	r3, r0, r4
 8004168:	19d9      	adds	r1, r3, r7
 800416a:	2201      	movs	r2, #1
 800416c:	2300      	movs	r3, #0
 800416e:	600a      	str	r2, [r1, #0]
 8004170:	604b      	str	r3, [r1, #4]
      decimal_part_components.fractional = 0;
 8004172:	1903      	adds	r3, r0, r4
 8004174:	19d9      	adds	r1, r3, r7
 8004176:	2200      	movs	r2, #0
 8004178:	2300      	movs	r3, #0
 800417a:	608a      	str	r2, [r1, #8]
 800417c:	60cb      	str	r3, [r1, #12]
    }
  }

  // the floored_exp10 format is "E%+03d" and largest possible floored_exp10 value for a 64-bit double
  // is "307" (for 2^1023), so we set aside 4-5 characters overall
  printf_size_t exp10_part_width = fall_back_to_decimal_only_mode ? 0U : (PRINTF_ABS(floored_exp10) < 100) ? 4U : 5U;
 800417e:	2367      	movs	r3, #103	@ 0x67
 8004180:	2218      	movs	r2, #24
 8004182:	189b      	adds	r3, r3, r2
 8004184:	19db      	adds	r3, r3, r7
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <print_exponential_number+0x398>
 800418c:	2300      	movs	r3, #0
 800418e:	e00b      	b.n	80041a8 <print_exponential_number+0x3b0>
 8004190:	228c      	movs	r2, #140	@ 0x8c
 8004192:	18bb      	adds	r3, r7, r2
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	3363      	adds	r3, #99	@ 0x63
 8004198:	db05      	blt.n	80041a6 <print_exponential_number+0x3ae>
 800419a:	18bb      	adds	r3, r7, r2
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b63      	cmp	r3, #99	@ 0x63
 80041a0:	dc01      	bgt.n	80041a6 <print_exponential_number+0x3ae>
 80041a2:	2304      	movs	r3, #4
 80041a4:	e000      	b.n	80041a8 <print_exponential_number+0x3b0>
 80041a6:	2305      	movs	r3, #5
 80041a8:	65bb      	str	r3, [r7, #88]	@ 0x58

  printf_size_t decimal_part_width =
    ((flags & FLAGS_LEFT) && exp10_part_width) ?
 80041aa:	2398      	movs	r3, #152	@ 0x98
 80041ac:	2218      	movs	r2, #24
 80041ae:	189b      	adds	r3, r3, r2
 80041b0:	19db      	adds	r3, r3, r7
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2202      	movs	r2, #2
 80041b6:	4013      	ands	r3, r2
      // We're padding on the right, so the width constraint is the exponent part's
      // problem, not the decimal part's, so we'll use as many characters as we need:
      0U :
 80041b8:	d002      	beq.n	80041c0 <print_exponential_number+0x3c8>
    ((flags & FLAGS_LEFT) && exp10_part_width) ?
 80041ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d113      	bne.n	80041e8 <print_exponential_number+0x3f0>
      // We're padding on the left; so the width constraint is the decimal part's
      // problem. Well, can both the decimal part and the exponent part fit within our overall width?
      ((width > exp10_part_width) ?
        // Yes, so we limit our decimal part's width.
        // (Note this is trivially valid even if we've fallen back to "%f" mode)
        width - exp10_part_width :
 80041c0:	2194      	movs	r1, #148	@ 0x94
 80041c2:	2018      	movs	r0, #24
 80041c4:	180b      	adds	r3, r1, r0
 80041c6:	19db      	adds	r3, r3, r7
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d905      	bls.n	80041dc <print_exponential_number+0x3e4>
 80041d0:	180b      	adds	r3, r1, r0
 80041d2:	19db      	adds	r3, r3, r7
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041d8:	1ad3      	subs	r3, r2, r3
      0U :
 80041da:	e006      	b.n	80041ea <print_exponential_number+0x3f2>
        width - exp10_part_width :
 80041dc:	2300      	movs	r3, #0
      0U :
 80041de:	e004      	b.n	80041ea <print_exponential_number+0x3f2>
 80041e0:	40240000 	.word	0x40240000
 80041e4:	08008448 	.word	0x08008448
 80041e8:	2300      	movs	r3, #0
  printf_size_t decimal_part_width =
 80041ea:	657b      	str	r3, [r7, #84]	@ 0x54
        // No; we just give up on any restriction on the decimal part and use as many
        // characters as we need
        0U);

  const printf_size_t printed_exponential_start_pos = output->pos;
 80041ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	653b      	str	r3, [r7, #80]	@ 0x50
  print_broken_up_decimal(decimal_part_components, output, precision, decimal_part_width, flags, buf, len);
 80041f2:	2310      	movs	r3, #16
 80041f4:	2618      	movs	r6, #24
 80041f6:	199b      	adds	r3, r3, r6
 80041f8:	19dc      	adds	r4, r3, r7
 80041fa:	23a0      	movs	r3, #160	@ 0xa0
 80041fc:	199b      	adds	r3, r3, r6
 80041fe:	19db      	adds	r3, r3, r7
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	9307      	str	r3, [sp, #28]
 8004204:	239c      	movs	r3, #156	@ 0x9c
 8004206:	199b      	adds	r3, r3, r6
 8004208:	19db      	adds	r3, r3, r7
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	9306      	str	r3, [sp, #24]
 800420e:	2598      	movs	r5, #152	@ 0x98
 8004210:	19ab      	adds	r3, r5, r6
 8004212:	19db      	adds	r3, r3, r7
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	9305      	str	r3, [sp, #20]
 8004218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800421a:	9304      	str	r3, [sp, #16]
 800421c:	2390      	movs	r3, #144	@ 0x90
 800421e:	199b      	adds	r3, r3, r6
 8004220:	19db      	adds	r3, r3, r7
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	9303      	str	r3, [sp, #12]
 8004226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004228:	9302      	str	r3, [sp, #8]
 800422a:	466b      	mov	r3, sp
 800422c:	0018      	movs	r0, r3
 800422e:	0023      	movs	r3, r4
 8004230:	3310      	adds	r3, #16
 8004232:	2208      	movs	r2, #8
 8004234:	0019      	movs	r1, r3
 8004236:	f004 f8a7 	bl	8008388 <memcpy>
 800423a:	6820      	ldr	r0, [r4, #0]
 800423c:	6861      	ldr	r1, [r4, #4]
 800423e:	68a2      	ldr	r2, [r4, #8]
 8004240:	68e3      	ldr	r3, [r4, #12]
 8004242:	f7ff fad3 	bl	80037ec <print_broken_up_decimal>

  if (! fall_back_to_decimal_only_mode) {
 8004246:	2367      	movs	r3, #103	@ 0x67
 8004248:	199b      	adds	r3, r3, r6
 800424a:	19db      	adds	r3, r3, r7
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	2201      	movs	r2, #1
 8004250:	4053      	eors	r3, r2
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d054      	beq.n	8004302 <print_exponential_number+0x50a>
    putchar_via_gadget(output, (flags & FLAGS_UPPERCASE) ? 'E' : 'e');
 8004258:	19ab      	adds	r3, r5, r6
 800425a:	19db      	adds	r3, r3, r7
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2220      	movs	r2, #32
 8004260:	4013      	ands	r3, r2
 8004262:	d001      	beq.n	8004268 <print_exponential_number+0x470>
 8004264:	2345      	movs	r3, #69	@ 0x45
 8004266:	e000      	b.n	800426a <print_exponential_number+0x472>
 8004268:	2365      	movs	r3, #101	@ 0x65
 800426a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800426c:	0019      	movs	r1, r3
 800426e:	0010      	movs	r0, r2
 8004270:	f7fe fc12 	bl	8002a98 <putchar_via_gadget>
    print_integer(output,
 8004274:	228c      	movs	r2, #140	@ 0x8c
 8004276:	18bb      	adds	r3, r7, r2
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	dd05      	ble.n	800428a <print_exponential_number+0x492>
 800427e:	18bb      	adds	r3, r7, r2
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	60bb      	str	r3, [r7, #8]
 8004284:	17db      	asrs	r3, r3, #31
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	e00d      	b.n	80042a6 <print_exponential_number+0x4ae>
                  ABS_FOR_PRINTING(floored_exp10),
 800428a:	238c      	movs	r3, #140	@ 0x8c
 800428c:	18fb      	adds	r3, r7, r3
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	603b      	str	r3, [r7, #0]
 8004292:	17db      	asrs	r3, r3, #31
 8004294:	607b      	str	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	2300      	movs	r3, #0
 800429a:	6838      	ldr	r0, [r7, #0]
 800429c:	6879      	ldr	r1, [r7, #4]
 800429e:	1a12      	subs	r2, r2, r0
 80042a0:	418b      	sbcs	r3, r1
    print_integer(output,
 80042a2:	60ba      	str	r2, [r7, #8]
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	238c      	movs	r3, #140	@ 0x8c
 80042a8:	18fb      	adds	r3, r7, r3
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	0fdb      	lsrs	r3, r3, #31
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80042b2:	3a01      	subs	r2, #1
 80042b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042b6:	2005      	movs	r0, #5
 80042b8:	9004      	str	r0, [sp, #16]
 80042ba:	9203      	str	r2, [sp, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	9202      	str	r2, [sp, #8]
 80042c0:	220a      	movs	r2, #10
 80042c2:	9201      	str	r2, [sp, #4]
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	0008      	movs	r0, r1
 80042cc:	f7fe fe56 	bl	8002f7c <print_integer>
                  floored_exp10 < 0, 10, 0, exp10_part_width - 1,
                FLAGS_ZEROPAD | FLAGS_PLUS);
    if (flags & FLAGS_LEFT) {
 80042d0:	2398      	movs	r3, #152	@ 0x98
 80042d2:	2218      	movs	r2, #24
 80042d4:	189b      	adds	r3, r3, r2
 80042d6:	19db      	adds	r3, r3, r7
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2202      	movs	r2, #2
 80042dc:	4013      	ands	r3, r2
 80042de:	d010      	beq.n	8004302 <print_exponential_number+0x50a>
      // We need to right-pad with spaces to meet the width requirement
      while (output->pos - printed_exponential_start_pos < width) {
 80042e0:	e004      	b.n	80042ec <print_exponential_number+0x4f4>
        putchar_via_gadget(output, ' ');
 80042e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e4:	2120      	movs	r1, #32
 80042e6:	0018      	movs	r0, r3
 80042e8:	f7fe fbd6 	bl	8002a98 <putchar_via_gadget>
      while (output->pos - printed_exponential_start_pos < width) {
 80042ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ee:	68da      	ldr	r2, [r3, #12]
 80042f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2294      	movs	r2, #148	@ 0x94
 80042f6:	2118      	movs	r1, #24
 80042f8:	1852      	adds	r2, r2, r1
 80042fa:	19d2      	adds	r2, r2, r7
 80042fc:	6812      	ldr	r2, [r2, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d8ef      	bhi.n	80042e2 <print_exponential_number+0x4ea>
      }
    }
  }
}
 8004302:	46c0      	nop			@ (mov r8, r8)
 8004304:	46bd      	mov	sp, r7
 8004306:	b025      	add	sp, #148	@ 0x94
 8004308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800430a:	46c0      	nop			@ (mov r8, r8)

0800430c <print_floating_point>:
#endif  // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS

static void print_floating_point(output_gadget_t* output, double value, printf_size_t precision, printf_size_t width, printf_flags_t flags, bool prefer_exponential)
{
 800430c:	b590      	push	{r4, r7, lr}
 800430e:	b095      	sub	sp, #84	@ 0x54
 8004310:	af06      	add	r7, sp, #24
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	603a      	str	r2, [r7, #0]
 8004316:	607b      	str	r3, [r7, #4]
  char buf[PRINTF_DECIMAL_BUFFER_SIZE];
  printf_size_t len = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	637b      	str	r3, [r7, #52]	@ 0x34

  // test for special values
  if (value != value) {
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6838      	ldr	r0, [r7, #0]
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	f7fb ff8c 	bl	8000240 <__aeabi_dcmpeq>
 8004328:	1e03      	subs	r3, r0, #0
 800432a:	d109      	bne.n	8004340 <print_floating_point+0x34>
    out_rev_(output, "nan", 3, width, flags);
 800432c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800432e:	4952      	ldr	r1, [pc, #328]	@ (8004478 <print_floating_point+0x16c>)
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	0013      	movs	r3, r2
 8004338:	2203      	movs	r2, #3
 800433a:	f7fe fce2 	bl	8002d02 <out_rev_>
    return;
 800433e:	e098      	b.n	8004472 <print_floating_point+0x166>
  }
  if (value < -DBL_MAX) {
 8004340:	2201      	movs	r2, #1
 8004342:	4252      	negs	r2, r2
 8004344:	4b4d      	ldr	r3, [pc, #308]	@ (800447c <print_floating_point+0x170>)
 8004346:	6838      	ldr	r0, [r7, #0]
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	f7fb ff7f 	bl	800024c <__aeabi_dcmplt>
 800434e:	1e03      	subs	r3, r0, #0
 8004350:	d009      	beq.n	8004366 <print_floating_point+0x5a>
    out_rev_(output, "fni-", 4, width, flags);
 8004352:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004354:	494a      	ldr	r1, [pc, #296]	@ (8004480 <print_floating_point+0x174>)
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	0013      	movs	r3, r2
 800435e:	2204      	movs	r2, #4
 8004360:	f7fe fccf 	bl	8002d02 <out_rev_>
    return;
 8004364:	e085      	b.n	8004472 <print_floating_point+0x166>
  }
  if (value > DBL_MAX) {
 8004366:	2201      	movs	r2, #1
 8004368:	4252      	negs	r2, r2
 800436a:	4b46      	ldr	r3, [pc, #280]	@ (8004484 <print_floating_point+0x178>)
 800436c:	6838      	ldr	r0, [r7, #0]
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	f7fb ff80 	bl	8000274 <__aeabi_dcmpgt>
 8004374:	1e03      	subs	r3, r0, #0
 8004376:	d015      	beq.n	80043a4 <print_floating_point+0x98>
    out_rev_(output, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8004378:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800437a:	2204      	movs	r2, #4
 800437c:	4013      	ands	r3, r2
 800437e:	d001      	beq.n	8004384 <print_floating_point+0x78>
 8004380:	4941      	ldr	r1, [pc, #260]	@ (8004488 <print_floating_point+0x17c>)
 8004382:	e000      	b.n	8004386 <print_floating_point+0x7a>
 8004384:	4941      	ldr	r1, [pc, #260]	@ (800448c <print_floating_point+0x180>)
 8004386:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004388:	2204      	movs	r2, #4
 800438a:	4013      	ands	r3, r2
 800438c:	d001      	beq.n	8004392 <print_floating_point+0x86>
 800438e:	2204      	movs	r2, #4
 8004390:	e000      	b.n	8004394 <print_floating_point+0x88>
 8004392:	2203      	movs	r2, #3
 8004394:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	0023      	movs	r3, r4
 800439e:	f7fe fcb0 	bl	8002d02 <out_rev_>
    return;
 80043a2:	e066      	b.n	8004472 <print_floating_point+0x166>
  }

  if (!prefer_exponential &&
 80043a4:	2354      	movs	r3, #84	@ 0x54
 80043a6:	18fb      	adds	r3, r7, r3
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	2201      	movs	r2, #1
 80043ac:	4053      	eors	r3, r2
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d020      	beq.n	80043f6 <print_floating_point+0xea>
 80043b4:	2200      	movs	r2, #0
 80043b6:	4b36      	ldr	r3, [pc, #216]	@ (8004490 <print_floating_point+0x184>)
 80043b8:	6838      	ldr	r0, [r7, #0]
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	f7fb ff5a 	bl	8000274 <__aeabi_dcmpgt>
 80043c0:	1e03      	subs	r3, r0, #0
 80043c2:	d107      	bne.n	80043d4 <print_floating_point+0xc8>
      ((value > PRINTF_FLOAT_NOTATION_THRESHOLD) || (value < -PRINTF_FLOAT_NOTATION_THRESHOLD))) {
 80043c4:	2200      	movs	r2, #0
 80043c6:	4b33      	ldr	r3, [pc, #204]	@ (8004494 <print_floating_point+0x188>)
 80043c8:	6838      	ldr	r0, [r7, #0]
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	f7fb ff3e 	bl	800024c <__aeabi_dcmplt>
 80043d0:	1e03      	subs	r3, r0, #0
 80043d2:	d010      	beq.n	80043f6 <print_floating_point+0xea>
    // The required behavior of standard printf is to print _every_ integral-part digit -- which could mean
    // printing hundreds of characters, overflowing any fixed internal buffer and necessitating a more complicated
    // implementation.
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
    print_exponential_number(output, value, precision, width, flags, buf, len);
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80043dc:	9104      	str	r1, [sp, #16]
 80043de:	2114      	movs	r1, #20
 80043e0:	1879      	adds	r1, r7, r1
 80043e2:	9103      	str	r1, [sp, #12]
 80043e4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80043e6:	9102      	str	r1, [sp, #8]
 80043e8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80043ea:	9101      	str	r1, [sp, #4]
 80043ec:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80043ee:	9100      	str	r1, [sp, #0]
 80043f0:	f7ff fd02 	bl	8003df8 <print_exponential_number>
#endif
    return;
 80043f4:	e03d      	b.n	8004472 <print_floating_point+0x166>
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 80043f6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80043f8:	2380      	movs	r3, #128	@ 0x80
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	4013      	ands	r3, r2
 80043fe:	d10c      	bne.n	800441a <print_floating_point+0x10e>
    precision = PRINTF_DEFAULT_FLOAT_PRECISION;
 8004400:	2306      	movs	r3, #6
 8004402:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  // limit precision so that our integer holding the fractional part does not overflow
  while ((len < PRINTF_DECIMAL_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
 8004404:	e009      	b.n	800441a <print_floating_point+0x10e>
    buf[len++] = '0'; // This respects the precision in terms of result length only
 8004406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004408:	1c5a      	adds	r2, r3, #1
 800440a:	637a      	str	r2, [r7, #52]	@ 0x34
 800440c:	2214      	movs	r2, #20
 800440e:	18ba      	adds	r2, r7, r2
 8004410:	2130      	movs	r1, #48	@ 0x30
 8004412:	54d1      	strb	r1, [r2, r3]
    precision--;
 8004414:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004416:	3b01      	subs	r3, #1
 8004418:	64bb      	str	r3, [r7, #72]	@ 0x48
  while ((len < PRINTF_DECIMAL_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
 800441a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800441c:	2b1f      	cmp	r3, #31
 800441e:	d802      	bhi.n	8004426 <print_floating_point+0x11a>
 8004420:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004422:	2b11      	cmp	r3, #17
 8004424:	d8ef      	bhi.n	8004406 <print_floating_point+0xfa>
  }

#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
  if (prefer_exponential)
 8004426:	2354      	movs	r3, #84	@ 0x54
 8004428:	18fb      	adds	r3, r7, r3
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d010      	beq.n	8004452 <print_floating_point+0x146>
    print_exponential_number(output, value, precision, width, flags, buf, len);
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004438:	9104      	str	r1, [sp, #16]
 800443a:	2114      	movs	r1, #20
 800443c:	1879      	adds	r1, r7, r1
 800443e:	9103      	str	r1, [sp, #12]
 8004440:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004442:	9102      	str	r1, [sp, #8]
 8004444:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004446:	9101      	str	r1, [sp, #4]
 8004448:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800444a:	9100      	str	r1, [sp, #0]
 800444c:	f7ff fcd4 	bl	8003df8 <print_exponential_number>
 8004450:	e00f      	b.n	8004472 <print_floating_point+0x166>
  else
#endif
    print_decimal_number(output, value, precision, width, flags, buf, len);
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800445a:	9104      	str	r1, [sp, #16]
 800445c:	2114      	movs	r1, #20
 800445e:	1879      	adds	r1, r7, r1
 8004460:	9103      	str	r1, [sp, #12]
 8004462:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004464:	9102      	str	r1, [sp, #8]
 8004466:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004468:	9101      	str	r1, [sp, #4]
 800446a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800446c:	9100      	str	r1, [sp, #0]
 800446e:	f7ff faec 	bl	8003a4a <print_decimal_number>
}
 8004472:	46bd      	mov	sp, r7
 8004474:	b00f      	add	sp, #60	@ 0x3c
 8004476:	bd90      	pop	{r4, r7, pc}
 8004478:	080083e0 	.word	0x080083e0
 800447c:	ffefffff 	.word	0xffefffff
 8004480:	080083e4 	.word	0x080083e4
 8004484:	7fefffff 	.word	0x7fefffff
 8004488:	080083ec 	.word	0x080083ec
 800448c:	080083f4 	.word	0x080083f4
 8004490:	41cdcd65 	.word	0x41cdcd65
 8004494:	c1cdcd65 	.word	0xc1cdcd65

08004498 <parse_flags>:
#endif  // (PRINTF_SUPPORT_DECIMAL_SPECIFIERS || PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS)

// Advances the format pointer past the flags, and returns the parsed flags
// due to the characters passed
static printf_flags_t parse_flags(const char** format)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  printf_flags_t flags = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	60fb      	str	r3, [r7, #12]
  do {
    switch (**format) {
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	3b20      	subs	r3, #32
 80044ac:	2b10      	cmp	r3, #16
 80044ae:	d836      	bhi.n	800451e <parse_flags+0x86>
 80044b0:	009a      	lsls	r2, r3, #2
 80044b2:	4b1e      	ldr	r3, [pc, #120]	@ (800452c <parse_flags+0x94>)
 80044b4:	18d3      	adds	r3, r2, r3
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	469f      	mov	pc, r3
      case '0': flags |= FLAGS_ZEROPAD; (*format)++; break;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2201      	movs	r2, #1
 80044be:	4313      	orrs	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	1c5a      	adds	r2, r3, #1
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	e029      	b.n	8004522 <parse_flags+0x8a>
      case '-': flags |= FLAGS_LEFT;    (*format)++; break;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2202      	movs	r2, #2
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	1c5a      	adds	r2, r3, #1
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	601a      	str	r2, [r3, #0]
 80044e0:	e01f      	b.n	8004522 <parse_flags+0x8a>
      case '+': flags |= FLAGS_PLUS;    (*format)++; break;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2204      	movs	r2, #4
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	e015      	b.n	8004522 <parse_flags+0x8a>
      case ' ': flags |= FLAGS_SPACE;   (*format)++; break;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2208      	movs	r2, #8
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	e00b      	b.n	8004522 <parse_flags+0x8a>
      case '#': flags |= FLAGS_HASH;    (*format)++; break;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2210      	movs	r2, #16
 800450e:	4313      	orrs	r3, r2
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	e001      	b.n	8004522 <parse_flags+0x8a>
      default : return flags;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	e000      	b.n	8004524 <parse_flags+0x8c>
    switch (**format) {
 8004522:	e7bf      	b.n	80044a4 <parse_flags+0xc>
    }
  } while (true);
}
 8004524:	0018      	movs	r0, r3
 8004526:	46bd      	mov	sp, r7
 8004528:	b004      	add	sp, #16
 800452a:	bd80      	pop	{r7, pc}
 800452c:	080084d8 	.word	0x080084d8

08004530 <format_string_loop>:

static inline void format_string_loop(output_gadget_t* output, const char* format, va_list args)
{
 8004530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004532:	b0ab      	sub	sp, #172	@ 0xac
 8004534:	af06      	add	r7, sp, #24
 8004536:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8004538:	64b9      	str	r1, [r7, #72]	@ 0x48
 800453a:	647a      	str	r2, [r7, #68]	@ 0x44
#else
#define ADVANCE_IN_FORMAT_STRING(cptr_) (cptr_)++
#endif


  while (*format)
 800453c:	f000 fdaa 	bl	8005094 <format_string_loop+0xb64>
  {
    if (*format != '%') {
 8004540:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b25      	cmp	r3, #37	@ 0x25
 8004546:	d00b      	beq.n	8004560 <format_string_loop+0x30>
      // A regular content character
      putchar_via_gadget(output, *format);
 8004548:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800454a:	781a      	ldrb	r2, [r3, #0]
 800454c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800454e:	0011      	movs	r1, r2
 8004550:	0018      	movs	r0, r3
 8004552:	f7fe faa1 	bl	8002a98 <putchar_via_gadget>
      format++;
 8004556:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004558:	3301      	adds	r3, #1
 800455a:	64bb      	str	r3, [r7, #72]	@ 0x48
      continue;
 800455c:	f000 fd9a 	bl	8005094 <format_string_loop+0xb64>
    }
    // We're parsing a format specifier: %[flags][width][.precision][length]
    ADVANCE_IN_FORMAT_STRING(format);
 8004560:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004562:	3301      	adds	r3, #1
 8004564:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004566:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <format_string_loop+0x42>
 800456e:	f000 fd97 	bl	80050a0 <format_string_loop+0xb70>

    printf_flags_t flags = parse_flags(&format);
 8004572:	2408      	movs	r4, #8
 8004574:	2338      	movs	r3, #56	@ 0x38
 8004576:	001e      	movs	r6, r3
 8004578:	18e2      	adds	r2, r4, r3
 800457a:	2308      	movs	r3, #8
 800457c:	18fb      	adds	r3, r7, r3
 800457e:	18d3      	adds	r3, r2, r3
 8004580:	0018      	movs	r0, r3
 8004582:	f7ff ff89 	bl	8004498 <parse_flags>
 8004586:	0003      	movs	r3, r0
 8004588:	2284      	movs	r2, #132	@ 0x84
 800458a:	2108      	movs	r1, #8
 800458c:	1852      	adds	r2, r2, r1
 800458e:	19d2      	adds	r2, r2, r7
 8004590:	6013      	str	r3, [r2, #0]

    // evaluate width field
    printf_size_t width = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	2280      	movs	r2, #128	@ 0x80
 8004596:	0015      	movs	r5, r2
 8004598:	2108      	movs	r1, #8
 800459a:	1852      	adds	r2, r2, r1
 800459c:	19d1      	adds	r1, r2, r7
 800459e:	600b      	str	r3, [r1, #0]
    if (is_digit_(*format)) {
 80045a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	0018      	movs	r0, r3
 80045a6:	f7fe fb70 	bl	8002c8a <is_digit_>
 80045aa:	1e03      	subs	r3, r0, #0
 80045ac:	d00f      	beq.n	80045ce <format_string_loop+0x9e>
      width = (printf_size_t) atou_(&format);
 80045ae:	0033      	movs	r3, r6
 80045b0:	18e3      	adds	r3, r4, r3
 80045b2:	2208      	movs	r2, #8
 80045b4:	4694      	mov	ip, r2
 80045b6:	44bc      	add	ip, r7
 80045b8:	4463      	add	r3, ip
 80045ba:	0018      	movs	r0, r3
 80045bc:	f7fe fb7e 	bl	8002cbc <atou_>
 80045c0:	0003      	movs	r3, r0
 80045c2:	002a      	movs	r2, r5
 80045c4:	2108      	movs	r1, #8
 80045c6:	1852      	adds	r2, r2, r1
 80045c8:	19d2      	adds	r2, r2, r7
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	e02d      	b.n	800462a <format_string_loop+0xfa>
    }
    else if (*format == '*') {
 80045ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80045d4:	d129      	bne.n	800462a <format_string_loop+0xfa>
      const int w = va_arg(args, int);
 80045d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045d8:	1d13      	adds	r3, r2, #4
 80045da:	647b      	str	r3, [r7, #68]	@ 0x44
 80045dc:	6813      	ldr	r3, [r2, #0]
 80045de:	673b      	str	r3, [r7, #112]	@ 0x70
      if (w < 0) {
 80045e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	da12      	bge.n	800460c <format_string_loop+0xdc>
        flags |= FLAGS_LEFT;    // reverse padding
 80045e6:	2184      	movs	r1, #132	@ 0x84
 80045e8:	2308      	movs	r3, #8
 80045ea:	18cb      	adds	r3, r1, r3
 80045ec:	19db      	adds	r3, r3, r7
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	2302      	movs	r3, #2
 80045f2:	4313      	orrs	r3, r2
 80045f4:	2208      	movs	r2, #8
 80045f6:	188a      	adds	r2, r1, r2
 80045f8:	19d2      	adds	r2, r2, r7
 80045fa:	6013      	str	r3, [r2, #0]
        width = (printf_size_t)-w;
 80045fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045fe:	425b      	negs	r3, r3
 8004600:	2280      	movs	r2, #128	@ 0x80
 8004602:	2108      	movs	r1, #8
 8004604:	1852      	adds	r2, r2, r1
 8004606:	19d2      	adds	r2, r2, r7
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	e005      	b.n	8004618 <format_string_loop+0xe8>
      }
      else {
        width = (printf_size_t)w;
 800460c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800460e:	2280      	movs	r2, #128	@ 0x80
 8004610:	2108      	movs	r1, #8
 8004612:	1852      	adds	r2, r2, r1
 8004614:	19d2      	adds	r2, r2, r7
 8004616:	6013      	str	r3, [r2, #0]
      }
      ADVANCE_IN_FORMAT_STRING(format);
 8004618:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800461a:	3301      	adds	r3, #1
 800461c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800461e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <format_string_loop+0xfa>
 8004626:	f000 fd3b 	bl	80050a0 <format_string_loop+0xb70>
    }

    // evaluate precision field
    printf_size_t precision = 0U;
 800462a:	2300      	movs	r3, #0
 800462c:	2284      	movs	r2, #132	@ 0x84
 800462e:	18ba      	adds	r2, r7, r2
 8004630:	6013      	str	r3, [r2, #0]
    if (*format == '.') {
 8004632:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b2e      	cmp	r3, #46	@ 0x2e
 8004638:	d143      	bne.n	80046c2 <format_string_loop+0x192>
      flags |= FLAGS_PRECISION;
 800463a:	2184      	movs	r1, #132	@ 0x84
 800463c:	2308      	movs	r3, #8
 800463e:	18cb      	adds	r3, r1, r3
 8004640:	19db      	adds	r3, r3, r7
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	2380      	movs	r3, #128	@ 0x80
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	4313      	orrs	r3, r2
 800464a:	2208      	movs	r2, #8
 800464c:	188a      	adds	r2, r1, r2
 800464e:	19d2      	adds	r2, r2, r7
 8004650:	6013      	str	r3, [r2, #0]
      ADVANCE_IN_FORMAT_STRING(format);
 8004652:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004654:	3301      	adds	r3, #1
 8004656:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004658:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <format_string_loop+0x134>
 8004660:	f000 fd1e 	bl	80050a0 <format_string_loop+0xb70>
      if (is_digit_(*format)) {
 8004664:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	0018      	movs	r0, r3
 800466a:	f7fe fb0e 	bl	8002c8a <is_digit_>
 800466e:	1e03      	subs	r3, r0, #0
 8004670:	d00e      	beq.n	8004690 <format_string_loop+0x160>
        precision = (printf_size_t) atou_(&format);
 8004672:	2308      	movs	r3, #8
 8004674:	2238      	movs	r2, #56	@ 0x38
 8004676:	189b      	adds	r3, r3, r2
 8004678:	2208      	movs	r2, #8
 800467a:	4694      	mov	ip, r2
 800467c:	44bc      	add	ip, r7
 800467e:	4463      	add	r3, ip
 8004680:	0018      	movs	r0, r3
 8004682:	f7fe fb1b 	bl	8002cbc <atou_>
 8004686:	0003      	movs	r3, r0
 8004688:	2284      	movs	r2, #132	@ 0x84
 800468a:	18ba      	adds	r2, r7, r2
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	e018      	b.n	80046c2 <format_string_loop+0x192>
      }
      else if (*format == '*') {
 8004690:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	2b2a      	cmp	r3, #42	@ 0x2a
 8004696:	d114      	bne.n	80046c2 <format_string_loop+0x192>
        const int precision_ = va_arg(args, int);
 8004698:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800469a:	1d13      	adds	r3, r2, #4
 800469c:	647b      	str	r3, [r7, #68]	@ 0x44
 800469e:	6813      	ldr	r3, [r2, #0]
 80046a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
        precision = precision_ > 0 ? (printf_size_t) precision_ : 0U;
 80046a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	da00      	bge.n	80046aa <format_string_loop+0x17a>
 80046a8:	2300      	movs	r3, #0
 80046aa:	2284      	movs	r2, #132	@ 0x84
 80046ac:	18ba      	adds	r2, r7, r2
 80046ae:	6013      	str	r3, [r2, #0]
        ADVANCE_IN_FORMAT_STRING(format);
 80046b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046b2:	3301      	adds	r3, #1
 80046b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <format_string_loop+0x192>
 80046be:	f000 fcef 	bl	80050a0 <format_string_loop+0xb70>
      }
    }

    // evaluate length field
    switch (*format) {
 80046c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	3b68      	subs	r3, #104	@ 0x68
 80046c8:	2b12      	cmp	r3, #18
 80046ca:	d900      	bls.n	80046ce <format_string_loop+0x19e>
 80046cc:	e0a1      	b.n	8004812 <format_string_loop+0x2e2>
 80046ce:	009a      	lsls	r2, r3, #2
 80046d0:	4be1      	ldr	r3, [pc, #900]	@ (8004a58 <format_string_loop+0x528>)
 80046d2:	18d3      	adds	r3, r2, r3
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	469f      	mov	pc, r3
        }
        break;
      }
#endif
      case 'l' :
        flags |= FLAGS_LONG;
 80046d8:	2184      	movs	r1, #132	@ 0x84
 80046da:	2308      	movs	r3, #8
 80046dc:	18cb      	adds	r3, r1, r3
 80046de:	19db      	adds	r3, r3, r7
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	2380      	movs	r3, #128	@ 0x80
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4313      	orrs	r3, r2
 80046e8:	000a      	movs	r2, r1
 80046ea:	2108      	movs	r1, #8
 80046ec:	1851      	adds	r1, r2, r1
 80046ee:	19c9      	adds	r1, r1, r7
 80046f0:	600b      	str	r3, [r1, #0]
        ADVANCE_IN_FORMAT_STRING(format);
 80046f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046f4:	3301      	adds	r3, #1
 80046f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <format_string_loop+0x1d4>
 8004700:	f000 fcce 	bl	80050a0 <format_string_loop+0xb70>
        if (*format == 'l') {
 8004704:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	2b6c      	cmp	r3, #108	@ 0x6c
 800470a:	d000      	beq.n	800470e <format_string_loop+0x1de>
 800470c:	e083      	b.n	8004816 <format_string_loop+0x2e6>
          flags |= FLAGS_LONG_LONG;
 800470e:	0011      	movs	r1, r2
 8004710:	2308      	movs	r3, #8
 8004712:	18d3      	adds	r3, r2, r3
 8004714:	19db      	adds	r3, r3, r7
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	2380      	movs	r3, #128	@ 0x80
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	4313      	orrs	r3, r2
 800471e:	2208      	movs	r2, #8
 8004720:	188a      	adds	r2, r1, r2
 8004722:	19d2      	adds	r2, r2, r7
 8004724:	6013      	str	r3, [r2, #0]
          ADVANCE_IN_FORMAT_STRING(format);
 8004726:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004728:	3301      	adds	r3, #1
 800472a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800472c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d170      	bne.n	8004816 <format_string_loop+0x2e6>
 8004734:	f000 fcb4 	bl	80050a0 <format_string_loop+0xb70>
        }
        break;
      case 'h' :
        flags |= FLAGS_SHORT;
 8004738:	2184      	movs	r1, #132	@ 0x84
 800473a:	2308      	movs	r3, #8
 800473c:	18cb      	adds	r3, r1, r3
 800473e:	19db      	adds	r3, r3, r7
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	2380      	movs	r3, #128	@ 0x80
 8004744:	4313      	orrs	r3, r2
 8004746:	000a      	movs	r2, r1
 8004748:	2108      	movs	r1, #8
 800474a:	1851      	adds	r1, r2, r1
 800474c:	19c9      	adds	r1, r1, r7
 800474e:	600b      	str	r3, [r1, #0]
        ADVANCE_IN_FORMAT_STRING(format);
 8004750:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004752:	3301      	adds	r3, #1
 8004754:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004756:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <format_string_loop+0x232>
 800475e:	f000 fc9f 	bl	80050a0 <format_string_loop+0xb70>
        if (*format == 'h') {
 8004762:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	2b68      	cmp	r3, #104	@ 0x68
 8004768:	d157      	bne.n	800481a <format_string_loop+0x2ea>
          flags |= FLAGS_CHAR;
 800476a:	0011      	movs	r1, r2
 800476c:	2308      	movs	r3, #8
 800476e:	18d3      	adds	r3, r2, r3
 8004770:	19db      	adds	r3, r3, r7
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	2340      	movs	r3, #64	@ 0x40
 8004776:	4313      	orrs	r3, r2
 8004778:	2208      	movs	r2, #8
 800477a:	188a      	adds	r2, r1, r2
 800477c:	19d2      	adds	r2, r2, r7
 800477e:	6013      	str	r3, [r2, #0]
          ADVANCE_IN_FORMAT_STRING(format);
 8004780:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004782:	3301      	adds	r3, #1
 8004784:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004786:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d145      	bne.n	800481a <format_string_loop+0x2ea>
 800478e:	f000 fc87 	bl	80050a0 <format_string_loop+0xb70>
        }
        break;
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004792:	2184      	movs	r1, #132	@ 0x84
 8004794:	2308      	movs	r3, #8
 8004796:	18cb      	adds	r3, r1, r3
 8004798:	19db      	adds	r3, r3, r7
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	2380      	movs	r3, #128	@ 0x80
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4313      	orrs	r3, r2
 80047a2:	2208      	movs	r2, #8
 80047a4:	188a      	adds	r2, r1, r2
 80047a6:	19d2      	adds	r2, r2, r7
 80047a8:	6013      	str	r3, [r2, #0]
        ADVANCE_IN_FORMAT_STRING(format);
 80047aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047ac:	3301      	adds	r3, #1
 80047ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d132      	bne.n	800481e <format_string_loop+0x2ee>
 80047b8:	f000 fc72 	bl	80050a0 <format_string_loop+0xb70>
        break;
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80047bc:	2184      	movs	r1, #132	@ 0x84
 80047be:	2308      	movs	r3, #8
 80047c0:	18cb      	adds	r3, r1, r3
 80047c2:	19db      	adds	r3, r3, r7
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	2380      	movs	r3, #128	@ 0x80
 80047c8:	00db      	lsls	r3, r3, #3
 80047ca:	4313      	orrs	r3, r2
 80047cc:	2208      	movs	r2, #8
 80047ce:	188a      	adds	r2, r1, r2
 80047d0:	19d2      	adds	r2, r2, r7
 80047d2:	6013      	str	r3, [r2, #0]
        ADVANCE_IN_FORMAT_STRING(format);
 80047d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047d6:	3301      	adds	r3, #1
 80047d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d11f      	bne.n	8004822 <format_string_loop+0x2f2>
 80047e2:	f000 fc5d 	bl	80050a0 <format_string_loop+0xb70>
        break;
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80047e6:	2184      	movs	r1, #132	@ 0x84
 80047e8:	2308      	movs	r3, #8
 80047ea:	18cb      	adds	r3, r1, r3
 80047ec:	19db      	adds	r3, r3, r7
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	2380      	movs	r3, #128	@ 0x80
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4313      	orrs	r3, r2
 80047f6:	2208      	movs	r2, #8
 80047f8:	188a      	adds	r2, r1, r2
 80047fa:	19d2      	adds	r2, r2, r7
 80047fc:	6013      	str	r3, [r2, #0]
        ADVANCE_IN_FORMAT_STRING(format);
 80047fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004800:	3301      	adds	r3, #1
 8004802:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004804:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <format_string_loop+0x2e0>
 800480c:	f000 fc48 	bl	80050a0 <format_string_loop+0xb70>
        break;
 8004810:	e008      	b.n	8004824 <format_string_loop+0x2f4>
      default:
        break;
 8004812:	46c0      	nop			@ (mov r8, r8)
 8004814:	e006      	b.n	8004824 <format_string_loop+0x2f4>
        break;
 8004816:	46c0      	nop			@ (mov r8, r8)
 8004818:	e004      	b.n	8004824 <format_string_loop+0x2f4>
        break;
 800481a:	46c0      	nop			@ (mov r8, r8)
 800481c:	e002      	b.n	8004824 <format_string_loop+0x2f4>
        break;
 800481e:	46c0      	nop			@ (mov r8, r8)
 8004820:	e000      	b.n	8004824 <format_string_loop+0x2f4>
        break;
 8004822:	46c0      	nop			@ (mov r8, r8)
    }

    // evaluate specifier
    switch (*format) {
 8004824:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	3b25      	subs	r3, #37	@ 0x25
 800482a:	2b53      	cmp	r3, #83	@ 0x53
 800482c:	d901      	bls.n	8004832 <format_string_loop+0x302>
 800482e:	f000 fc26 	bl	800507e <format_string_loop+0xb4e>
 8004832:	009a      	lsls	r2, r3, #2
 8004834:	4b89      	ldr	r3, [pc, #548]	@ (8004a5c <format_string_loop+0x52c>)
 8004836:	18d3      	adds	r3, r2, r3
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	469f      	mov	pc, r3
      case 'x' :
      case 'X' :
      case 'o' :
      case 'b' : {

        if (*format == 'd' || *format == 'i') {
 800483c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	2b64      	cmp	r3, #100	@ 0x64
 8004842:	d003      	beq.n	800484c <format_string_loop+0x31c>
 8004844:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b69      	cmp	r3, #105	@ 0x69
 800484a:	d10b      	bne.n	8004864 <format_string_loop+0x334>
          flags |= FLAGS_SIGNED;
 800484c:	2184      	movs	r1, #132	@ 0x84
 800484e:	2308      	movs	r3, #8
 8004850:	18cb      	adds	r3, r1, r3
 8004852:	19db      	adds	r3, r3, r7
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	2380      	movs	r3, #128	@ 0x80
 8004858:	01db      	lsls	r3, r3, #7
 800485a:	4313      	orrs	r3, r2
 800485c:	2208      	movs	r2, #8
 800485e:	188a      	adds	r2, r1, r2
 8004860:	19d2      	adds	r2, r2, r7
 8004862:	6013      	str	r3, [r2, #0]
        }

        numeric_base_t base;
        if (*format == 'x' || *format == 'X') {
 8004864:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2b78      	cmp	r3, #120	@ 0x78
 800486a:	d003      	beq.n	8004874 <format_string_loop+0x344>
 800486c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	2b58      	cmp	r3, #88	@ 0x58
 8004872:	d108      	bne.n	8004886 <format_string_loop+0x356>
          base = BASE_HEX;
 8004874:	2343      	movs	r3, #67	@ 0x43
 8004876:	2238      	movs	r2, #56	@ 0x38
 8004878:	189b      	adds	r3, r3, r2
 800487a:	2208      	movs	r2, #8
 800487c:	18ba      	adds	r2, r7, r2
 800487e:	189a      	adds	r2, r3, r2
 8004880:	2310      	movs	r3, #16
 8004882:	7013      	strb	r3, [r2, #0]
 8004884:	e02d      	b.n	80048e2 <format_string_loop+0x3b2>
        }
        else if (*format == 'o') {
 8004886:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	2b6f      	cmp	r3, #111	@ 0x6f
 800488c:	d108      	bne.n	80048a0 <format_string_loop+0x370>
          base =  BASE_OCTAL;
 800488e:	2343      	movs	r3, #67	@ 0x43
 8004890:	2238      	movs	r2, #56	@ 0x38
 8004892:	189b      	adds	r3, r3, r2
 8004894:	2208      	movs	r2, #8
 8004896:	18ba      	adds	r2, r7, r2
 8004898:	189a      	adds	r2, r3, r2
 800489a:	2308      	movs	r3, #8
 800489c:	7013      	strb	r3, [r2, #0]
 800489e:	e020      	b.n	80048e2 <format_string_loop+0x3b2>
        }
        else if (*format == 'b') {
 80048a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	2b62      	cmp	r3, #98	@ 0x62
 80048a6:	d108      	bne.n	80048ba <format_string_loop+0x38a>
          base =  BASE_BINARY;
 80048a8:	2343      	movs	r3, #67	@ 0x43
 80048aa:	2238      	movs	r2, #56	@ 0x38
 80048ac:	189b      	adds	r3, r3, r2
 80048ae:	2208      	movs	r2, #8
 80048b0:	18ba      	adds	r2, r7, r2
 80048b2:	189a      	adds	r2, r3, r2
 80048b4:	2302      	movs	r3, #2
 80048b6:	7013      	strb	r3, [r2, #0]
 80048b8:	e013      	b.n	80048e2 <format_string_loop+0x3b2>
        }
        else {
          base = BASE_DECIMAL;
 80048ba:	2343      	movs	r3, #67	@ 0x43
 80048bc:	2238      	movs	r2, #56	@ 0x38
 80048be:	189b      	adds	r3, r3, r2
 80048c0:	2208      	movs	r2, #8
 80048c2:	18ba      	adds	r2, r7, r2
 80048c4:	189a      	adds	r2, r3, r2
 80048c6:	230a      	movs	r3, #10
 80048c8:	7013      	strb	r3, [r2, #0]
          flags &= ~FLAGS_HASH; // decimal integers have no alternative presentation
 80048ca:	2184      	movs	r1, #132	@ 0x84
 80048cc:	2308      	movs	r3, #8
 80048ce:	18cb      	adds	r3, r1, r3
 80048d0:	19db      	adds	r3, r3, r7
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	2310      	movs	r3, #16
 80048d6:	439a      	bics	r2, r3
 80048d8:	0013      	movs	r3, r2
 80048da:	2208      	movs	r2, #8
 80048dc:	188a      	adds	r2, r1, r2
 80048de:	19d2      	adds	r2, r2, r7
 80048e0:	6013      	str	r3, [r2, #0]
        }

        if (*format == 'X') {
 80048e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	2b58      	cmp	r3, #88	@ 0x58
 80048e8:	d10a      	bne.n	8004900 <format_string_loop+0x3d0>
          flags |= FLAGS_UPPERCASE;
 80048ea:	2184      	movs	r1, #132	@ 0x84
 80048ec:	2308      	movs	r3, #8
 80048ee:	18cb      	adds	r3, r1, r3
 80048f0:	19db      	adds	r3, r3, r7
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	2320      	movs	r3, #32
 80048f6:	4313      	orrs	r3, r2
 80048f8:	2208      	movs	r2, #8
 80048fa:	188a      	adds	r2, r1, r2
 80048fc:	19d2      	adds	r2, r2, r7
 80048fe:	6013      	str	r3, [r2, #0]
        }

        format++;
 8004900:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004902:	3301      	adds	r3, #1
 8004904:	64bb      	str	r3, [r7, #72]	@ 0x48
        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8004906:	2184      	movs	r1, #132	@ 0x84
 8004908:	2308      	movs	r3, #8
 800490a:	18cb      	adds	r3, r1, r3
 800490c:	19db      	adds	r3, r3, r7
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	2380      	movs	r3, #128	@ 0x80
 8004912:	011b      	lsls	r3, r3, #4
 8004914:	4013      	ands	r3, r2
 8004916:	d00a      	beq.n	800492e <format_string_loop+0x3fe>
          flags &= ~FLAGS_ZEROPAD;
 8004918:	2308      	movs	r3, #8
 800491a:	18cb      	adds	r3, r1, r3
 800491c:	19db      	adds	r3, r3, r7
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	2301      	movs	r3, #1
 8004922:	439a      	bics	r2, r3
 8004924:	0013      	movs	r3, r2
 8004926:	2208      	movs	r2, #8
 8004928:	188a      	adds	r2, r1, r2
 800492a:	19d2      	adds	r2, r2, r7
 800492c:	6013      	str	r3, [r2, #0]
        }

        if (flags & FLAGS_SIGNED) {
 800492e:	2184      	movs	r1, #132	@ 0x84
 8004930:	2308      	movs	r3, #8
 8004932:	18cb      	adds	r3, r1, r3
 8004934:	19db      	adds	r3, r3, r7
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	2380      	movs	r3, #128	@ 0x80
 800493a:	01db      	lsls	r3, r3, #7
 800493c:	4013      	ands	r3, r2
 800493e:	d100      	bne.n	8004942 <format_string_loop+0x412>
 8004940:	e0e7      	b.n	8004b12 <format_string_loop+0x5e2>
          // A signed specifier: d, i or possibly I + bit size if enabled

          if (flags & FLAGS_LONG_LONG) {
 8004942:	2308      	movs	r3, #8
 8004944:	18cb      	adds	r3, r1, r3
 8004946:	19db      	adds	r3, r3, r7
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	2380      	movs	r3, #128	@ 0x80
 800494c:	00db      	lsls	r3, r3, #3
 800494e:	4013      	ands	r3, r2
 8004950:	d03c      	beq.n	80049cc <format_string_loop+0x49c>
#if PRINTF_SUPPORT_LONG_LONG
            const long long value = va_arg(args, long long);
 8004952:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004954:	1dda      	adds	r2, r3, #7
 8004956:	2307      	movs	r3, #7
 8004958:	439a      	bics	r2, r3
 800495a:	0013      	movs	r3, r2
 800495c:	3308      	adds	r3, #8
 800495e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004960:	6853      	ldr	r3, [r2, #4]
 8004962:	6812      	ldr	r2, [r2, #0]
 8004964:	653a      	str	r2, [r7, #80]	@ 0x50
 8004966:	657b      	str	r3, [r7, #84]	@ 0x54
            print_integer(output, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 8004968:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800496a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800496c:	2900      	cmp	r1, #0
 800496e:	da05      	bge.n	800497c <format_string_loop+0x44c>
 8004970:	2200      	movs	r2, #0
 8004972:	2300      	movs	r3, #0
 8004974:	1a12      	subs	r2, r2, r0
 8004976:	418b      	sbcs	r3, r1
 8004978:	0010      	movs	r0, r2
 800497a:	0019      	movs	r1, r3
 800497c:	0002      	movs	r2, r0
 800497e:	000b      	movs	r3, r1
 8004980:	0010      	movs	r0, r2
 8004982:	0019      	movs	r1, r3
 8004984:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004986:	0fdb      	lsrs	r3, r3, #31
 8004988:	b2da      	uxtb	r2, r3
 800498a:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 800498c:	2384      	movs	r3, #132	@ 0x84
 800498e:	2508      	movs	r5, #8
 8004990:	195b      	adds	r3, r3, r5
 8004992:	19db      	adds	r3, r3, r7
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	9304      	str	r3, [sp, #16]
 8004998:	2380      	movs	r3, #128	@ 0x80
 800499a:	2508      	movs	r5, #8
 800499c:	195b      	adds	r3, r3, r5
 800499e:	19db      	adds	r3, r3, r7
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	9303      	str	r3, [sp, #12]
 80049a4:	2384      	movs	r3, #132	@ 0x84
 80049a6:	18fb      	adds	r3, r7, r3
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	9302      	str	r3, [sp, #8]
 80049ac:	2343      	movs	r3, #67	@ 0x43
 80049ae:	2538      	movs	r5, #56	@ 0x38
 80049b0:	195b      	adds	r3, r3, r5
 80049b2:	2508      	movs	r5, #8
 80049b4:	46ac      	mov	ip, r5
 80049b6:	44bc      	add	ip, r7
 80049b8:	4463      	add	r3, ip
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	9301      	str	r3, [sp, #4]
 80049be:	9200      	str	r2, [sp, #0]
 80049c0:	0002      	movs	r2, r0
 80049c2:	000b      	movs	r3, r1
 80049c4:	0020      	movs	r0, r4
 80049c6:	f7fe fad9 	bl	8002f7c <print_integer>
              (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(args, unsigned int) :
              va_arg(args, unsigned int);
            print_integer(output, (printf_unsigned_value_t) value, false, base, precision, width, flags);
          }
        }
        break;
 80049ca:	e363      	b.n	8005094 <format_string_loop+0xb64>
          else if (flags & FLAGS_LONG) {
 80049cc:	2384      	movs	r3, #132	@ 0x84
 80049ce:	2208      	movs	r2, #8
 80049d0:	189b      	adds	r3, r3, r2
 80049d2:	19db      	adds	r3, r3, r7
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	2380      	movs	r3, #128	@ 0x80
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4013      	ands	r3, r2
 80049dc:	d040      	beq.n	8004a60 <format_string_loop+0x530>
            const long value = va_arg(args, long);
 80049de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049e0:	1d13      	adds	r3, r2, #4
 80049e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80049e4:	6813      	ldr	r3, [r2, #0]
 80049e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
            print_integer(output, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 80049e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	dd04      	ble.n	80049f8 <format_string_loop+0x4c8>
 80049ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049f0:	603b      	str	r3, [r7, #0]
 80049f2:	17db      	asrs	r3, r3, #31
 80049f4:	607b      	str	r3, [r7, #4]
 80049f6:	e00b      	b.n	8004a10 <format_string_loop+0x4e0>
 80049f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80049fc:	17db      	asrs	r3, r3, #31
 80049fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a00:	2200      	movs	r2, #0
 8004a02:	2300      	movs	r3, #0
 8004a04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a06:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004a08:	1a12      	subs	r2, r2, r0
 8004a0a:	418b      	sbcs	r3, r1
 8004a0c:	603a      	str	r2, [r7, #0]
 8004a0e:	607b      	str	r3, [r7, #4]
 8004a10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a12:	0fdb      	lsrs	r3, r3, #31
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004a18:	2384      	movs	r3, #132	@ 0x84
 8004a1a:	2008      	movs	r0, #8
 8004a1c:	181b      	adds	r3, r3, r0
 8004a1e:	19db      	adds	r3, r3, r7
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	9304      	str	r3, [sp, #16]
 8004a24:	2380      	movs	r3, #128	@ 0x80
 8004a26:	2008      	movs	r0, #8
 8004a28:	181b      	adds	r3, r3, r0
 8004a2a:	19db      	adds	r3, r3, r7
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	9303      	str	r3, [sp, #12]
 8004a30:	2384      	movs	r3, #132	@ 0x84
 8004a32:	18fb      	adds	r3, r7, r3
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	9302      	str	r3, [sp, #8]
 8004a38:	2343      	movs	r3, #67	@ 0x43
 8004a3a:	2038      	movs	r0, #56	@ 0x38
 8004a3c:	181b      	adds	r3, r3, r0
 8004a3e:	2008      	movs	r0, #8
 8004a40:	4684      	mov	ip, r0
 8004a42:	44bc      	add	ip, r7
 8004a44:	4463      	add	r3, ip
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	9301      	str	r3, [sp, #4]
 8004a4a:	9200      	str	r2, [sp, #0]
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	0008      	movs	r0, r1
 8004a52:	f7fe fa93 	bl	8002f7c <print_integer>
        break;
 8004a56:	e31d      	b.n	8005094 <format_string_loop+0xb64>
 8004a58:	0800851c 	.word	0x0800851c
 8004a5c:	08008568 	.word	0x08008568
              (flags & FLAGS_CHAR) ? (signed char) va_arg(args, int) :
 8004a60:	2384      	movs	r3, #132	@ 0x84
 8004a62:	2208      	movs	r2, #8
 8004a64:	189b      	adds	r3, r3, r2
 8004a66:	19db      	adds	r3, r3, r7
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	2340      	movs	r3, #64	@ 0x40
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	d005      	beq.n	8004a7c <format_string_loop+0x54c>
 8004a70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a72:	1d13      	adds	r3, r2, #4
 8004a74:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a76:	6813      	ldr	r3, [r2, #0]
 8004a78:	b25b      	sxtb	r3, r3
 8004a7a:	e011      	b.n	8004aa0 <format_string_loop+0x570>
              (flags & FLAGS_SHORT) ? (short int) va_arg(args, int) :
 8004a7c:	2384      	movs	r3, #132	@ 0x84
 8004a7e:	2208      	movs	r2, #8
 8004a80:	189b      	adds	r3, r3, r2
 8004a82:	19db      	adds	r3, r3, r7
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	2380      	movs	r3, #128	@ 0x80
 8004a88:	4013      	ands	r3, r2
 8004a8a:	d005      	beq.n	8004a98 <format_string_loop+0x568>
 8004a8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a8e:	1d13      	adds	r3, r2, #4
 8004a90:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a92:	6813      	ldr	r3, [r2, #0]
 8004a94:	b21b      	sxth	r3, r3
 8004a96:	e003      	b.n	8004aa0 <format_string_loop+0x570>
 8004a98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a9a:	1d13      	adds	r3, r2, #4
 8004a9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a9e:	6813      	ldr	r3, [r2, #0]
            const int value =
 8004aa0:	663b      	str	r3, [r7, #96]	@ 0x60
            print_integer(output, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 8004aa2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	dd04      	ble.n	8004ab2 <format_string_loop+0x582>
 8004aa8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004aac:	17db      	asrs	r3, r3, #31
 8004aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ab0:	e00b      	b.n	8004aca <format_string_loop+0x59a>
 8004ab2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ab6:	17db      	asrs	r3, r3, #31
 8004ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aba:	2200      	movs	r2, #0
 8004abc:	2300      	movs	r3, #0
 8004abe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ac0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ac2:	1a12      	subs	r2, r2, r0
 8004ac4:	418b      	sbcs	r3, r1
 8004ac6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004aca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004acc:	0fdb      	lsrs	r3, r3, #31
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004ad2:	2384      	movs	r3, #132	@ 0x84
 8004ad4:	2008      	movs	r0, #8
 8004ad6:	181b      	adds	r3, r3, r0
 8004ad8:	19db      	adds	r3, r3, r7
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	9304      	str	r3, [sp, #16]
 8004ade:	2380      	movs	r3, #128	@ 0x80
 8004ae0:	2008      	movs	r0, #8
 8004ae2:	181b      	adds	r3, r3, r0
 8004ae4:	19db      	adds	r3, r3, r7
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	9303      	str	r3, [sp, #12]
 8004aea:	2384      	movs	r3, #132	@ 0x84
 8004aec:	18fb      	adds	r3, r7, r3
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	9302      	str	r3, [sp, #8]
 8004af2:	2343      	movs	r3, #67	@ 0x43
 8004af4:	2038      	movs	r0, #56	@ 0x38
 8004af6:	181b      	adds	r3, r3, r0
 8004af8:	2008      	movs	r0, #8
 8004afa:	4684      	mov	ip, r0
 8004afc:	44bc      	add	ip, r7
 8004afe:	4463      	add	r3, ip
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	9301      	str	r3, [sp, #4]
 8004b04:	9200      	str	r2, [sp, #0]
 8004b06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b0a:	0008      	movs	r0, r1
 8004b0c:	f7fe fa36 	bl	8002f7c <print_integer>
        break;
 8004b10:	e2c0      	b.n	8005094 <format_string_loop+0xb64>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8004b12:	2184      	movs	r1, #132	@ 0x84
 8004b14:	2308      	movs	r3, #8
 8004b16:	18cb      	adds	r3, r1, r3
 8004b18:	19db      	adds	r3, r3, r7
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	230c      	movs	r3, #12
 8004b1e:	439a      	bics	r2, r3
 8004b20:	0013      	movs	r3, r2
 8004b22:	2208      	movs	r2, #8
 8004b24:	188a      	adds	r2, r1, r2
 8004b26:	19d2      	adds	r2, r2, r7
 8004b28:	6013      	str	r3, [r2, #0]
          if (flags & FLAGS_LONG_LONG) {
 8004b2a:	000d      	movs	r5, r1
 8004b2c:	2308      	movs	r3, #8
 8004b2e:	18cb      	adds	r3, r1, r3
 8004b30:	19da      	adds	r2, r3, r7
 8004b32:	6812      	ldr	r2, [r2, #0]
 8004b34:	2380      	movs	r3, #128	@ 0x80
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	4013      	ands	r3, r2
 8004b3a:	d02a      	beq.n	8004b92 <format_string_loop+0x662>
            print_integer(output, (printf_unsigned_value_t) va_arg(args, unsigned long long), false, base, precision, width, flags);
 8004b3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b3e:	1dda      	adds	r2, r3, #7
 8004b40:	2307      	movs	r3, #7
 8004b42:	439a      	bics	r2, r3
 8004b44:	0013      	movs	r3, r2
 8004b46:	3308      	adds	r3, #8
 8004b48:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b4a:	6810      	ldr	r0, [r2, #0]
 8004b4c:	6851      	ldr	r1, [r2, #4]
 8004b4e:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8004b50:	002b      	movs	r3, r5
 8004b52:	2208      	movs	r2, #8
 8004b54:	189b      	adds	r3, r3, r2
 8004b56:	19db      	adds	r3, r3, r7
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	9304      	str	r3, [sp, #16]
 8004b5c:	2380      	movs	r3, #128	@ 0x80
 8004b5e:	2208      	movs	r2, #8
 8004b60:	189b      	adds	r3, r3, r2
 8004b62:	19db      	adds	r3, r3, r7
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	9303      	str	r3, [sp, #12]
 8004b68:	2384      	movs	r3, #132	@ 0x84
 8004b6a:	18fb      	adds	r3, r7, r3
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	9302      	str	r3, [sp, #8]
 8004b70:	2343      	movs	r3, #67	@ 0x43
 8004b72:	2238      	movs	r2, #56	@ 0x38
 8004b74:	189b      	adds	r3, r3, r2
 8004b76:	2208      	movs	r2, #8
 8004b78:	4694      	mov	ip, r2
 8004b7a:	44bc      	add	ip, r7
 8004b7c:	4463      	add	r3, ip
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	9301      	str	r3, [sp, #4]
 8004b82:	2300      	movs	r3, #0
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	0002      	movs	r2, r0
 8004b88:	000b      	movs	r3, r1
 8004b8a:	0020      	movs	r0, r4
 8004b8c:	f7fe f9f6 	bl	8002f7c <print_integer>
        break;
 8004b90:	e280      	b.n	8005094 <format_string_loop+0xb64>
          else if (flags & FLAGS_LONG) {
 8004b92:	2084      	movs	r0, #132	@ 0x84
 8004b94:	2308      	movs	r3, #8
 8004b96:	18c3      	adds	r3, r0, r3
 8004b98:	19db      	adds	r3, r3, r7
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	2380      	movs	r3, #128	@ 0x80
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d027      	beq.n	8004bf4 <format_string_loop+0x6c4>
            print_integer(output, (printf_unsigned_value_t) va_arg(args, unsigned long), false, base, precision, width, flags);
 8004ba4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ba6:	1d13      	adds	r3, r2, #4
 8004ba8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004baa:	6813      	ldr	r3, [r2, #0]
 8004bac:	623b      	str	r3, [r7, #32]
 8004bae:	2300      	movs	r3, #0
 8004bb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bb2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004bb4:	2308      	movs	r3, #8
 8004bb6:	18c3      	adds	r3, r0, r3
 8004bb8:	19db      	adds	r3, r3, r7
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	9304      	str	r3, [sp, #16]
 8004bbe:	2380      	movs	r3, #128	@ 0x80
 8004bc0:	2208      	movs	r2, #8
 8004bc2:	189b      	adds	r3, r3, r2
 8004bc4:	19db      	adds	r3, r3, r7
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	9303      	str	r3, [sp, #12]
 8004bca:	2384      	movs	r3, #132	@ 0x84
 8004bcc:	18fb      	adds	r3, r7, r3
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	9302      	str	r3, [sp, #8]
 8004bd2:	2343      	movs	r3, #67	@ 0x43
 8004bd4:	2238      	movs	r2, #56	@ 0x38
 8004bd6:	189b      	adds	r3, r3, r2
 8004bd8:	2208      	movs	r2, #8
 8004bda:	4694      	mov	ip, r2
 8004bdc:	44bc      	add	ip, r7
 8004bde:	4463      	add	r3, ip
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	9301      	str	r3, [sp, #4]
 8004be4:	2300      	movs	r3, #0
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	6a3a      	ldr	r2, [r7, #32]
 8004bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bec:	0008      	movs	r0, r1
 8004bee:	f7fe f9c5 	bl	8002f7c <print_integer>
        break;
 8004bf2:	e24f      	b.n	8005094 <format_string_loop+0xb64>
              (flags & FLAGS_CHAR) ? (unsigned char)va_arg(args, unsigned int) :
 8004bf4:	2384      	movs	r3, #132	@ 0x84
 8004bf6:	2208      	movs	r2, #8
 8004bf8:	189b      	adds	r3, r3, r2
 8004bfa:	19db      	adds	r3, r3, r7
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	2340      	movs	r3, #64	@ 0x40
 8004c00:	4013      	ands	r3, r2
 8004c02:	d005      	beq.n	8004c10 <format_string_loop+0x6e0>
 8004c04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c06:	1d13      	adds	r3, r2, #4
 8004c08:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c0a:	6813      	ldr	r3, [r2, #0]
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	e011      	b.n	8004c34 <format_string_loop+0x704>
              (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(args, unsigned int) :
 8004c10:	2384      	movs	r3, #132	@ 0x84
 8004c12:	2208      	movs	r2, #8
 8004c14:	189b      	adds	r3, r3, r2
 8004c16:	19db      	adds	r3, r3, r7
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	2380      	movs	r3, #128	@ 0x80
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	d005      	beq.n	8004c2c <format_string_loop+0x6fc>
 8004c20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c22:	1d13      	adds	r3, r2, #4
 8004c24:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c26:	6813      	ldr	r3, [r2, #0]
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	e003      	b.n	8004c34 <format_string_loop+0x704>
 8004c2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c2e:	1d13      	adds	r3, r2, #4
 8004c30:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c32:	6813      	ldr	r3, [r2, #0]
            const unsigned int value =
 8004c34:	667b      	str	r3, [r7, #100]	@ 0x64
            print_integer(output, (printf_unsigned_value_t) value, false, base, precision, width, flags);
 8004c36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c38:	61bb      	str	r3, [r7, #24]
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61fb      	str	r3, [r7, #28]
 8004c3e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004c40:	2384      	movs	r3, #132	@ 0x84
 8004c42:	2208      	movs	r2, #8
 8004c44:	189b      	adds	r3, r3, r2
 8004c46:	19db      	adds	r3, r3, r7
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	9304      	str	r3, [sp, #16]
 8004c4c:	2380      	movs	r3, #128	@ 0x80
 8004c4e:	2208      	movs	r2, #8
 8004c50:	189b      	adds	r3, r3, r2
 8004c52:	19db      	adds	r3, r3, r7
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	9303      	str	r3, [sp, #12]
 8004c58:	2384      	movs	r3, #132	@ 0x84
 8004c5a:	18fb      	adds	r3, r7, r3
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	9302      	str	r3, [sp, #8]
 8004c60:	2343      	movs	r3, #67	@ 0x43
 8004c62:	2238      	movs	r2, #56	@ 0x38
 8004c64:	189b      	adds	r3, r3, r2
 8004c66:	2208      	movs	r2, #8
 8004c68:	4694      	mov	ip, r2
 8004c6a:	44bc      	add	ip, r7
 8004c6c:	4463      	add	r3, ip
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	9301      	str	r3, [sp, #4]
 8004c72:	2300      	movs	r3, #0
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	0008      	movs	r0, r1
 8004c7c:	f7fe f97e 	bl	8002f7c <print_integer>
        break;
 8004c80:	e208      	b.n	8005094 <format_string_loop+0xb64>
      }
#if PRINTF_SUPPORT_DECIMAL_SPECIFIERS
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8004c82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	2b46      	cmp	r3, #70	@ 0x46
 8004c88:	d10a      	bne.n	8004ca0 <format_string_loop+0x770>
 8004c8a:	2184      	movs	r1, #132	@ 0x84
 8004c8c:	2308      	movs	r3, #8
 8004c8e:	18cb      	adds	r3, r1, r3
 8004c90:	19db      	adds	r3, r3, r7
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	2320      	movs	r3, #32
 8004c96:	4313      	orrs	r3, r2
 8004c98:	2208      	movs	r2, #8
 8004c9a:	188a      	adds	r2, r1, r2
 8004c9c:	19d2      	adds	r2, r2, r7
 8004c9e:	6013      	str	r3, [r2, #0]
        print_floating_point(output, va_arg(args, double), precision, width, flags, PRINTF_PREFER_DECIMAL);
 8004ca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ca2:	1dda      	adds	r2, r3, #7
 8004ca4:	2307      	movs	r3, #7
 8004ca6:	439a      	bics	r2, r3
 8004ca8:	0013      	movs	r3, r2
 8004caa:	3308      	adds	r3, #8
 8004cac:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cae:	6810      	ldr	r0, [r2, #0]
 8004cb0:	6851      	ldr	r1, [r2, #4]
 8004cb2:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	9303      	str	r3, [sp, #12]
 8004cb8:	2384      	movs	r3, #132	@ 0x84
 8004cba:	2208      	movs	r2, #8
 8004cbc:	189b      	adds	r3, r3, r2
 8004cbe:	19db      	adds	r3, r3, r7
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	9302      	str	r3, [sp, #8]
 8004cc4:	2380      	movs	r3, #128	@ 0x80
 8004cc6:	2208      	movs	r2, #8
 8004cc8:	189b      	adds	r3, r3, r2
 8004cca:	19db      	adds	r3, r3, r7
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	9301      	str	r3, [sp, #4]
 8004cd0:	2384      	movs	r3, #132	@ 0x84
 8004cd2:	18fb      	adds	r3, r7, r3
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	0002      	movs	r2, r0
 8004cda:	000b      	movs	r3, r1
 8004cdc:	0020      	movs	r0, r4
 8004cde:	f7ff fb15 	bl	800430c <print_floating_point>
        format++;
 8004ce2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
        break;
 8004ce8:	e1d4      	b.n	8005094 <format_string_loop+0xb64>
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8004cea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b67      	cmp	r3, #103	@ 0x67
 8004cf0:	d003      	beq.n	8004cfa <format_string_loop+0x7ca>
 8004cf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	2b47      	cmp	r3, #71	@ 0x47
 8004cf8:	d10b      	bne.n	8004d12 <format_string_loop+0x7e2>
 8004cfa:	2184      	movs	r1, #132	@ 0x84
 8004cfc:	2308      	movs	r3, #8
 8004cfe:	18cb      	adds	r3, r1, r3
 8004d00:	19db      	adds	r3, r3, r7
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	2380      	movs	r3, #128	@ 0x80
 8004d06:	015b      	lsls	r3, r3, #5
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	2208      	movs	r2, #8
 8004d0c:	188a      	adds	r2, r1, r2
 8004d0e:	19d2      	adds	r2, r2, r7
 8004d10:	6013      	str	r3, [r2, #0]
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8004d12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	2b45      	cmp	r3, #69	@ 0x45
 8004d18:	d003      	beq.n	8004d22 <format_string_loop+0x7f2>
 8004d1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	2b47      	cmp	r3, #71	@ 0x47
 8004d20:	d10a      	bne.n	8004d38 <format_string_loop+0x808>
 8004d22:	2184      	movs	r1, #132	@ 0x84
 8004d24:	2308      	movs	r3, #8
 8004d26:	18cb      	adds	r3, r1, r3
 8004d28:	19db      	adds	r3, r3, r7
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	2320      	movs	r3, #32
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	2208      	movs	r2, #8
 8004d32:	188a      	adds	r2, r1, r2
 8004d34:	19d2      	adds	r2, r2, r7
 8004d36:	6013      	str	r3, [r2, #0]
        print_floating_point(output, va_arg(args, double), precision, width, flags, PRINTF_PREFER_EXPONENTIAL);
 8004d38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d3a:	1dda      	adds	r2, r3, #7
 8004d3c:	2307      	movs	r3, #7
 8004d3e:	439a      	bics	r2, r3
 8004d40:	0013      	movs	r3, r2
 8004d42:	3308      	adds	r3, #8
 8004d44:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d46:	6810      	ldr	r0, [r2, #0]
 8004d48:	6851      	ldr	r1, [r2, #4]
 8004d4a:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	9303      	str	r3, [sp, #12]
 8004d50:	2384      	movs	r3, #132	@ 0x84
 8004d52:	2208      	movs	r2, #8
 8004d54:	189b      	adds	r3, r3, r2
 8004d56:	19db      	adds	r3, r3, r7
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	9302      	str	r3, [sp, #8]
 8004d5c:	2380      	movs	r3, #128	@ 0x80
 8004d5e:	2208      	movs	r2, #8
 8004d60:	189b      	adds	r3, r3, r2
 8004d62:	19db      	adds	r3, r3, r7
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	9301      	str	r3, [sp, #4]
 8004d68:	2384      	movs	r3, #132	@ 0x84
 8004d6a:	18fb      	adds	r3, r7, r3
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	0002      	movs	r2, r0
 8004d72:	000b      	movs	r3, r1
 8004d74:	0020      	movs	r0, r4
 8004d76:	f7ff fac9 	bl	800430c <print_floating_point>
        format++;
 8004d7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
        break;
 8004d80:	e188      	b.n	8005094 <format_string_loop+0xb64>
#endif  // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
      case 'c' : {
        printf_size_t l = 1U;
 8004d82:	2301      	movs	r3, #1
 8004d84:	67fb      	str	r3, [r7, #124]	@ 0x7c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8004d86:	2384      	movs	r3, #132	@ 0x84
 8004d88:	2208      	movs	r2, #8
 8004d8a:	189b      	adds	r3, r3, r2
 8004d8c:	19db      	adds	r3, r3, r7
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	2302      	movs	r3, #2
 8004d92:	4013      	ands	r3, r2
 8004d94:	d10f      	bne.n	8004db6 <format_string_loop+0x886>
          while (l++ < width) {
 8004d96:	e004      	b.n	8004da2 <format_string_loop+0x872>
            putchar_via_gadget(output, ' ');
 8004d98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d9a:	2120      	movs	r1, #32
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	f7fd fe7b 	bl	8002a98 <putchar_via_gadget>
          while (l++ < width) {
 8004da2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004da4:	1c53      	adds	r3, r2, #1
 8004da6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004da8:	2380      	movs	r3, #128	@ 0x80
 8004daa:	2108      	movs	r1, #8
 8004dac:	185b      	adds	r3, r3, r1
 8004dae:	19db      	adds	r3, r3, r7
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d8f0      	bhi.n	8004d98 <format_string_loop+0x868>
          }
        }
        // char output
        putchar_via_gadget(output, (char) va_arg(args, int) );
 8004db6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004db8:	1d13      	adds	r3, r2, #4
 8004dba:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dbc:	6813      	ldr	r3, [r2, #0]
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dc2:	0011      	movs	r1, r2
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	f7fd fe67 	bl	8002a98 <putchar_via_gadget>
        // post padding
        if (flags & FLAGS_LEFT) {
 8004dca:	2384      	movs	r3, #132	@ 0x84
 8004dcc:	2208      	movs	r2, #8
 8004dce:	189b      	adds	r3, r3, r2
 8004dd0:	19db      	adds	r3, r3, r7
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	d00f      	beq.n	8004dfa <format_string_loop+0x8ca>
          while (l++ < width) {
 8004dda:	e004      	b.n	8004de6 <format_string_loop+0x8b6>
            putchar_via_gadget(output, ' ');
 8004ddc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dde:	2120      	movs	r1, #32
 8004de0:	0018      	movs	r0, r3
 8004de2:	f7fd fe59 	bl	8002a98 <putchar_via_gadget>
          while (l++ < width) {
 8004de6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004de8:	1c53      	adds	r3, r2, #1
 8004dea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004dec:	2380      	movs	r3, #128	@ 0x80
 8004dee:	2108      	movs	r1, #8
 8004df0:	185b      	adds	r3, r3, r1
 8004df2:	19db      	adds	r3, r3, r7
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d8f0      	bhi.n	8004ddc <format_string_loop+0x8ac>
          }
        }
        format++;
 8004dfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
        break;
 8004e00:	e148      	b.n	8005094 <format_string_loop+0xb64>
      }

      case 's' : {
        const char* p = va_arg(args, char*);
 8004e02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e04:	1d13      	adds	r3, r2, #4
 8004e06:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e08:	6813      	ldr	r3, [r2, #0]
 8004e0a:	67bb      	str	r3, [r7, #120]	@ 0x78
        if (p == NULL) {
 8004e0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d111      	bne.n	8004e36 <format_string_loop+0x906>
          out_rev_(output, ")llun(", 6, width, flags);
 8004e12:	2380      	movs	r3, #128	@ 0x80
 8004e14:	2208      	movs	r2, #8
 8004e16:	189b      	adds	r3, r3, r2
 8004e18:	19db      	adds	r3, r3, r7
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	49a2      	ldr	r1, [pc, #648]	@ (80050a8 <format_string_loop+0xb78>)
 8004e1e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004e20:	2384      	movs	r3, #132	@ 0x84
 8004e22:	2408      	movs	r4, #8
 8004e24:	191b      	adds	r3, r3, r4
 8004e26:	19db      	adds	r3, r3, r7
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	0013      	movs	r3, r2
 8004e2e:	2206      	movs	r2, #6
 8004e30:	f7fd ff67 	bl	8002d02 <out_rev_>
 8004e34:	e074      	b.n	8004f20 <format_string_loop+0x9f0>
        }
        else {
          printf_size_t l = strnlen_s_(p, precision ? precision : PRINTF_MAX_POSSIBLE_BUFFER_SIZE);
 8004e36:	2384      	movs	r3, #132	@ 0x84
 8004e38:	18fb      	adds	r3, r7, r3
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <format_string_loop+0x918>
 8004e40:	2384      	movs	r3, #132	@ 0x84
 8004e42:	18fb      	adds	r3, r7, r3
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	e000      	b.n	8004e4a <format_string_loop+0x91a>
 8004e48:	4a98      	ldr	r2, [pc, #608]	@ (80050ac <format_string_loop+0xb7c>)
 8004e4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e4c:	0011      	movs	r1, r2
 8004e4e:	0018      	movs	r0, r3
 8004e50:	f7fd ff00 	bl	8002c54 <strnlen_s_>
 8004e54:	0003      	movs	r3, r0
 8004e56:	677b      	str	r3, [r7, #116]	@ 0x74
          // pre padding
          if (flags & FLAGS_PRECISION) {
 8004e58:	2384      	movs	r3, #132	@ 0x84
 8004e5a:	2208      	movs	r2, #8
 8004e5c:	189b      	adds	r3, r3, r2
 8004e5e:	19db      	adds	r3, r3, r7
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	2380      	movs	r3, #128	@ 0x80
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	4013      	ands	r3, r2
 8004e68:	d007      	beq.n	8004e7a <format_string_loop+0x94a>
            l = (l < precision ? l : precision);
 8004e6a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004e6c:	2384      	movs	r3, #132	@ 0x84
 8004e6e:	18fb      	adds	r3, r7, r3
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d900      	bls.n	8004e78 <format_string_loop+0x948>
 8004e76:	0013      	movs	r3, r2
 8004e78:	677b      	str	r3, [r7, #116]	@ 0x74
          }
          if (!(flags & FLAGS_LEFT)) {
 8004e7a:	2384      	movs	r3, #132	@ 0x84
 8004e7c:	2208      	movs	r2, #8
 8004e7e:	189b      	adds	r3, r3, r2
 8004e80:	19db      	adds	r3, r3, r7
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	2302      	movs	r3, #2
 8004e86:	4013      	ands	r3, r2
 8004e88:	d120      	bne.n	8004ecc <format_string_loop+0x99c>
            while (l++ < width) {
 8004e8a:	e004      	b.n	8004e96 <format_string_loop+0x966>
              putchar_via_gadget(output, ' ');
 8004e8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e8e:	2120      	movs	r1, #32
 8004e90:	0018      	movs	r0, r3
 8004e92:	f7fd fe01 	bl	8002a98 <putchar_via_gadget>
            while (l++ < width) {
 8004e96:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004e98:	1c53      	adds	r3, r2, #1
 8004e9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8004e9c:	2380      	movs	r3, #128	@ 0x80
 8004e9e:	2108      	movs	r1, #8
 8004ea0:	185b      	adds	r3, r3, r1
 8004ea2:	19db      	adds	r3, r3, r7
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d8f0      	bhi.n	8004e8c <format_string_loop+0x95c>
            }
          }
          // string output
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision)) {
 8004eaa:	e00f      	b.n	8004ecc <format_string_loop+0x99c>
            putchar_via_gadget(output, *(p++));
 8004eac:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004eae:	1c53      	adds	r3, r2, #1
 8004eb0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004eb2:	7812      	ldrb	r2, [r2, #0]
 8004eb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eb6:	0011      	movs	r1, r2
 8004eb8:	0018      	movs	r0, r3
 8004eba:	f7fd fded 	bl	8002a98 <putchar_via_gadget>
            --precision;
 8004ebe:	2384      	movs	r3, #132	@ 0x84
 8004ec0:	18fb      	adds	r3, r7, r3
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	2284      	movs	r2, #132	@ 0x84
 8004ec8:	18ba      	adds	r2, r7, r2
 8004eca:	6013      	str	r3, [r2, #0]
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision)) {
 8004ecc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00d      	beq.n	8004ef0 <format_string_loop+0x9c0>
 8004ed4:	2384      	movs	r3, #132	@ 0x84
 8004ed6:	2208      	movs	r2, #8
 8004ed8:	189b      	adds	r3, r3, r2
 8004eda:	19db      	adds	r3, r3, r7
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	2380      	movs	r3, #128	@ 0x80
 8004ee0:	011b      	lsls	r3, r3, #4
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	d0e2      	beq.n	8004eac <format_string_loop+0x97c>
 8004ee6:	2384      	movs	r3, #132	@ 0x84
 8004ee8:	18fb      	adds	r3, r7, r3
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1dd      	bne.n	8004eac <format_string_loop+0x97c>
          }
          // post padding
          if (flags & FLAGS_LEFT) {
 8004ef0:	2384      	movs	r3, #132	@ 0x84
 8004ef2:	2208      	movs	r2, #8
 8004ef4:	189b      	adds	r3, r3, r2
 8004ef6:	19db      	adds	r3, r3, r7
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	2302      	movs	r3, #2
 8004efc:	4013      	ands	r3, r2
 8004efe:	d00f      	beq.n	8004f20 <format_string_loop+0x9f0>
            while (l++ < width) {
 8004f00:	e004      	b.n	8004f0c <format_string_loop+0x9dc>
              putchar_via_gadget(output, ' ');
 8004f02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f04:	2120      	movs	r1, #32
 8004f06:	0018      	movs	r0, r3
 8004f08:	f7fd fdc6 	bl	8002a98 <putchar_via_gadget>
            while (l++ < width) {
 8004f0c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004f0e:	1c53      	adds	r3, r2, #1
 8004f10:	677b      	str	r3, [r7, #116]	@ 0x74
 8004f12:	2380      	movs	r3, #128	@ 0x80
 8004f14:	2108      	movs	r1, #8
 8004f16:	185b      	adds	r3, r3, r1
 8004f18:	19db      	adds	r3, r3, r7
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d8f0      	bhi.n	8004f02 <format_string_loop+0x9d2>
            }
          }
        }
        format++;
 8004f20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f22:	3301      	adds	r3, #1
 8004f24:	64bb      	str	r3, [r7, #72]	@ 0x48
        break;
 8004f26:	e0b5      	b.n	8005094 <format_string_loop+0xb64>
      }

      case 'p' : {
        width = sizeof(void*) * 2U + 2; // 2 hex chars per byte + the "0x" prefix
 8004f28:	230a      	movs	r3, #10
 8004f2a:	2180      	movs	r1, #128	@ 0x80
 8004f2c:	2208      	movs	r2, #8
 8004f2e:	188a      	adds	r2, r1, r2
 8004f30:	19d2      	adds	r2, r2, r7
 8004f32:	6013      	str	r3, [r2, #0]
        flags |= FLAGS_ZEROPAD | FLAGS_POINTER;
 8004f34:	2484      	movs	r4, #132	@ 0x84
 8004f36:	2308      	movs	r3, #8
 8004f38:	18e3      	adds	r3, r4, r3
 8004f3a:	19db      	adds	r3, r3, r7
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	4b5c      	ldr	r3, [pc, #368]	@ (80050b0 <format_string_loop+0xb80>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	2208      	movs	r2, #8
 8004f44:	18a2      	adds	r2, r4, r2
 8004f46:	19d2      	adds	r2, r2, r7
 8004f48:	6013      	str	r3, [r2, #0]
        uintptr_t value = (uintptr_t)va_arg(args, void*);
 8004f4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f4c:	1d13      	adds	r3, r2, #4
 8004f4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f50:	6813      	ldr	r3, [r2, #0]
 8004f52:	66bb      	str	r3, [r7, #104]	@ 0x68
        (value == (uintptr_t) NULL) ?
          out_rev_(output, ")lin(", 5, width, flags) :
 8004f54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10f      	bne.n	8004f7a <format_string_loop+0xa4a>
 8004f5a:	2308      	movs	r3, #8
 8004f5c:	18cb      	adds	r3, r1, r3
 8004f5e:	19db      	adds	r3, r3, r7
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	4954      	ldr	r1, [pc, #336]	@ (80050b4 <format_string_loop+0xb84>)
 8004f64:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004f66:	2308      	movs	r3, #8
 8004f68:	18e3      	adds	r3, r4, r3
 8004f6a:	19db      	adds	r3, r3, r7
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	0013      	movs	r3, r2
 8004f72:	2205      	movs	r2, #5
 8004f74:	f7fd fec5 	bl	8002d02 <out_rev_>
 8004f78:	e01d      	b.n	8004fb6 <format_string_loop+0xa86>
          print_integer(output, (printf_unsigned_value_t) value, false, BASE_HEX, precision, width, flags);
 8004f7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f7c:	613b      	str	r3, [r7, #16]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	617b      	str	r3, [r7, #20]
 8004f82:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004f84:	2384      	movs	r3, #132	@ 0x84
 8004f86:	2208      	movs	r2, #8
 8004f88:	189b      	adds	r3, r3, r2
 8004f8a:	19db      	adds	r3, r3, r7
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	9304      	str	r3, [sp, #16]
 8004f90:	2380      	movs	r3, #128	@ 0x80
 8004f92:	2208      	movs	r2, #8
 8004f94:	189b      	adds	r3, r3, r2
 8004f96:	19db      	adds	r3, r3, r7
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	9303      	str	r3, [sp, #12]
 8004f9c:	2384      	movs	r3, #132	@ 0x84
 8004f9e:	18fb      	adds	r3, r7, r3
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	9302      	str	r3, [sp, #8]
 8004fa4:	2310      	movs	r3, #16
 8004fa6:	9301      	str	r3, [sp, #4]
 8004fa8:	2300      	movs	r3, #0
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	0008      	movs	r0, r1
 8004fb2:	f7fd ffe3 	bl	8002f7c <print_integer>
        format++;
 8004fb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fb8:	3301      	adds	r3, #1
 8004fba:	64bb      	str	r3, [r7, #72]	@ 0x48
        break;
 8004fbc:	e06a      	b.n	8005094 <format_string_loop+0xb64>
      }

      case '%' :
        putchar_via_gadget(output, '%');
 8004fbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fc0:	2125      	movs	r1, #37	@ 0x25
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	f7fd fd68 	bl	8002a98 <putchar_via_gadget>
        format++;
 8004fc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fca:	3301      	adds	r3, #1
 8004fcc:	64bb      	str	r3, [r7, #72]	@ 0x48
        break;
 8004fce:	e061      	b.n	8005094 <format_string_loop+0xb64>
      // Many people prefer to disable support for %n, as it lets the caller
      // engineer a write to an arbitrary location, of a value the caller
      // effectively controls - which could be a security concern in some cases.
#if PRINTF_SUPPORT_WRITEBACK_SPECIFIER
      case 'n' : {
        if       (flags & FLAGS_CHAR)      *(va_arg(args, char*))      = (char) output->pos;
 8004fd0:	2384      	movs	r3, #132	@ 0x84
 8004fd2:	2208      	movs	r2, #8
 8004fd4:	189b      	adds	r3, r3, r2
 8004fd6:	19db      	adds	r3, r3, r7
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	2340      	movs	r3, #64	@ 0x40
 8004fdc:	4013      	ands	r3, r2
 8004fde:	d008      	beq.n	8004ff2 <format_string_loop+0xac2>
 8004fe0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fe2:	68d9      	ldr	r1, [r3, #12]
 8004fe4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fe6:	1d13      	adds	r3, r2, #4
 8004fe8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fea:	6812      	ldr	r2, [r2, #0]
 8004fec:	b2cb      	uxtb	r3, r1
 8004fee:	7013      	strb	r3, [r2, #0]
 8004ff0:	e041      	b.n	8005076 <format_string_loop+0xb46>
        else if  (flags & FLAGS_SHORT)     *(va_arg(args, short*))     = (short) output->pos;
 8004ff2:	2384      	movs	r3, #132	@ 0x84
 8004ff4:	2208      	movs	r2, #8
 8004ff6:	189b      	adds	r3, r3, r2
 8004ff8:	19db      	adds	r3, r3, r7
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	2380      	movs	r3, #128	@ 0x80
 8004ffe:	4013      	ands	r3, r2
 8005000:	d008      	beq.n	8005014 <format_string_loop+0xae4>
 8005002:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005004:	68d9      	ldr	r1, [r3, #12]
 8005006:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005008:	1d13      	adds	r3, r2, #4
 800500a:	647b      	str	r3, [r7, #68]	@ 0x44
 800500c:	6812      	ldr	r2, [r2, #0]
 800500e:	b20b      	sxth	r3, r1
 8005010:	8013      	strh	r3, [r2, #0]
 8005012:	e030      	b.n	8005076 <format_string_loop+0xb46>
        else if  (flags & FLAGS_LONG)      *(va_arg(args, long*))      = (long) output->pos;
 8005014:	2384      	movs	r3, #132	@ 0x84
 8005016:	2208      	movs	r2, #8
 8005018:	189b      	adds	r3, r3, r2
 800501a:	19db      	adds	r3, r3, r7
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	2380      	movs	r3, #128	@ 0x80
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4013      	ands	r3, r2
 8005024:	d008      	beq.n	8005038 <format_string_loop+0xb08>
 8005026:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005028:	68d9      	ldr	r1, [r3, #12]
 800502a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800502c:	1d13      	adds	r3, r2, #4
 800502e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005030:	6813      	ldr	r3, [r2, #0]
 8005032:	000a      	movs	r2, r1
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	e01e      	b.n	8005076 <format_string_loop+0xb46>
#if PRINTF_SUPPORT_LONG_LONG
        else if  (flags & FLAGS_LONG_LONG) *(va_arg(args, long long*)) = (long long int) output->pos;
 8005038:	2384      	movs	r3, #132	@ 0x84
 800503a:	2208      	movs	r2, #8
 800503c:	189b      	adds	r3, r3, r2
 800503e:	19db      	adds	r3, r3, r7
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	2380      	movs	r3, #128	@ 0x80
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	4013      	ands	r3, r2
 8005048:	d00d      	beq.n	8005066 <format_string_loop+0xb36>
 800504a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800504c:	68d9      	ldr	r1, [r3, #12]
 800504e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005050:	1d13      	adds	r3, r2, #4
 8005052:	647b      	str	r3, [r7, #68]	@ 0x44
 8005054:	6813      	ldr	r3, [r2, #0]
 8005056:	60b9      	str	r1, [r7, #8]
 8005058:	2200      	movs	r2, #0
 800505a:	60fa      	str	r2, [r7, #12]
 800505c:	68b9      	ldr	r1, [r7, #8]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	6019      	str	r1, [r3, #0]
 8005062:	605a      	str	r2, [r3, #4]
 8005064:	e007      	b.n	8005076 <format_string_loop+0xb46>
#endif // PRINTF_SUPPORT_LONG_LONG
        else                               *(va_arg(args, int*))       = (int) output->pos;
 8005066:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005068:	68d9      	ldr	r1, [r3, #12]
 800506a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800506c:	1d13      	adds	r3, r2, #4
 800506e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005070:	6813      	ldr	r3, [r2, #0]
 8005072:	000a      	movs	r2, r1
 8005074:	601a      	str	r2, [r3, #0]
        format++;
 8005076:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005078:	3301      	adds	r3, #1
 800507a:	64bb      	str	r3, [r7, #72]	@ 0x48
        break;
 800507c:	e00a      	b.n	8005094 <format_string_loop+0xb64>
      }
#endif // PRINTF_SUPPORT_WRITEBACK_SPECIFIER

      default :
        putchar_via_gadget(output, *format);
 800507e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005080:	781a      	ldrb	r2, [r3, #0]
 8005082:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005084:	0011      	movs	r1, r2
 8005086:	0018      	movs	r0, r3
 8005088:	f7fd fd06 	bl	8002a98 <putchar_via_gadget>
        format++;
 800508c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800508e:	3301      	adds	r3, #1
 8005090:	64bb      	str	r3, [r7, #72]	@ 0x48
        break;
 8005092:	46c0      	nop			@ (mov r8, r8)
  while (*format)
 8005094:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d001      	beq.n	80050a0 <format_string_loop+0xb70>
 800509c:	f7ff fa50 	bl	8004540 <format_string_loop+0x10>
    }
  }
}
 80050a0:	46bd      	mov	sp, r7
 80050a2:	b025      	add	sp, #148	@ 0x94
 80050a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050a6:	46c0      	nop			@ (mov r8, r8)
 80050a8:	080083f8 	.word	0x080083f8
 80050ac:	7fffffff 	.word	0x7fffffff
 80050b0:	00002001 	.word	0x00002001
 80050b4:	08008400 	.word	0x08008400

080050b8 <vsnprintf_impl>:

// internal vsnprintf - used for implementing _all library functions
static int vsnprintf_impl(output_gadget_t* output, const char* format, va_list args)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
  // Note: The library only calls vsnprintf_impl() with output->pos being 0. However, it is
  // possible to call this function with a non-zero pos value for some "remedial printing".
  format_string_loop(output, format, args);
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	68b9      	ldr	r1, [r7, #8]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	0018      	movs	r0, r3
 80050cc:	f7ff fa30 	bl	8004530 <format_string_loop>

  // termination
  append_termination_with_gadget(output);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	0018      	movs	r0, r3
 80050d4:	f7fd fd0b 	bl	8002aee <append_termination_with_gadget>

  // return written chars without terminating \0
  return (int)output->pos;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	68db      	ldr	r3, [r3, #12]
}
 80050dc:	0018      	movs	r0, r3
 80050de:	46bd      	mov	sp, r7
 80050e0:	b004      	add	sp, #16
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <vprintf_>:

///////////////////////////////////////////////////////////////////////////////

int vprintf_(const char* format, va_list arg)
{
 80050e4:	b590      	push	{r4, r7, lr}
 80050e6:	b089      	sub	sp, #36	@ 0x24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  output_gadget_t gadget = extern_putchar_gadget();
 80050ee:	240c      	movs	r4, #12
 80050f0:	193b      	adds	r3, r7, r4
 80050f2:	0018      	movs	r0, r3
 80050f4:	f7fd fd9e 	bl	8002c34 <extern_putchar_gadget>
  return vsnprintf_impl(&gadget, format, arg);
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	6879      	ldr	r1, [r7, #4]
 80050fc:	193b      	adds	r3, r7, r4
 80050fe:	0018      	movs	r0, r3
 8005100:	f7ff ffda 	bl	80050b8 <vsnprintf_impl>
 8005104:	0003      	movs	r3, r0
}
 8005106:	0018      	movs	r0, r3
 8005108:	46bd      	mov	sp, r7
 800510a:	b009      	add	sp, #36	@ 0x24
 800510c:	bd90      	pop	{r4, r7, pc}

0800510e <vsnprintf_>:

int vsnprintf_(char* s, size_t n, const char* format, va_list arg)
{
 800510e:	b590      	push	{r4, r7, lr}
 8005110:	b08b      	sub	sp, #44	@ 0x2c
 8005112:	af00      	add	r7, sp, #0
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	607a      	str	r2, [r7, #4]
 800511a:	603b      	str	r3, [r7, #0]
  output_gadget_t gadget = buffer_gadget(s, n);
 800511c:	2414      	movs	r4, #20
 800511e:	193b      	adds	r3, r7, r4
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	68f9      	ldr	r1, [r7, #12]
 8005124:	0018      	movs	r0, r3
 8005126:	f7fd fd3b 	bl	8002ba0 <buffer_gadget>
  return vsnprintf_impl(&gadget, format, arg);
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	193b      	adds	r3, r7, r4
 8005130:	0018      	movs	r0, r3
 8005132:	f7ff ffc1 	bl	80050b8 <vsnprintf_impl>
 8005136:	0003      	movs	r3, r0
}
 8005138:	0018      	movs	r0, r3
 800513a:	46bd      	mov	sp, r7
 800513c:	b00b      	add	sp, #44	@ 0x2c
 800513e:	bd90      	pop	{r4, r7, pc}

08005140 <printf_>:
  output_gadget_t gadget = function_gadget(out, extra_arg);
  return vsnprintf_impl(&gadget, format, arg);
}

int printf_(const char* format, ...)
{
 8005140:	b40f      	push	{r0, r1, r2, r3}
 8005142:	b580      	push	{r7, lr}
 8005144:	b082      	sub	sp, #8
 8005146:	af00      	add	r7, sp, #0
#ifdef DEBUG
  va_list args;
  va_start(args, format);
 8005148:	2314      	movs	r3, #20
 800514a:	18fb      	adds	r3, r7, r3
 800514c:	603b      	str	r3, [r7, #0]
  const int ret = vprintf_(format, args);
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	0011      	movs	r1, r2
 8005154:	0018      	movs	r0, r3
 8005156:	f7ff ffc5 	bl	80050e4 <vprintf_>
 800515a:	0003      	movs	r3, r0
 800515c:	607b      	str	r3, [r7, #4]
  va_end(args);
  return ret;
 800515e:	687b      	ldr	r3, [r7, #4]
#endif
}
 8005160:	0018      	movs	r0, r3
 8005162:	46bd      	mov	sp, r7
 8005164:	b002      	add	sp, #8
 8005166:	bc80      	pop	{r7}
 8005168:	bc08      	pop	{r3}
 800516a:	b004      	add	sp, #16
 800516c:	4718      	bx	r3

0800516e <snprintf_>:
  va_end(args);
  return ret;
}

int snprintf_(char* s, size_t n, const char* format, ...)
{
 800516e:	b40c      	push	{r2, r3}
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, format);
 800517a:	231c      	movs	r3, #28
 800517c:	18fb      	adds	r3, r7, r3
 800517e:	60bb      	str	r3, [r7, #8]
  const int ret = vsnprintf_(s, n, format, args);
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	6839      	ldr	r1, [r7, #0]
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7ff ffc1 	bl	800510e <vsnprintf_>
 800518c:	0003      	movs	r3, r0
 800518e:	60fb      	str	r3, [r7, #12]
  va_end(args);
  return ret;
 8005190:	68fb      	ldr	r3, [r7, #12]
}
 8005192:	0018      	movs	r0, r3
 8005194:	46bd      	mov	sp, r7
 8005196:	b004      	add	sp, #16
 8005198:	bc80      	pop	{r7}
 800519a:	bc08      	pop	{r3}
 800519c:	b002      	add	sp, #8
 800519e:	4718      	bx	r3

080051a0 <putchar_>:
  va_end(args);
  return ret;
}

// Implement put char to use UART transmit
void putchar_(char c) {
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	0002      	movs	r2, r0
 80051a8:	1dfb      	adds	r3, r7, #7
 80051aa:	701a      	strb	r2, [r3, #0]
#ifdef DEBUG
    HAL_UART_Transmit(&huart2, (uint8_t *) &c, 1, 50);
 80051ac:	1df9      	adds	r1, r7, #7
 80051ae:	4804      	ldr	r0, [pc, #16]	@ (80051c0 <putchar_+0x20>)
 80051b0:	2332      	movs	r3, #50	@ 0x32
 80051b2:	2201      	movs	r2, #1
 80051b4:	f002 fb54 	bl	8007860 <HAL_UART_Transmit>
#endif
}
 80051b8:	46c0      	nop			@ (mov r8, r8)
 80051ba:	46bd      	mov	sp, r7
 80051bc:	b002      	add	sp, #8
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	2000007c 	.word	0x2000007c

080051c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051c8:	4b07      	ldr	r3, [pc, #28]	@ (80051e8 <HAL_MspInit+0x24>)
 80051ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051cc:	4b06      	ldr	r3, [pc, #24]	@ (80051e8 <HAL_MspInit+0x24>)
 80051ce:	2101      	movs	r1, #1
 80051d0:	430a      	orrs	r2, r1
 80051d2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80051d4:	4b04      	ldr	r3, [pc, #16]	@ (80051e8 <HAL_MspInit+0x24>)
 80051d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051d8:	4b03      	ldr	r3, [pc, #12]	@ (80051e8 <HAL_MspInit+0x24>)
 80051da:	2180      	movs	r1, #128	@ 0x80
 80051dc:	0549      	lsls	r1, r1, #21
 80051de:	430a      	orrs	r2, r1
 80051e0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80051e2:	46c0      	nop			@ (mov r8, r8)
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	40021000 	.word	0x40021000

080051ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80051ec:	b590      	push	{r4, r7, lr}
 80051ee:	b089      	sub	sp, #36	@ 0x24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051f4:	240c      	movs	r4, #12
 80051f6:	193b      	adds	r3, r7, r4
 80051f8:	0018      	movs	r0, r3
 80051fa:	2314      	movs	r3, #20
 80051fc:	001a      	movs	r2, r3
 80051fe:	2100      	movs	r1, #0
 8005200:	f003 f896 	bl	8008330 <memset>
  if(hi2c->Instance==I2C1)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a18      	ldr	r2, [pc, #96]	@ (800526c <HAL_I2C_MspInit+0x80>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d12a      	bne.n	8005264 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800520e:	4b18      	ldr	r3, [pc, #96]	@ (8005270 <HAL_I2C_MspInit+0x84>)
 8005210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005212:	4b17      	ldr	r3, [pc, #92]	@ (8005270 <HAL_I2C_MspInit+0x84>)
 8005214:	2101      	movs	r1, #1
 8005216:	430a      	orrs	r2, r1
 8005218:	62da      	str	r2, [r3, #44]	@ 0x2c
 800521a:	4b15      	ldr	r3, [pc, #84]	@ (8005270 <HAL_I2C_MspInit+0x84>)
 800521c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521e:	2201      	movs	r2, #1
 8005220:	4013      	ands	r3, r2
 8005222:	60bb      	str	r3, [r7, #8]
 8005224:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005226:	193b      	adds	r3, r7, r4
 8005228:	22c0      	movs	r2, #192	@ 0xc0
 800522a:	00d2      	lsls	r2, r2, #3
 800522c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800522e:	0021      	movs	r1, r4
 8005230:	187b      	adds	r3, r7, r1
 8005232:	2212      	movs	r2, #18
 8005234:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005236:	187b      	adds	r3, r7, r1
 8005238:	2200      	movs	r2, #0
 800523a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800523c:	187b      	adds	r3, r7, r1
 800523e:	2203      	movs	r2, #3
 8005240:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8005242:	187b      	adds	r3, r7, r1
 8005244:	2206      	movs	r2, #6
 8005246:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005248:	187a      	adds	r2, r7, r1
 800524a:	23a0      	movs	r3, #160	@ 0xa0
 800524c:	05db      	lsls	r3, r3, #23
 800524e:	0011      	movs	r1, r2
 8005250:	0018      	movs	r0, r3
 8005252:	f000 f9e3 	bl	800561c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005256:	4b06      	ldr	r3, [pc, #24]	@ (8005270 <HAL_I2C_MspInit+0x84>)
 8005258:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800525a:	4b05      	ldr	r3, [pc, #20]	@ (8005270 <HAL_I2C_MspInit+0x84>)
 800525c:	2180      	movs	r1, #128	@ 0x80
 800525e:	0389      	lsls	r1, r1, #14
 8005260:	430a      	orrs	r2, r1
 8005262:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8005264:	46c0      	nop			@ (mov r8, r8)
 8005266:	46bd      	mov	sp, r7
 8005268:	b009      	add	sp, #36	@ 0x24
 800526a:	bd90      	pop	{r4, r7, pc}
 800526c:	40005400 	.word	0x40005400
 8005270:	40021000 	.word	0x40021000

08005274 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005274:	b590      	push	{r4, r7, lr}
 8005276:	b089      	sub	sp, #36	@ 0x24
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800527c:	240c      	movs	r4, #12
 800527e:	193b      	adds	r3, r7, r4
 8005280:	0018      	movs	r0, r3
 8005282:	2314      	movs	r3, #20
 8005284:	001a      	movs	r2, r3
 8005286:	2100      	movs	r1, #0
 8005288:	f003 f852 	bl	8008330 <memset>
  if(huart->Instance==USART2)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a18      	ldr	r2, [pc, #96]	@ (80052f4 <HAL_UART_MspInit+0x80>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d129      	bne.n	80052ea <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005296:	4b18      	ldr	r3, [pc, #96]	@ (80052f8 <HAL_UART_MspInit+0x84>)
 8005298:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800529a:	4b17      	ldr	r3, [pc, #92]	@ (80052f8 <HAL_UART_MspInit+0x84>)
 800529c:	2180      	movs	r1, #128	@ 0x80
 800529e:	0289      	lsls	r1, r1, #10
 80052a0:	430a      	orrs	r2, r1
 80052a2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052a4:	4b14      	ldr	r3, [pc, #80]	@ (80052f8 <HAL_UART_MspInit+0x84>)
 80052a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052a8:	4b13      	ldr	r3, [pc, #76]	@ (80052f8 <HAL_UART_MspInit+0x84>)
 80052aa:	2101      	movs	r1, #1
 80052ac:	430a      	orrs	r2, r1
 80052ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80052b0:	4b11      	ldr	r3, [pc, #68]	@ (80052f8 <HAL_UART_MspInit+0x84>)
 80052b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b4:	2201      	movs	r2, #1
 80052b6:	4013      	ands	r3, r2
 80052b8:	60bb      	str	r3, [r7, #8]
 80052ba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80052bc:	0021      	movs	r1, r4
 80052be:	187b      	adds	r3, r7, r1
 80052c0:	220c      	movs	r2, #12
 80052c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052c4:	187b      	adds	r3, r7, r1
 80052c6:	2202      	movs	r2, #2
 80052c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ca:	187b      	adds	r3, r7, r1
 80052cc:	2200      	movs	r2, #0
 80052ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052d0:	187b      	adds	r3, r7, r1
 80052d2:	2203      	movs	r2, #3
 80052d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80052d6:	187b      	adds	r3, r7, r1
 80052d8:	2204      	movs	r2, #4
 80052da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052dc:	187a      	adds	r2, r7, r1
 80052de:	23a0      	movs	r3, #160	@ 0xa0
 80052e0:	05db      	lsls	r3, r3, #23
 80052e2:	0011      	movs	r1, r2
 80052e4:	0018      	movs	r0, r3
 80052e6:	f000 f999 	bl	800561c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80052ea:	46c0      	nop			@ (mov r8, r8)
 80052ec:	46bd      	mov	sp, r7
 80052ee:	b009      	add	sp, #36	@ 0x24
 80052f0:	bd90      	pop	{r4, r7, pc}
 80052f2:	46c0      	nop			@ (mov r8, r8)
 80052f4:	40004400 	.word	0x40004400
 80052f8:	40021000 	.word	0x40021000

080052fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005300:	46c0      	nop			@ (mov r8, r8)
 8005302:	e7fd      	b.n	8005300 <NMI_Handler+0x4>

08005304 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005308:	46c0      	nop			@ (mov r8, r8)
 800530a:	e7fd      	b.n	8005308 <HardFault_Handler+0x4>

0800530c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005310:	46c0      	nop			@ (mov r8, r8)
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800531a:	46c0      	nop			@ (mov r8, r8)
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005324:	f000 f886 	bl	8005434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005328:	46c0      	nop			@ (mov r8, r8)
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005332:	46c0      	nop			@ (mov r8, r8)
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8005338:	480d      	ldr	r0, [pc, #52]	@ (8005370 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800533a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800533c:	f7ff fff7 	bl	800532e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005340:	480c      	ldr	r0, [pc, #48]	@ (8005374 <LoopForever+0x6>)
  ldr r1, =_edata
 8005342:	490d      	ldr	r1, [pc, #52]	@ (8005378 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005344:	4a0d      	ldr	r2, [pc, #52]	@ (800537c <LoopForever+0xe>)
  movs r3, #0
 8005346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005348:	e002      	b.n	8005350 <LoopCopyDataInit>

0800534a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800534a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800534c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800534e:	3304      	adds	r3, #4

08005350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005354:	d3f9      	bcc.n	800534a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005356:	4a0a      	ldr	r2, [pc, #40]	@ (8005380 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005358:	4c0a      	ldr	r4, [pc, #40]	@ (8005384 <LoopForever+0x16>)
  movs r3, #0
 800535a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800535c:	e001      	b.n	8005362 <LoopFillZerobss>

0800535e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800535e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005360:	3204      	adds	r2, #4

08005362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005364:	d3fb      	bcc.n	800535e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8005366:	f002 ffeb 	bl	8008340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800536a:	f7fd f9e3 	bl	8002734 <main>

0800536e <LoopForever>:

LoopForever:
    b LoopForever
 800536e:	e7fe      	b.n	800536e <LoopForever>
   ldr   r0, =_estack
 8005370:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8005374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005378:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800537c:	08008734 	.word	0x08008734
  ldr r2, =_sbss
 8005380:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8005384:	20000108 	.word	0x20000108

08005388 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005388:	e7fe      	b.n	8005388 <ADC1_COMP_IRQHandler>
	...

0800538c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005392:	1dfb      	adds	r3, r7, #7
 8005394:	2200      	movs	r2, #0
 8005396:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8005398:	4b0b      	ldr	r3, [pc, #44]	@ (80053c8 <HAL_Init+0x3c>)
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	4b0a      	ldr	r3, [pc, #40]	@ (80053c8 <HAL_Init+0x3c>)
 800539e:	2140      	movs	r1, #64	@ 0x40
 80053a0:	430a      	orrs	r2, r1
 80053a2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80053a4:	2000      	movs	r0, #0
 80053a6:	f000 f811 	bl	80053cc <HAL_InitTick>
 80053aa:	1e03      	subs	r3, r0, #0
 80053ac:	d003      	beq.n	80053b6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80053ae:	1dfb      	adds	r3, r7, #7
 80053b0:	2201      	movs	r2, #1
 80053b2:	701a      	strb	r2, [r3, #0]
 80053b4:	e001      	b.n	80053ba <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80053b6:	f7ff ff05 	bl	80051c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80053ba:	1dfb      	adds	r3, r7, #7
 80053bc:	781b      	ldrb	r3, [r3, #0]
}
 80053be:	0018      	movs	r0, r3
 80053c0:	46bd      	mov	sp, r7
 80053c2:	b002      	add	sp, #8
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	46c0      	nop			@ (mov r8, r8)
 80053c8:	40022000 	.word	0x40022000

080053cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80053cc:	b590      	push	{r4, r7, lr}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80053d4:	4b14      	ldr	r3, [pc, #80]	@ (8005428 <HAL_InitTick+0x5c>)
 80053d6:	681c      	ldr	r4, [r3, #0]
 80053d8:	4b14      	ldr	r3, [pc, #80]	@ (800542c <HAL_InitTick+0x60>)
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	0019      	movs	r1, r3
 80053de:	23fa      	movs	r3, #250	@ 0xfa
 80053e0:	0098      	lsls	r0, r3, #2
 80053e2:	f7fa fe91 	bl	8000108 <__udivsi3>
 80053e6:	0003      	movs	r3, r0
 80053e8:	0019      	movs	r1, r3
 80053ea:	0020      	movs	r0, r4
 80053ec:	f7fa fe8c 	bl	8000108 <__udivsi3>
 80053f0:	0003      	movs	r3, r0
 80053f2:	0018      	movs	r0, r3
 80053f4:	f000 f905 	bl	8005602 <HAL_SYSTICK_Config>
 80053f8:	1e03      	subs	r3, r0, #0
 80053fa:	d001      	beq.n	8005400 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e00f      	b.n	8005420 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b03      	cmp	r3, #3
 8005404:	d80b      	bhi.n	800541e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005406:	6879      	ldr	r1, [r7, #4]
 8005408:	2301      	movs	r3, #1
 800540a:	425b      	negs	r3, r3
 800540c:	2200      	movs	r2, #0
 800540e:	0018      	movs	r0, r3
 8005410:	f000 f8e2 	bl	80055d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005414:	4b06      	ldr	r3, [pc, #24]	@ (8005430 <HAL_InitTick+0x64>)
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	e000      	b.n	8005420 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
}
 8005420:	0018      	movs	r0, r3
 8005422:	46bd      	mov	sp, r7
 8005424:	b003      	add	sp, #12
 8005426:	bd90      	pop	{r4, r7, pc}
 8005428:	20000000 	.word	0x20000000
 800542c:	20000008 	.word	0x20000008
 8005430:	20000004 	.word	0x20000004

08005434 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005438:	4b05      	ldr	r3, [pc, #20]	@ (8005450 <HAL_IncTick+0x1c>)
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	001a      	movs	r2, r3
 800543e:	4b05      	ldr	r3, [pc, #20]	@ (8005454 <HAL_IncTick+0x20>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	18d2      	adds	r2, r2, r3
 8005444:	4b03      	ldr	r3, [pc, #12]	@ (8005454 <HAL_IncTick+0x20>)
 8005446:	601a      	str	r2, [r3, #0]
}
 8005448:	46c0      	nop			@ (mov r8, r8)
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	46c0      	nop			@ (mov r8, r8)
 8005450:	20000008 	.word	0x20000008
 8005454:	20000104 	.word	0x20000104

08005458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	af00      	add	r7, sp, #0
  return uwTick;
 800545c:	4b02      	ldr	r3, [pc, #8]	@ (8005468 <HAL_GetTick+0x10>)
 800545e:	681b      	ldr	r3, [r3, #0]
}
 8005460:	0018      	movs	r0, r3
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	46c0      	nop			@ (mov r8, r8)
 8005468:	20000104 	.word	0x20000104

0800546c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005474:	f7ff fff0 	bl	8005458 <HAL_GetTick>
 8005478:	0003      	movs	r3, r0
 800547a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	3301      	adds	r3, #1
 8005484:	d005      	beq.n	8005492 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005486:	4b0a      	ldr	r3, [pc, #40]	@ (80054b0 <HAL_Delay+0x44>)
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	001a      	movs	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	189b      	adds	r3, r3, r2
 8005490:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005492:	46c0      	nop			@ (mov r8, r8)
 8005494:	f7ff ffe0 	bl	8005458 <HAL_GetTick>
 8005498:	0002      	movs	r2, r0
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d8f7      	bhi.n	8005494 <HAL_Delay+0x28>
  {
  }
}
 80054a4:	46c0      	nop			@ (mov r8, r8)
 80054a6:	46c0      	nop			@ (mov r8, r8)
 80054a8:	46bd      	mov	sp, r7
 80054aa:	b004      	add	sp, #16
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	46c0      	nop			@ (mov r8, r8)
 80054b0:	20000008 	.word	0x20000008

080054b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054b4:	b590      	push	{r4, r7, lr}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	0002      	movs	r2, r0
 80054bc:	6039      	str	r1, [r7, #0]
 80054be:	1dfb      	adds	r3, r7, #7
 80054c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80054c2:	1dfb      	adds	r3, r7, #7
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80054c8:	d828      	bhi.n	800551c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80054ca:	4a2f      	ldr	r2, [pc, #188]	@ (8005588 <__NVIC_SetPriority+0xd4>)
 80054cc:	1dfb      	adds	r3, r7, #7
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	b25b      	sxtb	r3, r3
 80054d2:	089b      	lsrs	r3, r3, #2
 80054d4:	33c0      	adds	r3, #192	@ 0xc0
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	589b      	ldr	r3, [r3, r2]
 80054da:	1dfa      	adds	r2, r7, #7
 80054dc:	7812      	ldrb	r2, [r2, #0]
 80054de:	0011      	movs	r1, r2
 80054e0:	2203      	movs	r2, #3
 80054e2:	400a      	ands	r2, r1
 80054e4:	00d2      	lsls	r2, r2, #3
 80054e6:	21ff      	movs	r1, #255	@ 0xff
 80054e8:	4091      	lsls	r1, r2
 80054ea:	000a      	movs	r2, r1
 80054ec:	43d2      	mvns	r2, r2
 80054ee:	401a      	ands	r2, r3
 80054f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	019b      	lsls	r3, r3, #6
 80054f6:	22ff      	movs	r2, #255	@ 0xff
 80054f8:	401a      	ands	r2, r3
 80054fa:	1dfb      	adds	r3, r7, #7
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	0018      	movs	r0, r3
 8005500:	2303      	movs	r3, #3
 8005502:	4003      	ands	r3, r0
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005508:	481f      	ldr	r0, [pc, #124]	@ (8005588 <__NVIC_SetPriority+0xd4>)
 800550a:	1dfb      	adds	r3, r7, #7
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	b25b      	sxtb	r3, r3
 8005510:	089b      	lsrs	r3, r3, #2
 8005512:	430a      	orrs	r2, r1
 8005514:	33c0      	adds	r3, #192	@ 0xc0
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800551a:	e031      	b.n	8005580 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800551c:	4a1b      	ldr	r2, [pc, #108]	@ (800558c <__NVIC_SetPriority+0xd8>)
 800551e:	1dfb      	adds	r3, r7, #7
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	0019      	movs	r1, r3
 8005524:	230f      	movs	r3, #15
 8005526:	400b      	ands	r3, r1
 8005528:	3b08      	subs	r3, #8
 800552a:	089b      	lsrs	r3, r3, #2
 800552c:	3306      	adds	r3, #6
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	18d3      	adds	r3, r2, r3
 8005532:	3304      	adds	r3, #4
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	1dfa      	adds	r2, r7, #7
 8005538:	7812      	ldrb	r2, [r2, #0]
 800553a:	0011      	movs	r1, r2
 800553c:	2203      	movs	r2, #3
 800553e:	400a      	ands	r2, r1
 8005540:	00d2      	lsls	r2, r2, #3
 8005542:	21ff      	movs	r1, #255	@ 0xff
 8005544:	4091      	lsls	r1, r2
 8005546:	000a      	movs	r2, r1
 8005548:	43d2      	mvns	r2, r2
 800554a:	401a      	ands	r2, r3
 800554c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	019b      	lsls	r3, r3, #6
 8005552:	22ff      	movs	r2, #255	@ 0xff
 8005554:	401a      	ands	r2, r3
 8005556:	1dfb      	adds	r3, r7, #7
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	0018      	movs	r0, r3
 800555c:	2303      	movs	r3, #3
 800555e:	4003      	ands	r3, r0
 8005560:	00db      	lsls	r3, r3, #3
 8005562:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005564:	4809      	ldr	r0, [pc, #36]	@ (800558c <__NVIC_SetPriority+0xd8>)
 8005566:	1dfb      	adds	r3, r7, #7
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	001c      	movs	r4, r3
 800556c:	230f      	movs	r3, #15
 800556e:	4023      	ands	r3, r4
 8005570:	3b08      	subs	r3, #8
 8005572:	089b      	lsrs	r3, r3, #2
 8005574:	430a      	orrs	r2, r1
 8005576:	3306      	adds	r3, #6
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	18c3      	adds	r3, r0, r3
 800557c:	3304      	adds	r3, #4
 800557e:	601a      	str	r2, [r3, #0]
}
 8005580:	46c0      	nop			@ (mov r8, r8)
 8005582:	46bd      	mov	sp, r7
 8005584:	b003      	add	sp, #12
 8005586:	bd90      	pop	{r4, r7, pc}
 8005588:	e000e100 	.word	0xe000e100
 800558c:	e000ed00 	.word	0xe000ed00

08005590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	1e5a      	subs	r2, r3, #1
 800559c:	2380      	movs	r3, #128	@ 0x80
 800559e:	045b      	lsls	r3, r3, #17
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d301      	bcc.n	80055a8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055a4:	2301      	movs	r3, #1
 80055a6:	e010      	b.n	80055ca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055a8:	4b0a      	ldr	r3, [pc, #40]	@ (80055d4 <SysTick_Config+0x44>)
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	3a01      	subs	r2, #1
 80055ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055b0:	2301      	movs	r3, #1
 80055b2:	425b      	negs	r3, r3
 80055b4:	2103      	movs	r1, #3
 80055b6:	0018      	movs	r0, r3
 80055b8:	f7ff ff7c 	bl	80054b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055bc:	4b05      	ldr	r3, [pc, #20]	@ (80055d4 <SysTick_Config+0x44>)
 80055be:	2200      	movs	r2, #0
 80055c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055c2:	4b04      	ldr	r3, [pc, #16]	@ (80055d4 <SysTick_Config+0x44>)
 80055c4:	2207      	movs	r2, #7
 80055c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	0018      	movs	r0, r3
 80055cc:	46bd      	mov	sp, r7
 80055ce:	b002      	add	sp, #8
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	46c0      	nop			@ (mov r8, r8)
 80055d4:	e000e010 	.word	0xe000e010

080055d8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
 80055e2:	210f      	movs	r1, #15
 80055e4:	187b      	adds	r3, r7, r1
 80055e6:	1c02      	adds	r2, r0, #0
 80055e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	187b      	adds	r3, r7, r1
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	b25b      	sxtb	r3, r3
 80055f2:	0011      	movs	r1, r2
 80055f4:	0018      	movs	r0, r3
 80055f6:	f7ff ff5d 	bl	80054b4 <__NVIC_SetPriority>
}
 80055fa:	46c0      	nop			@ (mov r8, r8)
 80055fc:	46bd      	mov	sp, r7
 80055fe:	b004      	add	sp, #16
 8005600:	bd80      	pop	{r7, pc}

08005602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b082      	sub	sp, #8
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	0018      	movs	r0, r3
 800560e:	f7ff ffbf 	bl	8005590 <SysTick_Config>
 8005612:	0003      	movs	r3, r0
}
 8005614:	0018      	movs	r0, r3
 8005616:	46bd      	mov	sp, r7
 8005618:	b002      	add	sp, #8
 800561a:	bd80      	pop	{r7, pc}

0800561c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b086      	sub	sp, #24
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005626:	2300      	movs	r3, #0
 8005628:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800562a:	2300      	movs	r3, #0
 800562c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800562e:	2300      	movs	r3, #0
 8005630:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8005632:	e155      	b.n	80058e0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2101      	movs	r1, #1
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	4091      	lsls	r1, r2
 800563e:	000a      	movs	r2, r1
 8005640:	4013      	ands	r3, r2
 8005642:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d100      	bne.n	800564c <HAL_GPIO_Init+0x30>
 800564a:	e146      	b.n	80058da <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	2203      	movs	r2, #3
 8005652:	4013      	ands	r3, r2
 8005654:	2b01      	cmp	r3, #1
 8005656:	d005      	beq.n	8005664 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	2203      	movs	r2, #3
 800565e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005660:	2b02      	cmp	r3, #2
 8005662:	d130      	bne.n	80056c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	2203      	movs	r2, #3
 8005670:	409a      	lsls	r2, r3
 8005672:	0013      	movs	r3, r2
 8005674:	43da      	mvns	r2, r3
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	4013      	ands	r3, r2
 800567a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	68da      	ldr	r2, [r3, #12]
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	005b      	lsls	r3, r3, #1
 8005684:	409a      	lsls	r2, r3
 8005686:	0013      	movs	r3, r2
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	4313      	orrs	r3, r2
 800568c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800569a:	2201      	movs	r2, #1
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	409a      	lsls	r2, r3
 80056a0:	0013      	movs	r3, r2
 80056a2:	43da      	mvns	r2, r3
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	4013      	ands	r3, r2
 80056a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	091b      	lsrs	r3, r3, #4
 80056b0:	2201      	movs	r2, #1
 80056b2:	401a      	ands	r2, r3
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	409a      	lsls	r2, r3
 80056b8:	0013      	movs	r3, r2
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	4313      	orrs	r3, r2
 80056be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	2203      	movs	r2, #3
 80056cc:	4013      	ands	r3, r2
 80056ce:	2b03      	cmp	r3, #3
 80056d0:	d017      	beq.n	8005702 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	2203      	movs	r2, #3
 80056de:	409a      	lsls	r2, r3
 80056e0:	0013      	movs	r3, r2
 80056e2:	43da      	mvns	r2, r3
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	4013      	ands	r3, r2
 80056e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	005b      	lsls	r3, r3, #1
 80056f2:	409a      	lsls	r2, r3
 80056f4:	0013      	movs	r3, r2
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	2203      	movs	r2, #3
 8005708:	4013      	ands	r3, r2
 800570a:	2b02      	cmp	r3, #2
 800570c:	d123      	bne.n	8005756 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	08da      	lsrs	r2, r3, #3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	3208      	adds	r2, #8
 8005716:	0092      	lsls	r2, r2, #2
 8005718:	58d3      	ldr	r3, [r2, r3]
 800571a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	2207      	movs	r2, #7
 8005720:	4013      	ands	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	220f      	movs	r2, #15
 8005726:	409a      	lsls	r2, r3
 8005728:	0013      	movs	r3, r2
 800572a:	43da      	mvns	r2, r3
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	4013      	ands	r3, r2
 8005730:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	691a      	ldr	r2, [r3, #16]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	2107      	movs	r1, #7
 800573a:	400b      	ands	r3, r1
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	409a      	lsls	r2, r3
 8005740:	0013      	movs	r3, r2
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	4313      	orrs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	08da      	lsrs	r2, r3, #3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3208      	adds	r2, #8
 8005750:	0092      	lsls	r2, r2, #2
 8005752:	6939      	ldr	r1, [r7, #16]
 8005754:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	2203      	movs	r2, #3
 8005762:	409a      	lsls	r2, r3
 8005764:	0013      	movs	r3, r2
 8005766:	43da      	mvns	r2, r3
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	4013      	ands	r3, r2
 800576c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	2203      	movs	r2, #3
 8005774:	401a      	ands	r2, r3
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	409a      	lsls	r2, r3
 800577c:	0013      	movs	r3, r2
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	4313      	orrs	r3, r2
 8005782:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	23c0      	movs	r3, #192	@ 0xc0
 8005790:	029b      	lsls	r3, r3, #10
 8005792:	4013      	ands	r3, r2
 8005794:	d100      	bne.n	8005798 <HAL_GPIO_Init+0x17c>
 8005796:	e0a0      	b.n	80058da <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005798:	4b57      	ldr	r3, [pc, #348]	@ (80058f8 <HAL_GPIO_Init+0x2dc>)
 800579a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800579c:	4b56      	ldr	r3, [pc, #344]	@ (80058f8 <HAL_GPIO_Init+0x2dc>)
 800579e:	2101      	movs	r1, #1
 80057a0:	430a      	orrs	r2, r1
 80057a2:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80057a4:	4a55      	ldr	r2, [pc, #340]	@ (80058fc <HAL_GPIO_Init+0x2e0>)
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	089b      	lsrs	r3, r3, #2
 80057aa:	3302      	adds	r3, #2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	589b      	ldr	r3, [r3, r2]
 80057b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2203      	movs	r2, #3
 80057b6:	4013      	ands	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	220f      	movs	r2, #15
 80057bc:	409a      	lsls	r2, r3
 80057be:	0013      	movs	r3, r2
 80057c0:	43da      	mvns	r2, r3
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	4013      	ands	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	23a0      	movs	r3, #160	@ 0xa0
 80057cc:	05db      	lsls	r3, r3, #23
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d01f      	beq.n	8005812 <HAL_GPIO_Init+0x1f6>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a4a      	ldr	r2, [pc, #296]	@ (8005900 <HAL_GPIO_Init+0x2e4>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d019      	beq.n	800580e <HAL_GPIO_Init+0x1f2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a49      	ldr	r2, [pc, #292]	@ (8005904 <HAL_GPIO_Init+0x2e8>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d013      	beq.n	800580a <HAL_GPIO_Init+0x1ee>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a48      	ldr	r2, [pc, #288]	@ (8005908 <HAL_GPIO_Init+0x2ec>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d00d      	beq.n	8005806 <HAL_GPIO_Init+0x1ea>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a47      	ldr	r2, [pc, #284]	@ (800590c <HAL_GPIO_Init+0x2f0>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d007      	beq.n	8005802 <HAL_GPIO_Init+0x1e6>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a46      	ldr	r2, [pc, #280]	@ (8005910 <HAL_GPIO_Init+0x2f4>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d101      	bne.n	80057fe <HAL_GPIO_Init+0x1e2>
 80057fa:	2305      	movs	r3, #5
 80057fc:	e00a      	b.n	8005814 <HAL_GPIO_Init+0x1f8>
 80057fe:	2306      	movs	r3, #6
 8005800:	e008      	b.n	8005814 <HAL_GPIO_Init+0x1f8>
 8005802:	2304      	movs	r3, #4
 8005804:	e006      	b.n	8005814 <HAL_GPIO_Init+0x1f8>
 8005806:	2303      	movs	r3, #3
 8005808:	e004      	b.n	8005814 <HAL_GPIO_Init+0x1f8>
 800580a:	2302      	movs	r3, #2
 800580c:	e002      	b.n	8005814 <HAL_GPIO_Init+0x1f8>
 800580e:	2301      	movs	r3, #1
 8005810:	e000      	b.n	8005814 <HAL_GPIO_Init+0x1f8>
 8005812:	2300      	movs	r3, #0
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	2103      	movs	r1, #3
 8005818:	400a      	ands	r2, r1
 800581a:	0092      	lsls	r2, r2, #2
 800581c:	4093      	lsls	r3, r2
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	4313      	orrs	r3, r2
 8005822:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005824:	4935      	ldr	r1, [pc, #212]	@ (80058fc <HAL_GPIO_Init+0x2e0>)
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	089b      	lsrs	r3, r3, #2
 800582a:	3302      	adds	r3, #2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005832:	4b38      	ldr	r3, [pc, #224]	@ (8005914 <HAL_GPIO_Init+0x2f8>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	43da      	mvns	r2, r3
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	4013      	ands	r3, r2
 8005840:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	2380      	movs	r3, #128	@ 0x80
 8005848:	035b      	lsls	r3, r3, #13
 800584a:	4013      	ands	r3, r2
 800584c:	d003      	beq.n	8005856 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4313      	orrs	r3, r2
 8005854:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005856:	4b2f      	ldr	r3, [pc, #188]	@ (8005914 <HAL_GPIO_Init+0x2f8>)
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800585c:	4b2d      	ldr	r3, [pc, #180]	@ (8005914 <HAL_GPIO_Init+0x2f8>)
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	43da      	mvns	r2, r3
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	4013      	ands	r3, r2
 800586a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	2380      	movs	r3, #128	@ 0x80
 8005872:	039b      	lsls	r3, r3, #14
 8005874:	4013      	ands	r3, r2
 8005876:	d003      	beq.n	8005880 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4313      	orrs	r3, r2
 800587e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005880:	4b24      	ldr	r3, [pc, #144]	@ (8005914 <HAL_GPIO_Init+0x2f8>)
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8005886:	4b23      	ldr	r3, [pc, #140]	@ (8005914 <HAL_GPIO_Init+0x2f8>)
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	43da      	mvns	r2, r3
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	4013      	ands	r3, r2
 8005894:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	2380      	movs	r3, #128	@ 0x80
 800589c:	029b      	lsls	r3, r3, #10
 800589e:	4013      	ands	r3, r2
 80058a0:	d003      	beq.n	80058aa <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80058aa:	4b1a      	ldr	r3, [pc, #104]	@ (8005914 <HAL_GPIO_Init+0x2f8>)
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80058b0:	4b18      	ldr	r3, [pc, #96]	@ (8005914 <HAL_GPIO_Init+0x2f8>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	43da      	mvns	r2, r3
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	4013      	ands	r3, r2
 80058be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	2380      	movs	r3, #128	@ 0x80
 80058c6:	025b      	lsls	r3, r3, #9
 80058c8:	4013      	ands	r3, r2
 80058ca:	d003      	beq.n	80058d4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80058d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005914 <HAL_GPIO_Init+0x2f8>)
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	3301      	adds	r3, #1
 80058de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	40da      	lsrs	r2, r3
 80058e8:	1e13      	subs	r3, r2, #0
 80058ea:	d000      	beq.n	80058ee <HAL_GPIO_Init+0x2d2>
 80058ec:	e6a2      	b.n	8005634 <HAL_GPIO_Init+0x18>
  }
}
 80058ee:	46c0      	nop			@ (mov r8, r8)
 80058f0:	46c0      	nop			@ (mov r8, r8)
 80058f2:	46bd      	mov	sp, r7
 80058f4:	b006      	add	sp, #24
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	40021000 	.word	0x40021000
 80058fc:	40010000 	.word	0x40010000
 8005900:	50000400 	.word	0x50000400
 8005904:	50000800 	.word	0x50000800
 8005908:	50000c00 	.word	0x50000c00
 800590c:	50001000 	.word	0x50001000
 8005910:	50001c00 	.word	0x50001c00
 8005914:	40010400 	.word	0x40010400

08005918 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	0008      	movs	r0, r1
 8005922:	0011      	movs	r1, r2
 8005924:	1cbb      	adds	r3, r7, #2
 8005926:	1c02      	adds	r2, r0, #0
 8005928:	801a      	strh	r2, [r3, #0]
 800592a:	1c7b      	adds	r3, r7, #1
 800592c:	1c0a      	adds	r2, r1, #0
 800592e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005930:	1c7b      	adds	r3, r7, #1
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d004      	beq.n	8005942 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005938:	1cbb      	adds	r3, r7, #2
 800593a:	881a      	ldrh	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005940:	e003      	b.n	800594a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8005942:	1cbb      	adds	r3, r7, #2
 8005944:	881a      	ldrh	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800594a:	46c0      	nop			@ (mov r8, r8)
 800594c:	46bd      	mov	sp, r7
 800594e:	b002      	add	sp, #8
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e082      	b.n	8005a6c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2241      	movs	r2, #65	@ 0x41
 800596a:	5c9b      	ldrb	r3, [r3, r2]
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d107      	bne.n	8005982 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2240      	movs	r2, #64	@ 0x40
 8005976:	2100      	movs	r1, #0
 8005978:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	0018      	movs	r0, r3
 800597e:	f7ff fc35 	bl	80051ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2241      	movs	r2, #65	@ 0x41
 8005986:	2124      	movs	r1, #36	@ 0x24
 8005988:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2101      	movs	r1, #1
 8005996:	438a      	bics	r2, r1
 8005998:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4934      	ldr	r1, [pc, #208]	@ (8005a74 <HAL_I2C_Init+0x120>)
 80059a4:	400a      	ands	r2, r1
 80059a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689a      	ldr	r2, [r3, #8]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4931      	ldr	r1, [pc, #196]	@ (8005a78 <HAL_I2C_Init+0x124>)
 80059b4:	400a      	ands	r2, r1
 80059b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d108      	bne.n	80059d2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689a      	ldr	r2, [r3, #8]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2180      	movs	r1, #128	@ 0x80
 80059ca:	0209      	lsls	r1, r1, #8
 80059cc:	430a      	orrs	r2, r1
 80059ce:	609a      	str	r2, [r3, #8]
 80059d0:	e007      	b.n	80059e2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	689a      	ldr	r2, [r3, #8]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2184      	movs	r1, #132	@ 0x84
 80059dc:	0209      	lsls	r1, r1, #8
 80059de:	430a      	orrs	r2, r1
 80059e0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d104      	bne.n	80059f4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2280      	movs	r2, #128	@ 0x80
 80059f0:	0112      	lsls	r2, r2, #4
 80059f2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	491f      	ldr	r1, [pc, #124]	@ (8005a7c <HAL_I2C_Init+0x128>)
 8005a00:	430a      	orrs	r2, r1
 8005a02:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68da      	ldr	r2, [r3, #12]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	491a      	ldr	r1, [pc, #104]	@ (8005a78 <HAL_I2C_Init+0x124>)
 8005a10:	400a      	ands	r2, r1
 8005a12:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691a      	ldr	r2, [r3, #16]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	69d9      	ldr	r1, [r3, #28]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1a      	ldr	r2, [r3, #32]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2101      	movs	r1, #1
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2241      	movs	r2, #65	@ 0x41
 8005a58:	2120      	movs	r1, #32
 8005a5a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2242      	movs	r2, #66	@ 0x42
 8005a66:	2100      	movs	r1, #0
 8005a68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	0018      	movs	r0, r3
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	b002      	add	sp, #8
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	f0ffffff 	.word	0xf0ffffff
 8005a78:	ffff7fff 	.word	0xffff7fff
 8005a7c:	02008000 	.word	0x02008000

08005a80 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a80:	b590      	push	{r4, r7, lr}
 8005a82:	b089      	sub	sp, #36	@ 0x24
 8005a84:	af02      	add	r7, sp, #8
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	000c      	movs	r4, r1
 8005a8a:	0010      	movs	r0, r2
 8005a8c:	0019      	movs	r1, r3
 8005a8e:	230a      	movs	r3, #10
 8005a90:	18fb      	adds	r3, r7, r3
 8005a92:	1c22      	adds	r2, r4, #0
 8005a94:	801a      	strh	r2, [r3, #0]
 8005a96:	2308      	movs	r3, #8
 8005a98:	18fb      	adds	r3, r7, r3
 8005a9a:	1c02      	adds	r2, r0, #0
 8005a9c:	801a      	strh	r2, [r3, #0]
 8005a9e:	1dbb      	adds	r3, r7, #6
 8005aa0:	1c0a      	adds	r2, r1, #0
 8005aa2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2241      	movs	r2, #65	@ 0x41
 8005aa8:	5c9b      	ldrb	r3, [r3, r2]
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b20      	cmp	r3, #32
 8005aae:	d000      	beq.n	8005ab2 <HAL_I2C_Mem_Write+0x32>
 8005ab0:	e10c      	b.n	8005ccc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d004      	beq.n	8005ac2 <HAL_I2C_Mem_Write+0x42>
 8005ab8:	232c      	movs	r3, #44	@ 0x2c
 8005aba:	18fb      	adds	r3, r7, r3
 8005abc:	881b      	ldrh	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d105      	bne.n	8005ace <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2280      	movs	r2, #128	@ 0x80
 8005ac6:	0092      	lsls	r2, r2, #2
 8005ac8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e0ff      	b.n	8005cce <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2240      	movs	r2, #64	@ 0x40
 8005ad2:	5c9b      	ldrb	r3, [r3, r2]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d101      	bne.n	8005adc <HAL_I2C_Mem_Write+0x5c>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	e0f8      	b.n	8005cce <HAL_I2C_Mem_Write+0x24e>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2240      	movs	r2, #64	@ 0x40
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ae4:	f7ff fcb8 	bl	8005458 <HAL_GetTick>
 8005ae8:	0003      	movs	r3, r0
 8005aea:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005aec:	2380      	movs	r3, #128	@ 0x80
 8005aee:	0219      	lsls	r1, r3, #8
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	2319      	movs	r3, #25
 8005af8:	2201      	movs	r2, #1
 8005afa:	f000 fc25 	bl	8006348 <I2C_WaitOnFlagUntilTimeout>
 8005afe:	1e03      	subs	r3, r0, #0
 8005b00:	d001      	beq.n	8005b06 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e0e3      	b.n	8005cce <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2241      	movs	r2, #65	@ 0x41
 8005b0a:	2121      	movs	r1, #33	@ 0x21
 8005b0c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2242      	movs	r2, #66	@ 0x42
 8005b12:	2140      	movs	r1, #64	@ 0x40
 8005b14:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b20:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	222c      	movs	r2, #44	@ 0x2c
 8005b26:	18ba      	adds	r2, r7, r2
 8005b28:	8812      	ldrh	r2, [r2, #0]
 8005b2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b32:	1dbb      	adds	r3, r7, #6
 8005b34:	881c      	ldrh	r4, [r3, #0]
 8005b36:	2308      	movs	r3, #8
 8005b38:	18fb      	adds	r3, r7, r3
 8005b3a:	881a      	ldrh	r2, [r3, #0]
 8005b3c:	230a      	movs	r3, #10
 8005b3e:	18fb      	adds	r3, r7, r3
 8005b40:	8819      	ldrh	r1, [r3, #0]
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	9301      	str	r3, [sp, #4]
 8005b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	0023      	movs	r3, r4
 8005b4e:	f000 fb13 	bl	8006178 <I2C_RequestMemoryWrite>
 8005b52:	1e03      	subs	r3, r0, #0
 8005b54:	d005      	beq.n	8005b62 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2240      	movs	r2, #64	@ 0x40
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e0b5      	b.n	8005cce <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	2bff      	cmp	r3, #255	@ 0xff
 8005b6a:	d911      	bls.n	8005b90 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	22ff      	movs	r2, #255	@ 0xff
 8005b70:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b76:	b2da      	uxtb	r2, r3
 8005b78:	2380      	movs	r3, #128	@ 0x80
 8005b7a:	045c      	lsls	r4, r3, #17
 8005b7c:	230a      	movs	r3, #10
 8005b7e:	18fb      	adds	r3, r7, r3
 8005b80:	8819      	ldrh	r1, [r3, #0]
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	2300      	movs	r3, #0
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	0023      	movs	r3, r4
 8005b8a:	f000 fdad 	bl	80066e8 <I2C_TransferConfig>
 8005b8e:	e012      	b.n	8005bb6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	2380      	movs	r3, #128	@ 0x80
 8005ba2:	049c      	lsls	r4, r3, #18
 8005ba4:	230a      	movs	r3, #10
 8005ba6:	18fb      	adds	r3, r7, r3
 8005ba8:	8819      	ldrh	r1, [r3, #0]
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	2300      	movs	r3, #0
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	0023      	movs	r3, r4
 8005bb2:	f000 fd99 	bl	80066e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	0018      	movs	r0, r3
 8005bbe:	f000 fc11 	bl	80063e4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005bc2:	1e03      	subs	r3, r0, #0
 8005bc4:	d001      	beq.n	8005bca <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e081      	b.n	8005cce <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bce:	781a      	ldrb	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bda:	1c5a      	adds	r2, r3, #1
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	3b01      	subs	r3, #1
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d03a      	beq.n	8005c7a <HAL_I2C_Mem_Write+0x1fa>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d136      	bne.n	8005c7a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	0013      	movs	r3, r2
 8005c16:	2200      	movs	r2, #0
 8005c18:	2180      	movs	r1, #128	@ 0x80
 8005c1a:	f000 fb95 	bl	8006348 <I2C_WaitOnFlagUntilTimeout>
 8005c1e:	1e03      	subs	r3, r0, #0
 8005c20:	d001      	beq.n	8005c26 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e053      	b.n	8005cce <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	2bff      	cmp	r3, #255	@ 0xff
 8005c2e:	d911      	bls.n	8005c54 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	22ff      	movs	r2, #255	@ 0xff
 8005c34:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	2380      	movs	r3, #128	@ 0x80
 8005c3e:	045c      	lsls	r4, r3, #17
 8005c40:	230a      	movs	r3, #10
 8005c42:	18fb      	adds	r3, r7, r3
 8005c44:	8819      	ldrh	r1, [r3, #0]
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	2300      	movs	r3, #0
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	0023      	movs	r3, r4
 8005c4e:	f000 fd4b 	bl	80066e8 <I2C_TransferConfig>
 8005c52:	e012      	b.n	8005c7a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	2380      	movs	r3, #128	@ 0x80
 8005c66:	049c      	lsls	r4, r3, #18
 8005c68:	230a      	movs	r3, #10
 8005c6a:	18fb      	adds	r3, r7, r3
 8005c6c:	8819      	ldrh	r1, [r3, #0]
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	2300      	movs	r3, #0
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	0023      	movs	r3, r4
 8005c76:	f000 fd37 	bl	80066e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d198      	bne.n	8005bb6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c84:	697a      	ldr	r2, [r7, #20]
 8005c86:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	0018      	movs	r0, r3
 8005c8c:	f000 fbf0 	bl	8006470 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c90:	1e03      	subs	r3, r0, #0
 8005c92:	d001      	beq.n	8005c98 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e01a      	b.n	8005cce <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	490b      	ldr	r1, [pc, #44]	@ (8005cd8 <HAL_I2C_Mem_Write+0x258>)
 8005cac:	400a      	ands	r2, r1
 8005cae:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2241      	movs	r2, #65	@ 0x41
 8005cb4:	2120      	movs	r1, #32
 8005cb6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2242      	movs	r2, #66	@ 0x42
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2240      	movs	r2, #64	@ 0x40
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	e000      	b.n	8005cce <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8005ccc:	2302      	movs	r3, #2
  }
}
 8005cce:	0018      	movs	r0, r3
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	b007      	add	sp, #28
 8005cd4:	bd90      	pop	{r4, r7, pc}
 8005cd6:	46c0      	nop			@ (mov r8, r8)
 8005cd8:	fe00e800 	.word	0xfe00e800

08005cdc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cdc:	b590      	push	{r4, r7, lr}
 8005cde:	b089      	sub	sp, #36	@ 0x24
 8005ce0:	af02      	add	r7, sp, #8
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	000c      	movs	r4, r1
 8005ce6:	0010      	movs	r0, r2
 8005ce8:	0019      	movs	r1, r3
 8005cea:	230a      	movs	r3, #10
 8005cec:	18fb      	adds	r3, r7, r3
 8005cee:	1c22      	adds	r2, r4, #0
 8005cf0:	801a      	strh	r2, [r3, #0]
 8005cf2:	2308      	movs	r3, #8
 8005cf4:	18fb      	adds	r3, r7, r3
 8005cf6:	1c02      	adds	r2, r0, #0
 8005cf8:	801a      	strh	r2, [r3, #0]
 8005cfa:	1dbb      	adds	r3, r7, #6
 8005cfc:	1c0a      	adds	r2, r1, #0
 8005cfe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2241      	movs	r2, #65	@ 0x41
 8005d04:	5c9b      	ldrb	r3, [r3, r2]
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	2b20      	cmp	r3, #32
 8005d0a:	d000      	beq.n	8005d0e <HAL_I2C_Mem_Read+0x32>
 8005d0c:	e110      	b.n	8005f30 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d004      	beq.n	8005d1e <HAL_I2C_Mem_Read+0x42>
 8005d14:	232c      	movs	r3, #44	@ 0x2c
 8005d16:	18fb      	adds	r3, r7, r3
 8005d18:	881b      	ldrh	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d105      	bne.n	8005d2a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2280      	movs	r2, #128	@ 0x80
 8005d22:	0092      	lsls	r2, r2, #2
 8005d24:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e103      	b.n	8005f32 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2240      	movs	r2, #64	@ 0x40
 8005d2e:	5c9b      	ldrb	r3, [r3, r2]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d101      	bne.n	8005d38 <HAL_I2C_Mem_Read+0x5c>
 8005d34:	2302      	movs	r3, #2
 8005d36:	e0fc      	b.n	8005f32 <HAL_I2C_Mem_Read+0x256>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2240      	movs	r2, #64	@ 0x40
 8005d3c:	2101      	movs	r1, #1
 8005d3e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d40:	f7ff fb8a 	bl	8005458 <HAL_GetTick>
 8005d44:	0003      	movs	r3, r0
 8005d46:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d48:	2380      	movs	r3, #128	@ 0x80
 8005d4a:	0219      	lsls	r1, r3, #8
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	2319      	movs	r3, #25
 8005d54:	2201      	movs	r2, #1
 8005d56:	f000 faf7 	bl	8006348 <I2C_WaitOnFlagUntilTimeout>
 8005d5a:	1e03      	subs	r3, r0, #0
 8005d5c:	d001      	beq.n	8005d62 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e0e7      	b.n	8005f32 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2241      	movs	r2, #65	@ 0x41
 8005d66:	2122      	movs	r1, #34	@ 0x22
 8005d68:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2242      	movs	r2, #66	@ 0x42
 8005d6e:	2140      	movs	r1, #64	@ 0x40
 8005d70:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d7c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	222c      	movs	r2, #44	@ 0x2c
 8005d82:	18ba      	adds	r2, r7, r2
 8005d84:	8812      	ldrh	r2, [r2, #0]
 8005d86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d8e:	1dbb      	adds	r3, r7, #6
 8005d90:	881c      	ldrh	r4, [r3, #0]
 8005d92:	2308      	movs	r3, #8
 8005d94:	18fb      	adds	r3, r7, r3
 8005d96:	881a      	ldrh	r2, [r3, #0]
 8005d98:	230a      	movs	r3, #10
 8005d9a:	18fb      	adds	r3, r7, r3
 8005d9c:	8819      	ldrh	r1, [r3, #0]
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	9301      	str	r3, [sp, #4]
 8005da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	0023      	movs	r3, r4
 8005daa:	f000 fa49 	bl	8006240 <I2C_RequestMemoryRead>
 8005dae:	1e03      	subs	r3, r0, #0
 8005db0:	d005      	beq.n	8005dbe <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2240      	movs	r2, #64	@ 0x40
 8005db6:	2100      	movs	r1, #0
 8005db8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e0b9      	b.n	8005f32 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	2bff      	cmp	r3, #255	@ 0xff
 8005dc6:	d911      	bls.n	8005dec <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	22ff      	movs	r2, #255	@ 0xff
 8005dcc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	2380      	movs	r3, #128	@ 0x80
 8005dd6:	045c      	lsls	r4, r3, #17
 8005dd8:	230a      	movs	r3, #10
 8005dda:	18fb      	adds	r3, r7, r3
 8005ddc:	8819      	ldrh	r1, [r3, #0]
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	4b56      	ldr	r3, [pc, #344]	@ (8005f3c <HAL_I2C_Mem_Read+0x260>)
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	0023      	movs	r3, r4
 8005de6:	f000 fc7f 	bl	80066e8 <I2C_TransferConfig>
 8005dea:	e012      	b.n	8005e12 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dfa:	b2da      	uxtb	r2, r3
 8005dfc:	2380      	movs	r3, #128	@ 0x80
 8005dfe:	049c      	lsls	r4, r3, #18
 8005e00:	230a      	movs	r3, #10
 8005e02:	18fb      	adds	r3, r7, r3
 8005e04:	8819      	ldrh	r1, [r3, #0]
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	4b4c      	ldr	r3, [pc, #304]	@ (8005f3c <HAL_I2C_Mem_Read+0x260>)
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	0023      	movs	r3, r4
 8005e0e:	f000 fc6b 	bl	80066e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005e12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	0013      	movs	r3, r2
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	2104      	movs	r1, #4
 8005e20:	f000 fa92 	bl	8006348 <I2C_WaitOnFlagUntilTimeout>
 8005e24:	1e03      	subs	r3, r0, #0
 8005e26:	d001      	beq.n	8005e2c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e082      	b.n	8005f32 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e36:	b2d2      	uxtb	r2, r2
 8005e38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3e:	1c5a      	adds	r2, r3, #1
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	3b01      	subs	r3, #1
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d03a      	beq.n	8005ede <HAL_I2C_Mem_Read+0x202>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d136      	bne.n	8005ede <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	0013      	movs	r3, r2
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	2180      	movs	r1, #128	@ 0x80
 8005e7e:	f000 fa63 	bl	8006348 <I2C_WaitOnFlagUntilTimeout>
 8005e82:	1e03      	subs	r3, r0, #0
 8005e84:	d001      	beq.n	8005e8a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e053      	b.n	8005f32 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	2bff      	cmp	r3, #255	@ 0xff
 8005e92:	d911      	bls.n	8005eb8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	22ff      	movs	r2, #255	@ 0xff
 8005e98:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	2380      	movs	r3, #128	@ 0x80
 8005ea2:	045c      	lsls	r4, r3, #17
 8005ea4:	230a      	movs	r3, #10
 8005ea6:	18fb      	adds	r3, r7, r3
 8005ea8:	8819      	ldrh	r1, [r3, #0]
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	2300      	movs	r3, #0
 8005eae:	9300      	str	r3, [sp, #0]
 8005eb0:	0023      	movs	r3, r4
 8005eb2:	f000 fc19 	bl	80066e8 <I2C_TransferConfig>
 8005eb6:	e012      	b.n	8005ede <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ec6:	b2da      	uxtb	r2, r3
 8005ec8:	2380      	movs	r3, #128	@ 0x80
 8005eca:	049c      	lsls	r4, r3, #18
 8005ecc:	230a      	movs	r3, #10
 8005ece:	18fb      	adds	r3, r7, r3
 8005ed0:	8819      	ldrh	r1, [r3, #0]
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	0023      	movs	r3, r4
 8005eda:	f000 fc05 	bl	80066e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d194      	bne.n	8005e12 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	0018      	movs	r0, r3
 8005ef0:	f000 fabe 	bl	8006470 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ef4:	1e03      	subs	r3, r0, #0
 8005ef6:	d001      	beq.n	8005efc <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e01a      	b.n	8005f32 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2220      	movs	r2, #32
 8005f02:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685a      	ldr	r2, [r3, #4]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	490c      	ldr	r1, [pc, #48]	@ (8005f40 <HAL_I2C_Mem_Read+0x264>)
 8005f10:	400a      	ands	r2, r1
 8005f12:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2241      	movs	r2, #65	@ 0x41
 8005f18:	2120      	movs	r1, #32
 8005f1a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2242      	movs	r2, #66	@ 0x42
 8005f20:	2100      	movs	r1, #0
 8005f22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2240      	movs	r2, #64	@ 0x40
 8005f28:	2100      	movs	r1, #0
 8005f2a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	e000      	b.n	8005f32 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005f30:	2302      	movs	r3, #2
  }
}
 8005f32:	0018      	movs	r0, r3
 8005f34:	46bd      	mov	sp, r7
 8005f36:	b007      	add	sp, #28
 8005f38:	bd90      	pop	{r4, r7, pc}
 8005f3a:	46c0      	nop			@ (mov r8, r8)
 8005f3c:	80002400 	.word	0x80002400
 8005f40:	fe00e800 	.word	0xfe00e800

08005f44 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b08a      	sub	sp, #40	@ 0x28
 8005f48:	af02      	add	r7, sp, #8
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	607a      	str	r2, [r7, #4]
 8005f4e:	603b      	str	r3, [r7, #0]
 8005f50:	230a      	movs	r3, #10
 8005f52:	18fb      	adds	r3, r7, r3
 8005f54:	1c0a      	adds	r2, r1, #0
 8005f56:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2241      	movs	r2, #65	@ 0x41
 8005f60:	5c9b      	ldrb	r3, [r3, r2]
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b20      	cmp	r3, #32
 8005f66:	d000      	beq.n	8005f6a <HAL_I2C_IsDeviceReady+0x26>
 8005f68:	e0fd      	b.n	8006166 <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	699a      	ldr	r2, [r3, #24]
 8005f70:	2380      	movs	r3, #128	@ 0x80
 8005f72:	021b      	lsls	r3, r3, #8
 8005f74:	401a      	ands	r2, r3
 8005f76:	2380      	movs	r3, #128	@ 0x80
 8005f78:	021b      	lsls	r3, r3, #8
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d101      	bne.n	8005f82 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8005f7e:	2302      	movs	r3, #2
 8005f80:	e0f2      	b.n	8006168 <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2240      	movs	r2, #64	@ 0x40
 8005f86:	5c9b      	ldrb	r3, [r3, r2]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d101      	bne.n	8005f90 <HAL_I2C_IsDeviceReady+0x4c>
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	e0eb      	b.n	8006168 <HAL_I2C_IsDeviceReady+0x224>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2240      	movs	r2, #64	@ 0x40
 8005f94:	2101      	movs	r1, #1
 8005f96:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2241      	movs	r2, #65	@ 0x41
 8005f9c:	2124      	movs	r1, #36	@ 0x24
 8005f9e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d107      	bne.n	8005fbe <HAL_I2C_IsDeviceReady+0x7a>
 8005fae:	230a      	movs	r3, #10
 8005fb0:	18fb      	adds	r3, r7, r3
 8005fb2:	881b      	ldrh	r3, [r3, #0]
 8005fb4:	059b      	lsls	r3, r3, #22
 8005fb6:	0d9b      	lsrs	r3, r3, #22
 8005fb8:	4a6d      	ldr	r2, [pc, #436]	@ (8006170 <HAL_I2C_IsDeviceReady+0x22c>)
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	e006      	b.n	8005fcc <HAL_I2C_IsDeviceReady+0x88>
 8005fbe:	230a      	movs	r3, #10
 8005fc0:	18fb      	adds	r3, r7, r3
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	059b      	lsls	r3, r3, #22
 8005fc6:	0d9b      	lsrs	r3, r3, #22
 8005fc8:	4a6a      	ldr	r2, [pc, #424]	@ (8006174 <HAL_I2C_IsDeviceReady+0x230>)
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005fd2:	f7ff fa41 	bl	8005458 <HAL_GetTick>
 8005fd6:	0003      	movs	r3, r0
 8005fd8:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	3b20      	subs	r3, #32
 8005fe6:	425a      	negs	r2, r3
 8005fe8:	4153      	adcs	r3, r2
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	231f      	movs	r3, #31
 8005fee:	18fb      	adds	r3, r7, r3
 8005ff0:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	2210      	movs	r2, #16
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	3b10      	subs	r3, #16
 8005ffe:	425a      	negs	r2, r3
 8006000:	4153      	adcs	r3, r2
 8006002:	b2da      	uxtb	r2, r3
 8006004:	231e      	movs	r3, #30
 8006006:	18fb      	adds	r3, r7, r3
 8006008:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800600a:	e035      	b.n	8006078 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	3301      	adds	r3, #1
 8006010:	d01a      	beq.n	8006048 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006012:	f7ff fa21 	bl	8005458 <HAL_GetTick>
 8006016:	0002      	movs	r2, r0
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	429a      	cmp	r2, r3
 8006020:	d302      	bcc.n	8006028 <HAL_I2C_IsDeviceReady+0xe4>
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10f      	bne.n	8006048 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2241      	movs	r2, #65	@ 0x41
 800602c:	2120      	movs	r1, #32
 800602e:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006034:	2220      	movs	r2, #32
 8006036:	431a      	orrs	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2240      	movs	r2, #64	@ 0x40
 8006040:	2100      	movs	r1, #0
 8006042:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e08f      	b.n	8006168 <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	2220      	movs	r2, #32
 8006050:	4013      	ands	r3, r2
 8006052:	3b20      	subs	r3, #32
 8006054:	425a      	negs	r2, r3
 8006056:	4153      	adcs	r3, r2
 8006058:	b2da      	uxtb	r2, r3
 800605a:	231f      	movs	r3, #31
 800605c:	18fb      	adds	r3, r7, r3
 800605e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	2210      	movs	r2, #16
 8006068:	4013      	ands	r3, r2
 800606a:	3b10      	subs	r3, #16
 800606c:	425a      	negs	r2, r3
 800606e:	4153      	adcs	r3, r2
 8006070:	b2da      	uxtb	r2, r3
 8006072:	231e      	movs	r3, #30
 8006074:	18fb      	adds	r3, r7, r3
 8006076:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006078:	231f      	movs	r3, #31
 800607a:	18fb      	adds	r3, r7, r3
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d104      	bne.n	800608c <HAL_I2C_IsDeviceReady+0x148>
 8006082:	231e      	movs	r3, #30
 8006084:	18fb      	adds	r3, r7, r3
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d0bf      	beq.n	800600c <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	2210      	movs	r2, #16
 8006094:	4013      	ands	r3, r2
 8006096:	2b10      	cmp	r3, #16
 8006098:	d01a      	beq.n	80060d0 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	9300      	str	r3, [sp, #0]
 80060a2:	0013      	movs	r3, r2
 80060a4:	2200      	movs	r2, #0
 80060a6:	2120      	movs	r1, #32
 80060a8:	f000 f94e 	bl	8006348 <I2C_WaitOnFlagUntilTimeout>
 80060ac:	1e03      	subs	r3, r0, #0
 80060ae:	d001      	beq.n	80060b4 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e059      	b.n	8006168 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2220      	movs	r2, #32
 80060ba:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2241      	movs	r2, #65	@ 0x41
 80060c0:	2120      	movs	r1, #32
 80060c2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2240      	movs	r2, #64	@ 0x40
 80060c8:	2100      	movs	r1, #0
 80060ca:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80060cc:	2300      	movs	r3, #0
 80060ce:	e04b      	b.n	8006168 <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	0013      	movs	r3, r2
 80060da:	2200      	movs	r2, #0
 80060dc:	2120      	movs	r1, #32
 80060de:	f000 f933 	bl	8006348 <I2C_WaitOnFlagUntilTimeout>
 80060e2:	1e03      	subs	r3, r0, #0
 80060e4:	d001      	beq.n	80060ea <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e03e      	b.n	8006168 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2210      	movs	r2, #16
 80060f0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2220      	movs	r2, #32
 80060f8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d119      	bne.n	8006136 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	685a      	ldr	r2, [r3, #4]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2180      	movs	r1, #128	@ 0x80
 800610e:	01c9      	lsls	r1, r1, #7
 8006110:	430a      	orrs	r2, r1
 8006112:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006114:	683a      	ldr	r2, [r7, #0]
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	0013      	movs	r3, r2
 800611e:	2200      	movs	r2, #0
 8006120:	2120      	movs	r1, #32
 8006122:	f000 f911 	bl	8006348 <I2C_WaitOnFlagUntilTimeout>
 8006126:	1e03      	subs	r3, r0, #0
 8006128:	d001      	beq.n	800612e <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e01c      	b.n	8006168 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2220      	movs	r2, #32
 8006134:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	3301      	adds	r3, #1
 800613a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	429a      	cmp	r2, r3
 8006142:	d900      	bls.n	8006146 <HAL_I2C_IsDeviceReady+0x202>
 8006144:	e72f      	b.n	8005fa6 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2241      	movs	r2, #65	@ 0x41
 800614a:	2120      	movs	r1, #32
 800614c:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006152:	2220      	movs	r2, #32
 8006154:	431a      	orrs	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2240      	movs	r2, #64	@ 0x40
 800615e:	2100      	movs	r1, #0
 8006160:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e000      	b.n	8006168 <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006166:	2302      	movs	r3, #2
  }
}
 8006168:	0018      	movs	r0, r3
 800616a:	46bd      	mov	sp, r7
 800616c:	b008      	add	sp, #32
 800616e:	bd80      	pop	{r7, pc}
 8006170:	02002000 	.word	0x02002000
 8006174:	02002800 	.word	0x02002800

08006178 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006178:	b5b0      	push	{r4, r5, r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af02      	add	r7, sp, #8
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	000c      	movs	r4, r1
 8006182:	0010      	movs	r0, r2
 8006184:	0019      	movs	r1, r3
 8006186:	250a      	movs	r5, #10
 8006188:	197b      	adds	r3, r7, r5
 800618a:	1c22      	adds	r2, r4, #0
 800618c:	801a      	strh	r2, [r3, #0]
 800618e:	2308      	movs	r3, #8
 8006190:	18fb      	adds	r3, r7, r3
 8006192:	1c02      	adds	r2, r0, #0
 8006194:	801a      	strh	r2, [r3, #0]
 8006196:	1dbb      	adds	r3, r7, #6
 8006198:	1c0a      	adds	r2, r1, #0
 800619a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800619c:	1dbb      	adds	r3, r7, #6
 800619e:	881b      	ldrh	r3, [r3, #0]
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	2380      	movs	r3, #128	@ 0x80
 80061a4:	045c      	lsls	r4, r3, #17
 80061a6:	197b      	adds	r3, r7, r5
 80061a8:	8819      	ldrh	r1, [r3, #0]
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	4b23      	ldr	r3, [pc, #140]	@ (800623c <I2C_RequestMemoryWrite+0xc4>)
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	0023      	movs	r3, r4
 80061b2:	f000 fa99 	bl	80066e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061b8:	6a39      	ldr	r1, [r7, #32]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	0018      	movs	r0, r3
 80061be:	f000 f911 	bl	80063e4 <I2C_WaitOnTXISFlagUntilTimeout>
 80061c2:	1e03      	subs	r3, r0, #0
 80061c4:	d001      	beq.n	80061ca <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e033      	b.n	8006232 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061ca:	1dbb      	adds	r3, r7, #6
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d107      	bne.n	80061e2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061d2:	2308      	movs	r3, #8
 80061d4:	18fb      	adds	r3, r7, r3
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	629a      	str	r2, [r3, #40]	@ 0x28
 80061e0:	e019      	b.n	8006216 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80061e2:	2308      	movs	r3, #8
 80061e4:	18fb      	adds	r3, r7, r3
 80061e6:	881b      	ldrh	r3, [r3, #0]
 80061e8:	0a1b      	lsrs	r3, r3, #8
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	b2da      	uxtb	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061f6:	6a39      	ldr	r1, [r7, #32]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	0018      	movs	r0, r3
 80061fc:	f000 f8f2 	bl	80063e4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006200:	1e03      	subs	r3, r0, #0
 8006202:	d001      	beq.n	8006208 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e014      	b.n	8006232 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006208:	2308      	movs	r3, #8
 800620a:	18fb      	adds	r3, r7, r3
 800620c:	881b      	ldrh	r3, [r3, #0]
 800620e:	b2da      	uxtb	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006216:	6a3a      	ldr	r2, [r7, #32]
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	0013      	movs	r3, r2
 8006220:	2200      	movs	r2, #0
 8006222:	2180      	movs	r1, #128	@ 0x80
 8006224:	f000 f890 	bl	8006348 <I2C_WaitOnFlagUntilTimeout>
 8006228:	1e03      	subs	r3, r0, #0
 800622a:	d001      	beq.n	8006230 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e000      	b.n	8006232 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	0018      	movs	r0, r3
 8006234:	46bd      	mov	sp, r7
 8006236:	b004      	add	sp, #16
 8006238:	bdb0      	pop	{r4, r5, r7, pc}
 800623a:	46c0      	nop			@ (mov r8, r8)
 800623c:	80002000 	.word	0x80002000

08006240 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006240:	b5b0      	push	{r4, r5, r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af02      	add	r7, sp, #8
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	000c      	movs	r4, r1
 800624a:	0010      	movs	r0, r2
 800624c:	0019      	movs	r1, r3
 800624e:	250a      	movs	r5, #10
 8006250:	197b      	adds	r3, r7, r5
 8006252:	1c22      	adds	r2, r4, #0
 8006254:	801a      	strh	r2, [r3, #0]
 8006256:	2308      	movs	r3, #8
 8006258:	18fb      	adds	r3, r7, r3
 800625a:	1c02      	adds	r2, r0, #0
 800625c:	801a      	strh	r2, [r3, #0]
 800625e:	1dbb      	adds	r3, r7, #6
 8006260:	1c0a      	adds	r2, r1, #0
 8006262:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006264:	1dbb      	adds	r3, r7, #6
 8006266:	881b      	ldrh	r3, [r3, #0]
 8006268:	b2da      	uxtb	r2, r3
 800626a:	197b      	adds	r3, r7, r5
 800626c:	8819      	ldrh	r1, [r3, #0]
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	4b23      	ldr	r3, [pc, #140]	@ (8006300 <I2C_RequestMemoryRead+0xc0>)
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	2300      	movs	r3, #0
 8006276:	f000 fa37 	bl	80066e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800627a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800627c:	6a39      	ldr	r1, [r7, #32]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	0018      	movs	r0, r3
 8006282:	f000 f8af 	bl	80063e4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006286:	1e03      	subs	r3, r0, #0
 8006288:	d001      	beq.n	800628e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e033      	b.n	80062f6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800628e:	1dbb      	adds	r3, r7, #6
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d107      	bne.n	80062a6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006296:	2308      	movs	r3, #8
 8006298:	18fb      	adds	r3, r7, r3
 800629a:	881b      	ldrh	r3, [r3, #0]
 800629c:	b2da      	uxtb	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80062a4:	e019      	b.n	80062da <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80062a6:	2308      	movs	r3, #8
 80062a8:	18fb      	adds	r3, r7, r3
 80062aa:	881b      	ldrh	r3, [r3, #0]
 80062ac:	0a1b      	lsrs	r3, r3, #8
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062ba:	6a39      	ldr	r1, [r7, #32]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	0018      	movs	r0, r3
 80062c0:	f000 f890 	bl	80063e4 <I2C_WaitOnTXISFlagUntilTimeout>
 80062c4:	1e03      	subs	r3, r0, #0
 80062c6:	d001      	beq.n	80062cc <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e014      	b.n	80062f6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062cc:	2308      	movs	r3, #8
 80062ce:	18fb      	adds	r3, r7, r3
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80062da:	6a3a      	ldr	r2, [r7, #32]
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	0013      	movs	r3, r2
 80062e4:	2200      	movs	r2, #0
 80062e6:	2140      	movs	r1, #64	@ 0x40
 80062e8:	f000 f82e 	bl	8006348 <I2C_WaitOnFlagUntilTimeout>
 80062ec:	1e03      	subs	r3, r0, #0
 80062ee:	d001      	beq.n	80062f4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e000      	b.n	80062f6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	0018      	movs	r0, r3
 80062f8:	46bd      	mov	sp, r7
 80062fa:	b004      	add	sp, #16
 80062fc:	bdb0      	pop	{r4, r5, r7, pc}
 80062fe:	46c0      	nop			@ (mov r8, r8)
 8006300:	80002000 	.word	0x80002000

08006304 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	2202      	movs	r2, #2
 8006314:	4013      	ands	r3, r2
 8006316:	2b02      	cmp	r3, #2
 8006318:	d103      	bne.n	8006322 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2200      	movs	r2, #0
 8006320:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	2201      	movs	r2, #1
 800632a:	4013      	ands	r3, r2
 800632c:	2b01      	cmp	r3, #1
 800632e:	d007      	beq.n	8006340 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	699a      	ldr	r2, [r3, #24]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2101      	movs	r1, #1
 800633c:	430a      	orrs	r2, r1
 800633e:	619a      	str	r2, [r3, #24]
  }
}
 8006340:	46c0      	nop			@ (mov r8, r8)
 8006342:	46bd      	mov	sp, r7
 8006344:	b002      	add	sp, #8
 8006346:	bd80      	pop	{r7, pc}

08006348 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	603b      	str	r3, [r7, #0]
 8006354:	1dfb      	adds	r3, r7, #7
 8006356:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006358:	e030      	b.n	80063bc <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	3301      	adds	r3, #1
 800635e:	d02d      	beq.n	80063bc <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006360:	f7ff f87a 	bl	8005458 <HAL_GetTick>
 8006364:	0002      	movs	r2, r0
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	429a      	cmp	r2, r3
 800636e:	d302      	bcc.n	8006376 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d122      	bne.n	80063bc <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	4013      	ands	r3, r2
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	425a      	negs	r2, r3
 8006386:	4153      	adcs	r3, r2
 8006388:	b2db      	uxtb	r3, r3
 800638a:	001a      	movs	r2, r3
 800638c:	1dfb      	adds	r3, r7, #7
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	429a      	cmp	r2, r3
 8006392:	d113      	bne.n	80063bc <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006398:	2220      	movs	r2, #32
 800639a:	431a      	orrs	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2241      	movs	r2, #65	@ 0x41
 80063a4:	2120      	movs	r1, #32
 80063a6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2242      	movs	r2, #66	@ 0x42
 80063ac:	2100      	movs	r1, #0
 80063ae:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2240      	movs	r2, #64	@ 0x40
 80063b4:	2100      	movs	r1, #0
 80063b6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e00f      	b.n	80063dc <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	4013      	ands	r3, r2
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	425a      	negs	r2, r3
 80063cc:	4153      	adcs	r3, r2
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	001a      	movs	r2, r3
 80063d2:	1dfb      	adds	r3, r7, #7
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d0bf      	beq.n	800635a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	0018      	movs	r0, r3
 80063de:	46bd      	mov	sp, r7
 80063e0:	b004      	add	sp, #16
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80063f0:	e032      	b.n	8006458 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	68b9      	ldr	r1, [r7, #8]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	0018      	movs	r0, r3
 80063fa:	f000 f87d 	bl	80064f8 <I2C_IsErrorOccurred>
 80063fe:	1e03      	subs	r3, r0, #0
 8006400:	d001      	beq.n	8006406 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e030      	b.n	8006468 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	3301      	adds	r3, #1
 800640a:	d025      	beq.n	8006458 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800640c:	f7ff f824 	bl	8005458 <HAL_GetTick>
 8006410:	0002      	movs	r2, r0
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	429a      	cmp	r2, r3
 800641a:	d302      	bcc.n	8006422 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d11a      	bne.n	8006458 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	2202      	movs	r2, #2
 800642a:	4013      	ands	r3, r2
 800642c:	2b02      	cmp	r3, #2
 800642e:	d013      	beq.n	8006458 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006434:	2220      	movs	r2, #32
 8006436:	431a      	orrs	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2241      	movs	r2, #65	@ 0x41
 8006440:	2120      	movs	r1, #32
 8006442:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2242      	movs	r2, #66	@ 0x42
 8006448:	2100      	movs	r1, #0
 800644a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2240      	movs	r2, #64	@ 0x40
 8006450:	2100      	movs	r1, #0
 8006452:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e007      	b.n	8006468 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	2202      	movs	r2, #2
 8006460:	4013      	ands	r3, r2
 8006462:	2b02      	cmp	r3, #2
 8006464:	d1c5      	bne.n	80063f2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	0018      	movs	r0, r3
 800646a:	46bd      	mov	sp, r7
 800646c:	b004      	add	sp, #16
 800646e:	bd80      	pop	{r7, pc}

08006470 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800647c:	e02f      	b.n	80064de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	68b9      	ldr	r1, [r7, #8]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	0018      	movs	r0, r3
 8006486:	f000 f837 	bl	80064f8 <I2C_IsErrorOccurred>
 800648a:	1e03      	subs	r3, r0, #0
 800648c:	d001      	beq.n	8006492 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e02d      	b.n	80064ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006492:	f7fe ffe1 	bl	8005458 <HAL_GetTick>
 8006496:	0002      	movs	r2, r0
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d302      	bcc.n	80064a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d11a      	bne.n	80064de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	2220      	movs	r2, #32
 80064b0:	4013      	ands	r3, r2
 80064b2:	2b20      	cmp	r3, #32
 80064b4:	d013      	beq.n	80064de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ba:	2220      	movs	r2, #32
 80064bc:	431a      	orrs	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2241      	movs	r2, #65	@ 0x41
 80064c6:	2120      	movs	r1, #32
 80064c8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2242      	movs	r2, #66	@ 0x42
 80064ce:	2100      	movs	r1, #0
 80064d0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2240      	movs	r2, #64	@ 0x40
 80064d6:	2100      	movs	r1, #0
 80064d8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e007      	b.n	80064ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	2220      	movs	r2, #32
 80064e6:	4013      	ands	r3, r2
 80064e8:	2b20      	cmp	r3, #32
 80064ea:	d1c8      	bne.n	800647e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	0018      	movs	r0, r3
 80064f0:	46bd      	mov	sp, r7
 80064f2:	b004      	add	sp, #16
 80064f4:	bd80      	pop	{r7, pc}
	...

080064f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b08a      	sub	sp, #40	@ 0x28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006504:	2327      	movs	r3, #39	@ 0x27
 8006506:	18fb      	adds	r3, r7, r3
 8006508:	2200      	movs	r2, #0
 800650a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006514:	2300      	movs	r3, #0
 8006516:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	2210      	movs	r2, #16
 8006520:	4013      	ands	r3, r2
 8006522:	d100      	bne.n	8006526 <I2C_IsErrorOccurred+0x2e>
 8006524:	e079      	b.n	800661a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2210      	movs	r2, #16
 800652c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800652e:	e057      	b.n	80065e0 <I2C_IsErrorOccurred+0xe8>
 8006530:	2227      	movs	r2, #39	@ 0x27
 8006532:	18bb      	adds	r3, r7, r2
 8006534:	18ba      	adds	r2, r7, r2
 8006536:	7812      	ldrb	r2, [r2, #0]
 8006538:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	3301      	adds	r3, #1
 800653e:	d04f      	beq.n	80065e0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006540:	f7fe ff8a 	bl	8005458 <HAL_GetTick>
 8006544:	0002      	movs	r2, r0
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	429a      	cmp	r2, r3
 800654e:	d302      	bcc.n	8006556 <I2C_IsErrorOccurred+0x5e>
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d144      	bne.n	80065e0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	2380      	movs	r3, #128	@ 0x80
 800655e:	01db      	lsls	r3, r3, #7
 8006560:	4013      	ands	r3, r2
 8006562:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006564:	2013      	movs	r0, #19
 8006566:	183b      	adds	r3, r7, r0
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	2142      	movs	r1, #66	@ 0x42
 800656c:	5c52      	ldrb	r2, [r2, r1]
 800656e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	699a      	ldr	r2, [r3, #24]
 8006576:	2380      	movs	r3, #128	@ 0x80
 8006578:	021b      	lsls	r3, r3, #8
 800657a:	401a      	ands	r2, r3
 800657c:	2380      	movs	r3, #128	@ 0x80
 800657e:	021b      	lsls	r3, r3, #8
 8006580:	429a      	cmp	r2, r3
 8006582:	d126      	bne.n	80065d2 <I2C_IsErrorOccurred+0xda>
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	2380      	movs	r3, #128	@ 0x80
 8006588:	01db      	lsls	r3, r3, #7
 800658a:	429a      	cmp	r2, r3
 800658c:	d021      	beq.n	80065d2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800658e:	183b      	adds	r3, r7, r0
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	2b20      	cmp	r3, #32
 8006594:	d01d      	beq.n	80065d2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2180      	movs	r1, #128	@ 0x80
 80065a2:	01c9      	lsls	r1, r1, #7
 80065a4:	430a      	orrs	r2, r1
 80065a6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80065a8:	f7fe ff56 	bl	8005458 <HAL_GetTick>
 80065ac:	0003      	movs	r3, r0
 80065ae:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065b0:	e00f      	b.n	80065d2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80065b2:	f7fe ff51 	bl	8005458 <HAL_GetTick>
 80065b6:	0002      	movs	r2, r0
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	2b19      	cmp	r3, #25
 80065be:	d908      	bls.n	80065d2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80065c0:	6a3b      	ldr	r3, [r7, #32]
 80065c2:	2220      	movs	r2, #32
 80065c4:	4313      	orrs	r3, r2
 80065c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80065c8:	2327      	movs	r3, #39	@ 0x27
 80065ca:	18fb      	adds	r3, r7, r3
 80065cc:	2201      	movs	r2, #1
 80065ce:	701a      	strb	r2, [r3, #0]

              break;
 80065d0:	e006      	b.n	80065e0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	2220      	movs	r2, #32
 80065da:	4013      	ands	r3, r2
 80065dc:	2b20      	cmp	r3, #32
 80065de:	d1e8      	bne.n	80065b2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	2220      	movs	r2, #32
 80065e8:	4013      	ands	r3, r2
 80065ea:	2b20      	cmp	r3, #32
 80065ec:	d004      	beq.n	80065f8 <I2C_IsErrorOccurred+0x100>
 80065ee:	2327      	movs	r3, #39	@ 0x27
 80065f0:	18fb      	adds	r3, r7, r3
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d09b      	beq.n	8006530 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80065f8:	2327      	movs	r3, #39	@ 0x27
 80065fa:	18fb      	adds	r3, r7, r3
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d103      	bne.n	800660a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2220      	movs	r2, #32
 8006608:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800660a:	6a3b      	ldr	r3, [r7, #32]
 800660c:	2204      	movs	r2, #4
 800660e:	4313      	orrs	r3, r2
 8006610:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006612:	2327      	movs	r3, #39	@ 0x27
 8006614:	18fb      	adds	r3, r7, r3
 8006616:	2201      	movs	r2, #1
 8006618:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006622:	69ba      	ldr	r2, [r7, #24]
 8006624:	2380      	movs	r3, #128	@ 0x80
 8006626:	005b      	lsls	r3, r3, #1
 8006628:	4013      	ands	r3, r2
 800662a:	d00c      	beq.n	8006646 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800662c:	6a3b      	ldr	r3, [r7, #32]
 800662e:	2201      	movs	r2, #1
 8006630:	4313      	orrs	r3, r2
 8006632:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2280      	movs	r2, #128	@ 0x80
 800663a:	0052      	lsls	r2, r2, #1
 800663c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800663e:	2327      	movs	r3, #39	@ 0x27
 8006640:	18fb      	adds	r3, r7, r3
 8006642:	2201      	movs	r2, #1
 8006644:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006646:	69ba      	ldr	r2, [r7, #24]
 8006648:	2380      	movs	r3, #128	@ 0x80
 800664a:	00db      	lsls	r3, r3, #3
 800664c:	4013      	ands	r3, r2
 800664e:	d00c      	beq.n	800666a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	2208      	movs	r2, #8
 8006654:	4313      	orrs	r3, r2
 8006656:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2280      	movs	r2, #128	@ 0x80
 800665e:	00d2      	lsls	r2, r2, #3
 8006660:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006662:	2327      	movs	r3, #39	@ 0x27
 8006664:	18fb      	adds	r3, r7, r3
 8006666:	2201      	movs	r2, #1
 8006668:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	2380      	movs	r3, #128	@ 0x80
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4013      	ands	r3, r2
 8006672:	d00c      	beq.n	800668e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	2202      	movs	r2, #2
 8006678:	4313      	orrs	r3, r2
 800667a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2280      	movs	r2, #128	@ 0x80
 8006682:	0092      	lsls	r2, r2, #2
 8006684:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006686:	2327      	movs	r3, #39	@ 0x27
 8006688:	18fb      	adds	r3, r7, r3
 800668a:	2201      	movs	r2, #1
 800668c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800668e:	2327      	movs	r3, #39	@ 0x27
 8006690:	18fb      	adds	r3, r7, r3
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d01d      	beq.n	80066d4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	0018      	movs	r0, r3
 800669c:	f7ff fe32 	bl	8006304 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	490e      	ldr	r1, [pc, #56]	@ (80066e4 <I2C_IsErrorOccurred+0x1ec>)
 80066ac:	400a      	ands	r2, r1
 80066ae:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	431a      	orrs	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2241      	movs	r2, #65	@ 0x41
 80066c0:	2120      	movs	r1, #32
 80066c2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2242      	movs	r2, #66	@ 0x42
 80066c8:	2100      	movs	r1, #0
 80066ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2240      	movs	r2, #64	@ 0x40
 80066d0:	2100      	movs	r1, #0
 80066d2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80066d4:	2327      	movs	r3, #39	@ 0x27
 80066d6:	18fb      	adds	r3, r7, r3
 80066d8:	781b      	ldrb	r3, [r3, #0]
}
 80066da:	0018      	movs	r0, r3
 80066dc:	46bd      	mov	sp, r7
 80066de:	b00a      	add	sp, #40	@ 0x28
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	46c0      	nop			@ (mov r8, r8)
 80066e4:	fe00e800 	.word	0xfe00e800

080066e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80066e8:	b590      	push	{r4, r7, lr}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	0008      	movs	r0, r1
 80066f2:	0011      	movs	r1, r2
 80066f4:	607b      	str	r3, [r7, #4]
 80066f6:	240a      	movs	r4, #10
 80066f8:	193b      	adds	r3, r7, r4
 80066fa:	1c02      	adds	r2, r0, #0
 80066fc:	801a      	strh	r2, [r3, #0]
 80066fe:	2009      	movs	r0, #9
 8006700:	183b      	adds	r3, r7, r0
 8006702:	1c0a      	adds	r2, r1, #0
 8006704:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006706:	193b      	adds	r3, r7, r4
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	059b      	lsls	r3, r3, #22
 800670c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800670e:	183b      	adds	r3, r7, r0
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	0419      	lsls	r1, r3, #16
 8006714:	23ff      	movs	r3, #255	@ 0xff
 8006716:	041b      	lsls	r3, r3, #16
 8006718:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800671a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006722:	4313      	orrs	r3, r2
 8006724:	005b      	lsls	r3, r3, #1
 8006726:	085b      	lsrs	r3, r3, #1
 8006728:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006732:	0d51      	lsrs	r1, r2, #21
 8006734:	2280      	movs	r2, #128	@ 0x80
 8006736:	00d2      	lsls	r2, r2, #3
 8006738:	400a      	ands	r2, r1
 800673a:	4907      	ldr	r1, [pc, #28]	@ (8006758 <I2C_TransferConfig+0x70>)
 800673c:	430a      	orrs	r2, r1
 800673e:	43d2      	mvns	r2, r2
 8006740:	401a      	ands	r2, r3
 8006742:	0011      	movs	r1, r2
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	430a      	orrs	r2, r1
 800674c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800674e:	46c0      	nop			@ (mov r8, r8)
 8006750:	46bd      	mov	sp, r7
 8006752:	b007      	add	sp, #28
 8006754:	bd90      	pop	{r4, r7, pc}
 8006756:	46c0      	nop			@ (mov r8, r8)
 8006758:	03ff63ff 	.word	0x03ff63ff

0800675c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2241      	movs	r2, #65	@ 0x41
 800676a:	5c9b      	ldrb	r3, [r3, r2]
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b20      	cmp	r3, #32
 8006770:	d138      	bne.n	80067e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2240      	movs	r2, #64	@ 0x40
 8006776:	5c9b      	ldrb	r3, [r3, r2]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d101      	bne.n	8006780 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800677c:	2302      	movs	r3, #2
 800677e:	e032      	b.n	80067e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2240      	movs	r2, #64	@ 0x40
 8006784:	2101      	movs	r1, #1
 8006786:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2241      	movs	r2, #65	@ 0x41
 800678c:	2124      	movs	r1, #36	@ 0x24
 800678e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2101      	movs	r1, #1
 800679c:	438a      	bics	r2, r1
 800679e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4911      	ldr	r1, [pc, #68]	@ (80067f0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80067ac:	400a      	ands	r2, r1
 80067ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6819      	ldr	r1, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	430a      	orrs	r2, r1
 80067be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2101      	movs	r1, #1
 80067cc:	430a      	orrs	r2, r1
 80067ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2241      	movs	r2, #65	@ 0x41
 80067d4:	2120      	movs	r1, #32
 80067d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2240      	movs	r2, #64	@ 0x40
 80067dc:	2100      	movs	r1, #0
 80067de:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80067e0:	2300      	movs	r3, #0
 80067e2:	e000      	b.n	80067e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80067e4:	2302      	movs	r3, #2
  }
}
 80067e6:	0018      	movs	r0, r3
 80067e8:	46bd      	mov	sp, r7
 80067ea:	b002      	add	sp, #8
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	46c0      	nop			@ (mov r8, r8)
 80067f0:	ffffefff 	.word	0xffffefff

080067f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2241      	movs	r2, #65	@ 0x41
 8006802:	5c9b      	ldrb	r3, [r3, r2]
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b20      	cmp	r3, #32
 8006808:	d139      	bne.n	800687e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2240      	movs	r2, #64	@ 0x40
 800680e:	5c9b      	ldrb	r3, [r3, r2]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d101      	bne.n	8006818 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006814:	2302      	movs	r3, #2
 8006816:	e033      	b.n	8006880 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2240      	movs	r2, #64	@ 0x40
 800681c:	2101      	movs	r1, #1
 800681e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2241      	movs	r2, #65	@ 0x41
 8006824:	2124      	movs	r1, #36	@ 0x24
 8006826:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2101      	movs	r1, #1
 8006834:	438a      	bics	r2, r1
 8006836:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	4a11      	ldr	r2, [pc, #68]	@ (8006888 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006844:	4013      	ands	r3, r2
 8006846:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	021b      	lsls	r3, r3, #8
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	4313      	orrs	r3, r2
 8006850:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2101      	movs	r1, #1
 8006866:	430a      	orrs	r2, r1
 8006868:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2241      	movs	r2, #65	@ 0x41
 800686e:	2120      	movs	r1, #32
 8006870:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2240      	movs	r2, #64	@ 0x40
 8006876:	2100      	movs	r1, #0
 8006878:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	e000      	b.n	8006880 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800687e:	2302      	movs	r3, #2
  }
}
 8006880:	0018      	movs	r0, r3
 8006882:	46bd      	mov	sp, r7
 8006884:	b004      	add	sp, #16
 8006886:	bd80      	pop	{r7, pc}
 8006888:	fffff0ff 	.word	0xfffff0ff

0800688c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800688c:	b5b0      	push	{r4, r5, r7, lr}
 800688e:	b08a      	sub	sp, #40	@ 0x28
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d102      	bne.n	80068a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	f000 fbbf 	bl	800701e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068a0:	4bc9      	ldr	r3, [pc, #804]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	220c      	movs	r2, #12
 80068a6:	4013      	ands	r3, r2
 80068a8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068aa:	4bc7      	ldr	r3, [pc, #796]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 80068ac:	68da      	ldr	r2, [r3, #12]
 80068ae:	2380      	movs	r3, #128	@ 0x80
 80068b0:	025b      	lsls	r3, r3, #9
 80068b2:	4013      	ands	r3, r2
 80068b4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2201      	movs	r2, #1
 80068bc:	4013      	ands	r3, r2
 80068be:	d100      	bne.n	80068c2 <HAL_RCC_OscConfig+0x36>
 80068c0:	e07e      	b.n	80069c0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	2b08      	cmp	r3, #8
 80068c6:	d007      	beq.n	80068d8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	2b0c      	cmp	r3, #12
 80068cc:	d112      	bne.n	80068f4 <HAL_RCC_OscConfig+0x68>
 80068ce:	69ba      	ldr	r2, [r7, #24]
 80068d0:	2380      	movs	r3, #128	@ 0x80
 80068d2:	025b      	lsls	r3, r3, #9
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d10d      	bne.n	80068f4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068d8:	4bbb      	ldr	r3, [pc, #748]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	2380      	movs	r3, #128	@ 0x80
 80068de:	029b      	lsls	r3, r3, #10
 80068e0:	4013      	ands	r3, r2
 80068e2:	d100      	bne.n	80068e6 <HAL_RCC_OscConfig+0x5a>
 80068e4:	e06b      	b.n	80069be <HAL_RCC_OscConfig+0x132>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d167      	bne.n	80069be <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	f000 fb95 	bl	800701e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	2380      	movs	r3, #128	@ 0x80
 80068fa:	025b      	lsls	r3, r3, #9
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d107      	bne.n	8006910 <HAL_RCC_OscConfig+0x84>
 8006900:	4bb1      	ldr	r3, [pc, #708]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	4bb0      	ldr	r3, [pc, #704]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006906:	2180      	movs	r1, #128	@ 0x80
 8006908:	0249      	lsls	r1, r1, #9
 800690a:	430a      	orrs	r2, r1
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	e027      	b.n	8006960 <HAL_RCC_OscConfig+0xd4>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	23a0      	movs	r3, #160	@ 0xa0
 8006916:	02db      	lsls	r3, r3, #11
 8006918:	429a      	cmp	r2, r3
 800691a:	d10e      	bne.n	800693a <HAL_RCC_OscConfig+0xae>
 800691c:	4baa      	ldr	r3, [pc, #680]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	4ba9      	ldr	r3, [pc, #676]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006922:	2180      	movs	r1, #128	@ 0x80
 8006924:	02c9      	lsls	r1, r1, #11
 8006926:	430a      	orrs	r2, r1
 8006928:	601a      	str	r2, [r3, #0]
 800692a:	4ba7      	ldr	r3, [pc, #668]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	4ba6      	ldr	r3, [pc, #664]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006930:	2180      	movs	r1, #128	@ 0x80
 8006932:	0249      	lsls	r1, r1, #9
 8006934:	430a      	orrs	r2, r1
 8006936:	601a      	str	r2, [r3, #0]
 8006938:	e012      	b.n	8006960 <HAL_RCC_OscConfig+0xd4>
 800693a:	4ba3      	ldr	r3, [pc, #652]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	4ba2      	ldr	r3, [pc, #648]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006940:	49a2      	ldr	r1, [pc, #648]	@ (8006bcc <HAL_RCC_OscConfig+0x340>)
 8006942:	400a      	ands	r2, r1
 8006944:	601a      	str	r2, [r3, #0]
 8006946:	4ba0      	ldr	r3, [pc, #640]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	2380      	movs	r3, #128	@ 0x80
 800694c:	025b      	lsls	r3, r3, #9
 800694e:	4013      	ands	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	4b9c      	ldr	r3, [pc, #624]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	4b9b      	ldr	r3, [pc, #620]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 800695a:	499d      	ldr	r1, [pc, #628]	@ (8006bd0 <HAL_RCC_OscConfig+0x344>)
 800695c:	400a      	ands	r2, r1
 800695e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d015      	beq.n	8006994 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006968:	f7fe fd76 	bl	8005458 <HAL_GetTick>
 800696c:	0003      	movs	r3, r0
 800696e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006970:	e009      	b.n	8006986 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006972:	f7fe fd71 	bl	8005458 <HAL_GetTick>
 8006976:	0002      	movs	r2, r0
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	2b64      	cmp	r3, #100	@ 0x64
 800697e:	d902      	bls.n	8006986 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	f000 fb4c 	bl	800701e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006986:	4b90      	ldr	r3, [pc, #576]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	2380      	movs	r3, #128	@ 0x80
 800698c:	029b      	lsls	r3, r3, #10
 800698e:	4013      	ands	r3, r2
 8006990:	d0ef      	beq.n	8006972 <HAL_RCC_OscConfig+0xe6>
 8006992:	e015      	b.n	80069c0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006994:	f7fe fd60 	bl	8005458 <HAL_GetTick>
 8006998:	0003      	movs	r3, r0
 800699a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800699c:	e008      	b.n	80069b0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800699e:	f7fe fd5b 	bl	8005458 <HAL_GetTick>
 80069a2:	0002      	movs	r2, r0
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	2b64      	cmp	r3, #100	@ 0x64
 80069aa:	d901      	bls.n	80069b0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80069ac:	2303      	movs	r3, #3
 80069ae:	e336      	b.n	800701e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80069b0:	4b85      	ldr	r3, [pc, #532]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	2380      	movs	r3, #128	@ 0x80
 80069b6:	029b      	lsls	r3, r3, #10
 80069b8:	4013      	ands	r3, r2
 80069ba:	d1f0      	bne.n	800699e <HAL_RCC_OscConfig+0x112>
 80069bc:	e000      	b.n	80069c0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069be:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2202      	movs	r2, #2
 80069c6:	4013      	ands	r3, r2
 80069c8:	d100      	bne.n	80069cc <HAL_RCC_OscConfig+0x140>
 80069ca:	e099      	b.n	8006b00 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80069d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d4:	2220      	movs	r2, #32
 80069d6:	4013      	ands	r3, r2
 80069d8:	d009      	beq.n	80069ee <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80069da:	4b7b      	ldr	r3, [pc, #492]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	4b7a      	ldr	r3, [pc, #488]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 80069e0:	2120      	movs	r1, #32
 80069e2:	430a      	orrs	r2, r1
 80069e4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80069e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e8:	2220      	movs	r2, #32
 80069ea:	4393      	bics	r3, r2
 80069ec:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	2b04      	cmp	r3, #4
 80069f2:	d005      	beq.n	8006a00 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	2b0c      	cmp	r3, #12
 80069f8:	d13e      	bne.n	8006a78 <HAL_RCC_OscConfig+0x1ec>
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d13b      	bne.n	8006a78 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8006a00:	4b71      	ldr	r3, [pc, #452]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2204      	movs	r2, #4
 8006a06:	4013      	ands	r3, r2
 8006a08:	d004      	beq.n	8006a14 <HAL_RCC_OscConfig+0x188>
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e304      	b.n	800701e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a14:	4b6c      	ldr	r3, [pc, #432]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	4a6e      	ldr	r2, [pc, #440]	@ (8006bd4 <HAL_RCC_OscConfig+0x348>)
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	0019      	movs	r1, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	021a      	lsls	r2, r3, #8
 8006a24:	4b68      	ldr	r3, [pc, #416]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006a26:	430a      	orrs	r2, r1
 8006a28:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006a2a:	4b67      	ldr	r3, [pc, #412]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2209      	movs	r2, #9
 8006a30:	4393      	bics	r3, r2
 8006a32:	0019      	movs	r1, r3
 8006a34:	4b64      	ldr	r3, [pc, #400]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006a36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a38:	430a      	orrs	r2, r1
 8006a3a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a3c:	f000 fc42 	bl	80072c4 <HAL_RCC_GetSysClockFreq>
 8006a40:	0001      	movs	r1, r0
 8006a42:	4b61      	ldr	r3, [pc, #388]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	091b      	lsrs	r3, r3, #4
 8006a48:	220f      	movs	r2, #15
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	4a62      	ldr	r2, [pc, #392]	@ (8006bd8 <HAL_RCC_OscConfig+0x34c>)
 8006a4e:	5cd3      	ldrb	r3, [r2, r3]
 8006a50:	000a      	movs	r2, r1
 8006a52:	40da      	lsrs	r2, r3
 8006a54:	4b61      	ldr	r3, [pc, #388]	@ (8006bdc <HAL_RCC_OscConfig+0x350>)
 8006a56:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8006a58:	4b61      	ldr	r3, [pc, #388]	@ (8006be0 <HAL_RCC_OscConfig+0x354>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2513      	movs	r5, #19
 8006a5e:	197c      	adds	r4, r7, r5
 8006a60:	0018      	movs	r0, r3
 8006a62:	f7fe fcb3 	bl	80053cc <HAL_InitTick>
 8006a66:	0003      	movs	r3, r0
 8006a68:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8006a6a:	197b      	adds	r3, r7, r5
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d046      	beq.n	8006b00 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8006a72:	197b      	adds	r3, r7, r5
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	e2d2      	b.n	800701e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8006a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d027      	beq.n	8006ace <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006a7e:	4b52      	ldr	r3, [pc, #328]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2209      	movs	r2, #9
 8006a84:	4393      	bics	r3, r2
 8006a86:	0019      	movs	r1, r3
 8006a88:	4b4f      	ldr	r3, [pc, #316]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a90:	f7fe fce2 	bl	8005458 <HAL_GetTick>
 8006a94:	0003      	movs	r3, r0
 8006a96:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a98:	e008      	b.n	8006aac <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a9a:	f7fe fcdd 	bl	8005458 <HAL_GetTick>
 8006a9e:	0002      	movs	r2, r0
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d901      	bls.n	8006aac <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e2b8      	b.n	800701e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006aac:	4b46      	ldr	r3, [pc, #280]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2204      	movs	r2, #4
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	d0f1      	beq.n	8006a9a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ab6:	4b44      	ldr	r3, [pc, #272]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	4a46      	ldr	r2, [pc, #280]	@ (8006bd4 <HAL_RCC_OscConfig+0x348>)
 8006abc:	4013      	ands	r3, r2
 8006abe:	0019      	movs	r1, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	021a      	lsls	r2, r3, #8
 8006ac6:	4b40      	ldr	r3, [pc, #256]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	605a      	str	r2, [r3, #4]
 8006acc:	e018      	b.n	8006b00 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ace:	4b3e      	ldr	r3, [pc, #248]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	4b3d      	ldr	r3, [pc, #244]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006ad4:	2101      	movs	r1, #1
 8006ad6:	438a      	bics	r2, r1
 8006ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ada:	f7fe fcbd 	bl	8005458 <HAL_GetTick>
 8006ade:	0003      	movs	r3, r0
 8006ae0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ae2:	e008      	b.n	8006af6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ae4:	f7fe fcb8 	bl	8005458 <HAL_GetTick>
 8006ae8:	0002      	movs	r2, r0
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d901      	bls.n	8006af6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e293      	b.n	800701e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006af6:	4b34      	ldr	r3, [pc, #208]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2204      	movs	r2, #4
 8006afc:	4013      	ands	r3, r2
 8006afe:	d1f1      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2210      	movs	r2, #16
 8006b06:	4013      	ands	r3, r2
 8006b08:	d100      	bne.n	8006b0c <HAL_RCC_OscConfig+0x280>
 8006b0a:	e0a2      	b.n	8006c52 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d140      	bne.n	8006b94 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006b12:	4b2d      	ldr	r3, [pc, #180]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	2380      	movs	r3, #128	@ 0x80
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	d005      	beq.n	8006b2a <HAL_RCC_OscConfig+0x29e>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d101      	bne.n	8006b2a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e279      	b.n	800701e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b2a:	4b27      	ldr	r3, [pc, #156]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	4a2d      	ldr	r2, [pc, #180]	@ (8006be4 <HAL_RCC_OscConfig+0x358>)
 8006b30:	4013      	ands	r3, r2
 8006b32:	0019      	movs	r1, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b38:	4b23      	ldr	r3, [pc, #140]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b3e:	4b22      	ldr	r3, [pc, #136]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	021b      	lsls	r3, r3, #8
 8006b44:	0a19      	lsrs	r1, r3, #8
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	061a      	lsls	r2, r3, #24
 8006b4c:	4b1e      	ldr	r3, [pc, #120]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b56:	0b5b      	lsrs	r3, r3, #13
 8006b58:	3301      	adds	r3, #1
 8006b5a:	2280      	movs	r2, #128	@ 0x80
 8006b5c:	0212      	lsls	r2, r2, #8
 8006b5e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006b60:	4b19      	ldr	r3, [pc, #100]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	091b      	lsrs	r3, r3, #4
 8006b66:	210f      	movs	r1, #15
 8006b68:	400b      	ands	r3, r1
 8006b6a:	491b      	ldr	r1, [pc, #108]	@ (8006bd8 <HAL_RCC_OscConfig+0x34c>)
 8006b6c:	5ccb      	ldrb	r3, [r1, r3]
 8006b6e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006b70:	4b1a      	ldr	r3, [pc, #104]	@ (8006bdc <HAL_RCC_OscConfig+0x350>)
 8006b72:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8006b74:	4b1a      	ldr	r3, [pc, #104]	@ (8006be0 <HAL_RCC_OscConfig+0x354>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2513      	movs	r5, #19
 8006b7a:	197c      	adds	r4, r7, r5
 8006b7c:	0018      	movs	r0, r3
 8006b7e:	f7fe fc25 	bl	80053cc <HAL_InitTick>
 8006b82:	0003      	movs	r3, r0
 8006b84:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8006b86:	197b      	adds	r3, r7, r5
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d061      	beq.n	8006c52 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8006b8e:	197b      	adds	r3, r7, r5
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	e244      	b.n	800701e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d040      	beq.n	8006c1e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	4b09      	ldr	r3, [pc, #36]	@ (8006bc8 <HAL_RCC_OscConfig+0x33c>)
 8006ba2:	2180      	movs	r1, #128	@ 0x80
 8006ba4:	0049      	lsls	r1, r1, #1
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006baa:	f7fe fc55 	bl	8005458 <HAL_GetTick>
 8006bae:	0003      	movs	r3, r0
 8006bb0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006bb2:	e019      	b.n	8006be8 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006bb4:	f7fe fc50 	bl	8005458 <HAL_GetTick>
 8006bb8:	0002      	movs	r2, r0
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d912      	bls.n	8006be8 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e22b      	b.n	800701e <HAL_RCC_OscConfig+0x792>
 8006bc6:	46c0      	nop			@ (mov r8, r8)
 8006bc8:	40021000 	.word	0x40021000
 8006bcc:	fffeffff 	.word	0xfffeffff
 8006bd0:	fffbffff 	.word	0xfffbffff
 8006bd4:	ffffe0ff 	.word	0xffffe0ff
 8006bd8:	080086b8 	.word	0x080086b8
 8006bdc:	20000000 	.word	0x20000000
 8006be0:	20000004 	.word	0x20000004
 8006be4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006be8:	4bca      	ldr	r3, [pc, #808]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	2380      	movs	r3, #128	@ 0x80
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	d0df      	beq.n	8006bb4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006bf4:	4bc7      	ldr	r3, [pc, #796]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	4ac7      	ldr	r2, [pc, #796]	@ (8006f18 <HAL_RCC_OscConfig+0x68c>)
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	0019      	movs	r1, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c02:	4bc4      	ldr	r3, [pc, #784]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006c04:	430a      	orrs	r2, r1
 8006c06:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c08:	4bc2      	ldr	r3, [pc, #776]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	021b      	lsls	r3, r3, #8
 8006c0e:	0a19      	lsrs	r1, r3, #8
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a1b      	ldr	r3, [r3, #32]
 8006c14:	061a      	lsls	r2, r3, #24
 8006c16:	4bbf      	ldr	r3, [pc, #764]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006c18:	430a      	orrs	r2, r1
 8006c1a:	605a      	str	r2, [r3, #4]
 8006c1c:	e019      	b.n	8006c52 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006c1e:	4bbd      	ldr	r3, [pc, #756]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	4bbc      	ldr	r3, [pc, #752]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006c24:	49bd      	ldr	r1, [pc, #756]	@ (8006f1c <HAL_RCC_OscConfig+0x690>)
 8006c26:	400a      	ands	r2, r1
 8006c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c2a:	f7fe fc15 	bl	8005458 <HAL_GetTick>
 8006c2e:	0003      	movs	r3, r0
 8006c30:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006c32:	e008      	b.n	8006c46 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006c34:	f7fe fc10 	bl	8005458 <HAL_GetTick>
 8006c38:	0002      	movs	r2, r0
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d901      	bls.n	8006c46 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e1eb      	b.n	800701e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006c46:	4bb3      	ldr	r3, [pc, #716]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	2380      	movs	r3, #128	@ 0x80
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4013      	ands	r3, r2
 8006c50:	d1f0      	bne.n	8006c34 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2208      	movs	r2, #8
 8006c58:	4013      	ands	r3, r2
 8006c5a:	d036      	beq.n	8006cca <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	695b      	ldr	r3, [r3, #20]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d019      	beq.n	8006c98 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c64:	4bab      	ldr	r3, [pc, #684]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006c66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c68:	4baa      	ldr	r3, [pc, #680]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c70:	f7fe fbf2 	bl	8005458 <HAL_GetTick>
 8006c74:	0003      	movs	r3, r0
 8006c76:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c78:	e008      	b.n	8006c8c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c7a:	f7fe fbed 	bl	8005458 <HAL_GetTick>
 8006c7e:	0002      	movs	r2, r0
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d901      	bls.n	8006c8c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e1c8      	b.n	800701e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c8c:	4ba1      	ldr	r3, [pc, #644]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c90:	2202      	movs	r2, #2
 8006c92:	4013      	ands	r3, r2
 8006c94:	d0f1      	beq.n	8006c7a <HAL_RCC_OscConfig+0x3ee>
 8006c96:	e018      	b.n	8006cca <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c98:	4b9e      	ldr	r3, [pc, #632]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006c9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c9c:	4b9d      	ldr	r3, [pc, #628]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006c9e:	2101      	movs	r1, #1
 8006ca0:	438a      	bics	r2, r1
 8006ca2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ca4:	f7fe fbd8 	bl	8005458 <HAL_GetTick>
 8006ca8:	0003      	movs	r3, r0
 8006caa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006cac:	e008      	b.n	8006cc0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cae:	f7fe fbd3 	bl	8005458 <HAL_GetTick>
 8006cb2:	0002      	movs	r2, r0
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d901      	bls.n	8006cc0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e1ae      	b.n	800701e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006cc0:	4b94      	ldr	r3, [pc, #592]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006cc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	d1f1      	bne.n	8006cae <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2204      	movs	r2, #4
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	d100      	bne.n	8006cd6 <HAL_RCC_OscConfig+0x44a>
 8006cd4:	e0ae      	b.n	8006e34 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cd6:	2023      	movs	r0, #35	@ 0x23
 8006cd8:	183b      	adds	r3, r7, r0
 8006cda:	2200      	movs	r2, #0
 8006cdc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cde:	4b8d      	ldr	r3, [pc, #564]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006ce0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ce2:	2380      	movs	r3, #128	@ 0x80
 8006ce4:	055b      	lsls	r3, r3, #21
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	d109      	bne.n	8006cfe <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cea:	4b8a      	ldr	r3, [pc, #552]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006cec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cee:	4b89      	ldr	r3, [pc, #548]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006cf0:	2180      	movs	r1, #128	@ 0x80
 8006cf2:	0549      	lsls	r1, r1, #21
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8006cf8:	183b      	adds	r3, r7, r0
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cfe:	4b88      	ldr	r3, [pc, #544]	@ (8006f20 <HAL_RCC_OscConfig+0x694>)
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	2380      	movs	r3, #128	@ 0x80
 8006d04:	005b      	lsls	r3, r3, #1
 8006d06:	4013      	ands	r3, r2
 8006d08:	d11a      	bne.n	8006d40 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d0a:	4b85      	ldr	r3, [pc, #532]	@ (8006f20 <HAL_RCC_OscConfig+0x694>)
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	4b84      	ldr	r3, [pc, #528]	@ (8006f20 <HAL_RCC_OscConfig+0x694>)
 8006d10:	2180      	movs	r1, #128	@ 0x80
 8006d12:	0049      	lsls	r1, r1, #1
 8006d14:	430a      	orrs	r2, r1
 8006d16:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d18:	f7fe fb9e 	bl	8005458 <HAL_GetTick>
 8006d1c:	0003      	movs	r3, r0
 8006d1e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d20:	e008      	b.n	8006d34 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d22:	f7fe fb99 	bl	8005458 <HAL_GetTick>
 8006d26:	0002      	movs	r2, r0
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	2b64      	cmp	r3, #100	@ 0x64
 8006d2e:	d901      	bls.n	8006d34 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8006d30:	2303      	movs	r3, #3
 8006d32:	e174      	b.n	800701e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d34:	4b7a      	ldr	r3, [pc, #488]	@ (8006f20 <HAL_RCC_OscConfig+0x694>)
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	2380      	movs	r3, #128	@ 0x80
 8006d3a:	005b      	lsls	r3, r3, #1
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	d0f0      	beq.n	8006d22 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	689a      	ldr	r2, [r3, #8]
 8006d44:	2380      	movs	r3, #128	@ 0x80
 8006d46:	005b      	lsls	r3, r3, #1
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d107      	bne.n	8006d5c <HAL_RCC_OscConfig+0x4d0>
 8006d4c:	4b71      	ldr	r3, [pc, #452]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006d4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d50:	4b70      	ldr	r3, [pc, #448]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006d52:	2180      	movs	r1, #128	@ 0x80
 8006d54:	0049      	lsls	r1, r1, #1
 8006d56:	430a      	orrs	r2, r1
 8006d58:	651a      	str	r2, [r3, #80]	@ 0x50
 8006d5a:	e031      	b.n	8006dc0 <HAL_RCC_OscConfig+0x534>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10c      	bne.n	8006d7e <HAL_RCC_OscConfig+0x4f2>
 8006d64:	4b6b      	ldr	r3, [pc, #428]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006d66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d68:	4b6a      	ldr	r3, [pc, #424]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006d6a:	496c      	ldr	r1, [pc, #432]	@ (8006f1c <HAL_RCC_OscConfig+0x690>)
 8006d6c:	400a      	ands	r2, r1
 8006d6e:	651a      	str	r2, [r3, #80]	@ 0x50
 8006d70:	4b68      	ldr	r3, [pc, #416]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006d72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d74:	4b67      	ldr	r3, [pc, #412]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006d76:	496b      	ldr	r1, [pc, #428]	@ (8006f24 <HAL_RCC_OscConfig+0x698>)
 8006d78:	400a      	ands	r2, r1
 8006d7a:	651a      	str	r2, [r3, #80]	@ 0x50
 8006d7c:	e020      	b.n	8006dc0 <HAL_RCC_OscConfig+0x534>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	689a      	ldr	r2, [r3, #8]
 8006d82:	23a0      	movs	r3, #160	@ 0xa0
 8006d84:	00db      	lsls	r3, r3, #3
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d10e      	bne.n	8006da8 <HAL_RCC_OscConfig+0x51c>
 8006d8a:	4b62      	ldr	r3, [pc, #392]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006d8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d8e:	4b61      	ldr	r3, [pc, #388]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006d90:	2180      	movs	r1, #128	@ 0x80
 8006d92:	00c9      	lsls	r1, r1, #3
 8006d94:	430a      	orrs	r2, r1
 8006d96:	651a      	str	r2, [r3, #80]	@ 0x50
 8006d98:	4b5e      	ldr	r3, [pc, #376]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006d9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d9c:	4b5d      	ldr	r3, [pc, #372]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006d9e:	2180      	movs	r1, #128	@ 0x80
 8006da0:	0049      	lsls	r1, r1, #1
 8006da2:	430a      	orrs	r2, r1
 8006da4:	651a      	str	r2, [r3, #80]	@ 0x50
 8006da6:	e00b      	b.n	8006dc0 <HAL_RCC_OscConfig+0x534>
 8006da8:	4b5a      	ldr	r3, [pc, #360]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006daa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006dac:	4b59      	ldr	r3, [pc, #356]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006dae:	495b      	ldr	r1, [pc, #364]	@ (8006f1c <HAL_RCC_OscConfig+0x690>)
 8006db0:	400a      	ands	r2, r1
 8006db2:	651a      	str	r2, [r3, #80]	@ 0x50
 8006db4:	4b57      	ldr	r3, [pc, #348]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006db6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006db8:	4b56      	ldr	r3, [pc, #344]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006dba:	495a      	ldr	r1, [pc, #360]	@ (8006f24 <HAL_RCC_OscConfig+0x698>)
 8006dbc:	400a      	ands	r2, r1
 8006dbe:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d015      	beq.n	8006df4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dc8:	f7fe fb46 	bl	8005458 <HAL_GetTick>
 8006dcc:	0003      	movs	r3, r0
 8006dce:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006dd0:	e009      	b.n	8006de6 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dd2:	f7fe fb41 	bl	8005458 <HAL_GetTick>
 8006dd6:	0002      	movs	r2, r0
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	4a52      	ldr	r2, [pc, #328]	@ (8006f28 <HAL_RCC_OscConfig+0x69c>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d901      	bls.n	8006de6 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e11b      	b.n	800701e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006de6:	4b4b      	ldr	r3, [pc, #300]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006de8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006dea:	2380      	movs	r3, #128	@ 0x80
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4013      	ands	r3, r2
 8006df0:	d0ef      	beq.n	8006dd2 <HAL_RCC_OscConfig+0x546>
 8006df2:	e014      	b.n	8006e1e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006df4:	f7fe fb30 	bl	8005458 <HAL_GetTick>
 8006df8:	0003      	movs	r3, r0
 8006dfa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006dfc:	e009      	b.n	8006e12 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dfe:	f7fe fb2b 	bl	8005458 <HAL_GetTick>
 8006e02:	0002      	movs	r2, r0
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	4a47      	ldr	r2, [pc, #284]	@ (8006f28 <HAL_RCC_OscConfig+0x69c>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d901      	bls.n	8006e12 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e105      	b.n	800701e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006e12:	4b40      	ldr	r3, [pc, #256]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006e14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006e16:	2380      	movs	r3, #128	@ 0x80
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	d1ef      	bne.n	8006dfe <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006e1e:	2323      	movs	r3, #35	@ 0x23
 8006e20:	18fb      	adds	r3, r7, r3
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d105      	bne.n	8006e34 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e28:	4b3a      	ldr	r3, [pc, #232]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006e2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e2c:	4b39      	ldr	r3, [pc, #228]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006e2e:	493f      	ldr	r1, [pc, #252]	@ (8006f2c <HAL_RCC_OscConfig+0x6a0>)
 8006e30:	400a      	ands	r2, r1
 8006e32:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2220      	movs	r2, #32
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	d049      	beq.n	8006ed2 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d026      	beq.n	8006e94 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8006e46:	4b33      	ldr	r3, [pc, #204]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006e48:	689a      	ldr	r2, [r3, #8]
 8006e4a:	4b32      	ldr	r3, [pc, #200]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006e4c:	2101      	movs	r1, #1
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	609a      	str	r2, [r3, #8]
 8006e52:	4b30      	ldr	r3, [pc, #192]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006e54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e56:	4b2f      	ldr	r3, [pc, #188]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006e58:	2101      	movs	r1, #1
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8006e5e:	4b34      	ldr	r3, [pc, #208]	@ (8006f30 <HAL_RCC_OscConfig+0x6a4>)
 8006e60:	6a1a      	ldr	r2, [r3, #32]
 8006e62:	4b33      	ldr	r3, [pc, #204]	@ (8006f30 <HAL_RCC_OscConfig+0x6a4>)
 8006e64:	2180      	movs	r1, #128	@ 0x80
 8006e66:	0189      	lsls	r1, r1, #6
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e6c:	f7fe faf4 	bl	8005458 <HAL_GetTick>
 8006e70:	0003      	movs	r3, r0
 8006e72:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006e74:	e008      	b.n	8006e88 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e76:	f7fe faef 	bl	8005458 <HAL_GetTick>
 8006e7a:	0002      	movs	r2, r0
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d901      	bls.n	8006e88 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e0ca      	b.n	800701e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006e88:	4b22      	ldr	r3, [pc, #136]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	2202      	movs	r2, #2
 8006e8e:	4013      	ands	r3, r2
 8006e90:	d0f1      	beq.n	8006e76 <HAL_RCC_OscConfig+0x5ea>
 8006e92:	e01e      	b.n	8006ed2 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8006e94:	4b1f      	ldr	r3, [pc, #124]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006e96:	689a      	ldr	r2, [r3, #8]
 8006e98:	4b1e      	ldr	r3, [pc, #120]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006e9a:	2101      	movs	r1, #1
 8006e9c:	438a      	bics	r2, r1
 8006e9e:	609a      	str	r2, [r3, #8]
 8006ea0:	4b23      	ldr	r3, [pc, #140]	@ (8006f30 <HAL_RCC_OscConfig+0x6a4>)
 8006ea2:	6a1a      	ldr	r2, [r3, #32]
 8006ea4:	4b22      	ldr	r3, [pc, #136]	@ (8006f30 <HAL_RCC_OscConfig+0x6a4>)
 8006ea6:	4923      	ldr	r1, [pc, #140]	@ (8006f34 <HAL_RCC_OscConfig+0x6a8>)
 8006ea8:	400a      	ands	r2, r1
 8006eaa:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eac:	f7fe fad4 	bl	8005458 <HAL_GetTick>
 8006eb0:	0003      	movs	r3, r0
 8006eb2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006eb4:	e008      	b.n	8006ec8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006eb6:	f7fe facf 	bl	8005458 <HAL_GetTick>
 8006eba:	0002      	movs	r2, r0
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d901      	bls.n	8006ec8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e0aa      	b.n	800701e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006ec8:	4b12      	ldr	r3, [pc, #72]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	2202      	movs	r2, #2
 8006ece:	4013      	ands	r3, r2
 8006ed0:	d1f1      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d100      	bne.n	8006edc <HAL_RCC_OscConfig+0x650>
 8006eda:	e09f      	b.n	800701c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	2b0c      	cmp	r3, #12
 8006ee0:	d100      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x658>
 8006ee2:	e078      	b.n	8006fd6 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d159      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eec:	4b09      	ldr	r3, [pc, #36]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	4b08      	ldr	r3, [pc, #32]	@ (8006f14 <HAL_RCC_OscConfig+0x688>)
 8006ef2:	4911      	ldr	r1, [pc, #68]	@ (8006f38 <HAL_RCC_OscConfig+0x6ac>)
 8006ef4:	400a      	ands	r2, r1
 8006ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ef8:	f7fe faae 	bl	8005458 <HAL_GetTick>
 8006efc:	0003      	movs	r3, r0
 8006efe:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006f00:	e01c      	b.n	8006f3c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f02:	f7fe faa9 	bl	8005458 <HAL_GetTick>
 8006f06:	0002      	movs	r2, r0
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d915      	bls.n	8006f3c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e084      	b.n	800701e <HAL_RCC_OscConfig+0x792>
 8006f14:	40021000 	.word	0x40021000
 8006f18:	ffff1fff 	.word	0xffff1fff
 8006f1c:	fffffeff 	.word	0xfffffeff
 8006f20:	40007000 	.word	0x40007000
 8006f24:	fffffbff 	.word	0xfffffbff
 8006f28:	00001388 	.word	0x00001388
 8006f2c:	efffffff 	.word	0xefffffff
 8006f30:	40010000 	.word	0x40010000
 8006f34:	ffffdfff 	.word	0xffffdfff
 8006f38:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006f3c:	4b3a      	ldr	r3, [pc, #232]	@ (8007028 <HAL_RCC_OscConfig+0x79c>)
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	2380      	movs	r3, #128	@ 0x80
 8006f42:	049b      	lsls	r3, r3, #18
 8006f44:	4013      	ands	r3, r2
 8006f46:	d1dc      	bne.n	8006f02 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f48:	4b37      	ldr	r3, [pc, #220]	@ (8007028 <HAL_RCC_OscConfig+0x79c>)
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	4a37      	ldr	r2, [pc, #220]	@ (800702c <HAL_RCC_OscConfig+0x7a0>)
 8006f4e:	4013      	ands	r3, r2
 8006f50:	0019      	movs	r1, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f60:	431a      	orrs	r2, r3
 8006f62:	4b31      	ldr	r3, [pc, #196]	@ (8007028 <HAL_RCC_OscConfig+0x79c>)
 8006f64:	430a      	orrs	r2, r1
 8006f66:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f68:	4b2f      	ldr	r3, [pc, #188]	@ (8007028 <HAL_RCC_OscConfig+0x79c>)
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	4b2e      	ldr	r3, [pc, #184]	@ (8007028 <HAL_RCC_OscConfig+0x79c>)
 8006f6e:	2180      	movs	r1, #128	@ 0x80
 8006f70:	0449      	lsls	r1, r1, #17
 8006f72:	430a      	orrs	r2, r1
 8006f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f76:	f7fe fa6f 	bl	8005458 <HAL_GetTick>
 8006f7a:	0003      	movs	r3, r0
 8006f7c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006f7e:	e008      	b.n	8006f92 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f80:	f7fe fa6a 	bl	8005458 <HAL_GetTick>
 8006f84:	0002      	movs	r2, r0
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d901      	bls.n	8006f92 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e045      	b.n	800701e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006f92:	4b25      	ldr	r3, [pc, #148]	@ (8007028 <HAL_RCC_OscConfig+0x79c>)
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	2380      	movs	r3, #128	@ 0x80
 8006f98:	049b      	lsls	r3, r3, #18
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	d0f0      	beq.n	8006f80 <HAL_RCC_OscConfig+0x6f4>
 8006f9e:	e03d      	b.n	800701c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fa0:	4b21      	ldr	r3, [pc, #132]	@ (8007028 <HAL_RCC_OscConfig+0x79c>)
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	4b20      	ldr	r3, [pc, #128]	@ (8007028 <HAL_RCC_OscConfig+0x79c>)
 8006fa6:	4922      	ldr	r1, [pc, #136]	@ (8007030 <HAL_RCC_OscConfig+0x7a4>)
 8006fa8:	400a      	ands	r2, r1
 8006faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fac:	f7fe fa54 	bl	8005458 <HAL_GetTick>
 8006fb0:	0003      	movs	r3, r0
 8006fb2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006fb4:	e008      	b.n	8006fc8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fb6:	f7fe fa4f 	bl	8005458 <HAL_GetTick>
 8006fba:	0002      	movs	r2, r0
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d901      	bls.n	8006fc8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e02a      	b.n	800701e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006fc8:	4b17      	ldr	r3, [pc, #92]	@ (8007028 <HAL_RCC_OscConfig+0x79c>)
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	2380      	movs	r3, #128	@ 0x80
 8006fce:	049b      	lsls	r3, r3, #18
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	d1f0      	bne.n	8006fb6 <HAL_RCC_OscConfig+0x72a>
 8006fd4:	e022      	b.n	800701c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d101      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e01d      	b.n	800701e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006fe2:	4b11      	ldr	r3, [pc, #68]	@ (8007028 <HAL_RCC_OscConfig+0x79c>)
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	2380      	movs	r3, #128	@ 0x80
 8006fec:	025b      	lsls	r3, r3, #9
 8006fee:	401a      	ands	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d10f      	bne.n	8007018 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006ff8:	69ba      	ldr	r2, [r7, #24]
 8006ffa:	23f0      	movs	r3, #240	@ 0xf0
 8006ffc:	039b      	lsls	r3, r3, #14
 8006ffe:	401a      	ands	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007004:	429a      	cmp	r2, r3
 8007006:	d107      	bne.n	8007018 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8007008:	69ba      	ldr	r2, [r7, #24]
 800700a:	23c0      	movs	r3, #192	@ 0xc0
 800700c:	041b      	lsls	r3, r3, #16
 800700e:	401a      	ands	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007014:	429a      	cmp	r2, r3
 8007016:	d001      	beq.n	800701c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e000      	b.n	800701e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	0018      	movs	r0, r3
 8007020:	46bd      	mov	sp, r7
 8007022:	b00a      	add	sp, #40	@ 0x28
 8007024:	bdb0      	pop	{r4, r5, r7, pc}
 8007026:	46c0      	nop			@ (mov r8, r8)
 8007028:	40021000 	.word	0x40021000
 800702c:	ff02ffff 	.word	0xff02ffff
 8007030:	feffffff 	.word	0xfeffffff

08007034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007034:	b5b0      	push	{r4, r5, r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d101      	bne.n	8007048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e128      	b.n	800729a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007048:	4b96      	ldr	r3, [pc, #600]	@ (80072a4 <HAL_RCC_ClockConfig+0x270>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2201      	movs	r2, #1
 800704e:	4013      	ands	r3, r2
 8007050:	683a      	ldr	r2, [r7, #0]
 8007052:	429a      	cmp	r2, r3
 8007054:	d91e      	bls.n	8007094 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007056:	4b93      	ldr	r3, [pc, #588]	@ (80072a4 <HAL_RCC_ClockConfig+0x270>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2201      	movs	r2, #1
 800705c:	4393      	bics	r3, r2
 800705e:	0019      	movs	r1, r3
 8007060:	4b90      	ldr	r3, [pc, #576]	@ (80072a4 <HAL_RCC_ClockConfig+0x270>)
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	430a      	orrs	r2, r1
 8007066:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007068:	f7fe f9f6 	bl	8005458 <HAL_GetTick>
 800706c:	0003      	movs	r3, r0
 800706e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007070:	e009      	b.n	8007086 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007072:	f7fe f9f1 	bl	8005458 <HAL_GetTick>
 8007076:	0002      	movs	r2, r0
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	4a8a      	ldr	r2, [pc, #552]	@ (80072a8 <HAL_RCC_ClockConfig+0x274>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d901      	bls.n	8007086 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e109      	b.n	800729a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007086:	4b87      	ldr	r3, [pc, #540]	@ (80072a4 <HAL_RCC_ClockConfig+0x270>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2201      	movs	r2, #1
 800708c:	4013      	ands	r3, r2
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	429a      	cmp	r2, r3
 8007092:	d1ee      	bne.n	8007072 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2202      	movs	r2, #2
 800709a:	4013      	ands	r3, r2
 800709c:	d009      	beq.n	80070b2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800709e:	4b83      	ldr	r3, [pc, #524]	@ (80072ac <HAL_RCC_ClockConfig+0x278>)
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	22f0      	movs	r2, #240	@ 0xf0
 80070a4:	4393      	bics	r3, r2
 80070a6:	0019      	movs	r1, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	689a      	ldr	r2, [r3, #8]
 80070ac:	4b7f      	ldr	r3, [pc, #508]	@ (80072ac <HAL_RCC_ClockConfig+0x278>)
 80070ae:	430a      	orrs	r2, r1
 80070b0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2201      	movs	r2, #1
 80070b8:	4013      	ands	r3, r2
 80070ba:	d100      	bne.n	80070be <HAL_RCC_ClockConfig+0x8a>
 80070bc:	e089      	b.n	80071d2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d107      	bne.n	80070d6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80070c6:	4b79      	ldr	r3, [pc, #484]	@ (80072ac <HAL_RCC_ClockConfig+0x278>)
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	2380      	movs	r3, #128	@ 0x80
 80070cc:	029b      	lsls	r3, r3, #10
 80070ce:	4013      	ands	r3, r2
 80070d0:	d120      	bne.n	8007114 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e0e1      	b.n	800729a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	2b03      	cmp	r3, #3
 80070dc:	d107      	bne.n	80070ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80070de:	4b73      	ldr	r3, [pc, #460]	@ (80072ac <HAL_RCC_ClockConfig+0x278>)
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	2380      	movs	r3, #128	@ 0x80
 80070e4:	049b      	lsls	r3, r3, #18
 80070e6:	4013      	ands	r3, r2
 80070e8:	d114      	bne.n	8007114 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e0d5      	b.n	800729a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d106      	bne.n	8007104 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070f6:	4b6d      	ldr	r3, [pc, #436]	@ (80072ac <HAL_RCC_ClockConfig+0x278>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2204      	movs	r2, #4
 80070fc:	4013      	ands	r3, r2
 80070fe:	d109      	bne.n	8007114 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e0ca      	b.n	800729a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007104:	4b69      	ldr	r3, [pc, #420]	@ (80072ac <HAL_RCC_ClockConfig+0x278>)
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	2380      	movs	r3, #128	@ 0x80
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	4013      	ands	r3, r2
 800710e:	d101      	bne.n	8007114 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e0c2      	b.n	800729a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007114:	4b65      	ldr	r3, [pc, #404]	@ (80072ac <HAL_RCC_ClockConfig+0x278>)
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	2203      	movs	r2, #3
 800711a:	4393      	bics	r3, r2
 800711c:	0019      	movs	r1, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	685a      	ldr	r2, [r3, #4]
 8007122:	4b62      	ldr	r3, [pc, #392]	@ (80072ac <HAL_RCC_ClockConfig+0x278>)
 8007124:	430a      	orrs	r2, r1
 8007126:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007128:	f7fe f996 	bl	8005458 <HAL_GetTick>
 800712c:	0003      	movs	r3, r0
 800712e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	2b02      	cmp	r3, #2
 8007136:	d111      	bne.n	800715c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007138:	e009      	b.n	800714e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800713a:	f7fe f98d 	bl	8005458 <HAL_GetTick>
 800713e:	0002      	movs	r2, r0
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	4a58      	ldr	r2, [pc, #352]	@ (80072a8 <HAL_RCC_ClockConfig+0x274>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d901      	bls.n	800714e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e0a5      	b.n	800729a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800714e:	4b57      	ldr	r3, [pc, #348]	@ (80072ac <HAL_RCC_ClockConfig+0x278>)
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	220c      	movs	r2, #12
 8007154:	4013      	ands	r3, r2
 8007156:	2b08      	cmp	r3, #8
 8007158:	d1ef      	bne.n	800713a <HAL_RCC_ClockConfig+0x106>
 800715a:	e03a      	b.n	80071d2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	2b03      	cmp	r3, #3
 8007162:	d111      	bne.n	8007188 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007164:	e009      	b.n	800717a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007166:	f7fe f977 	bl	8005458 <HAL_GetTick>
 800716a:	0002      	movs	r2, r0
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	4a4d      	ldr	r2, [pc, #308]	@ (80072a8 <HAL_RCC_ClockConfig+0x274>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d901      	bls.n	800717a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e08f      	b.n	800729a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800717a:	4b4c      	ldr	r3, [pc, #304]	@ (80072ac <HAL_RCC_ClockConfig+0x278>)
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	220c      	movs	r2, #12
 8007180:	4013      	ands	r3, r2
 8007182:	2b0c      	cmp	r3, #12
 8007184:	d1ef      	bne.n	8007166 <HAL_RCC_ClockConfig+0x132>
 8007186:	e024      	b.n	80071d2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d11b      	bne.n	80071c8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007190:	e009      	b.n	80071a6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007192:	f7fe f961 	bl	8005458 <HAL_GetTick>
 8007196:	0002      	movs	r2, r0
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	4a42      	ldr	r2, [pc, #264]	@ (80072a8 <HAL_RCC_ClockConfig+0x274>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d901      	bls.n	80071a6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e079      	b.n	800729a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80071a6:	4b41      	ldr	r3, [pc, #260]	@ (80072ac <HAL_RCC_ClockConfig+0x278>)
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	220c      	movs	r2, #12
 80071ac:	4013      	ands	r3, r2
 80071ae:	2b04      	cmp	r3, #4
 80071b0:	d1ef      	bne.n	8007192 <HAL_RCC_ClockConfig+0x15e>
 80071b2:	e00e      	b.n	80071d2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071b4:	f7fe f950 	bl	8005458 <HAL_GetTick>
 80071b8:	0002      	movs	r2, r0
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	4a3a      	ldr	r2, [pc, #232]	@ (80072a8 <HAL_RCC_ClockConfig+0x274>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d901      	bls.n	80071c8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e068      	b.n	800729a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80071c8:	4b38      	ldr	r3, [pc, #224]	@ (80072ac <HAL_RCC_ClockConfig+0x278>)
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	220c      	movs	r2, #12
 80071ce:	4013      	ands	r3, r2
 80071d0:	d1f0      	bne.n	80071b4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80071d2:	4b34      	ldr	r3, [pc, #208]	@ (80072a4 <HAL_RCC_ClockConfig+0x270>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2201      	movs	r2, #1
 80071d8:	4013      	ands	r3, r2
 80071da:	683a      	ldr	r2, [r7, #0]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d21e      	bcs.n	800721e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071e0:	4b30      	ldr	r3, [pc, #192]	@ (80072a4 <HAL_RCC_ClockConfig+0x270>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2201      	movs	r2, #1
 80071e6:	4393      	bics	r3, r2
 80071e8:	0019      	movs	r1, r3
 80071ea:	4b2e      	ldr	r3, [pc, #184]	@ (80072a4 <HAL_RCC_ClockConfig+0x270>)
 80071ec:	683a      	ldr	r2, [r7, #0]
 80071ee:	430a      	orrs	r2, r1
 80071f0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80071f2:	f7fe f931 	bl	8005458 <HAL_GetTick>
 80071f6:	0003      	movs	r3, r0
 80071f8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071fa:	e009      	b.n	8007210 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071fc:	f7fe f92c 	bl	8005458 <HAL_GetTick>
 8007200:	0002      	movs	r2, r0
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	4a28      	ldr	r2, [pc, #160]	@ (80072a8 <HAL_RCC_ClockConfig+0x274>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d901      	bls.n	8007210 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e044      	b.n	800729a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007210:	4b24      	ldr	r3, [pc, #144]	@ (80072a4 <HAL_RCC_ClockConfig+0x270>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2201      	movs	r2, #1
 8007216:	4013      	ands	r3, r2
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	429a      	cmp	r2, r3
 800721c:	d1ee      	bne.n	80071fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2204      	movs	r2, #4
 8007224:	4013      	ands	r3, r2
 8007226:	d009      	beq.n	800723c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007228:	4b20      	ldr	r3, [pc, #128]	@ (80072ac <HAL_RCC_ClockConfig+0x278>)
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	4a20      	ldr	r2, [pc, #128]	@ (80072b0 <HAL_RCC_ClockConfig+0x27c>)
 800722e:	4013      	ands	r3, r2
 8007230:	0019      	movs	r1, r3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68da      	ldr	r2, [r3, #12]
 8007236:	4b1d      	ldr	r3, [pc, #116]	@ (80072ac <HAL_RCC_ClockConfig+0x278>)
 8007238:	430a      	orrs	r2, r1
 800723a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2208      	movs	r2, #8
 8007242:	4013      	ands	r3, r2
 8007244:	d00a      	beq.n	800725c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007246:	4b19      	ldr	r3, [pc, #100]	@ (80072ac <HAL_RCC_ClockConfig+0x278>)
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	4a1a      	ldr	r2, [pc, #104]	@ (80072b4 <HAL_RCC_ClockConfig+0x280>)
 800724c:	4013      	ands	r3, r2
 800724e:	0019      	movs	r1, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	00da      	lsls	r2, r3, #3
 8007256:	4b15      	ldr	r3, [pc, #84]	@ (80072ac <HAL_RCC_ClockConfig+0x278>)
 8007258:	430a      	orrs	r2, r1
 800725a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800725c:	f000 f832 	bl	80072c4 <HAL_RCC_GetSysClockFreq>
 8007260:	0001      	movs	r1, r0
 8007262:	4b12      	ldr	r3, [pc, #72]	@ (80072ac <HAL_RCC_ClockConfig+0x278>)
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	091b      	lsrs	r3, r3, #4
 8007268:	220f      	movs	r2, #15
 800726a:	4013      	ands	r3, r2
 800726c:	4a12      	ldr	r2, [pc, #72]	@ (80072b8 <HAL_RCC_ClockConfig+0x284>)
 800726e:	5cd3      	ldrb	r3, [r2, r3]
 8007270:	000a      	movs	r2, r1
 8007272:	40da      	lsrs	r2, r3
 8007274:	4b11      	ldr	r3, [pc, #68]	@ (80072bc <HAL_RCC_ClockConfig+0x288>)
 8007276:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007278:	4b11      	ldr	r3, [pc, #68]	@ (80072c0 <HAL_RCC_ClockConfig+0x28c>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	250b      	movs	r5, #11
 800727e:	197c      	adds	r4, r7, r5
 8007280:	0018      	movs	r0, r3
 8007282:	f7fe f8a3 	bl	80053cc <HAL_InitTick>
 8007286:	0003      	movs	r3, r0
 8007288:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800728a:	197b      	adds	r3, r7, r5
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d002      	beq.n	8007298 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8007292:	197b      	adds	r3, r7, r5
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	e000      	b.n	800729a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	0018      	movs	r0, r3
 800729c:	46bd      	mov	sp, r7
 800729e:	b004      	add	sp, #16
 80072a0:	bdb0      	pop	{r4, r5, r7, pc}
 80072a2:	46c0      	nop			@ (mov r8, r8)
 80072a4:	40022000 	.word	0x40022000
 80072a8:	00001388 	.word	0x00001388
 80072ac:	40021000 	.word	0x40021000
 80072b0:	fffff8ff 	.word	0xfffff8ff
 80072b4:	ffffc7ff 	.word	0xffffc7ff
 80072b8:	080086b8 	.word	0x080086b8
 80072bc:	20000000 	.word	0x20000000
 80072c0:	20000004 	.word	0x20000004

080072c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072c4:	b5b0      	push	{r4, r5, r7, lr}
 80072c6:	b08e      	sub	sp, #56	@ 0x38
 80072c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80072ca:	4b4c      	ldr	r3, [pc, #304]	@ (80073fc <HAL_RCC_GetSysClockFreq+0x138>)
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80072d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072d2:	230c      	movs	r3, #12
 80072d4:	4013      	ands	r3, r2
 80072d6:	2b0c      	cmp	r3, #12
 80072d8:	d014      	beq.n	8007304 <HAL_RCC_GetSysClockFreq+0x40>
 80072da:	d900      	bls.n	80072de <HAL_RCC_GetSysClockFreq+0x1a>
 80072dc:	e07b      	b.n	80073d6 <HAL_RCC_GetSysClockFreq+0x112>
 80072de:	2b04      	cmp	r3, #4
 80072e0:	d002      	beq.n	80072e8 <HAL_RCC_GetSysClockFreq+0x24>
 80072e2:	2b08      	cmp	r3, #8
 80072e4:	d00b      	beq.n	80072fe <HAL_RCC_GetSysClockFreq+0x3a>
 80072e6:	e076      	b.n	80073d6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80072e8:	4b44      	ldr	r3, [pc, #272]	@ (80073fc <HAL_RCC_GetSysClockFreq+0x138>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2210      	movs	r2, #16
 80072ee:	4013      	ands	r3, r2
 80072f0:	d002      	beq.n	80072f8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80072f2:	4b43      	ldr	r3, [pc, #268]	@ (8007400 <HAL_RCC_GetSysClockFreq+0x13c>)
 80072f4:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80072f6:	e07c      	b.n	80073f2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80072f8:	4b42      	ldr	r3, [pc, #264]	@ (8007404 <HAL_RCC_GetSysClockFreq+0x140>)
 80072fa:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80072fc:	e079      	b.n	80073f2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80072fe:	4b42      	ldr	r3, [pc, #264]	@ (8007408 <HAL_RCC_GetSysClockFreq+0x144>)
 8007300:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8007302:	e076      	b.n	80073f2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8007304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007306:	0c9a      	lsrs	r2, r3, #18
 8007308:	230f      	movs	r3, #15
 800730a:	401a      	ands	r2, r3
 800730c:	4b3f      	ldr	r3, [pc, #252]	@ (800740c <HAL_RCC_GetSysClockFreq+0x148>)
 800730e:	5c9b      	ldrb	r3, [r3, r2]
 8007310:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8007312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007314:	0d9a      	lsrs	r2, r3, #22
 8007316:	2303      	movs	r3, #3
 8007318:	4013      	ands	r3, r2
 800731a:	3301      	adds	r3, #1
 800731c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800731e:	4b37      	ldr	r3, [pc, #220]	@ (80073fc <HAL_RCC_GetSysClockFreq+0x138>)
 8007320:	68da      	ldr	r2, [r3, #12]
 8007322:	2380      	movs	r3, #128	@ 0x80
 8007324:	025b      	lsls	r3, r3, #9
 8007326:	4013      	ands	r3, r2
 8007328:	d01a      	beq.n	8007360 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800732a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800732c:	61bb      	str	r3, [r7, #24]
 800732e:	2300      	movs	r3, #0
 8007330:	61fb      	str	r3, [r7, #28]
 8007332:	4a35      	ldr	r2, [pc, #212]	@ (8007408 <HAL_RCC_GetSysClockFreq+0x144>)
 8007334:	2300      	movs	r3, #0
 8007336:	69b8      	ldr	r0, [r7, #24]
 8007338:	69f9      	ldr	r1, [r7, #28]
 800733a:	f7f8 fff3 	bl	8000324 <__aeabi_lmul>
 800733e:	0002      	movs	r2, r0
 8007340:	000b      	movs	r3, r1
 8007342:	0010      	movs	r0, r2
 8007344:	0019      	movs	r1, r3
 8007346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007348:	613b      	str	r3, [r7, #16]
 800734a:	2300      	movs	r3, #0
 800734c:	617b      	str	r3, [r7, #20]
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	f7f8 ffc7 	bl	80002e4 <__aeabi_uldivmod>
 8007356:	0002      	movs	r2, r0
 8007358:	000b      	movs	r3, r1
 800735a:	0013      	movs	r3, r2
 800735c:	637b      	str	r3, [r7, #52]	@ 0x34
 800735e:	e037      	b.n	80073d0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8007360:	4b26      	ldr	r3, [pc, #152]	@ (80073fc <HAL_RCC_GetSysClockFreq+0x138>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2210      	movs	r2, #16
 8007366:	4013      	ands	r3, r2
 8007368:	d01a      	beq.n	80073a0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800736a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800736c:	60bb      	str	r3, [r7, #8]
 800736e:	2300      	movs	r3, #0
 8007370:	60fb      	str	r3, [r7, #12]
 8007372:	4a23      	ldr	r2, [pc, #140]	@ (8007400 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007374:	2300      	movs	r3, #0
 8007376:	68b8      	ldr	r0, [r7, #8]
 8007378:	68f9      	ldr	r1, [r7, #12]
 800737a:	f7f8 ffd3 	bl	8000324 <__aeabi_lmul>
 800737e:	0002      	movs	r2, r0
 8007380:	000b      	movs	r3, r1
 8007382:	0010      	movs	r0, r2
 8007384:	0019      	movs	r1, r3
 8007386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007388:	603b      	str	r3, [r7, #0]
 800738a:	2300      	movs	r3, #0
 800738c:	607b      	str	r3, [r7, #4]
 800738e:	683a      	ldr	r2, [r7, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f7f8 ffa7 	bl	80002e4 <__aeabi_uldivmod>
 8007396:	0002      	movs	r2, r0
 8007398:	000b      	movs	r3, r1
 800739a:	0013      	movs	r3, r2
 800739c:	637b      	str	r3, [r7, #52]	@ 0x34
 800739e:	e017      	b.n	80073d0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80073a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a2:	0018      	movs	r0, r3
 80073a4:	2300      	movs	r3, #0
 80073a6:	0019      	movs	r1, r3
 80073a8:	4a16      	ldr	r2, [pc, #88]	@ (8007404 <HAL_RCC_GetSysClockFreq+0x140>)
 80073aa:	2300      	movs	r3, #0
 80073ac:	f7f8 ffba 	bl	8000324 <__aeabi_lmul>
 80073b0:	0002      	movs	r2, r0
 80073b2:	000b      	movs	r3, r1
 80073b4:	0010      	movs	r0, r2
 80073b6:	0019      	movs	r1, r3
 80073b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ba:	001c      	movs	r4, r3
 80073bc:	2300      	movs	r3, #0
 80073be:	001d      	movs	r5, r3
 80073c0:	0022      	movs	r2, r4
 80073c2:	002b      	movs	r3, r5
 80073c4:	f7f8 ff8e 	bl	80002e4 <__aeabi_uldivmod>
 80073c8:	0002      	movs	r2, r0
 80073ca:	000b      	movs	r3, r1
 80073cc:	0013      	movs	r3, r2
 80073ce:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80073d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073d2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80073d4:	e00d      	b.n	80073f2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80073d6:	4b09      	ldr	r3, [pc, #36]	@ (80073fc <HAL_RCC_GetSysClockFreq+0x138>)
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	0b5b      	lsrs	r3, r3, #13
 80073dc:	2207      	movs	r2, #7
 80073de:	4013      	ands	r3, r2
 80073e0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80073e2:	6a3b      	ldr	r3, [r7, #32]
 80073e4:	3301      	adds	r3, #1
 80073e6:	2280      	movs	r2, #128	@ 0x80
 80073e8:	0212      	lsls	r2, r2, #8
 80073ea:	409a      	lsls	r2, r3
 80073ec:	0013      	movs	r3, r2
 80073ee:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80073f0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80073f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80073f4:	0018      	movs	r0, r3
 80073f6:	46bd      	mov	sp, r7
 80073f8:	b00e      	add	sp, #56	@ 0x38
 80073fa:	bdb0      	pop	{r4, r5, r7, pc}
 80073fc:	40021000 	.word	0x40021000
 8007400:	003d0900 	.word	0x003d0900
 8007404:	00f42400 	.word	0x00f42400
 8007408:	007a1200 	.word	0x007a1200
 800740c:	080086d0 	.word	0x080086d0

08007410 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007414:	4b02      	ldr	r3, [pc, #8]	@ (8007420 <HAL_RCC_GetHCLKFreq+0x10>)
 8007416:	681b      	ldr	r3, [r3, #0]
}
 8007418:	0018      	movs	r0, r3
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	46c0      	nop			@ (mov r8, r8)
 8007420:	20000000 	.word	0x20000000

08007424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007428:	f7ff fff2 	bl	8007410 <HAL_RCC_GetHCLKFreq>
 800742c:	0001      	movs	r1, r0
 800742e:	4b06      	ldr	r3, [pc, #24]	@ (8007448 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	0a1b      	lsrs	r3, r3, #8
 8007434:	2207      	movs	r2, #7
 8007436:	4013      	ands	r3, r2
 8007438:	4a04      	ldr	r2, [pc, #16]	@ (800744c <HAL_RCC_GetPCLK1Freq+0x28>)
 800743a:	5cd3      	ldrb	r3, [r2, r3]
 800743c:	40d9      	lsrs	r1, r3
 800743e:	000b      	movs	r3, r1
}
 8007440:	0018      	movs	r0, r3
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	46c0      	nop			@ (mov r8, r8)
 8007448:	40021000 	.word	0x40021000
 800744c:	080086c8 	.word	0x080086c8

08007450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007454:	f7ff ffdc 	bl	8007410 <HAL_RCC_GetHCLKFreq>
 8007458:	0001      	movs	r1, r0
 800745a:	4b06      	ldr	r3, [pc, #24]	@ (8007474 <HAL_RCC_GetPCLK2Freq+0x24>)
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	0adb      	lsrs	r3, r3, #11
 8007460:	2207      	movs	r2, #7
 8007462:	4013      	ands	r3, r2
 8007464:	4a04      	ldr	r2, [pc, #16]	@ (8007478 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007466:	5cd3      	ldrb	r3, [r2, r3]
 8007468:	40d9      	lsrs	r1, r3
 800746a:	000b      	movs	r3, r1
}
 800746c:	0018      	movs	r0, r3
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	46c0      	nop			@ (mov r8, r8)
 8007474:	40021000 	.word	0x40021000
 8007478:	080086c8 	.word	0x080086c8

0800747c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8007484:	2317      	movs	r3, #23
 8007486:	18fb      	adds	r3, r7, r3
 8007488:	2200      	movs	r2, #0
 800748a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2220      	movs	r2, #32
 8007492:	4013      	ands	r3, r2
 8007494:	d106      	bne.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	2380      	movs	r3, #128	@ 0x80
 800749c:	011b      	lsls	r3, r3, #4
 800749e:	4013      	ands	r3, r2
 80074a0:	d100      	bne.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80074a2:	e104      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074a4:	4bb9      	ldr	r3, [pc, #740]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80074a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074a8:	2380      	movs	r3, #128	@ 0x80
 80074aa:	055b      	lsls	r3, r3, #21
 80074ac:	4013      	ands	r3, r2
 80074ae:	d10a      	bne.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074b0:	4bb6      	ldr	r3, [pc, #728]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80074b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074b4:	4bb5      	ldr	r3, [pc, #724]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80074b6:	2180      	movs	r1, #128	@ 0x80
 80074b8:	0549      	lsls	r1, r1, #21
 80074ba:	430a      	orrs	r2, r1
 80074bc:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80074be:	2317      	movs	r3, #23
 80074c0:	18fb      	adds	r3, r7, r3
 80074c2:	2201      	movs	r2, #1
 80074c4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074c6:	4bb2      	ldr	r3, [pc, #712]	@ (8007790 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	2380      	movs	r3, #128	@ 0x80
 80074cc:	005b      	lsls	r3, r3, #1
 80074ce:	4013      	ands	r3, r2
 80074d0:	d11a      	bne.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80074d2:	4baf      	ldr	r3, [pc, #700]	@ (8007790 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	4bae      	ldr	r3, [pc, #696]	@ (8007790 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80074d8:	2180      	movs	r1, #128	@ 0x80
 80074da:	0049      	lsls	r1, r1, #1
 80074dc:	430a      	orrs	r2, r1
 80074de:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074e0:	f7fd ffba 	bl	8005458 <HAL_GetTick>
 80074e4:	0003      	movs	r3, r0
 80074e6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074e8:	e008      	b.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074ea:	f7fd ffb5 	bl	8005458 <HAL_GetTick>
 80074ee:	0002      	movs	r2, r0
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	2b64      	cmp	r3, #100	@ 0x64
 80074f6:	d901      	bls.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e143      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074fc:	4ba4      	ldr	r3, [pc, #656]	@ (8007790 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	2380      	movs	r3, #128	@ 0x80
 8007502:	005b      	lsls	r3, r3, #1
 8007504:	4013      	ands	r3, r2
 8007506:	d0f0      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8007508:	4ba0      	ldr	r3, [pc, #640]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	23c0      	movs	r3, #192	@ 0xc0
 800750e:	039b      	lsls	r3, r3, #14
 8007510:	4013      	ands	r3, r2
 8007512:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	685a      	ldr	r2, [r3, #4]
 8007518:	23c0      	movs	r3, #192	@ 0xc0
 800751a:	039b      	lsls	r3, r3, #14
 800751c:	4013      	ands	r3, r2
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	429a      	cmp	r2, r3
 8007522:	d107      	bne.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	689a      	ldr	r2, [r3, #8]
 8007528:	23c0      	movs	r3, #192	@ 0xc0
 800752a:	039b      	lsls	r3, r3, #14
 800752c:	4013      	ands	r3, r2
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	429a      	cmp	r2, r3
 8007532:	d013      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	23c0      	movs	r3, #192	@ 0xc0
 800753a:	029b      	lsls	r3, r3, #10
 800753c:	401a      	ands	r2, r3
 800753e:	23c0      	movs	r3, #192	@ 0xc0
 8007540:	029b      	lsls	r3, r3, #10
 8007542:	429a      	cmp	r2, r3
 8007544:	d10a      	bne.n	800755c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007546:	4b91      	ldr	r3, [pc, #580]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	2380      	movs	r3, #128	@ 0x80
 800754c:	029b      	lsls	r3, r3, #10
 800754e:	401a      	ands	r2, r3
 8007550:	2380      	movs	r3, #128	@ 0x80
 8007552:	029b      	lsls	r3, r3, #10
 8007554:	429a      	cmp	r2, r3
 8007556:	d101      	bne.n	800755c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e113      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800755c:	4b8b      	ldr	r3, [pc, #556]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800755e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007560:	23c0      	movs	r3, #192	@ 0xc0
 8007562:	029b      	lsls	r3, r3, #10
 8007564:	4013      	ands	r3, r2
 8007566:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d049      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685a      	ldr	r2, [r3, #4]
 8007572:	23c0      	movs	r3, #192	@ 0xc0
 8007574:	029b      	lsls	r3, r3, #10
 8007576:	4013      	ands	r3, r2
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	429a      	cmp	r2, r3
 800757c:	d004      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2220      	movs	r2, #32
 8007584:	4013      	ands	r3, r2
 8007586:	d10d      	bne.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	689a      	ldr	r2, [r3, #8]
 800758c:	23c0      	movs	r3, #192	@ 0xc0
 800758e:	029b      	lsls	r3, r3, #10
 8007590:	4013      	ands	r3, r2
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	429a      	cmp	r2, r3
 8007596:	d034      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	2380      	movs	r3, #128	@ 0x80
 800759e:	011b      	lsls	r3, r3, #4
 80075a0:	4013      	ands	r3, r2
 80075a2:	d02e      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80075a4:	4b79      	ldr	r3, [pc, #484]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80075a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075a8:	4a7a      	ldr	r2, [pc, #488]	@ (8007794 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80075aa:	4013      	ands	r3, r2
 80075ac:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80075ae:	4b77      	ldr	r3, [pc, #476]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80075b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80075b2:	4b76      	ldr	r3, [pc, #472]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80075b4:	2180      	movs	r1, #128	@ 0x80
 80075b6:	0309      	lsls	r1, r1, #12
 80075b8:	430a      	orrs	r2, r1
 80075ba:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80075bc:	4b73      	ldr	r3, [pc, #460]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80075be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80075c0:	4b72      	ldr	r3, [pc, #456]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80075c2:	4975      	ldr	r1, [pc, #468]	@ (8007798 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80075c4:	400a      	ands	r2, r1
 80075c6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80075c8:	4b70      	ldr	r3, [pc, #448]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	2380      	movs	r3, #128	@ 0x80
 80075d2:	005b      	lsls	r3, r3, #1
 80075d4:	4013      	ands	r3, r2
 80075d6:	d014      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075d8:	f7fd ff3e 	bl	8005458 <HAL_GetTick>
 80075dc:	0003      	movs	r3, r0
 80075de:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075e0:	e009      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075e2:	f7fd ff39 	bl	8005458 <HAL_GetTick>
 80075e6:	0002      	movs	r2, r0
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	4a6b      	ldr	r2, [pc, #428]	@ (800779c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d901      	bls.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e0c6      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075f6:	4b65      	ldr	r3, [pc, #404]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80075f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80075fa:	2380      	movs	r3, #128	@ 0x80
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4013      	ands	r3, r2
 8007600:	d0ef      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	2380      	movs	r3, #128	@ 0x80
 8007608:	011b      	lsls	r3, r3, #4
 800760a:	4013      	ands	r3, r2
 800760c:	d01f      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	689a      	ldr	r2, [r3, #8]
 8007612:	23c0      	movs	r3, #192	@ 0xc0
 8007614:	029b      	lsls	r3, r3, #10
 8007616:	401a      	ands	r2, r3
 8007618:	23c0      	movs	r3, #192	@ 0xc0
 800761a:	029b      	lsls	r3, r3, #10
 800761c:	429a      	cmp	r2, r3
 800761e:	d10c      	bne.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8007620:	4b5a      	ldr	r3, [pc, #360]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a5e      	ldr	r2, [pc, #376]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8007626:	4013      	ands	r3, r2
 8007628:	0019      	movs	r1, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	689a      	ldr	r2, [r3, #8]
 800762e:	23c0      	movs	r3, #192	@ 0xc0
 8007630:	039b      	lsls	r3, r3, #14
 8007632:	401a      	ands	r2, r3
 8007634:	4b55      	ldr	r3, [pc, #340]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007636:	430a      	orrs	r2, r1
 8007638:	601a      	str	r2, [r3, #0]
 800763a:	4b54      	ldr	r3, [pc, #336]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800763c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	689a      	ldr	r2, [r3, #8]
 8007642:	23c0      	movs	r3, #192	@ 0xc0
 8007644:	029b      	lsls	r3, r3, #10
 8007646:	401a      	ands	r2, r3
 8007648:	4b50      	ldr	r3, [pc, #320]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800764a:	430a      	orrs	r2, r1
 800764c:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2220      	movs	r2, #32
 8007654:	4013      	ands	r3, r2
 8007656:	d01f      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685a      	ldr	r2, [r3, #4]
 800765c:	23c0      	movs	r3, #192	@ 0xc0
 800765e:	029b      	lsls	r3, r3, #10
 8007660:	401a      	ands	r2, r3
 8007662:	23c0      	movs	r3, #192	@ 0xc0
 8007664:	029b      	lsls	r3, r3, #10
 8007666:	429a      	cmp	r2, r3
 8007668:	d10c      	bne.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800766a:	4b48      	ldr	r3, [pc, #288]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a4c      	ldr	r2, [pc, #304]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8007670:	4013      	ands	r3, r2
 8007672:	0019      	movs	r1, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	23c0      	movs	r3, #192	@ 0xc0
 800767a:	039b      	lsls	r3, r3, #14
 800767c:	401a      	ands	r2, r3
 800767e:	4b43      	ldr	r3, [pc, #268]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007680:	430a      	orrs	r2, r1
 8007682:	601a      	str	r2, [r3, #0]
 8007684:	4b41      	ldr	r3, [pc, #260]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007686:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	23c0      	movs	r3, #192	@ 0xc0
 800768e:	029b      	lsls	r3, r3, #10
 8007690:	401a      	ands	r2, r3
 8007692:	4b3e      	ldr	r3, [pc, #248]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007694:	430a      	orrs	r2, r1
 8007696:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007698:	2317      	movs	r3, #23
 800769a:	18fb      	adds	r3, r7, r3
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d105      	bne.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076a2:	4b3a      	ldr	r3, [pc, #232]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80076a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076a6:	4b39      	ldr	r3, [pc, #228]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80076a8:	493e      	ldr	r1, [pc, #248]	@ (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80076aa:	400a      	ands	r2, r1
 80076ac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2201      	movs	r2, #1
 80076b4:	4013      	ands	r3, r2
 80076b6:	d009      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80076b8:	4b34      	ldr	r3, [pc, #208]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80076ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076bc:	2203      	movs	r2, #3
 80076be:	4393      	bics	r3, r2
 80076c0:	0019      	movs	r1, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68da      	ldr	r2, [r3, #12]
 80076c6:	4b31      	ldr	r3, [pc, #196]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80076c8:	430a      	orrs	r2, r1
 80076ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2202      	movs	r2, #2
 80076d2:	4013      	ands	r3, r2
 80076d4:	d009      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80076d6:	4b2d      	ldr	r3, [pc, #180]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80076d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076da:	220c      	movs	r2, #12
 80076dc:	4393      	bics	r3, r2
 80076de:	0019      	movs	r1, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	691a      	ldr	r2, [r3, #16]
 80076e4:	4b29      	ldr	r3, [pc, #164]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80076e6:	430a      	orrs	r2, r1
 80076e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2204      	movs	r2, #4
 80076f0:	4013      	ands	r3, r2
 80076f2:	d009      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80076f4:	4b25      	ldr	r3, [pc, #148]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80076f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076f8:	4a2b      	ldr	r2, [pc, #172]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80076fa:	4013      	ands	r3, r2
 80076fc:	0019      	movs	r1, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	695a      	ldr	r2, [r3, #20]
 8007702:	4b22      	ldr	r3, [pc, #136]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007704:	430a      	orrs	r2, r1
 8007706:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2208      	movs	r2, #8
 800770e:	4013      	ands	r3, r2
 8007710:	d009      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007712:	4b1e      	ldr	r3, [pc, #120]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007716:	4a25      	ldr	r2, [pc, #148]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007718:	4013      	ands	r3, r2
 800771a:	0019      	movs	r1, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	699a      	ldr	r2, [r3, #24]
 8007720:	4b1a      	ldr	r3, [pc, #104]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007722:	430a      	orrs	r2, r1
 8007724:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	2380      	movs	r3, #128	@ 0x80
 800772c:	005b      	lsls	r3, r3, #1
 800772e:	4013      	ands	r3, r2
 8007730:	d009      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007732:	4b16      	ldr	r3, [pc, #88]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007736:	4a17      	ldr	r2, [pc, #92]	@ (8007794 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8007738:	4013      	ands	r3, r2
 800773a:	0019      	movs	r1, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	69da      	ldr	r2, [r3, #28]
 8007740:	4b12      	ldr	r3, [pc, #72]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007742:	430a      	orrs	r2, r1
 8007744:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2240      	movs	r2, #64	@ 0x40
 800774c:	4013      	ands	r3, r2
 800774e:	d009      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007750:	4b0e      	ldr	r3, [pc, #56]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007754:	4a16      	ldr	r2, [pc, #88]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8007756:	4013      	ands	r3, r2
 8007758:	0019      	movs	r1, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800775e:	4b0b      	ldr	r3, [pc, #44]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007760:	430a      	orrs	r2, r1
 8007762:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2280      	movs	r2, #128	@ 0x80
 800776a:	4013      	ands	r3, r2
 800776c:	d009      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800776e:	4b07      	ldr	r3, [pc, #28]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007772:	4a10      	ldr	r2, [pc, #64]	@ (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007774:	4013      	ands	r3, r2
 8007776:	0019      	movs	r1, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a1a      	ldr	r2, [r3, #32]
 800777c:	4b03      	ldr	r3, [pc, #12]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800777e:	430a      	orrs	r2, r1
 8007780:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	0018      	movs	r0, r3
 8007786:	46bd      	mov	sp, r7
 8007788:	b006      	add	sp, #24
 800778a:	bd80      	pop	{r7, pc}
 800778c:	40021000 	.word	0x40021000
 8007790:	40007000 	.word	0x40007000
 8007794:	fffcffff 	.word	0xfffcffff
 8007798:	fff7ffff 	.word	0xfff7ffff
 800779c:	00001388 	.word	0x00001388
 80077a0:	ffcfffff 	.word	0xffcfffff
 80077a4:	efffffff 	.word	0xefffffff
 80077a8:	fffff3ff 	.word	0xfffff3ff
 80077ac:	ffffcfff 	.word	0xffffcfff
 80077b0:	fbffffff 	.word	0xfbffffff
 80077b4:	fff3ffff 	.word	0xfff3ffff

080077b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e044      	b.n	8007854 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d107      	bne.n	80077e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2278      	movs	r2, #120	@ 0x78
 80077d6:	2100      	movs	r1, #0
 80077d8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	0018      	movs	r0, r3
 80077de:	f7fd fd49 	bl	8005274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2224      	movs	r2, #36	@ 0x24
 80077e6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2101      	movs	r1, #1
 80077f4:	438a      	bics	r2, r1
 80077f6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	0018      	movs	r0, r3
 80077fc:	f000 f8d0 	bl	80079a0 <UART_SetConfig>
 8007800:	0003      	movs	r3, r0
 8007802:	2b01      	cmp	r3, #1
 8007804:	d101      	bne.n	800780a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e024      	b.n	8007854 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800780e:	2b00      	cmp	r3, #0
 8007810:	d003      	beq.n	800781a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	0018      	movs	r0, r3
 8007816:	f000 fb61 	bl	8007edc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	685a      	ldr	r2, [r3, #4]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	490d      	ldr	r1, [pc, #52]	@ (800785c <HAL_UART_Init+0xa4>)
 8007826:	400a      	ands	r2, r1
 8007828:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	689a      	ldr	r2, [r3, #8]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	212a      	movs	r1, #42	@ 0x2a
 8007836:	438a      	bics	r2, r1
 8007838:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2101      	movs	r1, #1
 8007846:	430a      	orrs	r2, r1
 8007848:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	0018      	movs	r0, r3
 800784e:	f000 fbf9 	bl	8008044 <UART_CheckIdleState>
 8007852:	0003      	movs	r3, r0
}
 8007854:	0018      	movs	r0, r3
 8007856:	46bd      	mov	sp, r7
 8007858:	b002      	add	sp, #8
 800785a:	bd80      	pop	{r7, pc}
 800785c:	ffffb7ff 	.word	0xffffb7ff

08007860 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b08a      	sub	sp, #40	@ 0x28
 8007864:	af02      	add	r7, sp, #8
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	603b      	str	r3, [r7, #0]
 800786c:	1dbb      	adds	r3, r7, #6
 800786e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007874:	2b20      	cmp	r3, #32
 8007876:	d000      	beq.n	800787a <HAL_UART_Transmit+0x1a>
 8007878:	e08c      	b.n	8007994 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d003      	beq.n	8007888 <HAL_UART_Transmit+0x28>
 8007880:	1dbb      	adds	r3, r7, #6
 8007882:	881b      	ldrh	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d101      	bne.n	800788c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e084      	b.n	8007996 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	689a      	ldr	r2, [r3, #8]
 8007890:	2380      	movs	r3, #128	@ 0x80
 8007892:	015b      	lsls	r3, r3, #5
 8007894:	429a      	cmp	r2, r3
 8007896:	d109      	bne.n	80078ac <HAL_UART_Transmit+0x4c>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d105      	bne.n	80078ac <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	2201      	movs	r2, #1
 80078a4:	4013      	ands	r3, r2
 80078a6:	d001      	beq.n	80078ac <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e074      	b.n	8007996 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2284      	movs	r2, #132	@ 0x84
 80078b0:	2100      	movs	r1, #0
 80078b2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2221      	movs	r2, #33	@ 0x21
 80078b8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078ba:	f7fd fdcd 	bl	8005458 <HAL_GetTick>
 80078be:	0003      	movs	r3, r0
 80078c0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	1dba      	adds	r2, r7, #6
 80078c6:	2150      	movs	r1, #80	@ 0x50
 80078c8:	8812      	ldrh	r2, [r2, #0]
 80078ca:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	1dba      	adds	r2, r7, #6
 80078d0:	2152      	movs	r1, #82	@ 0x52
 80078d2:	8812      	ldrh	r2, [r2, #0]
 80078d4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	689a      	ldr	r2, [r3, #8]
 80078da:	2380      	movs	r3, #128	@ 0x80
 80078dc:	015b      	lsls	r3, r3, #5
 80078de:	429a      	cmp	r2, r3
 80078e0:	d108      	bne.n	80078f4 <HAL_UART_Transmit+0x94>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d104      	bne.n	80078f4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80078ea:	2300      	movs	r3, #0
 80078ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	61bb      	str	r3, [r7, #24]
 80078f2:	e003      	b.n	80078fc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078f8:	2300      	movs	r3, #0
 80078fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80078fc:	e02f      	b.n	800795e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078fe:	697a      	ldr	r2, [r7, #20]
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	0013      	movs	r3, r2
 8007908:	2200      	movs	r2, #0
 800790a:	2180      	movs	r1, #128	@ 0x80
 800790c:	f000 fc42 	bl	8008194 <UART_WaitOnFlagUntilTimeout>
 8007910:	1e03      	subs	r3, r0, #0
 8007912:	d004      	beq.n	800791e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2220      	movs	r2, #32
 8007918:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800791a:	2303      	movs	r3, #3
 800791c:	e03b      	b.n	8007996 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10b      	bne.n	800793c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	881b      	ldrh	r3, [r3, #0]
 8007928:	001a      	movs	r2, r3
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	05d2      	lsls	r2, r2, #23
 8007930:	0dd2      	lsrs	r2, r2, #23
 8007932:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	3302      	adds	r3, #2
 8007938:	61bb      	str	r3, [r7, #24]
 800793a:	e007      	b.n	800794c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	781a      	ldrb	r2, [r3, #0]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	3301      	adds	r3, #1
 800794a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2252      	movs	r2, #82	@ 0x52
 8007950:	5a9b      	ldrh	r3, [r3, r2]
 8007952:	b29b      	uxth	r3, r3
 8007954:	3b01      	subs	r3, #1
 8007956:	b299      	uxth	r1, r3
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2252      	movs	r2, #82	@ 0x52
 800795c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2252      	movs	r2, #82	@ 0x52
 8007962:	5a9b      	ldrh	r3, [r3, r2]
 8007964:	b29b      	uxth	r3, r3
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1c9      	bne.n	80078fe <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800796a:	697a      	ldr	r2, [r7, #20]
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	0013      	movs	r3, r2
 8007974:	2200      	movs	r2, #0
 8007976:	2140      	movs	r1, #64	@ 0x40
 8007978:	f000 fc0c 	bl	8008194 <UART_WaitOnFlagUntilTimeout>
 800797c:	1e03      	subs	r3, r0, #0
 800797e:	d004      	beq.n	800798a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2220      	movs	r2, #32
 8007984:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007986:	2303      	movs	r3, #3
 8007988:	e005      	b.n	8007996 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2220      	movs	r2, #32
 800798e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007990:	2300      	movs	r3, #0
 8007992:	e000      	b.n	8007996 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8007994:	2302      	movs	r3, #2
  }
}
 8007996:	0018      	movs	r0, r3
 8007998:	46bd      	mov	sp, r7
 800799a:	b008      	add	sp, #32
 800799c:	bd80      	pop	{r7, pc}
	...

080079a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079a0:	b5b0      	push	{r4, r5, r7, lr}
 80079a2:	b08e      	sub	sp, #56	@ 0x38
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079a8:	231a      	movs	r3, #26
 80079aa:	2218      	movs	r2, #24
 80079ac:	189b      	adds	r3, r3, r2
 80079ae:	19db      	adds	r3, r3, r7
 80079b0:	2200      	movs	r2, #0
 80079b2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	689a      	ldr	r2, [r3, #8]
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	431a      	orrs	r2, r3
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	431a      	orrs	r2, r3
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	69db      	ldr	r3, [r3, #28]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4ac3      	ldr	r2, [pc, #780]	@ (8007ce0 <UART_SetConfig+0x340>)
 80079d4:	4013      	ands	r3, r2
 80079d6:	0019      	movs	r1, r3
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80079de:	430a      	orrs	r2, r1
 80079e0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	4abe      	ldr	r2, [pc, #760]	@ (8007ce4 <UART_SetConfig+0x344>)
 80079ea:	4013      	ands	r3, r2
 80079ec:	0019      	movs	r1, r3
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	68da      	ldr	r2, [r3, #12]
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	430a      	orrs	r2, r1
 80079f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4ab8      	ldr	r2, [pc, #736]	@ (8007ce8 <UART_SetConfig+0x348>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d004      	beq.n	8007a14 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a10:	4313      	orrs	r3, r2
 8007a12:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	4ab4      	ldr	r2, [pc, #720]	@ (8007cec <UART_SetConfig+0x34c>)
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	0019      	movs	r1, r3
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a26:	430a      	orrs	r2, r1
 8007a28:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4ab0      	ldr	r2, [pc, #704]	@ (8007cf0 <UART_SetConfig+0x350>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d131      	bne.n	8007a98 <UART_SetConfig+0xf8>
 8007a34:	4baf      	ldr	r3, [pc, #700]	@ (8007cf4 <UART_SetConfig+0x354>)
 8007a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a38:	2203      	movs	r2, #3
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	2b03      	cmp	r3, #3
 8007a3e:	d01d      	beq.n	8007a7c <UART_SetConfig+0xdc>
 8007a40:	d823      	bhi.n	8007a8a <UART_SetConfig+0xea>
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d00c      	beq.n	8007a60 <UART_SetConfig+0xc0>
 8007a46:	d820      	bhi.n	8007a8a <UART_SetConfig+0xea>
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d002      	beq.n	8007a52 <UART_SetConfig+0xb2>
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d00e      	beq.n	8007a6e <UART_SetConfig+0xce>
 8007a50:	e01b      	b.n	8007a8a <UART_SetConfig+0xea>
 8007a52:	231b      	movs	r3, #27
 8007a54:	2218      	movs	r2, #24
 8007a56:	189b      	adds	r3, r3, r2
 8007a58:	19db      	adds	r3, r3, r7
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	701a      	strb	r2, [r3, #0]
 8007a5e:	e0b4      	b.n	8007bca <UART_SetConfig+0x22a>
 8007a60:	231b      	movs	r3, #27
 8007a62:	2218      	movs	r2, #24
 8007a64:	189b      	adds	r3, r3, r2
 8007a66:	19db      	adds	r3, r3, r7
 8007a68:	2202      	movs	r2, #2
 8007a6a:	701a      	strb	r2, [r3, #0]
 8007a6c:	e0ad      	b.n	8007bca <UART_SetConfig+0x22a>
 8007a6e:	231b      	movs	r3, #27
 8007a70:	2218      	movs	r2, #24
 8007a72:	189b      	adds	r3, r3, r2
 8007a74:	19db      	adds	r3, r3, r7
 8007a76:	2204      	movs	r2, #4
 8007a78:	701a      	strb	r2, [r3, #0]
 8007a7a:	e0a6      	b.n	8007bca <UART_SetConfig+0x22a>
 8007a7c:	231b      	movs	r3, #27
 8007a7e:	2218      	movs	r2, #24
 8007a80:	189b      	adds	r3, r3, r2
 8007a82:	19db      	adds	r3, r3, r7
 8007a84:	2208      	movs	r2, #8
 8007a86:	701a      	strb	r2, [r3, #0]
 8007a88:	e09f      	b.n	8007bca <UART_SetConfig+0x22a>
 8007a8a:	231b      	movs	r3, #27
 8007a8c:	2218      	movs	r2, #24
 8007a8e:	189b      	adds	r3, r3, r2
 8007a90:	19db      	adds	r3, r3, r7
 8007a92:	2210      	movs	r2, #16
 8007a94:	701a      	strb	r2, [r3, #0]
 8007a96:	e098      	b.n	8007bca <UART_SetConfig+0x22a>
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a96      	ldr	r2, [pc, #600]	@ (8007cf8 <UART_SetConfig+0x358>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d131      	bne.n	8007b06 <UART_SetConfig+0x166>
 8007aa2:	4b94      	ldr	r3, [pc, #592]	@ (8007cf4 <UART_SetConfig+0x354>)
 8007aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007aa6:	220c      	movs	r2, #12
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	2b0c      	cmp	r3, #12
 8007aac:	d01d      	beq.n	8007aea <UART_SetConfig+0x14a>
 8007aae:	d823      	bhi.n	8007af8 <UART_SetConfig+0x158>
 8007ab0:	2b08      	cmp	r3, #8
 8007ab2:	d00c      	beq.n	8007ace <UART_SetConfig+0x12e>
 8007ab4:	d820      	bhi.n	8007af8 <UART_SetConfig+0x158>
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d002      	beq.n	8007ac0 <UART_SetConfig+0x120>
 8007aba:	2b04      	cmp	r3, #4
 8007abc:	d00e      	beq.n	8007adc <UART_SetConfig+0x13c>
 8007abe:	e01b      	b.n	8007af8 <UART_SetConfig+0x158>
 8007ac0:	231b      	movs	r3, #27
 8007ac2:	2218      	movs	r2, #24
 8007ac4:	189b      	adds	r3, r3, r2
 8007ac6:	19db      	adds	r3, r3, r7
 8007ac8:	2200      	movs	r2, #0
 8007aca:	701a      	strb	r2, [r3, #0]
 8007acc:	e07d      	b.n	8007bca <UART_SetConfig+0x22a>
 8007ace:	231b      	movs	r3, #27
 8007ad0:	2218      	movs	r2, #24
 8007ad2:	189b      	adds	r3, r3, r2
 8007ad4:	19db      	adds	r3, r3, r7
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	701a      	strb	r2, [r3, #0]
 8007ada:	e076      	b.n	8007bca <UART_SetConfig+0x22a>
 8007adc:	231b      	movs	r3, #27
 8007ade:	2218      	movs	r2, #24
 8007ae0:	189b      	adds	r3, r3, r2
 8007ae2:	19db      	adds	r3, r3, r7
 8007ae4:	2204      	movs	r2, #4
 8007ae6:	701a      	strb	r2, [r3, #0]
 8007ae8:	e06f      	b.n	8007bca <UART_SetConfig+0x22a>
 8007aea:	231b      	movs	r3, #27
 8007aec:	2218      	movs	r2, #24
 8007aee:	189b      	adds	r3, r3, r2
 8007af0:	19db      	adds	r3, r3, r7
 8007af2:	2208      	movs	r2, #8
 8007af4:	701a      	strb	r2, [r3, #0]
 8007af6:	e068      	b.n	8007bca <UART_SetConfig+0x22a>
 8007af8:	231b      	movs	r3, #27
 8007afa:	2218      	movs	r2, #24
 8007afc:	189b      	adds	r3, r3, r2
 8007afe:	19db      	adds	r3, r3, r7
 8007b00:	2210      	movs	r2, #16
 8007b02:	701a      	strb	r2, [r3, #0]
 8007b04:	e061      	b.n	8007bca <UART_SetConfig+0x22a>
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a7c      	ldr	r2, [pc, #496]	@ (8007cfc <UART_SetConfig+0x35c>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d106      	bne.n	8007b1e <UART_SetConfig+0x17e>
 8007b10:	231b      	movs	r3, #27
 8007b12:	2218      	movs	r2, #24
 8007b14:	189b      	adds	r3, r3, r2
 8007b16:	19db      	adds	r3, r3, r7
 8007b18:	2200      	movs	r2, #0
 8007b1a:	701a      	strb	r2, [r3, #0]
 8007b1c:	e055      	b.n	8007bca <UART_SetConfig+0x22a>
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a77      	ldr	r2, [pc, #476]	@ (8007d00 <UART_SetConfig+0x360>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d106      	bne.n	8007b36 <UART_SetConfig+0x196>
 8007b28:	231b      	movs	r3, #27
 8007b2a:	2218      	movs	r2, #24
 8007b2c:	189b      	adds	r3, r3, r2
 8007b2e:	19db      	adds	r3, r3, r7
 8007b30:	2200      	movs	r2, #0
 8007b32:	701a      	strb	r2, [r3, #0]
 8007b34:	e049      	b.n	8007bca <UART_SetConfig+0x22a>
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a6b      	ldr	r2, [pc, #428]	@ (8007ce8 <UART_SetConfig+0x348>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d13e      	bne.n	8007bbe <UART_SetConfig+0x21e>
 8007b40:	4b6c      	ldr	r3, [pc, #432]	@ (8007cf4 <UART_SetConfig+0x354>)
 8007b42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007b44:	23c0      	movs	r3, #192	@ 0xc0
 8007b46:	011b      	lsls	r3, r3, #4
 8007b48:	4013      	ands	r3, r2
 8007b4a:	22c0      	movs	r2, #192	@ 0xc0
 8007b4c:	0112      	lsls	r2, r2, #4
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d027      	beq.n	8007ba2 <UART_SetConfig+0x202>
 8007b52:	22c0      	movs	r2, #192	@ 0xc0
 8007b54:	0112      	lsls	r2, r2, #4
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d82a      	bhi.n	8007bb0 <UART_SetConfig+0x210>
 8007b5a:	2280      	movs	r2, #128	@ 0x80
 8007b5c:	0112      	lsls	r2, r2, #4
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d011      	beq.n	8007b86 <UART_SetConfig+0x1e6>
 8007b62:	2280      	movs	r2, #128	@ 0x80
 8007b64:	0112      	lsls	r2, r2, #4
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d822      	bhi.n	8007bb0 <UART_SetConfig+0x210>
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d004      	beq.n	8007b78 <UART_SetConfig+0x1d8>
 8007b6e:	2280      	movs	r2, #128	@ 0x80
 8007b70:	00d2      	lsls	r2, r2, #3
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d00e      	beq.n	8007b94 <UART_SetConfig+0x1f4>
 8007b76:	e01b      	b.n	8007bb0 <UART_SetConfig+0x210>
 8007b78:	231b      	movs	r3, #27
 8007b7a:	2218      	movs	r2, #24
 8007b7c:	189b      	adds	r3, r3, r2
 8007b7e:	19db      	adds	r3, r3, r7
 8007b80:	2200      	movs	r2, #0
 8007b82:	701a      	strb	r2, [r3, #0]
 8007b84:	e021      	b.n	8007bca <UART_SetConfig+0x22a>
 8007b86:	231b      	movs	r3, #27
 8007b88:	2218      	movs	r2, #24
 8007b8a:	189b      	adds	r3, r3, r2
 8007b8c:	19db      	adds	r3, r3, r7
 8007b8e:	2202      	movs	r2, #2
 8007b90:	701a      	strb	r2, [r3, #0]
 8007b92:	e01a      	b.n	8007bca <UART_SetConfig+0x22a>
 8007b94:	231b      	movs	r3, #27
 8007b96:	2218      	movs	r2, #24
 8007b98:	189b      	adds	r3, r3, r2
 8007b9a:	19db      	adds	r3, r3, r7
 8007b9c:	2204      	movs	r2, #4
 8007b9e:	701a      	strb	r2, [r3, #0]
 8007ba0:	e013      	b.n	8007bca <UART_SetConfig+0x22a>
 8007ba2:	231b      	movs	r3, #27
 8007ba4:	2218      	movs	r2, #24
 8007ba6:	189b      	adds	r3, r3, r2
 8007ba8:	19db      	adds	r3, r3, r7
 8007baa:	2208      	movs	r2, #8
 8007bac:	701a      	strb	r2, [r3, #0]
 8007bae:	e00c      	b.n	8007bca <UART_SetConfig+0x22a>
 8007bb0:	231b      	movs	r3, #27
 8007bb2:	2218      	movs	r2, #24
 8007bb4:	189b      	adds	r3, r3, r2
 8007bb6:	19db      	adds	r3, r3, r7
 8007bb8:	2210      	movs	r2, #16
 8007bba:	701a      	strb	r2, [r3, #0]
 8007bbc:	e005      	b.n	8007bca <UART_SetConfig+0x22a>
 8007bbe:	231b      	movs	r3, #27
 8007bc0:	2218      	movs	r2, #24
 8007bc2:	189b      	adds	r3, r3, r2
 8007bc4:	19db      	adds	r3, r3, r7
 8007bc6:	2210      	movs	r2, #16
 8007bc8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a46      	ldr	r2, [pc, #280]	@ (8007ce8 <UART_SetConfig+0x348>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d000      	beq.n	8007bd6 <UART_SetConfig+0x236>
 8007bd4:	e09a      	b.n	8007d0c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007bd6:	231b      	movs	r3, #27
 8007bd8:	2218      	movs	r2, #24
 8007bda:	189b      	adds	r3, r3, r2
 8007bdc:	19db      	adds	r3, r3, r7
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	2b08      	cmp	r3, #8
 8007be2:	d01d      	beq.n	8007c20 <UART_SetConfig+0x280>
 8007be4:	dc20      	bgt.n	8007c28 <UART_SetConfig+0x288>
 8007be6:	2b04      	cmp	r3, #4
 8007be8:	d015      	beq.n	8007c16 <UART_SetConfig+0x276>
 8007bea:	dc1d      	bgt.n	8007c28 <UART_SetConfig+0x288>
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d002      	beq.n	8007bf6 <UART_SetConfig+0x256>
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d005      	beq.n	8007c00 <UART_SetConfig+0x260>
 8007bf4:	e018      	b.n	8007c28 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bf6:	f7ff fc15 	bl	8007424 <HAL_RCC_GetPCLK1Freq>
 8007bfa:	0003      	movs	r3, r0
 8007bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007bfe:	e01c      	b.n	8007c3a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c00:	4b3c      	ldr	r3, [pc, #240]	@ (8007cf4 <UART_SetConfig+0x354>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2210      	movs	r2, #16
 8007c06:	4013      	ands	r3, r2
 8007c08:	d002      	beq.n	8007c10 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007c0a:	4b3e      	ldr	r3, [pc, #248]	@ (8007d04 <UART_SetConfig+0x364>)
 8007c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c0e:	e014      	b.n	8007c3a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8007c10:	4b3d      	ldr	r3, [pc, #244]	@ (8007d08 <UART_SetConfig+0x368>)
 8007c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007c14:	e011      	b.n	8007c3a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c16:	f7ff fb55 	bl	80072c4 <HAL_RCC_GetSysClockFreq>
 8007c1a:	0003      	movs	r3, r0
 8007c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007c1e:	e00c      	b.n	8007c3a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c20:	2380      	movs	r3, #128	@ 0x80
 8007c22:	021b      	lsls	r3, r3, #8
 8007c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007c26:	e008      	b.n	8007c3a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8007c2c:	231a      	movs	r3, #26
 8007c2e:	2218      	movs	r2, #24
 8007c30:	189b      	adds	r3, r3, r2
 8007c32:	19db      	adds	r3, r3, r7
 8007c34:	2201      	movs	r2, #1
 8007c36:	701a      	strb	r2, [r3, #0]
        break;
 8007c38:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d100      	bne.n	8007c42 <UART_SetConfig+0x2a2>
 8007c40:	e133      	b.n	8007eaa <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007c42:	69fb      	ldr	r3, [r7, #28]
 8007c44:	685a      	ldr	r2, [r3, #4]
 8007c46:	0013      	movs	r3, r2
 8007c48:	005b      	lsls	r3, r3, #1
 8007c4a:	189b      	adds	r3, r3, r2
 8007c4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d305      	bcc.n	8007c5e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007c58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d906      	bls.n	8007c6c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8007c5e:	231a      	movs	r3, #26
 8007c60:	2218      	movs	r2, #24
 8007c62:	189b      	adds	r3, r3, r2
 8007c64:	19db      	adds	r3, r3, r7
 8007c66:	2201      	movs	r2, #1
 8007c68:	701a      	strb	r2, [r3, #0]
 8007c6a:	e11e      	b.n	8007eaa <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c6e:	613b      	str	r3, [r7, #16]
 8007c70:	2300      	movs	r3, #0
 8007c72:	617b      	str	r3, [r7, #20]
 8007c74:	6939      	ldr	r1, [r7, #16]
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	000b      	movs	r3, r1
 8007c7a:	0e1b      	lsrs	r3, r3, #24
 8007c7c:	0010      	movs	r0, r2
 8007c7e:	0205      	lsls	r5, r0, #8
 8007c80:	431d      	orrs	r5, r3
 8007c82:	000b      	movs	r3, r1
 8007c84:	021c      	lsls	r4, r3, #8
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	085b      	lsrs	r3, r3, #1
 8007c8c:	60bb      	str	r3, [r7, #8]
 8007c8e:	2300      	movs	r3, #0
 8007c90:	60fb      	str	r3, [r7, #12]
 8007c92:	68b8      	ldr	r0, [r7, #8]
 8007c94:	68f9      	ldr	r1, [r7, #12]
 8007c96:	1900      	adds	r0, r0, r4
 8007c98:	4169      	adcs	r1, r5
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	603b      	str	r3, [r7, #0]
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	607b      	str	r3, [r7, #4]
 8007ca4:	683a      	ldr	r2, [r7, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f7f8 fb1c 	bl	80002e4 <__aeabi_uldivmod>
 8007cac:	0002      	movs	r2, r0
 8007cae:	000b      	movs	r3, r1
 8007cb0:	0013      	movs	r3, r2
 8007cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007cb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cb6:	23c0      	movs	r3, #192	@ 0xc0
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d309      	bcc.n	8007cd2 <UART_SetConfig+0x332>
 8007cbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cc0:	2380      	movs	r3, #128	@ 0x80
 8007cc2:	035b      	lsls	r3, r3, #13
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d204      	bcs.n	8007cd2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cce:	60da      	str	r2, [r3, #12]
 8007cd0:	e0eb      	b.n	8007eaa <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8007cd2:	231a      	movs	r3, #26
 8007cd4:	2218      	movs	r2, #24
 8007cd6:	189b      	adds	r3, r3, r2
 8007cd8:	19db      	adds	r3, r3, r7
 8007cda:	2201      	movs	r2, #1
 8007cdc:	701a      	strb	r2, [r3, #0]
 8007cde:	e0e4      	b.n	8007eaa <UART_SetConfig+0x50a>
 8007ce0:	efff69f3 	.word	0xefff69f3
 8007ce4:	ffffcfff 	.word	0xffffcfff
 8007ce8:	40004800 	.word	0x40004800
 8007cec:	fffff4ff 	.word	0xfffff4ff
 8007cf0:	40013800 	.word	0x40013800
 8007cf4:	40021000 	.word	0x40021000
 8007cf8:	40004400 	.word	0x40004400
 8007cfc:	40004c00 	.word	0x40004c00
 8007d00:	40005000 	.word	0x40005000
 8007d04:	003d0900 	.word	0x003d0900
 8007d08:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	69da      	ldr	r2, [r3, #28]
 8007d10:	2380      	movs	r3, #128	@ 0x80
 8007d12:	021b      	lsls	r3, r3, #8
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d000      	beq.n	8007d1a <UART_SetConfig+0x37a>
 8007d18:	e070      	b.n	8007dfc <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8007d1a:	231b      	movs	r3, #27
 8007d1c:	2218      	movs	r2, #24
 8007d1e:	189b      	adds	r3, r3, r2
 8007d20:	19db      	adds	r3, r3, r7
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	2b08      	cmp	r3, #8
 8007d26:	d822      	bhi.n	8007d6e <UART_SetConfig+0x3ce>
 8007d28:	009a      	lsls	r2, r3, #2
 8007d2a:	4b67      	ldr	r3, [pc, #412]	@ (8007ec8 <UART_SetConfig+0x528>)
 8007d2c:	18d3      	adds	r3, r2, r3
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d32:	f7ff fb77 	bl	8007424 <HAL_RCC_GetPCLK1Freq>
 8007d36:	0003      	movs	r3, r0
 8007d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007d3a:	e021      	b.n	8007d80 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d3c:	f7ff fb88 	bl	8007450 <HAL_RCC_GetPCLK2Freq>
 8007d40:	0003      	movs	r3, r0
 8007d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007d44:	e01c      	b.n	8007d80 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d46:	4b61      	ldr	r3, [pc, #388]	@ (8007ecc <UART_SetConfig+0x52c>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2210      	movs	r2, #16
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	d002      	beq.n	8007d56 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007d50:	4b5f      	ldr	r3, [pc, #380]	@ (8007ed0 <UART_SetConfig+0x530>)
 8007d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d54:	e014      	b.n	8007d80 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8007d56:	4b5f      	ldr	r3, [pc, #380]	@ (8007ed4 <UART_SetConfig+0x534>)
 8007d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007d5a:	e011      	b.n	8007d80 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d5c:	f7ff fab2 	bl	80072c4 <HAL_RCC_GetSysClockFreq>
 8007d60:	0003      	movs	r3, r0
 8007d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007d64:	e00c      	b.n	8007d80 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d66:	2380      	movs	r3, #128	@ 0x80
 8007d68:	021b      	lsls	r3, r3, #8
 8007d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007d6c:	e008      	b.n	8007d80 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8007d72:	231a      	movs	r3, #26
 8007d74:	2218      	movs	r2, #24
 8007d76:	189b      	adds	r3, r3, r2
 8007d78:	19db      	adds	r3, r3, r7
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	701a      	strb	r2, [r3, #0]
        break;
 8007d7e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d100      	bne.n	8007d88 <UART_SetConfig+0x3e8>
 8007d86:	e090      	b.n	8007eaa <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d8a:	005a      	lsls	r2, r3, #1
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	085b      	lsrs	r3, r3, #1
 8007d92:	18d2      	adds	r2, r2, r3
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	0019      	movs	r1, r3
 8007d9a:	0010      	movs	r0, r2
 8007d9c:	f7f8 f9b4 	bl	8000108 <__udivsi3>
 8007da0:	0003      	movs	r3, r0
 8007da2:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da6:	2b0f      	cmp	r3, #15
 8007da8:	d921      	bls.n	8007dee <UART_SetConfig+0x44e>
 8007daa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007dac:	2380      	movs	r3, #128	@ 0x80
 8007dae:	025b      	lsls	r3, r3, #9
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d21c      	bcs.n	8007dee <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	200e      	movs	r0, #14
 8007dba:	2418      	movs	r4, #24
 8007dbc:	1903      	adds	r3, r0, r4
 8007dbe:	19db      	adds	r3, r3, r7
 8007dc0:	210f      	movs	r1, #15
 8007dc2:	438a      	bics	r2, r1
 8007dc4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc8:	085b      	lsrs	r3, r3, #1
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	2207      	movs	r2, #7
 8007dce:	4013      	ands	r3, r2
 8007dd0:	b299      	uxth	r1, r3
 8007dd2:	1903      	adds	r3, r0, r4
 8007dd4:	19db      	adds	r3, r3, r7
 8007dd6:	1902      	adds	r2, r0, r4
 8007dd8:	19d2      	adds	r2, r2, r7
 8007dda:	8812      	ldrh	r2, [r2, #0]
 8007ddc:	430a      	orrs	r2, r1
 8007dde:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	1902      	adds	r2, r0, r4
 8007de6:	19d2      	adds	r2, r2, r7
 8007de8:	8812      	ldrh	r2, [r2, #0]
 8007dea:	60da      	str	r2, [r3, #12]
 8007dec:	e05d      	b.n	8007eaa <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8007dee:	231a      	movs	r3, #26
 8007df0:	2218      	movs	r2, #24
 8007df2:	189b      	adds	r3, r3, r2
 8007df4:	19db      	adds	r3, r3, r7
 8007df6:	2201      	movs	r2, #1
 8007df8:	701a      	strb	r2, [r3, #0]
 8007dfa:	e056      	b.n	8007eaa <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007dfc:	231b      	movs	r3, #27
 8007dfe:	2218      	movs	r2, #24
 8007e00:	189b      	adds	r3, r3, r2
 8007e02:	19db      	adds	r3, r3, r7
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	2b08      	cmp	r3, #8
 8007e08:	d822      	bhi.n	8007e50 <UART_SetConfig+0x4b0>
 8007e0a:	009a      	lsls	r2, r3, #2
 8007e0c:	4b32      	ldr	r3, [pc, #200]	@ (8007ed8 <UART_SetConfig+0x538>)
 8007e0e:	18d3      	adds	r3, r2, r3
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e14:	f7ff fb06 	bl	8007424 <HAL_RCC_GetPCLK1Freq>
 8007e18:	0003      	movs	r3, r0
 8007e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007e1c:	e021      	b.n	8007e62 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e1e:	f7ff fb17 	bl	8007450 <HAL_RCC_GetPCLK2Freq>
 8007e22:	0003      	movs	r3, r0
 8007e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007e26:	e01c      	b.n	8007e62 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e28:	4b28      	ldr	r3, [pc, #160]	@ (8007ecc <UART_SetConfig+0x52c>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2210      	movs	r2, #16
 8007e2e:	4013      	ands	r3, r2
 8007e30:	d002      	beq.n	8007e38 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007e32:	4b27      	ldr	r3, [pc, #156]	@ (8007ed0 <UART_SetConfig+0x530>)
 8007e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e36:	e014      	b.n	8007e62 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8007e38:	4b26      	ldr	r3, [pc, #152]	@ (8007ed4 <UART_SetConfig+0x534>)
 8007e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007e3c:	e011      	b.n	8007e62 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e3e:	f7ff fa41 	bl	80072c4 <HAL_RCC_GetSysClockFreq>
 8007e42:	0003      	movs	r3, r0
 8007e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007e46:	e00c      	b.n	8007e62 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e48:	2380      	movs	r3, #128	@ 0x80
 8007e4a:	021b      	lsls	r3, r3, #8
 8007e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007e4e:	e008      	b.n	8007e62 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8007e50:	2300      	movs	r3, #0
 8007e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8007e54:	231a      	movs	r3, #26
 8007e56:	2218      	movs	r2, #24
 8007e58:	189b      	adds	r3, r3, r2
 8007e5a:	19db      	adds	r3, r3, r7
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	701a      	strb	r2, [r3, #0]
        break;
 8007e60:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8007e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d020      	beq.n	8007eaa <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	085a      	lsrs	r2, r3, #1
 8007e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e70:	18d2      	adds	r2, r2, r3
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	0019      	movs	r1, r3
 8007e78:	0010      	movs	r0, r2
 8007e7a:	f7f8 f945 	bl	8000108 <__udivsi3>
 8007e7e:	0003      	movs	r3, r0
 8007e80:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e84:	2b0f      	cmp	r3, #15
 8007e86:	d90a      	bls.n	8007e9e <UART_SetConfig+0x4fe>
 8007e88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e8a:	2380      	movs	r3, #128	@ 0x80
 8007e8c:	025b      	lsls	r3, r3, #9
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d205      	bcs.n	8007e9e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	60da      	str	r2, [r3, #12]
 8007e9c:	e005      	b.n	8007eaa <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8007e9e:	231a      	movs	r3, #26
 8007ea0:	2218      	movs	r2, #24
 8007ea2:	189b      	adds	r3, r3, r2
 8007ea4:	19db      	adds	r3, r3, r7
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	2200      	movs	r2, #0
 8007eae:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007eb6:	231a      	movs	r3, #26
 8007eb8:	2218      	movs	r2, #24
 8007eba:	189b      	adds	r3, r3, r2
 8007ebc:	19db      	adds	r3, r3, r7
 8007ebe:	781b      	ldrb	r3, [r3, #0]
}
 8007ec0:	0018      	movs	r0, r3
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	b00e      	add	sp, #56	@ 0x38
 8007ec6:	bdb0      	pop	{r4, r5, r7, pc}
 8007ec8:	080086dc 	.word	0x080086dc
 8007ecc:	40021000 	.word	0x40021000
 8007ed0:	003d0900 	.word	0x003d0900
 8007ed4:	00f42400 	.word	0x00f42400
 8007ed8:	08008700 	.word	0x08008700

08007edc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee8:	2201      	movs	r2, #1
 8007eea:	4013      	ands	r3, r2
 8007eec:	d00b      	beq.n	8007f06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	4a4a      	ldr	r2, [pc, #296]	@ (8008020 <UART_AdvFeatureConfig+0x144>)
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	0019      	movs	r1, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	430a      	orrs	r2, r1
 8007f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	d00b      	beq.n	8007f28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	4a43      	ldr	r2, [pc, #268]	@ (8008024 <UART_AdvFeatureConfig+0x148>)
 8007f18:	4013      	ands	r3, r2
 8007f1a:	0019      	movs	r1, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	430a      	orrs	r2, r1
 8007f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f2c:	2204      	movs	r2, #4
 8007f2e:	4013      	ands	r3, r2
 8007f30:	d00b      	beq.n	8007f4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	4a3b      	ldr	r2, [pc, #236]	@ (8008028 <UART_AdvFeatureConfig+0x14c>)
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	0019      	movs	r1, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	430a      	orrs	r2, r1
 8007f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f4e:	2208      	movs	r2, #8
 8007f50:	4013      	ands	r3, r2
 8007f52:	d00b      	beq.n	8007f6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	4a34      	ldr	r2, [pc, #208]	@ (800802c <UART_AdvFeatureConfig+0x150>)
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	0019      	movs	r1, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	430a      	orrs	r2, r1
 8007f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f70:	2210      	movs	r2, #16
 8007f72:	4013      	ands	r3, r2
 8007f74:	d00b      	beq.n	8007f8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	4a2c      	ldr	r2, [pc, #176]	@ (8008030 <UART_AdvFeatureConfig+0x154>)
 8007f7e:	4013      	ands	r3, r2
 8007f80:	0019      	movs	r1, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	430a      	orrs	r2, r1
 8007f8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f92:	2220      	movs	r2, #32
 8007f94:	4013      	ands	r3, r2
 8007f96:	d00b      	beq.n	8007fb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	4a25      	ldr	r2, [pc, #148]	@ (8008034 <UART_AdvFeatureConfig+0x158>)
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	0019      	movs	r1, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	430a      	orrs	r2, r1
 8007fae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb4:	2240      	movs	r2, #64	@ 0x40
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	d01d      	beq.n	8007ff6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8008038 <UART_AdvFeatureConfig+0x15c>)
 8007fc2:	4013      	ands	r3, r2
 8007fc4:	0019      	movs	r1, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007fd6:	2380      	movs	r3, #128	@ 0x80
 8007fd8:	035b      	lsls	r3, r3, #13
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d10b      	bne.n	8007ff6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	4a15      	ldr	r2, [pc, #84]	@ (800803c <UART_AdvFeatureConfig+0x160>)
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	0019      	movs	r1, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	430a      	orrs	r2, r1
 8007ff4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ffa:	2280      	movs	r2, #128	@ 0x80
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	d00b      	beq.n	8008018 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	4a0e      	ldr	r2, [pc, #56]	@ (8008040 <UART_AdvFeatureConfig+0x164>)
 8008008:	4013      	ands	r3, r2
 800800a:	0019      	movs	r1, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	430a      	orrs	r2, r1
 8008016:	605a      	str	r2, [r3, #4]
  }
}
 8008018:	46c0      	nop			@ (mov r8, r8)
 800801a:	46bd      	mov	sp, r7
 800801c:	b002      	add	sp, #8
 800801e:	bd80      	pop	{r7, pc}
 8008020:	fffdffff 	.word	0xfffdffff
 8008024:	fffeffff 	.word	0xfffeffff
 8008028:	fffbffff 	.word	0xfffbffff
 800802c:	ffff7fff 	.word	0xffff7fff
 8008030:	ffffefff 	.word	0xffffefff
 8008034:	ffffdfff 	.word	0xffffdfff
 8008038:	ffefffff 	.word	0xffefffff
 800803c:	ff9fffff 	.word	0xff9fffff
 8008040:	fff7ffff 	.word	0xfff7ffff

08008044 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b092      	sub	sp, #72	@ 0x48
 8008048:	af02      	add	r7, sp, #8
 800804a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2284      	movs	r2, #132	@ 0x84
 8008050:	2100      	movs	r1, #0
 8008052:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008054:	f7fd fa00 	bl	8005458 <HAL_GetTick>
 8008058:	0003      	movs	r3, r0
 800805a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2208      	movs	r2, #8
 8008064:	4013      	ands	r3, r2
 8008066:	2b08      	cmp	r3, #8
 8008068:	d12c      	bne.n	80080c4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800806a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800806c:	2280      	movs	r2, #128	@ 0x80
 800806e:	0391      	lsls	r1, r2, #14
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	4a46      	ldr	r2, [pc, #280]	@ (800818c <UART_CheckIdleState+0x148>)
 8008074:	9200      	str	r2, [sp, #0]
 8008076:	2200      	movs	r2, #0
 8008078:	f000 f88c 	bl	8008194 <UART_WaitOnFlagUntilTimeout>
 800807c:	1e03      	subs	r3, r0, #0
 800807e:	d021      	beq.n	80080c4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008080:	f3ef 8310 	mrs	r3, PRIMASK
 8008084:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008088:	63bb      	str	r3, [r7, #56]	@ 0x38
 800808a:	2301      	movs	r3, #1
 800808c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800808e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008090:	f383 8810 	msr	PRIMASK, r3
}
 8008094:	46c0      	nop			@ (mov r8, r8)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2180      	movs	r1, #128	@ 0x80
 80080a2:	438a      	bics	r2, r1
 80080a4:	601a      	str	r2, [r3, #0]
 80080a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ac:	f383 8810 	msr	PRIMASK, r3
}
 80080b0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2220      	movs	r2, #32
 80080b6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2278      	movs	r2, #120	@ 0x78
 80080bc:	2100      	movs	r1, #0
 80080be:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e05f      	b.n	8008184 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2204      	movs	r2, #4
 80080cc:	4013      	ands	r3, r2
 80080ce:	2b04      	cmp	r3, #4
 80080d0:	d146      	bne.n	8008160 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080d4:	2280      	movs	r2, #128	@ 0x80
 80080d6:	03d1      	lsls	r1, r2, #15
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	4a2c      	ldr	r2, [pc, #176]	@ (800818c <UART_CheckIdleState+0x148>)
 80080dc:	9200      	str	r2, [sp, #0]
 80080de:	2200      	movs	r2, #0
 80080e0:	f000 f858 	bl	8008194 <UART_WaitOnFlagUntilTimeout>
 80080e4:	1e03      	subs	r3, r0, #0
 80080e6:	d03b      	beq.n	8008160 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080e8:	f3ef 8310 	mrs	r3, PRIMASK
 80080ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80080ee:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80080f2:	2301      	movs	r3, #1
 80080f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	f383 8810 	msr	PRIMASK, r3
}
 80080fc:	46c0      	nop			@ (mov r8, r8)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4921      	ldr	r1, [pc, #132]	@ (8008190 <UART_CheckIdleState+0x14c>)
 800810a:	400a      	ands	r2, r1
 800810c:	601a      	str	r2, [r3, #0]
 800810e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008110:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	f383 8810 	msr	PRIMASK, r3
}
 8008118:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800811a:	f3ef 8310 	mrs	r3, PRIMASK
 800811e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008120:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008122:	633b      	str	r3, [r7, #48]	@ 0x30
 8008124:	2301      	movs	r3, #1
 8008126:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	f383 8810 	msr	PRIMASK, r3
}
 800812e:	46c0      	nop			@ (mov r8, r8)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	689a      	ldr	r2, [r3, #8]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2101      	movs	r1, #1
 800813c:	438a      	bics	r2, r1
 800813e:	609a      	str	r2, [r3, #8]
 8008140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008142:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008144:	6a3b      	ldr	r3, [r7, #32]
 8008146:	f383 8810 	msr	PRIMASK, r3
}
 800814a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2280      	movs	r2, #128	@ 0x80
 8008150:	2120      	movs	r1, #32
 8008152:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2278      	movs	r2, #120	@ 0x78
 8008158:	2100      	movs	r1, #0
 800815a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800815c:	2303      	movs	r3, #3
 800815e:	e011      	b.n	8008184 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2220      	movs	r2, #32
 8008164:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2280      	movs	r2, #128	@ 0x80
 800816a:	2120      	movs	r1, #32
 800816c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2278      	movs	r2, #120	@ 0x78
 800817e:	2100      	movs	r1, #0
 8008180:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	0018      	movs	r0, r3
 8008186:	46bd      	mov	sp, r7
 8008188:	b010      	add	sp, #64	@ 0x40
 800818a:	bd80      	pop	{r7, pc}
 800818c:	01ffffff 	.word	0x01ffffff
 8008190:	fffffedf 	.word	0xfffffedf

08008194 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	603b      	str	r3, [r7, #0]
 80081a0:	1dfb      	adds	r3, r7, #7
 80081a2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081a4:	e04b      	b.n	800823e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	3301      	adds	r3, #1
 80081aa:	d048      	beq.n	800823e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081ac:	f7fd f954 	bl	8005458 <HAL_GetTick>
 80081b0:	0002      	movs	r2, r0
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	1ad3      	subs	r3, r2, r3
 80081b6:	69ba      	ldr	r2, [r7, #24]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d302      	bcc.n	80081c2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d101      	bne.n	80081c6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e04b      	b.n	800825e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2204      	movs	r2, #4
 80081ce:	4013      	ands	r3, r2
 80081d0:	d035      	beq.n	800823e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	69db      	ldr	r3, [r3, #28]
 80081d8:	2208      	movs	r2, #8
 80081da:	4013      	ands	r3, r2
 80081dc:	2b08      	cmp	r3, #8
 80081de:	d111      	bne.n	8008204 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2208      	movs	r2, #8
 80081e6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	0018      	movs	r0, r3
 80081ec:	f000 f83c 	bl	8008268 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2284      	movs	r2, #132	@ 0x84
 80081f4:	2108      	movs	r1, #8
 80081f6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2278      	movs	r2, #120	@ 0x78
 80081fc:	2100      	movs	r1, #0
 80081fe:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e02c      	b.n	800825e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	69da      	ldr	r2, [r3, #28]
 800820a:	2380      	movs	r3, #128	@ 0x80
 800820c:	011b      	lsls	r3, r3, #4
 800820e:	401a      	ands	r2, r3
 8008210:	2380      	movs	r3, #128	@ 0x80
 8008212:	011b      	lsls	r3, r3, #4
 8008214:	429a      	cmp	r2, r3
 8008216:	d112      	bne.n	800823e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2280      	movs	r2, #128	@ 0x80
 800821e:	0112      	lsls	r2, r2, #4
 8008220:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	0018      	movs	r0, r3
 8008226:	f000 f81f 	bl	8008268 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2284      	movs	r2, #132	@ 0x84
 800822e:	2120      	movs	r1, #32
 8008230:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2278      	movs	r2, #120	@ 0x78
 8008236:	2100      	movs	r1, #0
 8008238:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800823a:	2303      	movs	r3, #3
 800823c:	e00f      	b.n	800825e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	69db      	ldr	r3, [r3, #28]
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	4013      	ands	r3, r2
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	425a      	negs	r2, r3
 800824e:	4153      	adcs	r3, r2
 8008250:	b2db      	uxtb	r3, r3
 8008252:	001a      	movs	r2, r3
 8008254:	1dfb      	adds	r3, r7, #7
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	429a      	cmp	r2, r3
 800825a:	d0a4      	beq.n	80081a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	0018      	movs	r0, r3
 8008260:	46bd      	mov	sp, r7
 8008262:	b004      	add	sp, #16
 8008264:	bd80      	pop	{r7, pc}
	...

08008268 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b08e      	sub	sp, #56	@ 0x38
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008270:	f3ef 8310 	mrs	r3, PRIMASK
 8008274:	617b      	str	r3, [r7, #20]
  return(result);
 8008276:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008278:	637b      	str	r3, [r7, #52]	@ 0x34
 800827a:	2301      	movs	r3, #1
 800827c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	f383 8810 	msr	PRIMASK, r3
}
 8008284:	46c0      	nop			@ (mov r8, r8)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4926      	ldr	r1, [pc, #152]	@ (800832c <UART_EndRxTransfer+0xc4>)
 8008292:	400a      	ands	r2, r1
 8008294:	601a      	str	r2, [r3, #0]
 8008296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008298:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	f383 8810 	msr	PRIMASK, r3
}
 80082a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082a2:	f3ef 8310 	mrs	r3, PRIMASK
 80082a6:	623b      	str	r3, [r7, #32]
  return(result);
 80082a8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80082ac:	2301      	movs	r3, #1
 80082ae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b2:	f383 8810 	msr	PRIMASK, r3
}
 80082b6:	46c0      	nop			@ (mov r8, r8)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	689a      	ldr	r2, [r3, #8]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2101      	movs	r1, #1
 80082c4:	438a      	bics	r2, r1
 80082c6:	609a      	str	r2, [r3, #8]
 80082c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ce:	f383 8810 	msr	PRIMASK, r3
}
 80082d2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d118      	bne.n	800830e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082dc:	f3ef 8310 	mrs	r3, PRIMASK
 80082e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80082e2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80082e6:	2301      	movs	r3, #1
 80082e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f383 8810 	msr	PRIMASK, r3
}
 80082f0:	46c0      	nop			@ (mov r8, r8)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2110      	movs	r1, #16
 80082fe:	438a      	bics	r2, r1
 8008300:	601a      	str	r2, [r3, #0]
 8008302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008304:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	f383 8810 	msr	PRIMASK, r3
}
 800830c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2280      	movs	r2, #128	@ 0x80
 8008312:	2120      	movs	r1, #32
 8008314:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008322:	46c0      	nop			@ (mov r8, r8)
 8008324:	46bd      	mov	sp, r7
 8008326:	b00e      	add	sp, #56	@ 0x38
 8008328:	bd80      	pop	{r7, pc}
 800832a:	46c0      	nop			@ (mov r8, r8)
 800832c:	fffffedf 	.word	0xfffffedf

08008330 <memset>:
 8008330:	0003      	movs	r3, r0
 8008332:	1882      	adds	r2, r0, r2
 8008334:	4293      	cmp	r3, r2
 8008336:	d100      	bne.n	800833a <memset+0xa>
 8008338:	4770      	bx	lr
 800833a:	7019      	strb	r1, [r3, #0]
 800833c:	3301      	adds	r3, #1
 800833e:	e7f9      	b.n	8008334 <memset+0x4>

08008340 <__libc_init_array>:
 8008340:	b570      	push	{r4, r5, r6, lr}
 8008342:	2600      	movs	r6, #0
 8008344:	4c0c      	ldr	r4, [pc, #48]	@ (8008378 <__libc_init_array+0x38>)
 8008346:	4d0d      	ldr	r5, [pc, #52]	@ (800837c <__libc_init_array+0x3c>)
 8008348:	1b64      	subs	r4, r4, r5
 800834a:	10a4      	asrs	r4, r4, #2
 800834c:	42a6      	cmp	r6, r4
 800834e:	d109      	bne.n	8008364 <__libc_init_array+0x24>
 8008350:	2600      	movs	r6, #0
 8008352:	f000 f823 	bl	800839c <_init>
 8008356:	4c0a      	ldr	r4, [pc, #40]	@ (8008380 <__libc_init_array+0x40>)
 8008358:	4d0a      	ldr	r5, [pc, #40]	@ (8008384 <__libc_init_array+0x44>)
 800835a:	1b64      	subs	r4, r4, r5
 800835c:	10a4      	asrs	r4, r4, #2
 800835e:	42a6      	cmp	r6, r4
 8008360:	d105      	bne.n	800836e <__libc_init_array+0x2e>
 8008362:	bd70      	pop	{r4, r5, r6, pc}
 8008364:	00b3      	lsls	r3, r6, #2
 8008366:	58eb      	ldr	r3, [r5, r3]
 8008368:	4798      	blx	r3
 800836a:	3601      	adds	r6, #1
 800836c:	e7ee      	b.n	800834c <__libc_init_array+0xc>
 800836e:	00b3      	lsls	r3, r6, #2
 8008370:	58eb      	ldr	r3, [r5, r3]
 8008372:	4798      	blx	r3
 8008374:	3601      	adds	r6, #1
 8008376:	e7f2      	b.n	800835e <__libc_init_array+0x1e>
 8008378:	0800872c 	.word	0x0800872c
 800837c:	0800872c 	.word	0x0800872c
 8008380:	08008730 	.word	0x08008730
 8008384:	0800872c 	.word	0x0800872c

08008388 <memcpy>:
 8008388:	2300      	movs	r3, #0
 800838a:	b510      	push	{r4, lr}
 800838c:	429a      	cmp	r2, r3
 800838e:	d100      	bne.n	8008392 <memcpy+0xa>
 8008390:	bd10      	pop	{r4, pc}
 8008392:	5ccc      	ldrb	r4, [r1, r3]
 8008394:	54c4      	strb	r4, [r0, r3]
 8008396:	3301      	adds	r3, #1
 8008398:	e7f8      	b.n	800838c <memcpy+0x4>
	...

0800839c <_init>:
 800839c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800839e:	46c0      	nop			@ (mov r8, r8)
 80083a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083a2:	bc08      	pop	{r3}
 80083a4:	469e      	mov	lr, r3
 80083a6:	4770      	bx	lr

080083a8 <_fini>:
 80083a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083aa:	46c0      	nop			@ (mov r8, r8)
 80083ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ae:	bc08      	pop	{r3}
 80083b0:	469e      	mov	lr, r3
 80083b2:	4770      	bx	lr
